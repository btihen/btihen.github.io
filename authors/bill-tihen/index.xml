<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bill Tihen | btihen</title>
    <link>https://btihen.github.io/authors/bill-tihen/</link>
      <atom:link href="https://btihen.github.io/authors/bill-tihen/index.xml" rel="self" type="application/rss+xml" />
    <description>Bill Tihen</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2020</copyright><lastBuildDate>Sun, 10 May 2020 17:01:53 +0200</lastBuildDate>
    <image>
      <url>https://btihen.github.io/images/logo_hu0d53a2a03d4a529abcdd0318d0f2ad50_8175_300x300_fit_lanczos_2.png</url>
      <title>Bill Tihen</title>
      <link>https://btihen.github.io/authors/bill-tihen/</link>
    </image>
    
    <item>
      <title>Phoenix 1.5 LiveView Basics</title>
      <link>https://btihen.github.io/post/phoenix_1_5_live_view_basics/</link>
      <pubDate>Sun, 10 May 2020 17:01:53 +0200</pubDate>
      <guid>https://btihen.github.io/post/phoenix_1_5_live_view_basics/</guid>
      <description>&lt;p&gt;I have been watching Phoenix and Elixir for a while, but the idea of writing dynamic Web Applications without needing a ton of JavaScript is very interesting.  I recently saw this video:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=MZvmYaFkNJI&amp;amp;feature=youtu.be&#34;&gt;https://www.youtube.com/watch?v=MZvmYaFkNJI&amp;amp;feature=youtu.be&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;which is very cool, but I wanted to understand how things actually work &amp;ndash; So I found a Phoenix 1.4 tutorial (without using the liveview generators since it wasn&amp;rsquo;t so tightly integrated into Phoenix at that time) and would translate that into Phoenix 1.5. Here is the video and blog I used to guide me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=2bipVjOcvdI&#34;&gt;https://www.youtube.com/watch?v=2bipVjOcvdI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dennisbeatty.com/2019/03/19/how-to-create-a-counter-with-phoenix-live-view.html&#34;&gt;https://dennisbeatty.com/2019/03/19/how-to-create-a-counter-with-phoenix-live-view.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since I am just learning the Phoenix Framework and will need to refer to this for my self to remember how to do basic things &amp;ndash; I&amp;rsquo;ve documented every little detail.&lt;/p&gt;
&lt;h2 id=&#34;step-0---setup&#34;&gt;Step 0 - Setup&lt;/h2&gt;
&lt;p&gt;Setup environment &amp;amp; newest version of elixir (I am using exenv):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exenv install 1.10.3
exenv global
exenv local 1.10.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install the 1.5.1 phx_new generator:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mix archive.install hex phx_new 1.5.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Create the project:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mix phx.new counter --no-ecto --live&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;enter project and create init commit:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cd counter&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now we will run the auto generated test to be sure all is good:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mix text&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now we will start phoenix to be sure all is running:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mix phx.server&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now go to the web page it is server (probably): &lt;code&gt;localhost:4000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It all looks good so we can make our first commit.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git init &amp;amp;&amp;amp; git add -A &amp;amp;&amp;amp; git commit -m &amp;quot;init&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;step-1---simple-counter-page&#34;&gt;Step 1 - simple counter page&lt;/h2&gt;
&lt;p&gt;Make a counter_live folder &amp;amp; an index.ex file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir lib/counter_web/live/counter_live
touch lib/counter_web/live/counter_live/index.ex
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;add the following contents:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt;&amp;quot;EOF&amp;quot;&amp;gt; lib/counter_web/live/counter_live/index.ex
defmodule CounterWeb.CounterLive.Index do
  use CounterWeb, :live_view
  # use Phoenix.LiveView

  # since we don&#39;t have a db to pull from we initialize on mount
  @impl true
  def mount(_params, _session, socket) do
    {:ok, assign(socket, :val, 0)}
  end

  def render(assigns) do
    ~L&amp;quot;&amp;quot;&amp;quot;
      &amp;lt;h1&amp;gt;Live Counter&amp;lt;/h1&amp;gt;
      &amp;lt;p&amp;gt;
        &amp;lt;b&amp;gt;Here is a great complex page&amp;lt;/b&amp;gt;
      &amp;lt;/p&amp;gt;
      &amp;lt;div&amp;gt;
        &amp;lt;h2&amp;gt;The count is: &amp;lt;%= @val %&amp;gt;&amp;lt;/h2&amp;gt;
        &amp;lt;button phx-click=&amp;quot;dec&amp;quot;&amp;gt;-&amp;lt;/button&amp;gt;
        &amp;lt;button phx-click=&amp;quot;inc&amp;quot;&amp;gt;+&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div&amp;gt;
        &amp;lt;button phx-click=&amp;quot;clear&amp;quot;&amp;gt;clear&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;p&amp;gt;
        &amp;lt;i&amp;gt;even more awesome content&amp;lt;/i&amp;gt;
      &amp;lt;/p&amp;gt;
    &amp;quot;&amp;quot;&amp;quot;
  end

  def handle_event(&amp;quot;inc&amp;quot;, _, socket) do
    {:noreply, update(socket, :val, &amp;amp;(&amp;amp;1 + 1))}
  end

  def handle_event(&amp;quot;dec&amp;quot;, _, socket) do
    {:noreply, update(socket, :val, &amp;amp;(&amp;amp;1 - 1))}
  end

  def handle_event(&amp;quot;clear&amp;quot;, _, socket) do
    {:noreply, update(socket, :val, &amp;amp;(&amp;amp;1 - &amp;amp;1))}
    # {:noreply, update(socket, :val, 0)} # very slow - why?
  end

end
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice: &lt;code&gt;phx-click=&amp;quot;clear&amp;quot;&lt;/code&gt; refers to a &lt;code&gt;handle_event&lt;/code&gt; which is similar to JavaScript events (but SERVER SIDE)! :)&lt;/p&gt;
&lt;p&gt;Now update the routers and it should work:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  scope &amp;quot;/&amp;quot;, CounterWeb do
    pipe_through :browser

    # live &amp;quot;/&amp;quot;, PageLive, :index        # remove this line
    live &amp;quot;/&amp;quot;, CounterLive.Index, :index # add this line
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now start pheonix:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mix phx.server&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;now to:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;localhost:4000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;it works - we have our counter.&lt;/p&gt;
&lt;p&gt;Lets run the test:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mix test&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Opps - we need to fix the homepage test:&lt;/p&gt;
&lt;p&gt;since we replaced the original route we need to delete the existing LivePageTest and create a new test for our counter page:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rm test/counter_web/live/page_live_text.exs

touch test/counter_web/live/counter_live_text.exs
cat &amp;lt;&amp;lt;&amp;quot;EOF&amp;quot; &amp;gt; test/counter_web/live/counter_live_text.exs
defmodule CounterWeb.CounterLiveTest do
  use CounterWeb.ConnCase

  import CounterWeb.CounterLive.Index

  test &amp;quot;disconnected and connected render&amp;quot;, %{conn: conn} do
    {:ok, page_live, disconnected_html} = live(conn, &amp;quot;/&amp;quot;)
    assert disconnected_html =~ &amp;quot;Live Counter&amp;quot;
    assert render(page_live) =~ &amp;quot;Live Counter&amp;quot;
  end

end
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can test again &lt;code&gt;mix test&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;cool - all is green  &lt;em&gt;(Ideally - I hopefully one can test the live view actions &amp;ndash; without cucumber - but I don&amp;rsquo;t know how yet.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll take a git snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;counter with live update&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;step-2----us-a-template-with-live_view&#34;&gt;Step 2 &amp;ndash; us a template with live_view&lt;/h2&gt;
&lt;p&gt;create a template file (helpful for complex html pages, but simple to create):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;touch lib/counter_web/live/counter_live/index.html.leex&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;now just copy the html (from the render method into this file):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt;&amp;quot;EOF&amp;quot; &amp;gt; lib/counter_web/live/counter_live/index.html.leex
&amp;lt;h1&amp;gt;Live Counter&amp;lt;/h1&amp;gt;

&amp;lt;p&amp;gt;
  &amp;lt;b&amp;gt;Here is a great complex page&amp;lt;/b&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;div&amp;gt;
  &amp;lt;h2&amp;gt;The count is: &amp;lt;%= @val %&amp;gt;&amp;lt;/h2&amp;gt;
  &amp;lt;button phx-click=&amp;quot;dec&amp;quot;&amp;gt;-&amp;lt;/button&amp;gt;
  &amp;lt;button phx-click=&amp;quot;inc&amp;quot;&amp;gt;+&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
   &amp;lt;button phx-click=&amp;quot;clear&amp;quot;&amp;gt;clear&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;p&amp;gt;
  &amp;lt;i&amp;gt;even more awesome content&amp;lt;/i&amp;gt;
&amp;lt;/p&amp;gt;
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now point &lt;code&gt;lib/counter_web/live/counter_live/index.ex&lt;/code&gt; to this file by replacing render with an apply command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  defp apply_action(socket, :index, _params) do
    socket
  end
  #  def render(assigns) do
  #  ~L&amp;quot;&amp;quot;&amp;quot;
  #    &amp;lt;h1&amp;gt;Live Counter&amp;lt;/h1&amp;gt;
  #    &amp;lt;p&amp;gt;
  #      &amp;lt;b&amp;gt;Here is a great complex page&amp;lt;/b&amp;gt;
  #    &amp;lt;/p&amp;gt;
  #    &amp;lt;div&amp;gt;
  #      &amp;lt;h2&amp;gt;The count is: &amp;lt;%= @val %&amp;gt;&amp;lt;/h2&amp;gt;
  #      &amp;lt;button phx-click=&amp;quot;dec&amp;quot;&amp;gt;-&amp;lt;/button&amp;gt;
  #      &amp;lt;button phx-click=&amp;quot;inc&amp;quot;&amp;gt;+&amp;lt;/button&amp;gt;
  #    &amp;lt;/div&amp;gt;
  #    &amp;lt;div&amp;gt;
  #      &amp;lt;button phx-click=&amp;quot;clear&amp;quot;&amp;gt;clear&amp;lt;/button&amp;gt;
  #    &amp;lt;/div&amp;gt;
  #    &amp;lt;p&amp;gt;
  #      &amp;lt;i&amp;gt;even more awesome content&amp;lt;/i&amp;gt;
  #    &amp;lt;/p&amp;gt;
  #  &amp;quot;&amp;quot;&amp;quot;
  # end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;apply_action understand the rest commands such as :new, etc.&lt;/p&gt;
&lt;p&gt;THIS ALLOWS a nice clean separation of code logic from the HTML template (or JSON, etc).&lt;/p&gt;
&lt;p&gt;now try the app again and it should still work!&lt;/p&gt;
&lt;p&gt;and test again: &lt;code&gt;mix test&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;now git snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;counter using a template&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;step-3---using-reusable-live-components&#34;&gt;step 3 - Using Reusable Live Components&lt;/h1&gt;
&lt;p&gt;create a file for the component:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch lib/counter_web/live/counter_live/counter_component.ex
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can move the dynamic html and it&amp;rsquo;s associated functions into this file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt;&amp;quot;EOF&amp;quot; &amp;gt; lib/counter_web/live/counter_live/counter_component.ex
# lib/counter_web/live/counter_live/counter_component.ex
defmodule CounterWeb.CounterLive.CounterComponent do
  use CounterWeb, :live_component

  def render(assigns) do
    ~L&amp;quot;&amp;quot;&amp;quot;
    &amp;lt;div&amp;gt;
      &amp;lt;h2&amp;gt;The count is: &amp;lt;%= @val %&amp;gt;&amp;lt;/h2&amp;gt;
      &amp;lt;button phx-click=&amp;quot;dec&amp;quot; phx-target=&amp;quot;&amp;lt;%= @myself %&amp;gt;&amp;quot;&amp;gt;-&amp;lt;/button&amp;gt;
      &amp;lt;button phx-click=&amp;quot;inc&amp;quot; phx-target=&amp;quot;&amp;lt;%= @myself %&amp;gt;&amp;quot;&amp;gt;+&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;button phx-click=&amp;quot;clear&amp;quot; phx-target=&amp;quot;&amp;lt;%= @myself %&amp;gt;&amp;quot;&amp;gt;clear&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;quot;&amp;quot;&amp;quot;
  end

  def handle_event(&amp;quot;inc&amp;quot;, _, socket) do
    {:noreply, update(socket, :val, &amp;amp;(&amp;amp;1 + 1))}
  end

  def handle_event(&amp;quot;dec&amp;quot;, _, socket) do
    {:noreply, update(socket, :val, &amp;amp;(&amp;amp;1 - 1))}
  end

  def handle_event(&amp;quot;clear&amp;quot;, _, socket) do
    # {:noreply, update(socket, :val, 0)} # very slow - why?
    {:noreply, update(socket, :val, &amp;amp;(&amp;amp;1 - &amp;amp;1))}
  end

end
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTICE: the &lt;code&gt;@myself&lt;/code&gt; this means that the function is found locally (for even better encapsulation).&lt;/p&gt;
&lt;p&gt;Its important to import the live view suff again.&lt;/p&gt;
&lt;p&gt;Now update the live template to point at the component:&lt;/p&gt;
&lt;p&gt;in &lt;code&gt;lib/counter_web/live/counter_live/index.ex&lt;/code&gt; REMOVE:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  &amp;lt;h2&amp;gt;The count is: &amp;lt;%= @val %&amp;gt;&amp;lt;/h2&amp;gt;
  &amp;lt;button phx-click=&amp;quot;dec&amp;quot;&amp;gt;-&amp;lt;/button&amp;gt;
  &amp;lt;button phx-click=&amp;quot;inc&amp;quot;&amp;gt;+&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
   &amp;lt;button phx-click=&amp;quot;clear&amp;quot;&amp;gt;clear&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;AND in &lt;code&gt;lib/counter_web/live/counter_live/index.ex&lt;/code&gt; REPLACE WITH:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;%= live_component @socket, CounterWeb.CounterLive.CounterComponent, id: 0, val: @val %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now all the dynamic aspects are all encapsulated as a component &amp;ndash; so we can make complex dynamic pages and keep the our headspace needed to update anyone aspect small.&lt;/p&gt;
&lt;p&gt;test one last time &lt;code&gt;mix test&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;one last git snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;live pages using isolated components - like JS does&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool!&lt;/p&gt;
&lt;p&gt;I like this framework!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kanban Usage</title>
      <link>https://btihen.github.io/post/kanban_usage/</link>
      <pubDate>Sun, 03 May 2020 19:25:09 +0200</pubDate>
      <guid>https://btihen.github.io/post/kanban_usage/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Kanban is a visual way to track your tasks and your progress.  Many people find this helpful way to to show yourself, your parents and teachers what work needs to be done.  Ideally, this is done on a large screen, sheet of paper, or whiteboard - so that it is obvious and easily seen as a reminder.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;example.jpg&#34; alt=&#34;kanban&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;status-tracking&#34;&gt;Status Tracking&lt;/h2&gt;
&lt;p&gt;The simplest &lt;code&gt;statuses&lt;/code&gt; would be: &lt;strong&gt;To-Do, Doing, Done&lt;/strong&gt;&lt;/p&gt;
&lt;!-- &lt;see example image&gt; --&gt;
&lt;p&gt;Some teacher often require a draft &lt;code&gt;Review&lt;/code&gt; before final submissions, engineers use a similar column &lt;code&gt;Review&lt;/code&gt; or &lt;code&gt;Demo&lt;/code&gt;.  Generally, this is a good idea to check your work with peers, parents or your teacher before handing in your work &amp;ndash; so we suggest a &lt;code&gt;Review&lt;/code&gt; column before done. So now the statuses would be:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To-Do, Doing, Review, Done&lt;/strong&gt;&lt;/p&gt;
&lt;!-- &lt;see example image&gt; --&gt;
&lt;h2 id=&#34;swim-lanes-tracking-multiple-classes--projects&#34;&gt;Swim-lanes (tracking multiple classes / projects)&lt;/h2&gt;
&lt;p&gt;Ideally when using this technique you keep the number of simultaneous tasks &lt;strong&gt;(WIP)&lt;/strong&gt; to a minimum&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The number of simultaneous tasks is called &lt;code&gt;work-in-progress&lt;/code&gt; or abbreviated as &lt;code&gt;WIP&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Education, unfortunately, expects a lot of simultaneous tasks within a variety of classes.  To address this we can use &lt;code&gt;swim-lanes&lt;/code&gt; to track our priorities with a jumble of independent projects (classes).  For example: we might have swim-lanes for: English, Mathematics, Science, &amp;hellip;&lt;/p&gt;
&lt;p&gt;Ideally, we will try only allow &lt;strong&gt;ONE task&lt;/strong&gt; in your &lt;code&gt;doing&lt;/code&gt; and &lt;code&gt;review&lt;/code&gt; boxes for each swim-lane / class.  &lt;em&gt;(This is called a WIP Limit of 1).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;example_w_swimlane.jpg&#34; alt=&#34;kanban_w_swimlanes&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;tasks&#34;&gt;Tasks&lt;/h2&gt;
&lt;p&gt;Tasks Cards should have critical reminder information on them. Refrain from putting extra information on the card, the card should be clean and simple to read - it is a reminder of work to do NOT a full description of the assignment.&lt;/p&gt;
&lt;p&gt;Here is the critical information I include on a personal Kanban card.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Title&lt;/strong&gt; - Big bold text (upper left corner)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Description&lt;/strong&gt; - a very short reminder of what to do - ideally in 4 to 5 words&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Class&lt;/strong&gt; - in case of confusion, I write the class / swim-lane (lower left corner)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Due Date&lt;/strong&gt; - Big bold Text (lower right corner)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Start Date&lt;/strong&gt; - use this to schedule small tasks of a large project - which can be used to slowly make progress on a large task (I call this smallifying).  This is a very important skill to ensure continued progress on large projects in a timely way.  I put this just above the &lt;code&gt;Due Date&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;see example image of a variety of tasks on a post-it with assignment below include a large task smallified&gt;
&lt;p&gt;Here is an example of a Kanban in use with tasks:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;example_w_tasks.jpg&#34; alt=&#34;kanban_w_tasks&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;p&gt;I like to use A3 paper and small post-it notes to add tasks.  Here is our recommended blank Kanban - where you can write in your classes.  Put your most important classes (in the IB these would be your &lt;strong&gt;High Level&lt;/strong&gt; courses) at the top. Use a timebox on long tasks that need to move forward, but are too big to do in one work session &amp;ndash; this is especially important when you have multiple tasks that need to be accomplished on a give day.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Timebox&lt;/strong&gt; - is a time limit that you won&amp;rsquo;t exceed for a given tasks in order to keep all tasks on schedule.  We suggest 25 to 35 minute timeboxes with small 5 minute breaks between tasks.  Every 4 timeboxes take a longer 15 minute break. This is called the pomodoro technique for full details.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/VFW3Ld7JO0w&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;To best use a Kanban board, you should follow the following ritual:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Prioritize your work&lt;/strong&gt; &amp;ndash; when you sit down to work, spend the first 5 minutes reviewing the Kanban board:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;First assess what in the &lt;em&gt;priority&lt;/em&gt; classes needs to be done in order meet assignment deadlines &lt;em&gt;(for long tasks set a &lt;strong&gt;timebox&lt;/strong&gt; so you make progress but can keep all your other tasks moving too)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Second assess what needs to be started in &lt;em&gt;priority&lt;/em&gt; classes to stay on track with larger projects. If you already have a task in that classes &lt;code&gt;doing&lt;/code&gt; box then schedule that task to be done ASAP so that you can start the next task.  &lt;em&gt;This is important&lt;/em&gt; a common Kanban saying is:_ **START FINISHING TASKS, stop starting unfinished tasks!**&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do your work&lt;/strong&gt; &amp;ndash; respect your priorities and your timeboxes!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;UPDATE YOUR KANBAN&lt;/strong&gt; - End five to ten minutes before your time is up (set an alarm if needed) and &lt;strong&gt;update&lt;/strong&gt; your tasks to their new status boxes.  If you couldn&amp;rsquo;t meet your goals for a task put a smaller colorful post-it on it - as an ALERT.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Address the needs of problem tasks&lt;/strong&gt; &amp;ndash; for all tasks with an ALERT: write emails to get help, or make notes on research needed to do make progress on problem tasks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;REFLECT&lt;/strong&gt; &amp;ndash; Assess what is going well and consider if doing more that will help you be more successful and assess what is hindering you and what you can do differently to get you work done with less stress.  You reflections should result in actions (experiments for a week or so) to help you move more effectively toward your goals.  If your experiment doesn&amp;rsquo;t help, they after the test period try a new experiment.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;
&lt;strong&gt;Dead person&lt;/strong&gt; activities are actions that even a dead person can successfully do.  For example, waiting for someone else to help, not checking twitter in homework time, etc.&lt;br&gt;
&lt;strong&gt;Live person&lt;/strong&gt; activities are action that only live people can successfully accomplish. For example, ask a peer for help, research on the Internet for ideas, go to a help session, replace random twitter checks with Pomodoro Technique (and allow twitter in the 5 minute breaks), etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;h5 id=&#34;kanban&#34;&gt;Kanban&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.personalkanban.com/&#34;&gt;https://www.personalkanban.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://moduscooperandi.com/books-and-classes&#34;&gt;https://moduscooperandi.com/books-and-classes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;pomodoro&#34;&gt;Pomodoro&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://francescocirillo.com/pages/pomodoro-technique&#34;&gt;https://francescocirillo.com/pages/pomodoro-technique&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=VFW3Ld7JO0w&#34;&gt;https://www.youtube.com/watch?v=VFW3Ld7JO0w&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;helpful-books&#34;&gt;Helpful Books&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Kanban - Task Management&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Real-World Kanban: Do Less, Accomplish More with Lean Thinking, by Mattias Skarin.&lt;/li&gt;
&lt;li&gt;Kanban in Action, by Marcus Hammarberg and Joakim SundÃ©n.&lt;/li&gt;
&lt;li&gt;Kanban: Successful Evolutionary Change for Your Technology Business, by David J. Anderson.&lt;/li&gt;
&lt;li&gt;Personal Kanban: Mapping Work - Navigating Life, by Tonianne DeMaria Barry and Jim Benson.&lt;/li&gt;
&lt;li&gt;Kanban and Scrum: Making the Most of Both, by Mattias Skarin and Henrik Kniberg.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Pomodoro - Time Management&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pomodoro Technique Illustrated, by Staffan Noteberg.&lt;/li&gt;
&lt;li&gt;The Pomodoro Technique: Work smarter, not harder, by Francesco Cirillo.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Effective Reflections, Experiments &amp;amp; Problem Solving&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The 5 Elements of Effective Thinking, by Edward B. Burger and Michael Starbird.&lt;/li&gt;
&lt;li&gt;the shibumi strategy: a powerful way to create MEANINGFUL CHANGE, by Matthew E. May.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Effective Goal Setting &amp;amp; Changes - with small easy steps&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Little Bets: How Breakthrough Ideas Emerge from Small Discoveries, by Peter Sims.&lt;/li&gt;
&lt;li&gt;One Small Step Can Change Your Life: The Kaizen Way Paperback, by Robert Maurer Ph.D.&lt;/li&gt;
&lt;li&gt;The Spirit of Kaizen: Creating Lasting Excellence One Small Step at a Time: Creating Lasting Excellence One Small Step at a Time, by Robert Maurer Ph.D.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Demos and Feedback in the Classroom</title>
      <link>https://btihen.github.io/publication/demos_and_collaborative_feedback_in_classroom_tieonline/</link>
      <pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://btihen.github.io/publication/demos_and_collaborative_feedback_in_classroom_tieonline/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Build Confidence: Exploration and Student Choice</title>
      <link>https://btihen.github.io/publication/uplift_and_explore_build_confidence_tieonline/</link>
      <pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://btihen.github.io/publication/uplift_and_explore_build_confidence_tieonline/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Pull vs Push: Student Centric</title>
      <link>https://btihen.github.io/publication/pull_vs_push_tieonline/</link>
      <pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://btihen.github.io/publication/pull_vs_push_tieonline/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Importance of Challenge: Engaged, Deep Learning</title>
      <link>https://btihen.github.io/publication/importance_of_challenge_tieonline/</link>
      <pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://btihen.github.io/publication/importance_of_challenge_tieonline/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Roots of Agile for Education</title>
      <link>https://btihen.github.io/publication/roots_of_agile_for_education_tieonline/</link>
      <pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://btihen.github.io/publication/roots_of_agile_for_education_tieonline/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Patient Explanations Lead to Good Things</title>
      <link>https://btihen.github.io/publication/patient_explanations_spotlight_article/</link>
      <pubDate>Wed, 16 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://btihen.github.io/publication/patient_explanations_spotlight_article/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Getting Agile at School</title>
      <link>https://btihen.github.io/publication/getting_agile_at_school_chapter/</link>
      <pubDate>Tue, 16 Apr 2019 18:04:29 +0200</pubDate>
      <guid>https://btihen.github.io/publication/getting_agile_at_school_chapter/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Designed to Float your Boat</title>
      <link>https://btihen.github.io/publication/designed_to_float_your_boat_article/</link>
      <pubDate>Tue, 10 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://btihen.github.io/publication/designed_to_float_your_boat_article/</guid>
      <description>&lt;p&gt;Student boat (before 3-D printing)
&lt;img src=&#34;student_katamaran_boat.png&#34; alt=&#34;Student Katamaran Boat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Student boat (with code)
&lt;img src=&#34;student_boat_with_code.png&#34; alt=&#34;Student Katamaran Boat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Student boat (with code)
&lt;img src=&#34;blank_burndown_chart.png&#34; alt=&#34;Blank Burndown Chart&#34;&gt;&lt;/p&gt;
&lt;p&gt;Student Retrospective Guide
&lt;img src=&#34;boat_retrospectives.png&#34; alt=&#34;Student Retrospective Guide&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing EDgility</title>
      <link>https://btihen.github.io/publication/introducing_edgility_laser_report_2017/</link>
      <pubDate>Mon, 13 Mar 2017 00:00:00 +0000</pubDate>
      <guid>https://btihen.github.io/publication/introducing_edgility_laser_report_2017/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Agile in Education: Bill Tihen and Paul Magnuson of Leysin American School</title>
      <link>https://btihen.github.io/coverage/agile_in_education_interview_scrum_alliance/</link>
      <pubDate>Tue, 17 Jan 2017 00:00:00 +0000</pubDate>
      <guid>https://btihen.github.io/coverage/agile_in_education_interview_scrum_alliance/</guid>
      <description>&lt;p&gt;A discussion with Scrum Alliance on the importance of bringing Agile into Educaion and a few important implementation points.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/cV8UQvNcN9s&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Agile in Education at Leysin American School</title>
      <link>https://btihen.github.io/coverage/agile_in_education_at_las_interview_agile_amped/</link>
      <pubDate>Thu, 01 Dec 2016 00:00:00 +0000</pubDate>
      <guid>https://btihen.github.io/coverage/agile_in_education_at_las_interview_agile_amped/</guid>
      <description>&lt;p&gt;How would our education system be different using agile principles and values?&lt;/p&gt;
&lt;p&gt;In this InDepth edition, our conversation focuses around the American School in Leysin, Switzerland, and their experiments over the past 3 yrs in Agile in Education. My guests are Paul Magnuson ( Director of Curriculum &amp;amp; Director of the Middle School) and Bill Tihen ( Director of IT, Teacher, and runs the Makers Space )
Empowering students, making learning visible, and creating life long learners are goals for Paul and Bill as they lead this movement at Leysin.&lt;/p&gt;
&lt;iframe width=&#34;100%&#34; height=&#34;300&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; allow=&#34;autoplay&#34; src=&#34;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/290789833&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true&#34;&gt;&lt;/iframe&gt;&lt;div style=&#34;font-size: 10px; color: #cccccc;line-break: anywhere;word-break: normal;overflow: hidden;white-space: nowrap;text-overflow: ellipsis; font-family: Interstate,Lucida Grande,Lucida Sans Unicode,Lucida Sans,Garuda,Verdana,Tahoma,sans-serif;font-weight: 100;&#34;&gt;&lt;a href=&#34;https://soundcloud.com/agileamped&#34; title=&#34;Agile Amped&#34; target=&#34;_blank&#34; style=&#34;color: #cccccc; text-decoration: none;&#34;&gt;Agile Amped&lt;/a&gt; Â· &lt;a href=&#34;https://soundcloud.com/agileamped/agile-in-education-at-leysin-american-school-in-switzerland&#34; title=&#34;Agile in Education at Leysin American School in Switzerland&#34; target=&#34;_blank&#34; style=&#34;color: #cccccc; text-decoration: none;&#34;&gt;Agile in Education at Leysin American School in Switzerland&lt;/a&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>LETS ClimateCase</title>
      <link>https://btihen.github.io/publication/lets_climate_case_laser_report_2015/</link>
      <pubDate>Thu, 14 May 2015 00:00:00 +0000</pubDate>
      <guid>https://btihen.github.io/publication/lets_climate_case_laser_report_2015/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;climate_case_profile.jpeg&#34; alt=&#34;Climate Case Profile&#34;&gt;
&lt;img src=&#34;climate_case_electronics.jpeg&#34; alt=&#34;Climate Case Electronics&#34;&gt;
&lt;img src=&#34;climate_case_internal.jpeg&#34; alt=&#34;Climate Case Grow Space&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
