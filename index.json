[{"authors":["btihen"],"categories":null,"content":"On a quest to explore and uplift.\nDeveloper, Educator and very curious.\nI love exploring / hiking in the alps with my dog and I love learning new programming ideas.\nFeel free to checkout my exploratory repository.\n","date":1653175200,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1653177420,"objectID":"d0bce26d5158f27a6f8cf294562f4503","permalink":"https://btihen.me/authors/btihen/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/btihen/","section":"authors","summary":"On a quest to explore and uplift.\nDeveloper, Educator and very curious.\nI love exploring / hiking in the alps with my dog and I love learning new programming ideas.","tags":null,"title":"Bill Tihen","type":"authors"},{"authors":["btihen"],"categories":null,"content":"Developer, Educator, Meditator and Nature Enthusiast.\nI hold a Masters in Electrical Engineering (with a focus on Materials Science). I also have a ScrumMaster certification.\nI have worked as a robotics designer, teacher, systems administrator and software engineer. My technical work has strongly influenced how I teach: Research and Agile practices have helped me develop a keen interest in the joy of exploring or \u0026lsquo;playful experiments.\u0026rsquo; Agile presents the Plan, Do, Reflect, Adjust loop and I have found that \u0026lsquo;smallifying\u0026rsquo; large tasks is an effective way to make progress with a large overwhelming project. In fact, taking little exploratory \u0026lsquo;bets\u0026rsquo; / experiments to move forward, helps many people feel safe. When I realized these are also excellent learning methodologies, I realized in addition to content, I need to teach these skills too.\nOver time I have also realized that one of the most important aspects of a classroom (or work environment) is that it is exciting, engaging and generally an uplifting environment. Or possibly an energy gifting experience. I have found the when students can choose their learning outcomes \u0026amp; goals (within the expectations of the class curriculum) the classroom can offer students these experiences too.\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"33278a8f35f00ae1234c333681397d5f","permalink":"https://btihen.me/authors/btihen/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/btihen/","section":"authors","summary":"Developer, Educator, Meditator and Nature Enthusiast.\nI hold a Masters in Electrical Engineering (with a focus on Materials Science). I also have a ScrumMaster certification.\nI have worked as a robotics designer, teacher, systems administrator and software engineer.","tags":null,"title":"Bill Tihen","type":"authors"},{"authors":null,"categories":null,"content":"Install This feature can be used for publishing content such as:\n Online courses Project or software documentation Tutorials  The courses folder may be renamed. For example, we can rename it to docs for software/project documentation or tutorials for creating an online course.\nDelete tutorials just like that\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"42291f93b606a25d1333fab4504afbee","permalink":"https://btihen.me/explore/crystal/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/explore/crystal/","section":"explore","summary":"Learn how to use crystal","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":null,"content":"Mint is fun ","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"2630904d917324ddeb6056948a6c27e4","permalink":"https://btihen.me/explore/mint/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/explore/mint/","section":"explore","summary":"Learn how to use mint","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":null,"content":"Overview This class is based on learning:\n Bouyancing Physics Fluid Dynamics  ","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"e694eb01448caa8f95e8d7cfc07a6905","permalink":"https://btihen.me/courses/boat_design/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/boat_design/","section":"courses","summary":"3-D design and printing, 3-D Analytical Geometry, Fluid Dynamics, Physics of Boyancy \u0026 Center of Gravity","tags":null,"title":"Boat Design Intro","type":"docs"},{"authors":null,"categories":null,"content":"Flexibility This feature can be used for publishing content such as:\n Online courses Project or software documentation Tutorials  The courses folder may be renamed. For example, we can rename it to docs for software/project documentation or tutorials for creating an online course.\nDelete tutorials To remove these pages, delete the courses folder and see below to delete the associated menu link.\nUpdate site menu After renaming or deleting the courses folder, you may wish to update any [[main]] menu links to it by editing your menu configuration at config/_default/menus.toml.\nFor example, if you delete this folder, you can remove the following from your menu configuration:\n[[main]] name = \u0026quot;Courses\u0026quot; url = \u0026quot;courses/\u0026quot; weight = 50  Or, if you are creating a software documentation site, you can rename the courses folder to docs and update the associated Courses menu configuration to:\n[[main]] name = \u0026quot;Docs\u0026quot; url = \u0026quot;docs/\u0026quot; weight = 50  Update the docs menu If you use the docs layout, note that the name of the menu in the front matter should be in the form [menu.X] where X is the folder name. Hence, if you rename the courses/example/ folder, you should also rename the menu definitions in the front matter of files within courses/example/ from [menu.example] to [menu.\u0026lt;NewFolderName\u0026gt;].\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"539a070be20f4112719fce218b48a2e4","permalink":"https://btihen.me/courses/robot_gardner/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/robot_gardner/","section":"courses","summary":"Sensors, electronics, and coding","tags":null,"title":"Robot Gardner","type":"docs"},{"authors":["Paul Magnuson","Bill Tihen","Nicola Cosgrove","Dan Patton"],"categories":["Agile","Education"],"content":"EDgility focuses on Education Agility. Inspired by agiles ability to create engaged and enthusiastic learning enviornments in technology companies. We started with our top educational principles and we quietly integrated agile practices into our classrooms.\n","date":1604619287,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1604619287,"objectID":"4ce3fbfe7b931e177bf4a2f392d8bc26","permalink":"https://btihen.me/projects/edgility/","publishdate":"2020-11-06T01:34:47+02:00","relpermalink":"/projects/edgility/","section":"projects","summary":"Educational Agility for Schools","tags":["agility","education","practices","values"],"title":"EDgility","type":"projects"},{"authors":["Paul Magnuson","Bill Tihen","Elliott Hebert"],"categories":["Agile","Education"],"content":"PeakChallenges: Engaged Learning for a Changing World\nWe are inspired by learning and working in our changing world.\nAgile is is an excellent foundation for working with changes. As educators, our goal has been to merge the Agile Learning Loop with excellent classroom practices.\n","date":1604619287,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1604619287,"objectID":"b63f6cc856899444af6f55c7d3b2748c","permalink":"https://btihen.me/projects/peakchallenges/","publishdate":"2020-11-06T01:34:47+02:00","relpermalink":"/projects/peakchallenges/","section":"projects","summary":"Educational Agility Training","tags":["agility","education","practices","values"],"title":"Peak Challenges","type":"projects"},{"authors":["Bill Tihen"],"categories":["Code","Sharing"],"content":"An opensource mobile friendly simple calendar to simplify scheduling for non-profits.\n","date":1604619287,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1604619287,"objectID":"e29d27346a1918bec4718f23748f9261","permalink":"https://btihen.me/projects/mobile_calendar/","publishdate":"2020-11-06T01:34:47+02:00","relpermalink":"/projects/mobile_calendar/","section":"projects","summary":"Mobile Friendly Scheduling Software","tags":["ruby","rails","mobile","calendar"],"title":"Shared Schedule","type":"projects"},{"authors":["Paul Magnuson","Bill Tihen","Elliot Hebert"],"categories":["Education","Agile","Research"],"content":"Find schools, organizations, blogs, podcasts, and publications below. ARC consortium members contribute by documenting applications of the agile mindset in education.\n","date":1603010087,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1603010087,"objectID":"2b3187cd8fe11532b6426f95f19a12c4","permalink":"https://btihen.me/projects/arcforschools/","publishdate":"2020-10-18T10:34:47+02:00","relpermalink":"/projects/arcforschools/","section":"projects","summary":"Agile Research Consortium for Schools","tags":["faculty","sharing","education","international","professional development"],"title":"ARC for Schools","type":"projects"},{"authors":null,"categories":null,"content":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nCrystal CLI ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"785ce6507db0a207d4f74c50cf456f88","permalink":"https://btihen.me/explore/crystal/cli/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/explore/crystal/cli/","section":"explore","summary":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nCrystal CLI ","tags":null,"title":"Crystal CLI Usage","type":"docs"},{"authors":null,"categories":null,"content":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nMint CLI ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"791d2bd259bec939ffe7881dde5108a3","permalink":"https://btihen.me/explore/mint/cli/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/explore/mint/cli/","section":"explore","summary":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nMint CLI ","tags":null,"title":"Mint CLI","type":"docs"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"b4c7f25d5b7963758e82d0980c48943b","permalink":"https://btihen.me/contact/contact/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/contact/contact/","section":"contact","summary":"","tags":null,"title":"Contact","type":"contact"},{"authors":null,"categories":null,"content":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 2 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"168159c01b62537a8068c7cfdb8f4a4d","permalink":"https://btihen.me/courses/boat_design/example1/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/boat_design/example1/","section":"courses","summary":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":null,"title":"Example Page 1","type":"docs"},{"authors":null,"categories":null,"content":"Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 4 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"87fb05721f9770a0171a5301a03a6f7e","permalink":"https://btihen.me/courses/boat_design/example2/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/boat_design/example2/","section":"courses","summary":"Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":null,"title":"Example Page 2","type":"docs"},{"authors":null,"categories":null,"content":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 2 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"90760a4db7af96bc96d01a166bc36a21","permalink":"https://btihen.me/courses/robot_gardner/example1/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/robot_gardner/example1/","section":"courses","summary":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":null,"title":"Example Page 1","type":"docs"},{"authors":null,"categories":null,"content":"Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 4 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"991d142ab215f3e0b69fed5f97a84078","permalink":"https://btihen.me/courses/robot_gardner/example2/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/robot_gardner/example2/","section":"courses","summary":"Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":null,"title":"Example Page 2","type":"docs"},{"authors":["Bill Tihen"],"categories":[],"content":"Organizing Code Gems and Engines have long been used to organize Ruby and Rails code into workable small units.\nShopify has introduced a new system called \u0026lsquo;packages\u0026rsquo; - they use the packwerk gem to help us. In fact, it is designed to make it easy to take large (and likely highly coupled) large codebase and move toward \u0026lsquo;packages\u0026rsquo; self-contained (or have explicit dependencies). Ideally the code is in small enough units to help us keep the context in mind as we work on it.\nI found it initially difficult to understand packwerk in the context of a complex codebase. So instead I built a new \u0026lsquo;play\u0026rsquo; app and then moved each piece into a package. Hopefully, this will inspire you to use Gem, Engines or Packages to clarify dependencies and make the code a logical until that is easy to reason about.\nRuby and Rails Environment Using Rails 7 \u0026amp; Ruby 3.1.2 - I found that it is important to update my ruby environment - so before we start this is what I didn\u0026rsquo;t remove errors:\n# I've had the error several times without updating: # /Users/btihen/.rbenv/versions/3.1.0/lib/ruby/gems/3.1.0/gems/bundler-2.3.8/lib/bundler/rubygems_ext.rb:18:in `source': uninitialized constant Gem::Source (NameError) # # (defined?(@source) \u0026amp;\u0026amp; @source) || Gem::Source::Installed.new # ^^^^^^^^ # Did you mean? Gem::SourceList # this seems to fix it: # https://bundler.io/guides/bundler_2_upgrade.html # https://stackoverflow.com/questions/4859600/bundler-throws-uninitialized-constant-gemsilentui-nameerror-error-after-upgr rbenv local 3.1.2 gem update --system gem install bundler gem install rails rbenv rehash  Rails Project - Simple Blog Since my other projects are using esbuild I use that here too\nrails new rails_pack -T --database=postgresql --css=bootstrap --javascript=esbuild cd rails_pack bin/rails db:create # add the packwerk (packages) gem bundle add packwerk bundle binstub packwerk # initialize packwerk bin/packwerk init # to visualize your package design bundle add graphwerk gem 'graphwerk', group: %i[development test] bundle install bundle exec rake graphwerk:update # (or pocky https://github.com/mquan/pocky)  NOTE: to turn a folder into a package - add the file: package.yml in the package folder - this will be described in more detail as we go.\nConfigure Packages in config/application.rb add:\nconfig.paths.add 'app/packages', glob: '*/{*,*/concerns}', eager_load: true  So now it might look like:\n# config/application.rb require_relative \u0026quot;boot\u0026quot; require \u0026quot;rails\u0026quot; # Pick the frameworks you want: require \u0026quot;active_model/railtie\u0026quot; require \u0026quot;active_job/railtie\u0026quot; require \u0026quot;active_record/railtie\u0026quot; require \u0026quot;active_storage/engine\u0026quot; require \u0026quot;action_controller/railtie\u0026quot; require \u0026quot;action_mailer/railtie\u0026quot; require \u0026quot;action_mailbox/engine\u0026quot; require \u0026quot;action_text/engine\u0026quot; require \u0026quot;action_view/railtie\u0026quot; require \u0026quot;action_cable/engine\u0026quot; # require \u0026quot;rails/test_unit/railtie\u0026quot; # Require the gems listed in Gemfile, including any gems # you've limited to :test, :development, or :production. Bundler.require(*Rails.groups) module RailsPack class Application \u0026lt; Rails::Application # Initialize configuration defaults for originally generated Rails version. config.load_defaults 7.0 # Don't generate system test files. config.generators.system_tests = nil # config packages fur packwerk config.paths.add 'app/packages', glob: '*/{*,*/concerns}', eager_load: true end end  Also change app/controllers/application_controller.rb to:\n# app/controllers/application_controller.rb class ApplicationController \u0026lt; ActionController::Base append_view_path(Dir.glob(Rails.root.join('app/packages/*/views'))) end  Finally, lets create the location for the packages:\nmkdir app/packages  Create a Landing Page We can generate the code using:\nbin/rails g controller landing index  You will see it creates the files;\ncreate app/controllers/landing_controller.rb route get 'landing/index' invoke erb create app/views/landing create app/views/landing/index.html.erb invoke helper create app/helpers/landing_helper.rb  So we see it has created a controller, a view and a helper - we will copy this structure into a new package landing using:\nmkdir -p app/packages/landing mkdir -p app/packages/landing/public mkdir -p app/packages/landing/controllers mkdir -p app/packages/landing/views mkdir -p app/packages/landing/helpers # copy the generated files mv app/controllers/landing_controller.rb app/packages/controllers/. mv app/views/landings app/packages/views/landings mv app/helpers/landing_helper.rb app/packages/helpers/.  copy our package.yml to configure the package\ncat \u0026lt;\u0026lt;EOF\u0026gt;\u0026gt; app/packages/landing/package.yml # Turn on dependency checks for this package enforce_dependencies: true # Turn on privacy checks for this package enforce_privacy: true # this allows you to modify what your package's public path is within the package public_path: public/ # A list of this package's dependencies # Note that packages in this list require their own `package.yml` file dependencies: - '.' EOF  Now finally, the update the routing:\nRails.application.routes.draw do get 'landing/index' root \u0026quot;landing#index\u0026quot; end  lets try the packwerk check to see if we have clearly defined our package:\nbin/packwerk check  Lets generate a diagram of our app:\nbin/rails graphwerk:update  Now you can open packwerk.png and see the code structure and dependencies.\nThe application is the rails core.\nfinally, lets be sure all is working:\nbin/rails s  we should be able to get to localhost:3000/ and see our landing page\nNOTE: IF YOU GET ERRORS REGARDING CONTROLLER OBJECT NOT FOUND RESTART RAILS!\nCore Data / Admin Controlled most apps need some core data like users, etc. So lets generate this too:\nbin/rails g scaffold user full_name email  now that we have generated the files and see the list lets create the package:\n# create the package mkdir -p app/packages/core # recreate the structure of created files within the package mkdir -p app/packages/core/public mkdir -p app/packages/core/controllers mkdir -p app/packages/core/helpers mkdir -p app/packages/core/models mkdir -p app/packages/core/views # move the generated files into the package mv app/controllers/users_controller.rb app/packages/core/controllers/. mv app/helpers/users_helper.rb app/packages/core/helpers/. mv app/models/user.rb app/packages/core/models/. mv app/views/users/views/users app/packages/core/views/.  the package config\ncat \u0026lt;\u0026lt;EOF\u0026gt; app/packages/core/package.yml # Turn on dependency checks for this package enforce_dependencies: true # Turn on privacy checks for this package enforce_privacy: true # this allows you to modify what your package's public path is within the package public_path: public/ # A list of this package's dependencies # Note that packages in this list require their own `package.yml` file dependencies: - '.' EOF  update the routes (even though the package is called core - lets make the path called admin since that is who will be managing the settings within this package)\nRails.application.routes.draw do scope :admin do resources :users end get 'landing/index' get 'landing', to: 'landing#index' root 'landing#index' # Defines the root path route (\u0026quot;/\u0026quot;) end  Now that we have created a new model we need to migrate:\nbin/rails db:migrate  Perhaps it would be good to keep migrations with packages, like we do with engines. But for now we will let it be.\nlets try the packwerk check to see if we have clearly defined our package:\nbin/packwerk check  If you have used the default package.yml then all should be good.\nLets update our diagram of our app:\nbin/rails graphwerk:update  you should now see both the landing and core module\nLets be sure all is working \u0026amp; we can create a user or two at localhost:3000/admin/users\nNOTE: IF YOU GET ERRORS REGARDING CONTROLLER OBJECT NOT FOUND RESTART RAILS!\nAdding the Blogs Now we need to app to allow some activity. Let\u0026rsquo;s create a blog site. We will create a post \u0026amp; later a comment model. Again we will use a generator and then put everything in its place.\nbin/rails g scaffold post content user:references  Now that we have generated standard code lets create the package:\nmkdir -p app/packages/blogs midir -p app/packages/blogs/public midir -p app/packages/blogs/controllers midir -p app/packages/blogs/helpers midir -p app/packages/blogs/models midir -p app/packages/blogs/views # and move the files into the package mv app/controllers/posts_controller.rb app/packages/blogs/controllers/. mv app/helpers/posts_helpers.rb app/packages/blogs/helpers/. mv app/models/post.rb app/packages/blogs/models/. mv app/models/views/posts app/packages/blogs/views/.  and now we need the package.yml file to activate the blogss package:\ncat \u0026lt;\u0026lt;EOF\u0026gt; app/packages/blogs/package.yml # Turn on dependency checks for this package enforce_dependencies: true # Turn on privacy checks for this package enforce_privacy: true # this allows you to modify what your package's public path is within the package public_path: public/ # A list of this package's dependencies # Note that packages in this list require their own `package.yml` file dependencies: - '.' EOF  update the routes (even though the package is called core - lets make the path called admin since that is who will be managing the settings within this package)\nRails.application.routes.draw do scope 'blogs' do resources :posts end scope 'admin' do resources :users end get 'landing/index' get 'landing', to: 'landing#index' root 'landing#index' # Defines the root path route (\u0026quot;/\u0026quot;) end  Now that we have created a new model we need to migrate:\nbin/rails db:migrate  Since I don\u0026rsquo;t want to get fancy with a current_user in the root controller - we can add the following to our new controller in create:\n# POST /posts or /posts.json def create current_user = User.first @post = Post.new(post_params.merge(user: current_user)) respond_to do |format| if @post.save format.html { redirect_to post_url(@post), notice: 'Post was successfully created.' } format.json { render :show, status: :created, location: @post } else format.html { render :new, status: :unprocessable_entity } format.json { render json: @post.errors, status: :unprocessable_entity } end end end  lets try the packwerk check to see if we have clearly defined our package:\nbin/packwerk check  Hmmm - now we are getting some problems!\n We are access the User from Core, but we haven\u0026rsquo;t explicitly allow that. We depend on Core in Blogs, but we haven\u0026rsquo;t explicity stated that we want that.  Let\u0026rsquo;s fix the declared dependencies:\n# app/packages/blogs/package.yml # Turn on dependency checks for this package enforce_dependencies: true # Turn on privacy checks for this package enforce_privacy: true # this allows you to modify what your package's public path is within the package public_path: public/ # A list of this package's dependencies # Note that packages in this list require their own `package.yml` file dependencies: - '.' - 'app/packages/core'  This should fix the declared package dependencies, now lets fix the access problem between the dependencies. The easiest fix is to put whatever we need accessible by other packages in the package\u0026rsquo;s public folder:\nmkdir app/packages/core/public/models mv app/packages/core/models/user.rb app/packages/core/public/models/.  now bin/packwerk check should be clean\nNote: in a real-world complex application there may be too many dependencies to fix all at once. In this case you can run:\nbin/packwerk update-deprecations  Now packwerk will ignore the problems and allow you to fix them over-time - this list can be seen in the file: app/packages/blogs/deprecated_references.yml it will look something like:\n# This file contains a list of dependencies that are not part of the long term plan for app/packages/blogs. # We should generally work to reduce this list, but not at the expense of actually getting work done. # # You can regenerate this file using the following command: # bin/packwerk update-deprecations app/packages/blogs --- app/packages/core: \u0026quot;::User\u0026quot;: violations: - privacy files: - app/packages/blogs/controllers/posts_controller.rb - app/packages/blogs/models/post.rb  Lets update our diagram of our app:\nbin/rails graphwerk:update  you should now see both the landing and core module\nYou may notice that everything is dependent on application rails. This is expected for a rails-app.\nLets be sure all is working \u0026amp; we can create a user or two at localhost:3000/blogs/posts\nNOTE: IF YOU GET ERRORS REGARDING CONTROLLER OBJECT NOT FOUND RESTART RAILS!\nGoing further! To gain more ideas I recommend the book: Package-Based Rails Applications, by Stephan Hagemann (also wrote the book on using engines for modular Rails applications).\nIn particular, in the book he discusses ways to reduce even the rails dependencies, integrate events, etc for further loose coupling.\nResources  site - https://github.com/Shopify/packwerk/ video - https://www.youtube.com/watch?v=olEA157z7kU book - https://leanpub.com/package-based-rails-applications docs - https://github.com/Shopify/packwerk/blob/main/USAGE.md help - https://github.com/Shopify/packwerk/blob/main/TROUBLESHOOT.md  Articles   https://www.shopify.com/partners/blog/monolith-software  https://shopify.engineering/enforcing-modularity-rails-apps-packwerk  https://thecodest.co/blog/ruby-on-rails-modularization-with-packwerk-episode-i/  https://www.globalapptesting.com/engineering/implementing-packwerk-to-delimit-bounded-contexts  ","date":1653175200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653175200,"objectID":"18b915b412c17c8b7d2d1aabce42105d","permalink":"https://btihen.me/post_ruby_rails/rails_7_0_packwerk/","publishdate":"2022-05-22T01:20:00+02:00","relpermalink":"/post_ruby_rails/rails_7_0_packwerk/","section":"post_ruby_rails","summary":"Organizing Code Gems and Engines have long been used to organize Ruby and Rails code into workable small units.\nShopify has introduced a new system called \u0026lsquo;packages\u0026rsquo; - they use the packwerk gem to help us.","tags":["rails","packwerk","architecture","design"],"title":"Rails 7.0 Using Packages (Packwerk gem)","type":"post_ruby_rails"},{"authors":["Bill Tihen"],"categories":["Code","JavaScript","Website"],"content":"Intro I\u0026rsquo;ve been looking for a flexible, yet easy to setup and manage website / blog \u0026ndash; which also easily formats and accommodates code!\nI have been playing with the combination of SvelteKit, TailwindCSS and DaisyUI, MDsveX (for MD blog pages).\nHere\u0026rsquo;s what I\u0026rsquo;ve learned so far.\nBase Software (nodejs) be sure to have a modern version of nodejs\nasdf install nodejs 16.14.2 asdf global nodejs 16.14.2  Create a SvelteKit Site Install base Sveltekit (still in beta so @next is included)\nnpm init svelte@next sveltekit_w_daisyui cd sveltekit_w_daisyui # install sveltekit packages npm install # initialize Git git init \u0026amp;\u0026amp; git add -A \u0026amp;\u0026amp; git commit -m \u0026quot;Initial commit\u0026quot; # starts sveltekit npm run dev -- --open  Install/Configure Components we want to install and configure TailwindCSS, DaisyUI and MDsvex (markdown), svelte-add@latest installs and configures too!\n# Tailwind and PostCSS npx svelte-add@latest tailwindcss npm i # MD pages npx svelte-add@latest mdsvex npm i  now install DaisyUI (note npm i daisyui didn\u0026rsquo;t work, but adding -D did)\nnpm install -D daisyui  Now to configure tailwind.config.js - add daisyui as a plugin at the end of the file:\nmodule.exports = { //... plugins: [require(\u0026quot;daisyui\u0026quot;)], }  My config with a theme looks like (I left my experiments - so you can see how easy it is to adjust and play with):\nconst config = { content: [\u0026quot;./src/**/*.{html,js,svelte,ts}\u0026quot;], theme: { extend: {}, }, // http://colorcode.is/ - helpful color site daisyui: { themes: [ { // corporate adapted light btihenl: { primary: \u0026quot;#5aa867\u0026quot;, secondary: \u0026quot;#0080bc\u0026quot;, accent: \u0026quot;#f1db85\u0026quot;, neutral: \u0026quot;#3a3a3a\u0026quot;, \u0026quot;neutral-content\u0026quot;: \u0026quot;base-100\u0026quot;: \u0026quot;#f0f8ff\u0026quot;, \u0026quot;base-content\u0026quot;: \u0026quot;#100f0f\u0026quot;, info: \u0026quot;#0080bc\u0026quot;, success: \u0026quot;#5aa867\u0026quot;, warning: \u0026quot;#d29a2f\u0026quot;, error: \u0026quot;#b53729\u0026quot;, \u0026quot;code-bg-color\u0026quot;: \u0026quot;#f1db85\u0026quot;, }, // business adapted darker btihend: { primary: \u0026quot;#5aa867\u0026quot;, secondary: \u0026quot;#0080bc\u0026quot;, accent: \u0026quot;#f1db85\u0026quot;, neutral: \u0026quot;#23282E\u0026quot;, \u0026quot;base-100\u0026quot;: \u0026quot;#3a3a3a\u0026quot;, info: \u0026quot;#0080bc\u0026quot;, success: \u0026quot;#5aa867\u0026quot;, warning: \u0026quot;#d29a2f\u0026quot;, error: \u0026quot;#b53729\u0026quot;, \u0026quot;code-bg-color\u0026quot;: \u0026quot;#f1db85\u0026quot;, }, } ], }, plugins: [require(\u0026quot;daisyui\u0026quot;)], }; module.exports = config;  finally install theme-change: https://github.com/saadeghi/theme-change\nnpm i theme-change --save  Now configure themechanger:\n/* src/app.css */ /* Write your global styles here, in PostCSS syntax */ @tailwind base; @tailwind components; @tailwind utilities; /* Allow system color */ :root { --color-default: #f2f3f4; } /* set a default theme - btihenl is my light theme - more later*/ @media (prefers-color-scheme: btihenl) { :root { --my-color: #252b30; } } /* basic important css */ h1 { margin: 1rem 0 3rem; text-align: center; font-weight: 800; font-size: 2.0rem; color: var(--heading-color); line-height: 1.2; }  Update your homepage All pages will be within src/routes\nThis is at: src/routes/index.svelte\nThe following will make it easy to tweak your theme:\n\u0026lt;h1\u0026gt;Welcome to SvelteKit\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Visit \u0026lt;a href=\u0026quot;https://kit.svelte.dev\u0026quot;\u0026gt;kit.svelte.dev\u0026lt;/a\u0026gt; to read the documentation\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026quot;badge\u0026quot;\u0026gt;neutral\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;badge badge-primary\u0026quot;\u0026gt;primary\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;badge badge-secondary\u0026quot;\u0026gt;secondary\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;badge badge-accent\u0026quot;\u0026gt;accent\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;badge badge-ghost\u0026quot;\u0026gt;ghost\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;alert shadow-lg\u0026quot;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;svg xmlns=\u0026quot;http://www.w3.org/2000/svg\u0026quot; fill=\u0026quot;none\u0026quot; viewBox=\u0026quot;0 0 24 24\u0026quot; class=\u0026quot;stroke-info flex-shrink-0 w-6 h-6\u0026quot;\u0026gt; \u0026lt;path stroke-linecap=\u0026quot;round\u0026quot; stroke-linejoin=\u0026quot;round\u0026quot; stroke-width=\u0026quot;2\u0026quot; d=\u0026quot;M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\u0026quot;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;span\u0026gt;Shadow Notice\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;alert alert-info shadow-lg\u0026quot;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;svg xmlns=\u0026quot;http://www.w3.org/2000/svg\u0026quot; fill=\u0026quot;none\u0026quot; viewBox=\u0026quot;0 0 24 24\u0026quot; class=\u0026quot;stroke-current flex-shrink-0 w-6 h-6\u0026quot;\u0026gt; \u0026lt;path stroke-linecap=\u0026quot;round\u0026quot; stroke-linejoin=\u0026quot;round\u0026quot; stroke-width=\u0026quot;2\u0026quot; d=\u0026quot;M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\u0026quot;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;span\u0026gt;Info notice.\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;alert alert-success shadow-lg\u0026quot;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;svg xmlns=\u0026quot;http://www.w3.org/2000/svg\u0026quot; class=\u0026quot;stroke-current flex-shrink-0 h-6 w-6\u0026quot; fill=\u0026quot;none\u0026quot; viewBox=\u0026quot;0 0 24 24\u0026quot;\u0026gt; \u0026lt;path stroke-linecap=\u0026quot;round\u0026quot; stroke-linejoin=\u0026quot;round\u0026quot; stroke-width=\u0026quot;2\u0026quot; d=\u0026quot;M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\u0026quot; /\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;span\u0026gt;Suceess Notice\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;alert alert-warning shadow-lg\u0026quot;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;svg xmlns=\u0026quot;http://www.w3.org/2000/svg\u0026quot; class=\u0026quot;stroke-current flex-shrink-0 h-6 w-6\u0026quot; fill=\u0026quot;none\u0026quot; viewBox=\u0026quot;0 0 24 24\u0026quot;\u0026gt; \u0026lt;path stroke-linecap=\u0026quot;round\u0026quot; stroke-linejoin=\u0026quot;round\u0026quot; stroke-width=\u0026quot;2\u0026quot; d=\u0026quot;M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\u0026quot; /\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;span\u0026gt;Warning: Invalid email address!\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;alert alert-error shadow-lg\u0026quot;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;svg xmlns=\u0026quot;http://www.w3.org/2000/svg\u0026quot; class=\u0026quot;stroke-current flex-shrink-0 h-6 w-6\u0026quot; fill=\u0026quot;none\u0026quot; viewBox=\u0026quot;0 0 24 24\u0026quot;\u0026gt; \u0026lt;path stroke-linecap=\u0026quot;round\u0026quot; stroke-linejoin=\u0026quot;round\u0026quot; stroke-width=\u0026quot;2\u0026quot; d=\u0026quot;M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\u0026quot; /\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;span\u0026gt;Error! Task failed successfully.\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;  Create an About Page Create new pages in src/routes \u0026ndash; for example an about page:\ntouch src/routes/about.svelte cat \u0026lt;\u0026lt;EOF\u0026gt;\u0026gt;src/routes/about.svelte \u0026lt;h1\u0026gt;Hi\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;This is my about page.\u0026lt;/p\u0026gt; EOF  now go to http://localhost:4000/about and you should see your new page.\nCreate Components mkdir -p src/lib/components touch src/lib/components/Navbar.svelte touch src/lib/components/Footer.svelte  Navbar I\u0026rsquo;ll explain / Setup the Themechange in a bit\ncat \u0026lt;\u0026lt;EOF \u0026gt;\u0026gt;src/lib/components/Navbar.svelte \u0026lt;script\u0026gt; import { onMount } from 'svelte' import { themeChange } from 'theme-change' // NOTE: the element that is using one of the theme attributes must be in the DOM on mount onMount(() =\u0026gt; { themeChange(false) // false parameter is required for svelte }) \u0026lt;/script\u0026gt; \u0026lt;navbar\u0026gt; \u0026lt;div class=\u0026quot;bg-black h-2.5\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;flex items-center justify-center sticky top-0 z-50 bg-blue-600\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;navbar w-4/5\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;navbar-start\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;dropdown\u0026quot;\u0026gt; \u0026lt;div tabindex=\u0026quot;0\u0026quot; class=\u0026quot;btn btn-ghost btn-circle\u0026quot;\u0026gt; \u0026lt;!-- menu-alt1 - hero-icon --\u0026gt; \u0026lt;svg xmlns=\u0026quot;http://www.w3.org/2000/svg\u0026quot; class=\u0026quot;h-5 w-5\u0026quot; fill=\u0026quot;none\u0026quot; viewBox=\u0026quot;0 0 22 22\u0026quot; stroke=\u0026quot;currentColor\u0026quot;\u0026gt; \u0026lt;path stroke-linecap=\u0026quot;round\u0026quot; stroke-linejoin=\u0026quot;round\u0026quot; stroke-width=\u0026quot;4\u0026quot; d=\u0026quot;M2 6h16M2 12h8m-8 6h16\u0026quot; /\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;ul tabindex=\u0026quot;0\u0026quot; class=\u0026quot;menu menu-compact dropdown-content mt-3 p-2 shadow bg-base-100 rounded-box w-62\u0026quot;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;/\u0026quot;\u0026gt;Item 1\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li tabindex=\u0026quot;0\u0026quot;\u0026gt; \u0026lt;a class=\u0026quot;justify-between\u0026quot; href=\u0026quot;/\u0026quot;\u0026gt; Parent \u0026lt;svg class=\u0026quot;fill-current\u0026quot; xmlns=\u0026quot;http://www.w3.org/2000/svg\u0026quot; width=\u0026quot;24\u0026quot; height=\u0026quot;24\u0026quot; viewBox=\u0026quot;0 0 24 24\u0026quot;\u0026gt; \u0026lt;path d=\u0026quot;M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z\u0026quot;/\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;ul class=\u0026quot;p-2 shadow bg-base-100\u0026quot;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;/\u0026quot;\u0026gt;Submenu 1\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;/\u0026quot;\u0026gt;Submenu 2\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;/\u0026quot;\u0026gt;Item 3\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;div class=\u0026quot;form-control\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;text\u0026quot; placeholder=\u0026quot;Search\u0026quot; class=\u0026quot;input input-bordered\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;navbar-center\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;/\u0026quot; class=\u0026quot;btn btn-ghost normal-case text-2xl\u0026quot;\u0026gt;btihen.dev\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;navbar-end space-x-2\u0026quot;\u0026gt; \u0026lt;!-- sun - heroicon.dev --\u0026gt; \u0026lt;svg class=\u0026quot;w-6 h-6\u0026quot; fill=\u0026quot;none\u0026quot; stroke=\u0026quot;currentColor\u0026quot; viewBox=\u0026quot;0 0 24 24\u0026quot; xmlns=\u0026quot;http://www.w3.org/2000/svg\u0026quot;\u0026gt; \u0026lt;path stroke-linecap=\u0026quot;round\u0026quot; stroke-linejoin=\u0026quot;round\u0026quot; stroke-width=\u0026quot;2\u0026quot; d=\u0026quot;M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\u0026quot;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;!-- https://github.com/saadeghi/theme-change --\u0026gt; \u0026lt;input type=\u0026quot;checkbox\u0026quot; class=\u0026quot;toggle\u0026quot; id=\u0026quot;theme-toggle\u0026quot; data-toggle-theme=\u0026quot;btihenl,btihend\u0026quot; data-act-class=\u0026quot;ACTIVECLASS\u0026quot;\u0026gt; \u0026lt;!-- moon - heroicon.dev --\u0026gt; \u0026lt;svg class=\u0026quot;w-6 h-6\u0026quot; fill=\u0026quot;none\u0026quot; stroke=\u0026quot;currentColor\u0026quot; viewBox=\u0026quot;0 0 24 24\u0026quot; xmlns=\u0026quot;http://www.w3.org/2000/svg\u0026quot;\u0026gt; \u0026lt;path stroke-linecap=\u0026quot;round\u0026quot; stroke-linejoin=\u0026quot;round\u0026quot; stroke-width=\u0026quot;2\u0026quot; d=\u0026quot;M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z\u0026quot;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/navbar\u0026gt; EOF  Footer cat \u0026lt;\u0026lt;EOF \u0026gt;\u0026gt;src/lib/components/Footer.svelte \u0026lt;footer class=\u0026quot;flex items-center justify-center p-4 bg-gray-600 shadow-md\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;footer w-4/5\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;items-center grid-flow-col place-self-center md:place-self-start\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;/\u0026quot; class=\u0026quot;btn btn-ghost normal-case text-2xl\u0026quot;\u0026gt;btihen.dev\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;grid-flow-col gap-4 place-self-center md:justify-self-end\u0026quot;\u0026gt; \u0026lt;!-- github - cons.getbootstrap.com--\u0026gt; \u0026lt;a href=\u0026quot;/\u0026quot;\u0026gt; \u0026lt;svg xmlns=\u0026quot;http://www.w3.org/2000/svg\u0026quot; width=\u0026quot;24\u0026quot; height=\u0026quot;24\u0026quot; fill=\u0026quot;currentColor\u0026quot; class=\u0026quot;bi bi-github\u0026quot; viewBox=\u0026quot;0 0 16 16\u0026quot;\u0026gt; \u0026lt;path d=\u0026quot;M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z\u0026quot;/\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;!-- linked-in - cons.getbootstrap.com --\u0026gt; \u0026lt;a href=\u0026quot;/\u0026quot;\u0026gt; \u0026lt;svg xmlns=\u0026quot;http://www.w3.org/2000/svg\u0026quot; width=\u0026quot;24\u0026quot; height=\u0026quot;24\u0026quot; fill=\u0026quot;currentColor\u0026quot; class=\u0026quot;bi bi-linkedin\u0026quot; viewBox=\u0026quot;0 0 16 16\u0026quot;\u0026gt; \u0026lt;path d=\u0026quot;M0 1.146C0 .513.526 0 1.175 0h13.65C15.474 0 16 .513 16 1.146v13.708c0 .633-.526 1.146-1.175 1.146H1.175C.526 16 0 15.487 0 14.854V1.146zm4.943 12.248V6.169H2.542v7.225h2.401zm-1.2-8.212c.837 0 1.358-.554 1.358-1.248-.015-.709-.52-1.248-1.342-1.248-.822 0-1.359.54-1.359 1.248 0 .694.521 1.248 1.327 1.248h.016zm4.908 8.212V9.359c0-.216.016-.432.08-.586.173-.431.568-.878 1.232-.878.869 0 1.216.662 1.216 1.634v3.865h2.401V9.25c0-2.22-1.184-3.252-2.764-3.252-1.274 0-1.845.7-2.165 1.193v.025h-.016a5.54 5.54 0 0 1 .016-.025V6.169h-2.4c.03.678 0 7.225 0 7.225h2.4z\u0026quot;/\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;!-- twitter - cons.getbootstrap.com--\u0026gt; \u0026lt;a href=\u0026quot;/\u0026quot;\u0026gt; \u0026lt;svg xmlns=\u0026quot;http://www.w3.org/2000/svg\u0026quot; width=\u0026quot;24\u0026quot; height=\u0026quot;24\u0026quot; fill=\u0026quot;currentColor\u0026quot; class=\u0026quot;bi bi-twitter\u0026quot; viewBox=\u0026quot;0 0 16 16\u0026quot;\u0026gt; \u0026lt;path d=\u0026quot;M5.026 15c6.038 0 9.341-5.003 9.341-9.334 0-.14 0-.282-.006-.422A6.685 6.685 0 0 0 16 3.542a6.658 6.658 0 0 1-1.889.518 3.301 3.301 0 0 0 1.447-1.817 6.533 6.533 0 0 1-2.087.793A3.286 3.286 0 0 0 7.875 6.03a9.325 9.325 0 0 1-6.767-3.429 3.289 3.289 0 0 0 1.018 4.382A3.323 3.323 0 0 1 .64 6.575v.045a3.288 3.288 0 0 0 2.632 3.218 3.203 3.203 0 0 1-.865.115 3.23 3.23 0 0 1-.614-.057 3.283 3.283 0 0 0 3.067 2.277A6.588 6.588 0 0 1 .78 13.58a6.32 6.32 0 0 1-.78-.045A9.344 9.344 0 0 0 5.026 15z\u0026quot;/\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;!-- facebook --\u0026gt; \u0026lt;!-- \u0026lt;a href=\u0026quot;/\u0026quot;\u0026gt; \u0026lt;svg xmlns=\u0026quot;http://www.w3.org/2000/svg\u0026quot; width=\u0026quot;24\u0026quot; height=\u0026quot;24\u0026quot; viewBox=\u0026quot;0 0 24 24\u0026quot; class=\u0026quot;fill-current\u0026quot;\u0026gt; \u0026lt;path d=\u0026quot;M9 8h-3v4h3v12h5v-12h3.642l.358-4h-4v-1.667c0-.955.192-1.333 1.115-1.333h2.885v-5h-3.808c-3.596 0-5.192 1.583-5.192 4.615v3.385z\u0026quot;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/a\u0026gt; --\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;div class=\u0026quot;bg-black flex items-center justify-center h-3.5\u0026quot;\u0026gt; \u0026lt;p class=\u0026quot;text-white text-2xs\u0026quot;\u0026gt;Copyright © 2022 - All right reserved\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; EOF  Create a Base Layout To create a layout __layout.svelte (so we can add components to each page like navbars, etc)\ntouch src/routes/__layout.svelte cat \u0026lt;\u0026lt;EOF\u0026gt;\u0026gt;src/routes/__layout.svelte \u0026lt;script\u0026gt; import \u0026quot;../app.css\u0026quot;; import Navbar from '$lib/components/Navbar.svelte' import Footer from '$lib/components/Footer.svelte' \u0026lt;/script\u0026gt; \u0026lt;Navbar /\u0026gt; \u0026lt;main class=\u0026quot;flex items-center justify-center bg-base-100\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;w-4/5 m-4 px-4 py-4 sm:px-0\u0026quot;\u0026gt; \u0026lt;slot /\u0026gt; \u0026lt;!-- content goes into slot --\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;Footer /\u0026gt; EOF  SVG Images Blog setup  https://github.com/spences10/sveltekit-mdsvex-starter-blog/tree/main/src/lib\nMarkdown Setup  https://github.com/spences10/sveltekit-mdsvex-starter-blog/tree/main/src/lib\nExternal Links  https://github.com/rehypejs/rehype-external-links\nSlugs (links to sections in longer documents)  https://github.com/rehypejs/rehype-slug https://github.com/rehypejs/rehype-autolink-headings\nRelative Images  https://github.com/mattjennings/mdsvex-relative-images\nI like folders with images and all content together so i\u0026rsquo;ll install:\nnpm install mdsvex-relative-images  Setup in mdsvex.config.js with:\n// mdsvex.config.js import relativeImages from \u0026quot;mdsvex-relative-images\u0026quot;; export default { // ... rest of your config remarkPlugins: [relativeImages], };  BE SURE TO RESTART SVELTEKIT to be sure all is good.\nnpm run dev --  Front-mater Code formatting /* Write your global styles here, in PostCSS syntax */ @tailwind base; @tailwind components; @tailwind utilities; :root { --color-default: #f2f3f4; } @media (prefers-color-scheme: btihenl) { :root { --my-color: #252b30; } } h1 { margin: 1rem 0 3rem; text-align: center; font-weight: 800; font-size: 2.0rem; color: var(--heading-color); line-height: 1.5; } h2 { margin: 1.5rem 0 0.5rem; font-weight: 600; font-size: 1.5rem; color: var(--heading-color); line-height: 1.3; } h3 { margin: 1.2rem 0 0.5rem; font-weight: 500; font-size: 1.3rem; color: var(--heading-color); line-height: 1.1; } p { margin: 0.5rem 0; font-size: 1.0rem; color: var(--text-color); line-height: 1.15; } /* https://github.com/PrismJS/prism-themes/blob/master/themes/prism-atom-dark.css */ /** * atom-dark theme for `prism.js` * Based on Atom's `atom-dark` theme: https://github.com/atom/atom-dark-syntax * @author Joe Gibson (@gibsjose) */ code[class*=\u0026quot;language-\u0026quot;], pre[class*=\u0026quot;language-\u0026quot;] { color: #c5c8c6; text-shadow: 0 1px rgba(0, 0, 0, 0.3); font-family: Inconsolata, Monaco, Consolas, 'Courier New', Courier, monospace; direction: ltr; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; line-height: 1.5; -moz-tab-size: 4; -o-tab-size: 4; tab-size: 4; -webkit-hyphens: none; -moz-hyphens: none; -ms-hyphens: none; hyphens: none; } /* Code blocks */ pre[class*=\u0026quot;language-\u0026quot;] { padding: 1em; margin: .5em 0; overflow: auto; border-radius: 0.5em; } :not(pre)\u0026gt;code[class*=\u0026quot;language-\u0026quot;], pre[class*=\u0026quot;language-\u0026quot;] { background: #1d1f21; } /* Inline code */ :not(pre)\u0026gt;code[class*=\u0026quot;language-\u0026quot;] { padding: .1em; border-radius: .3em; } .token.comment, .token.prolog, .token.doctype, .token.cdata { color: #7C7C7C; } .token.punctuation { color: #c5c8c6; } .namespace { opacity: .7; } .token.property, .token.keyword, .token.tag { color: #96CBFE; } .token.class-name { color: #FFFFB6; text-decoration: underline; } .token.boolean, .token.constant { color: #99CC99; } .token.symbol, .token.deleted { color: #f92672; } .token.number { color: #FF73FD; } .token.selector, .token.attr-name, .token.string, .token.char, .token.builtin, .token.inserted { color: #A8FF60; } .token.variable { color: #C6C5FE; } .token.operator { color: #EDEDED; } .token.entity { color: #FFFFB6; cursor: help; } .token.url { color: #96CBFE; } .language-css .token.string, .style .token.string { color: #87C38A; } .token.atrule, .token.attr-value { color: #F9EE98; } .token.function { color: #DAD085; } .token.regex { color: #E9C062; } .token.important { color: #fd971f; } .token.important, .token.bold { font-weight: bold; } .token.italic { font-style: italic; }  Reading time Blog Index Page Blog Tag Search / Pages Contact page (netlify) Deployment (netlify) Deployment (render) To Solve  MDsvex CSS MDsvex - layouts DaisyUI dropdowns don\u0026rsquo;t close with a second click, but on a focus change :(  Resources Svelte Resources    https://www.youtube.com/watch?v=haKnkk6ds20\n   https://joshcollinsworth.com/blog/build-static-sveltekit-markdown-blog\n   https://kit.svelte.dev/\n   https://megzari.com/blog/about_this_site\n   https://svelte.dev/examples#dom-event-forwarding\n   https://prismic.io/blog/svelte-sveltekit-tutorial\n   https://dev.to/nico_bachner/sveltekit-theme-switch-a58\n   https://www.liip.ch/en/blog/sveltekit-and-tailwind-windi-css\n   https://svelteland.github.io/svelte-kit-blog-demo/create-your-blog/\n   https://blog.logrocket.com/exploring-sveltekit-the-newest-svelte-based-framework/\n  MDsveX (Svelte Markdown)  reading time template, \u0026hellip;  https://mdsvex.com/docs  https://mdsvex.com/docs#integrations  https://github.com/spences10/sveltekit-mdsvex-starter-blog/blob/main/mdsvex.config.js  DaisyUI \u0026amp; Themes   https://daisyui.com/  https://github.com/saadeghi/daisyui  https://github.com/saadeghi/theme-change  https://dev.to/nico_bachner/sveltekit-theme-switch-a58  Icons   https://heroicons.dev/  https://icons.getbootstrap.com/icons/  ","date":1650063713,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1618700513,"objectID":"45c268407141ea7620aadde964c59261","permalink":"https://btihen.me/post_javascript/sveltekit_daisyui/","publishdate":"2022-04-16T01:01:53+02:00","relpermalink":"/post_javascript/sveltekit_daisyui/","section":"post_javascript","summary":"A straight forward way to build websites with lots of features","tags":["Svelte","SvelteKit","TailwindCSS","DaisyUI","Blog","StaticSite"],"title":"SvelteKit, TailwindCSS and DaisyUI Website","type":"post_javascript"},{"authors":["Bill Tihen"],"categories":["Code"],"content":"I have been enjoying the tools associated with Elixir and exploring the frontend. LiveView helps make that more intuitive and when that isn\u0026rsquo;t enough, AlpineJS is a lightweight JS tool with a similar syntax as Vue.\nInstall asdf - and required software   https://www.cogini.com/blog/using-asdf-with-elixir-and-phoenix/  https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58  On a Mac I used Homebrew:\nbrew install asdf echo -e '\\n. $(brew --prefix asdf)/asdf.sh' \u0026gt;\u0026gt; ~/.bash_profile echo -e '\\n. $(brew --prefix asdf)/etc/bash_completion.d/asdf.bash' \u0026gt;\u0026gt; ~/.bash_profile source ~/.bash_profile # (or open a new terminal)  Now you can install asdf software packages:\nasdf plugin-add erlang asdf plugin-add elixir asdf plugin-add Postgres  Now you need to install the desired versions (usually the newest) - currently:\nasdf list all erlang asdf install erlang 24.3.3 asdf global erlang 24.3.3 # note the elixir version otp must match the erlang version! asdf list all elixir asdf install elixir 1.13.4-otp-24 asdf global elixir 1.13.4-otp-24 # asdf install elixir 1.11.4-otp-24 # if you mismatch elixir with erlang you will get errors like: # {\u0026quot;init terminating in do_boot\u0026quot;,{undef,[{elixir,start_cli,[],[]},{init,start_em,1,[]},{init,do_boot,3,[]}]}} asdf list all Postgres asdf install Postgres 14.2 # Slow! (maybe just use homebrew's version)  Get the newest Elixir tools mix local.rebar --force mix local.hex --force  Get the newest Phoenix Hex Package Once you have established you have the requirements - the download the newest version of Phoenix (go to: https://hexdocs.pm/phoenix/installation.html#phoenix to see the newest version) - at the time of this writing its 1.5.8 - be sure its installed using:\nmix archive.install hex phx_new 1.6.6 --force  create a project with asdf settings First we will create the folder / project location\nmkdir petal  Now we will tell it which software to use :\ntouch petal/.tool-versions cat \u0026lt;\u0026lt;EOF \u0026gt;\u0026gt;petal/.tool-versions erlang 24.3.3 elixir 1.13.3-otp-24 EOF  Create a new Phoenix Project  https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58\nNow you can simply do:\nmix phx.new petal --live cd petal mix ecto.create  assuming all is good lets configure git:\ngit init git add . git commit -m \u0026quot;initial Phoneix install with LiveView\u0026quot;  credo add credo to mix.exs (optional but often useful)\n{:credo, \u0026quot;~\u0026gt; 1.6\u0026quot;}  configure credo\nmix deps.get mix credo gen.config  Tailwind \u0026amp; DaisyUI Add to mix.exs\n{:phx_gen_tailwind, \u0026quot;~\u0026gt; 0.1\u0026quot;, only: :dev, runtime: false}  configure TailwindCSS\nmix deps.get mix phx.gen.tailwind  Test TailwindCSS add to the top of: lib/slacker_gen_tail_web/templates/page/index.html.heex\n\u0026lt;div class=\u0026quot;text-green-500 text-5xl text-center\u0026quot;\u0026gt;Large Centered Green TailwindCSS\u0026lt;/div\u0026gt;  start phoenix mix -S phx.server\nAdd DaisyUI  https://daisyui.com/docs/install/ https://elixirforum.com/t/how-to-get-daisyui-and-phoenix-to-work/46612/8 (also explains what to do when using/deploying to Fly.io)!\nfirst we need to initialize npm (otherwise DaisyUI won\u0026rsquo;t load / integrate with esbuild)\ncd assets npm init # just using the defaults seems to work npm install daisyui  Now configure Tailwind (assets/tailwind.config.js) to use daisyui\n// assets/tailwind.config.js module.exports = { mode: 'jit', purge: [ './js/**/*.js', '../lib/*_web/**/*.*ex' ], theme: { }, variants: { extend: {}, }, plugins: [require(\u0026quot;daisyui\u0026quot;)], }  Test DaisyUI now lets add a DaisyUI Button to the default page lib/fare_web/templates/page/index.html.heex:\n\u0026lt;button class=\u0026quot;btn btn-primary\u0026quot;\u0026gt;Button\u0026lt;/button\u0026gt;  ideally when we start phoenix:\niex -S mix phx.server  we should now see in the log:\nwarn - You have enabled the JIT engine which is currently in preview. warn - Preview features are not covered by semver, may introduce breaking changes, and can change at any time. Rebuilding... 🌼 daisyUI components 2.13.6 https://github.com/saadeghi/daisyui ✔︎ Including: base, components, themes[29], utilities  now when we look at the landing page we should see a rounded blue button!\ninstall \u0026amp; test Alpine JS see the article on phoenix installer (easiest) or by hand to install aplinejs\nSee Adding fonts for more options see the article on adding a custom font for font information\nTailwind \u0026amp; DaisyUI with Fly.io  https://github.com/phoenixframework/tailwind https://elixirforum.com/t/how-to-get-daisyui-and-phoenix-to-work/46612/8 https://elixirforum.com/t/tailwind-not-working-in-production-no-styles-just-plain-html/45192\nResources (1.6.x)   https://www.youtube.com/watch?v=vZBHkvTAb2U  https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58  https://sergiotapia.com/phoenix-160-liveview-esbuild-tailwind-jit-alpinejs-a-brief-tutorial  https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix  https://thinkingelixir.com/petal-stack-in-elixir/  https://larainfo.com/blogs/build-simple-count-app-using-apline-js-with-tailwind-css  https://fullstackphoenix.com/tutorials/combine-phoenix-liveview-with-alpine-js  https://www.cogini.com/blog/using-asdf-with-elixir-and-phoenix/  https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58  https://tailwindcss.com/  https://github.com/alpinejs/alpine  https://github.com/tailwindlabs/tailwindcss  https://experimentingwithcode.com/custom-fonts-with-phoenix-and-tailwind/  https://fullstackphoenix.com/tutorials/add-tailwind-html-generators-in-phoenix  https://elixirforum.com/t/how-do-i-use-a-custom-font-with-phoenix-1-6-and-esbuild/43791/16  Older Resources   https://www.youtube.com/watch?v=o4Prej0wIZA  http://blog.pthompson.org/alpine-js-and-liveview  https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix  https://fullstackphoenix.com/tutorials/get-started-with-tailwind-in-phoenix  https://fullstackphoenix.com/tutorials/combine-phoenix-liveview-with-alpine-js  https://medium.com/mindvalley-technology/how-to-add-tailwindcss-to-your-phoenix-project-e2250ad31ace  https://thinkingelixir.com/podcast-episodes/021-tailwind-css-alpine-js-and-liveview-with-patrick-thompson/  ","date":1649458913,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1649631713,"objectID":"bf0b5049e4fb953049175b9a903a47b9","permalink":"https://btihen.me/post_elixir_phoenix/phoenix_1_6_petal_setup_with_daisyui/","publishdate":"2022-04-09T01:01:53+02:00","relpermalink":"/post_elixir_phoenix/phoenix_1_6_petal_setup_with_daisyui/","section":"post_elixir_phoenix","summary":"Adding a Tailwind CSS Framework to Phoenix","tags":["Phoenix","Phoenix 1.6.x","Elixir","TailwindCSS","TailwindCSS 3.x","AlpineJS","AlpineJS 3.x","LiveView","PETAL","PETAL Stack","ASDF","CSS","DaisyUI"],"title":"Phoenix 1.6 Easy PETAL Stack with DaisyUI","type":"post_elixir_phoenix"},{"authors":["Bill Tihen"],"categories":[],"content":"Overview Sometimes within an work flow different validations and business logic is needed. It can be very complex if each modification uses the same controller and model logic! I\u0026rsquo;ve tried and ist crazy difficult. The best solution I have found is to use Commands and separate Controllers. It became practical to treat a command object as a Rails Model as of Rails 5.2 when the Attribute API allows Plain Old Ruby Objects (POROs) to use Attributes.\nScenario We have a workflow (at a school) where a young student submits a request.\n Student creates a request This is reviewed by the \u0026lsquo;assistant to the dean\u0026rsquo; (approved, conditional, declined) When approved it is forwarded to the student\u0026rsquo;s guardian for guardian_approval (approved, conditional, declined) When approved it is forwarded to the \u0026lsquo;Dean of Students\u0026rsquo; for final_approval (approved, conditional, declined)  This example will omit much of the real-world complexities especially the relationships between users and the related security and scoping. But the focus here is to build validations and logic outside the controllers and base model. (the base model will only contains logic that is always true)\ncreate a project We will ensure we are using Rails 5.2 (but it can be later and there are be more features in later versions of Rails)\nrbenv install 2.7.5 rbenv local 2.7.5 gem install rails -v 5.2.7 rails _5.2.7_ new commands_n_attributes --skip-spring cd commands_n_attributes bin/rails db:drop bin/rails db:create bin/rails db:migrate  Let\u0026rsquo;s create a landing page using:\nbin/rails g controller landing index\nAnd now update routes:\n# config/routes.rb Rails.application.routes.draw do get 'landing/index' root 'landing#index' end  If you start rails with bin/rails s \u0026lsquo;/\u0026rsquo; should be the new landing-page.\nWe will need some users and their roles (but we will keep this simple!) using:\nrails g scaffold User name role email:uniq\nAnd we will update the migration to require our new fields using:\nclass CreateUsers \u0026lt; ActiveRecord::Migration[5.2] def change create_table :users do |t| t.string :name, null: false t.string :email, null: false t.string :role, default: 'student', null: false t.timestamps end add_index :users, :email, unique: true end end  Since all fields are required all the time we will put the user validations in the model - so we can now update the model using:\nclass User \u0026lt; ApplicationRecord validates :name, presence: true validates :email, presence: true, uniqueness: true validates :role, presence: true, inclusion: { in: %w[student assistant parent dean], message: '%{value} is not a valid role' } end  Let\u0026rsquo;s migrate bin/rails db:migrate and make some users with bin/rails db:migrate or using /users\n# db/seeds.rb student = User.create(name: 'student', email: 'student@example.ch', role: 'student') reviewer = User.create(name: 'reviewer', email: 'reviewer@example.ch', role: 'reviewer') bill = User.create(name: 'bill', email: 'bill@example.ch', role: 'guardian') dean = User.create(name: 'dean', email: 'dean@example.ch', role: 'dean')  Student Request allow the student to make a request (this stuff will always be required so we will use all rails standards) \u0026ndash; in real-life this would usually be scoped and the only area students can access, but that is beyond the scope of this article.\nrails g scaffold Request category description:text student:references\nNow lets open this migration and require all fields using:\nclass CreateRequests \u0026lt; ActiveRecord::Migration[5.2] def change create_table :travel_requests do |t| t.string :category, null: false t.text :description, null: false t.references :student, foreign_key: {to_table: :users}, null: false t.timestamps end end end  Note we are using the student as an alias for the User class \u0026ndash; so we can eventually allow all the various users to interact and \u0026lsquo;student\u0026rsquo; is much clearer than user the model name. And we can enforce these required fields in the model too:\nclass Request \u0026lt; ApplicationRecord belongs_to :student, class_name: 'User' validates :student, presence: true validates :description, presence: true validates :category, presence: true, inclusion: { in: %w(travel money), message: \u0026quot;%{value} is not a valid category\u0026quot; } end  Let\u0026rsquo;s migrate again and create some requests:\n# db/seeds.rb student = User.create(name: 'student', email: 'student@example.ch', role: 'student') reviewer = User.create(name: 'reviewer', email: 'reviewer@example.ch', role: 'reviewer') bill = User.create(name: 'bill', email: 'bill@example.ch', role: 'guardian') dean = User.create(name: 'dean', email: 'dean@example.ch', role: 'dean') request_good = Request.create(category: 'travel', description: 'reasonable', student: student) request_hmmm = Request.create(category: 'travel', description: 'questionable', student: student) request_nope = Request.create(category: 'travel', description: 'unreasonable', student: student)  Review Command Let\u0026rsquo;s add the more complex logic outside the rails-standard way.\nFirst let\u0026rsquo;s add the new fields needed by the reviewer:\nbin/rails g migration AddReviewFieldsToRequests review_decision review_notes:texr \\ review_decision_at:timestamp reviewer:references  Update the migration:\nclass AddReviewFieldsToRequests \u0026lt; ActiveRecord::Migration[5.2] def change add_column :requests, :review_notes, :string add_column :requests, :review_decision, :string add_column :requests, :review_decision_at, :timestamp add_reference :requests, :reviewer, foreign_key: {to_table: :users} end end  Now we need to update the Review Model too to add the relationship - its critical to add optional: true in rails 5.2 - otherwise rails thinks it should always be present! Otherwise, we are not changing the model nor its validations - since these fields are only required by the reviewer while reviewing a request.\nclass Request \u0026lt; ApplicationRecord belongs_to :student, class_name: 'User', foreign_key: 'student_id' belongs_to :reviewer, class_name: 'User', foreign_key: 'reviewer_id', optional: true validates :student, presence: true validates :description, presence: true validates :category, presence: true, inclusion: { in: %w(travel money), message: \u0026quot;%{value} is not a valid category\u0026quot; } end  bin/rails db:migrate\nLet\u0026rsquo;s create a new controller to reviews the requests using (note - will will only accept the fields: review_decision review_notes - the others we will set in code) - so we can use the command:\nbin/rails g scaffold_controller ReviewRequests review_decision review_notes\nWe don\u0026rsquo;t actually want the assistant to create or delete requests so the routes will look like:\nRails.application.routes.draw do resources :review_requests, only: [:index, :show, :edit, :update] resources :requests resources :users get 'landing/index' root 'landing#index' end  Now let\u0026rsquo;s create out command (since we will have many commands we will make a folder called commands):\nmkdir -p app/commands touch app/commands/review_request_command.rb class ReviewRequestCommand # Model and Attributes are BOTH needed to user Rails attributes in a Plain Ruby class include ActiveModel::Model include ActiveModel::Attributes include ActiveModel::AttributeAssignment # allows direct assignment `.assign_attributes` include ActiveModel::AttributeMethods # allows attribute prefixing, etc include ActiveModel::Conversion # provides: #to_model, #to_key, #to_param, and to_partial_path include ActiveModel::Dirty # needed to track changes include ActiveModel::Validations # allow at least request to be seen outside this model (to display above the form) attr_reader :params, :request # unless all attributes are in the accessor you will get # `undefined method `write_from_user' for nil:NilClass` with normal attribute assignment # although you can use @id = params[:id] instead attr_accessor :id, :reviewer_id, :review_decision, :review_notes, :review_decision_at, :reviewer # our attributes (these are the only things the form can access/submit) attribute :id, :integer attribute :reviewer, User attribute :reviewer_id, :integer attribute :review_notes, :string attribute :review_decision, :string attribute :review_decision_at, :datetime # our rewiewer validations validates :id, presence: true validates :reviewer_id, presence: true validates :review_decision, presence: true, inclusion: { in: %w[approved conditional declined], message: '%{value} is not a valid decision' } # a complex validation with logic validate :validate_review_notes # not needed but convenient def self.call(params = {}) new(params).run end def initialize(params = {}) @params = params # helps with debugging # get the request and pre-populate our attributes from there @request = Request.find(params[:id]) self.review_notes = @request.review_notes self.review_decision = @request.review_decision # set the attributes (incoming attributes overwrite those from the request) assign_attributes(params) end # what does the action def run request.reviewer_id = reviewer_id request.review_notes = review_notes request.review_decision = review_decision request.review_decision_at = review_decision_at # return errors if not valid return self unless valid? \u0026amp;\u0026amp; request.valid? \u0026amp;\u0026amp; request.save # if success updating the original request - then do our additional logic case request.review_decision when 'approved' puts 'notify parent of request' puts 'notify student of approval' else puts \u0026quot;notify student that the request is #{review_decision} because #{review_notes}\u0026quot; end self end # without this method path(object) doesn't work or you can just use path(id: object.id) instead def to_param id end # this must answer true for the form to use patch instead of post! def persisted? true end # rails 5.2 requires this to work with forms and dirty tracking # unfortunately, rails 5.2 can't self-discover its own attributes # without this you get: `undefined method `to_hash' for nil:NilClass` in the form def attributes { id: id, reviewer_id: reviewer_id, review_notes: review_notes, review_decision: review_decision, review_decision_at: review_decision_at, request: request } end alias_method :to_hash, :attributes private def validate_review_notes # don't report an error when the decision is 'approved' or decision is invalid return unless %w[conditional declined].include? review_decision return unless review_notes.blank? errors.add(:review_notes, 'is required when request is not approved') end end  Now you can test this Command in console:\nstudent = User.create(name: 'student', email: 'student@example.ch', role: 'student') reviewer = User.create(name: 'reviewer', email: 'reviewer@example.ch', role: 'reviewer') bill = User.create(name: 'bill', email: 'bill@example.ch', role: 'guardian') dean = User.create(name: 'dean', email: 'dean@example.ch', role: 'dean') request_good = Request.create(category: 'travel', description: 'reasonable', student: student) request_hmmm = Request.create(category: 'travel', description: 'questionable', student: student) request_nope = Request.create(category: 'travel', description: 'unreasonable', student: student) review = ReviewRequestCommand.new(id: request_good.id, reviewer_id: reviewer.id) review.valid? review.errors.messages request_good.reload # should be unchanged review = ReviewRequestCommand.call(id: request_good.id, reviewer_id: reviewer.id) review.valid? review.errors.messages request_good.reload # should be unchanged review = ReviewRequestCommand.call(id: request_good.id, reviewer_id: reviewer.id, review_decision: 'accepted') review.valid? review.errors.messages request_good.reload # SHOULD BE CHANGED  Adapt the Review Controller Basically we need to treat the command as the model and send in the reviewer and the proper params.\nclass ReviewRequestsController \u0026lt; ApplicationController def index @review_requests = Request.all end def edit @review_request = ReviewRequestCommand.new(command_params) end def update @review_request = ReviewRequestCommand.call review_request_params.merge(command_params) respond_to do |format| if @review_request.valid? format.html { redirect_to review_requests_url, notice: 'Review request was successfully updated.' } format.json { render :show, status: :ok, location: @review_request } else format.html { render :edit, status: :unprocessable_entity } format.json { render json: @review_request.errors, status: :unprocessable_entity } end end end private def command_params # {id: params[:id].to_i, reviewer_id: current_user.id} {id: params[:id].to_i, reviewer_id: current_user.id, reviewer: current_user} end # Only allow a list of trusted parameters through. def review_request_params params.require(:review_request_command) # must be the model name .permit(:review_decision, :review_notes) end def current_user User.where(role: %w[reviewer admin]).first end end  Adapting the View Form This next part is always tricky (rails likes working with Default models) \u0026ndash; the important thing is the form command needs the URL since the model is called review_request_command, but the route is called review_request_path\n if you get a url error that review_request_command_path doesn\u0026rsquo;t exist - check the form url if this form sends a POST be sure review_request.persisted? returns true! if the form returns the error: undefined method to_hash\u0026rsquo; for nil:NilClassin the form - be sure your attribute is returned inreview_request.attributes` if you get the error review_request wasn\u0026rsquo;t included, be sure you check the controller\u0026rsquo;s review_request_params method requires the review_request_command not review_request  \u0026lt;!-- app/views/review_requests/_form.html.erb --\u0026gt; \u0026lt;!-- add the url to the form and all should work :) --\u0026gt; \u0026lt;%= form_with(model: review_request, local: true, url: review_request_path(id: review_request.id)) do |form| %\u0026gt; \u0026lt;% if review_request.errors.any? %\u0026gt; \u0026lt;div id=\u0026quot;error_explanation\u0026quot;\u0026gt; \u0026lt;h2\u0026gt;\u0026lt;%= pluralize(review_request.errors.count, \u0026quot;error\u0026quot;) %\u0026gt; prohibited this review_request from being saved:\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;% review_request.errors.full_messages.each do |message| %\u0026gt; \u0026lt;li\u0026gt;\u0026lt;%= message %\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;div class=\u0026quot;field\u0026quot;\u0026gt; \u0026lt;%= form.label :review_decision %\u0026gt; \u0026lt;%= form.text_field :review_decision %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;field\u0026quot;\u0026gt; \u0026lt;%= form.label :review_notes %\u0026gt; \u0026lt;%= form.text_field :review_notes %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;actions\u0026quot;\u0026gt; \u0026lt;%= form.submit %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt;  Now you can have complex process logic isolated in your commands and all your models, controllers and views can be focused on their simple tasks.\nResources attributes allowed in non-ar models   https://github.com/rails/rails/issues/28020  Attribute Assignment methods   https://scottbartell.com/2020/01/30/set-attributes-in-active-record-rails-6/  Rails 5.2 Docs   https://api.rubyonrails.org/v5.2/  https://api.rubyonrails.org/v5.2.3/classes/ActiveModel/Type.html  https://api.rubyonrails.org/v5.2.3/classes/ActiveRecord/Type.html  https://api.rubyonrails.org/v5.2.3/classes/ActiveModel/Type/Value.html  https://api.rubyonrails.org/v5.2.3/classes/ActiveRecord/AttributeMethods/Read.html#method-i-read_attribute  https://api.rubyonrails.org/v5.2.3/classes/ActiveModel/Conversion.html  https://api.rubyonrails.org/v5.2.3/classes/ActiveModel/AttributeMethods.html  https://api.rubyonrails.org/v5.2.3/classes/ActiveModel/AttributeAssignment.html  https://api.rubyonrails.org/v5.2.3/classes/ActiveModel/Attributes/ClassMethods.html  https://api.rubyonrails.org/v5.2.3/classes/ActiveRecord/Aggregations/ClassMethods.html  https://api.rubyonrails.org/v5.2.3/classes/ActiveModel/Attributes/ClassMethods.html#method-i-attribute  default attribute types:   https://api.rubyonrails.org/v5.2.3/classes/ActiveModel/Type.html  https://github.com/rails/rails/tree/v6.0.2.1/activemodel/lib/active_model/type  book using PORO with attributes   https://products.arkency.com/domain-driven-rails  helpful blogs   https://boringrails.com/tips/rails-attributes-api  https://codeclimate.com/blog/7-ways-to-decompose-fat-activerecord-models/  https://api.rubyonrails.org/classes/ActiveRecord/Attributes/ClassMethods.html  https://boringrails.com/tips/rails-attributes-api  https://blog.dario-hamidi.de/a/rails-hidden-type-system  https://stuff-things.net/2015/07/21/validating-rails-forms-without-a-model/  custom Attribute types    https://metova.com/rails-5-attributes-api/\n   https://boringrails.com/tips/rails-attributes-api\n   https://jakeyesbeck.com/2015/12/20/rails-5-attributes/\n   https://oozou.com/blog/custom-attribute-types-in-rails-5-77\n   https://api.rubyonrails.org/v5.2.3/classes/ActiveModel/Type.html\n   https://api.rubyonrails.org/v5.2.3/classes/ActiveRecord/Type.html\n   https://api.rubyonrails.org/v5.2.3/classes/ActiveModel/Type/Value.html\n   https://jetrockets.com/blog/rails-5-attributes-api-value-objects-and-jsonb\n   https://dev.to/swanson/automatically-cast-params-with-the-rails-attributes-api-446a\n   https://api.rubyonrails.org/v5.2.3/classes/ActiveRecord/Aggregations/ClassMethods.html\n   https://edgeapi.rubyonrails.org/classes/ActiveRecord/Attributes/ClassMethods.html#method-i-attribute\n   https://metova.com/rails-5-attributes-api/\n   https://dev.to/swanson/automatically-cast-params-with-the-rails-attributes-api-446a\n   https://stackoverflow.com/questions/52711754/casting-to-custom-type-a-postgresql-array\n  Form_with   https://apidock.com/rails/ActionView/Helpers/FormHelper/form_with  https://stackoverflow.com/questions/43868976/rails-5-form-for-vs-form-with  https://stackoverflow.com/questions/5160733/ror-using-form-tag-without-an-ar-model  https://rubyinrails.com/2018/02/19/rails-form-with-alternative-to-form-for-and-form-tag/  Custom Attributes (when inherited from AcitiveModel) This is good with a \u0026rsquo;normal\u0026rsquo; active record model you can add \u0026lsquo;virtual\u0026rsquo; attributes - just for the form pages\n# app/attribute_types/squished_string.rb class SquishedString \u0026lt; ActiveRecord::Type::Value include ActiveModel::Type::Helpers::Mutable def type :squished_string end def cast(value) value.to_s.squish.strip end # def cast_value(value) # end # def deserialize(value) # end # def serialize(value) # end end  # config/initializers/attribute_types.rb # Not needed unless truely a new Datbase type # ActiveRecord::Type.register(:squished_string, SquishedString) # critical to define ActiveModel to use within the model ActiveModel::Type.register(:squished_string, SquishedString)  Custom Attributes (in PORO - not yet in Rails 5.2) Without access to attribute_type it seems this only works with Manual casting - without explict casting.\n@review_notes = TrimmedText.new.cast(\u0026rsquo; lots to say \u0026lsquo;) \u0026ldquo;lots to say\u0026rdquo;\nActiveModels have: #attribute_types \u0026amp; #attribute_names \u0026amp; #columns \u0026amp; #reflections (associations) - when a model has attribute types all works well as documented.\n[26] pry(Request):2\u0026gt; attribute_types =\u0026gt; {\u0026quot;id\u0026quot;=\u0026gt; #\u0026lt;ActiveModel::Type::Integer:0x00007f8382cf5b18 @limit=8, @precision=nil, @range=-9223372036854775808...9223372036854775808, @scale=nil\u0026gt;, \u0026quot;category\u0026quot;=\u0026gt;#\u0026lt;ActiveModel::Type::String:0x00007f8383c36be0 @limit=nil, @precision=nil, @scale=nil\u0026gt;, \u0026quot;description\u0026quot;=\u0026gt;#\u0026lt;ActiveRecord::Type::Text:0x00007f8382cf5708 @limit=nil, @precision=nil, @scale=nil\u0026gt;, \u0026quot;student_id\u0026quot;=\u0026gt; #\u0026lt;ActiveModel::Type::Integer:0x00007f8382cf5b18 @limit=8, @precision=nil, @range=-9223372036854775808...9223372036854775808, @scale=nil\u0026gt;, \u0026quot;created_at\u0026quot;=\u0026gt;#\u0026lt;ActiveRecord::ConnectionAdapters::PostgreSQL::OID::DateTime:0x00007f8383c35c68 @limit=nil, @precision=nil, @scale=nil\u0026gt;, \u0026quot;updated_at\u0026quot;=\u0026gt;#\u0026lt;ActiveRecord::ConnectionAdapters::PostgreSQL::OID::DateTime:0x00007f8383c35c68 @limit=nil, @precision=nil, @scale=nil\u0026gt;, \u0026quot;review_notes\u0026quot;=\u0026gt;#\u0026lt;ActiveRecord::Type::Text:0x00007f8382cf5708 @limit=nil, @precision=nil, @scale=nil\u0026gt;, \u0026quot;review_decision\u0026quot;=\u0026gt;#\u0026lt;ActiveModel::Type::String:0x00007f8383c36be0 @limit=nil, @precision=nil, @scale=nil\u0026gt;, \u0026quot;review_decision_at\u0026quot;=\u0026gt; #\u0026lt;ActiveRecord::ConnectionAdapters::PostgreSQL::OID::DateTime:0x00007f8383c35c68 @limit=nil, @precision=nil, @scale=nil\u0026gt;, \u0026quot;reviewer_id\u0026quot;=\u0026gt; #\u0026lt;ActiveModel::Type::Integer:0x00007f8382cf5b18 @limit=8, @precision=nil, @range=-9223372036854775808...9223372036854775808, @scale=nil\u0026gt;}  ","date":1648252620,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653177420,"objectID":"11aba2a4e22dc72e0ef7b95a89bbaaba","permalink":"https://btihen.me/post_ruby_rails/rails_5_2_command_objects_attributes/","publishdate":"2022-03-26T01:57:00+02:00","relpermalink":"/post_ruby_rails/rails_5_2_command_objects_attributes/","section":"post_ruby_rails","summary":"In a complex application validations, models, controllers can quickly get complex - command objects can simplify this - especially as of Rails 5.2","tags":["Rails","Command-Object","Validations","Attributes","Simplify Complexity"],"title":"Rails 5.2 - Command Objects and PORO Attributes","type":"post_ruby_rails"},{"authors":["Bill Tihen"],"categories":[],"content":"update GEMS library gem update \u0026ndash;system\nbe sure bundler is installed gem install bundler\nupdate Bundler library bundle update \u0026ndash;bundler\nupdate Ruby rbenv install 3.1.1 rbenv global 3.1.1\nor asdf install ruby 3.1.1 asdf global ruby 3.1.1\nbe sure you have rails for your ruby version gem install rails # or ensure version 7.0 using gem install rails --version 7.0.0  Rails with esbuild \u0026amp; css The options:\n -T - does not install mini-tests (I like rspec) -j esbuild - is the middle ground between using webpacker and import-maps --css bulma - install a css framwork (bulma, tailwind, bootstrap, sass, postcss)   # default rails (using importmaps) # rails new slacker_base # or Bulma rails new slacker_bulma -j esbuild -T --css bulma # with Tailwind # rails new slacker_tail -j esbuild -T --css tailwind cd slacker  install richtext editor This will also install StimulusJS and ActiveStorage and ActionText altogether\n./bin/rails action_text:install  otherwise you can install them separately:\nActiveStorage\nbin/rails active_storage:install  Stimulus\n./bin/bundle add stimulus-rails ./bin/bundle install ./bin/rails stimulus:install  Hotwire if you initially used --skip-hotwire and now want it - type:\n./bin/bundle add turbo-rails ./bin/bundle install ./bin/rails turbo:install ./bin/rails turbo:install:redis  Additional Tooling copy the following into your Gemfile:\ncat \u0026lt;\u0026lt;EOF \u0026gt;\u0026gt;Gemfile group :test do gem 'shoulda-matchers' #, '~\u0026gt; 5.0' end # allow rspec with feature tests and group :development, :test do gem 'factory_bot_rails' gem 'rspec-rails' gem 'capybara' gem 'launchy' gem 'faker' # coverage gem 'simplecov' # security checks gem 'brakeman' # debugging # gem 'pry' gem 'pry-rails' # stack, up, down, frame n gem 'pry-stack_explorer' #, '~\u0026gt; 0.6.0' # standards # gem 'standard', require: false gem 'rubocop-rails', require: false # sw quality checks # gem 'skunk' # gem 'circle-cli' # gem 'rubycritic', require: false # uses virtus - discontinued ! end EOF  Configure Testing bin/rails g rspec:install  Setup Configuation at the top of the spec/rails_helper.rb be sure to have:\nrequire 'capybara/rails' require 'simplecov' SimpleCov.start  at the bottom of spec/rails helper add:\ncat \u0026lt;\u0026lt;EOF \u0026gt;\u0026gt;spec/rails_helper.rb Shoulda::Matchers.configure do |config| config.integrate do |with| with.test_framework :rspec with.library :rails end end EOF  Setup the Database bin/rails db:drop bin/rails db:create bin/rails db:migrate bin/rails db:seed  Login Management (as needed): Devise is commonly used for login user management\nbundle add devise bundle install rails g devise:install  **Follow the instruction on printed on the screen or use ( https://guides.railsgirls.com/devise)\nSetup App Structure Lets build a landing page\nbin/rails g controller landing index  update the routes\n# config/routes.rb Rails.application.routes.draw do get 'landing/index' # Defines the root path route (\u0026quot;/\u0026quot;) root \u0026quot;landing#index\u0026quot; end  Start Rails (dev-mode) In watchmode - like we are accustom\n./bin/dev\nother options are:\n foreman start -f Procfile.dev bin/rails s and yarn build --watch in separate windows  Experiments to Explore Packwerk StimulusJS view components HotWire (Turbo) ","date":1647040800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1647040800,"objectID":"9178a592154f73e8d6951c904d3ccc27","permalink":"https://btihen.me/post_ruby_rails/rails_7_0_base_setup/","publishdate":"2022-03-12T01:20:00+02:00","relpermalink":"/post_ruby_rails/rails_7_0_base_setup/","section":"post_ruby_rails","summary":"update GEMS library gem update \u0026ndash;system\nbe sure bundler is installed gem install bundler\nupdate Bundler library bundle update \u0026ndash;bundler\nupdate Ruby rbenv install 3.1.1 rbenv global 3.1.1\nor asdf install ruby 3.","tags":["rails","install","setup"],"title":"Rails 7.0 Base Setup","type":"post_ruby_rails"},{"authors":["Bill Tihen"],"categories":[],"content":"Overview I have often wanted to build websites using as much of my Rails knowledge as possible. Now I can!\nEnter Bridgetown - https://edge.bridgetownrb.com/docs\nA ruby based (erb, components, etc), author-friendly (markdown pages).\nThe newest version 1.0 beta uses esbuild by default (or webpacker) and has several pre-build deploy configurations and a quick and easy way to install TailwindCSS!\nUnfortunately, for some reason I found it a bit hard to assemble the information to create a website that would meet my needs and interests. So this doc is a quick summary and context that will get you through the next step after getting started. My understanding is now that are 3 added aspects\n (bundled configurations)[https://www.bridgetownrb.com/docs/bundled-configurations] are for tool-chain setup, like deployment configs, tailwindcss, stimulusJS, etc. And Plugins are for things that will show-up in the output html like SEO Tags, Sitemaps, etc. (automations)[https://www.bridgetownrb.com/docs/automations] An automation script is nothing more than a Ruby code file run in the context of an instance Unfortunately, I still struggle to find the parts I am looking for, so I am adding the links here (to help my future self).  Bridgetown Basics Almost everything you will do to generate a website will be done in src folder\n Resource - a file that will generate a webpage Front Mater - meta info - located at the top of a \u0026lsquo;resource\u0026rsquo; file and is used to assist in webpage generation. This information is to be used directly in association with this one webpage Collection - a group of resources that belong together (and can generate a centralized list). This MUST be located in a folder that starts with an _, for example: src/_posts Permalink - the way to define the URL for a \u0026lsquo;resource\u0026rsquo; - this is important if you are transferring a website to bridgetown and want to keep the urls the same Data Files - must be located in src/_data - they define centralized data/information \u0026amp; variables across the entire-webste - options include: YAML, JSON, CSV, TSV \u0026amp; .rb files. Thes are accessed with site.data Static Files - files that do not contain any front matter. These include images, PDFs, and other un-rendered content. Static files can be searched and accessed in templates with site.static_files Prototype Pages - requires that pagination is enabled. Prototypes lets you create automatically generated, paginated archives of your content filtered by the search terms you provide. Often used to create the related content links to tag pages. Templates - this is the system used in your layouts and components (you can choose between liquid, erb and serbea) - I\u0026rsquo;ll stick with erb since that is familiar Layouts - templates that define how your resource will look. You have full access to the front matter of the resource, ie resource.data.title is the title in the front-matter section of the resource. The default looks like:  \u0026lt;!-- src/_layouts/default.erb --\u0026gt; \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;\u0026lt;%= site.locale %\u0026gt;\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;%= render \u0026quot;head\u0026quot;, metadata: site.metadata, title: resource.data.title %\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body class=\u0026quot;\u0026lt;%= resource.data.layout %\u0026gt; \u0026lt;%= resource.data.page_class %\u0026gt;\u0026quot;\u0026gt; \u0026lt;%= render Shared::Navbar.new(metadata: site.metadata, resource: resource) %\u0026gt; \u0026lt;main\u0026gt; \u0026lt;%= yield %\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;%= render \u0026quot;footer\u0026quot;, metadata: site.metadata %\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Partials - these are usually things like the header and footer and are used within layout pages (same concept as in rails and use the render call in the above example for default.erb. This folder starts with the html head (html language, seo info, etc) and footer are located. Components - collection of reusable web-components. Here you can include CSS \u0026amp; JavaScript files alongside the rb and erb files - for example (the default starts with src/_components/shared/navbar.rb and src/_components/shared/navbar.erb) - I believe JS and CSS are scoped to the component class defined in the .rb file:  ├── src │ ├── _components │ │ ├── shared │ │ │ ├── navbar.erb │ │ │ ├── navbar.js │ │ │ ├── navbar.rb │ │ │ └── navbar.scss   templates - the language used within the layout (defined by the file extension) - the site default can be configured bundled configurations - bridgetown has some important configurations that are automated plugins - these extend bridgetown\u0026rsquo;s feature set.  Create a Site I listened to the interview about Bridgetown on (Remote Ruby Podcast)[https://remoteruby.transistor.fm/169] so I went and checked it out. Starting with the (Beta Docs)[https://edge.bridgetownrb.com/docs] - as it has a TailwindCSS installer and lots of excellent deployment setups (in particular Render and Netlify - although I would find Fly.io also interesting)\nSo I started by downloading the gem:\ngem install bridgetown # gem install bridgetown -N -v 1.0.0  I decided to configure it with the erb but you can leave off -t erb and use liquid or change erb for serbea templates. Anyway, I created a new project with erb using:\n# simple no options bridgetown new bridge_tail_site # it is easier to start with much of the site configured using the options bridgetown new bridge_tail_site -t erb -c tailwindcss,netlify,stimulus cd bridge_tail_site  Running Bridgetown in dev-mode (it uses port 4000 - http://localhost:4000)\nbin/bridgetown start  Creation Explained There are 3 main parts to creation and configuration of a bridgetown site:\n template system - which language is used to process resources (the default is set using the -t flag) bundled configuration - these are important configurations like JS, deployement config and can added with the -c flag or later with the bin/bridgetown configure [config_name]  Template System (-t options)\n https://www.bridgetownrb.com/docs/template-engines\nOptions include:\n liquid (default) erb (rails default) serbea haml (not configured as site default) slim (not configured as site default)  this option sets up the default and generators, but at anytime you can use any of the templates by simpling providing the correct extension on the file and Bridgetown will know how to use the file\nConfigure Bridgetown (-c options)\n https://www.bridgetownrb.com/docs/bundled-configurations#netlify-toml-configuration\nJS \u0026amp; Testing Options\n turbo (includes websockets) stimulus (stimulusjs) minitesting cypress  Deploy config options\n render netlify vercel gh-pages  if run after the install use:\nbin/bridgetown configure netlify  CSS Config options include:\n tailwindcss (which also installs postcss and purgecss) postcss purgecss bulma (may be coming)  Installing TailwindCSS it was straightforward - once I found the right area. Follow the instructions at https://www.bridgetownrb.com/docs/bundled-configurations#tailwindcss.\nbin/bridgetown configure tailwindcss  Plugins - can only be done AFTER the new commands. I\u0026rsquo;ve added these here since I got confused with all the setup options and there is no other clear section to add these.\n https://www.bridgetownrb.com/plugins\nOptions include:\n bridgetown-sitemap - https://github.com/ayushn21/bridgetown-sitemap bridgetown-seo-tag - https://github.com/bridgetownrb/bridgetown-seo-tag bridgetown-minify-html - https://github.com/bt-rb/bridgetown-minify-html bridgetown-svg-inliner - https://github.com/ayushn21/bridgetown-svg-inliner bridgetown-quick-search - https://github.com/bridgetownrb/bridgetown-quick-search bridgetown-view-component - https://github.com/bridgetownrb/bridgetown-view-component bridgetown-media-transformation - https://github.com/julianrubisch/bridgetown-media-transformation  Installation looks like:\nbundle add bridgetown-media-transformation -g bridgetown_plugins  Configure with AlpineJS Espescially useful if not using stimulus\nIt looked good - so I went on to install AlpineJS (using the embedded script method) at https://alpinejs.dev/essentials/installation - so I went to src/_partials/_head.erb and added \u0026lt;script defer src=\u0026quot;https://unpkg.com/alpinejs@3.9.0/dist/cdn.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; just before the live_reload_dev_js tag:\n\u0026lt;!-- src/_partials/_head.erb --\u0026gt; ... \u0026lt;!-- AlpineJS script tag--\u0026gt; \u0026lt;script defer src=\u0026quot;https://unpkg.com/alpinejs@3.9.0/dist/cdn.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;%= live_reload_dev_js %\u0026gt;  Then I went to the page src/_components/shared/navbar.erb to add an example from (AlpineJS Start-here page)[https://alpinejs.dev/start-here]\n\u0026lt;div x-data=\u0026quot;{ count: 0 }\u0026quot;\u0026gt; \u0026lt;button x-on:click=\u0026quot;count++\u0026quot; class=\u0026quot;bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\u0026quot;\u0026gt; Increment \u0026lt;/button\u0026gt; \u0026lt;span x-text=\u0026quot;count\u0026quot;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt;  Cool this works! So I went and created my navbar and footer.\nAdding a Custom Font (in CSS) We will add the handlee font as it is distinctive and easy to see that it works (or not). Let\u0026rsquo;s get it from (Google Webfonts Helper)[https://google-webfonts-helper.herokuapp.com/fonts/handlee?subsets=latin] site. This is a convenient site as it has both the font and the CSS needed.\nNow that you\u0026rsquo;ve downloaded the font, create a new folder in the frontend folder and copy the font into it:\nmkdir -p frontend/fonts/handlee cp ~/Downloads/handlee-v12-latin/* frontend/fonts/handlee/.  Now grab the CSS from the Google Webfonts Helper site and copy it into the frontend/styles/index.css file (I like to put the font css just below the tailwind imports). So the start of index.css looks like:\n/* frontend/styles/index.css */ /* triggers frontend rebuilds */ @import \u0026quot;jit-refresh.css\u0026quot;; /* Set up Tailwind imports */ @tailwind base; @tailwind components; @tailwind utilities; /* Import Fonts */ @font-face { font-family: 'Handlee'; font-style: normal; font-weight: 400; src: local(''), url('../fonts/handlee/handlee-v12-latin-regular.woff2') format('woff2'), url('../fonts/handlee/handlee-v12-latin-regular.woff') format('woff'); } /* ... */  Now within your CSS definitions you can use: font-family: 'Handlee';\nLet\u0026rsquo;s try it out - let\u0026rsquo;s add that to the h1 definition in the index.css file - so now that would look like:\n/* ... */ h1 { margin: 1rem 0 3rem; text-align: center; font-weight: 900; font-size: 2.5rem; font-family: 'Handlee'; color: var(--heading-color); line-height: 1.2; } /* ... */  Be sure the Title of your homepage is now using the \u0026lsquo;Handlee\u0026rsquo; font.\nAdding a Custom Font (into TailwindCSS) Now we need to define this font within TailwindCSS config to have it create a font-handlee class so we can use this font within our tailwind class definitions. To do this we will need to update the tailwind.config.js file to look like:\nmodule.exports = { content: [ './src/**/*.{html,md,liquid,erb,serb}', './frontend/javascript/**/*.js', ], theme: { extend: { fontFamily: { handlee: ['Handlee'] }, }, }, plugins: [], }  Let\u0026rsquo;s update the default layout to use Handlee for the text within the main body. So lets open src/_layouts/default.erb and change the main tag to have the class=\u0026quot;font-handlee\u0026quot; in it - so now it might look like:\n\u0026lt;!-- ... --\u0026gt; \u0026lt;main class=\u0026quot;font-hand\u0026quot;\u0026gt; \u0026lt;%= yield %\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;!-- ... --\u0026gt;  Now both the Title and Body of each page should be using the Handlee font.\nAdding a new Top-Level Page Let\u0026rsquo;s add a contact page:\nmkdir src/_pages cat \u0026lt;\u0026lt;EOF\u0026gt;\u0026gt; src/_pages/contact.md --- layout: page title: Contact --- \u0026lt;h1\u0026gt;Contact Me\u0026lt;/h1\u0026gt; EOF  Now if you go to: http://localhost:4000/contact you should see your new page.\nFor tidiness I prefer to have:\n index.md posts.md about.md  all in the src/_pages folder\nAdding an Image So to add an image we need to put it in the src/images folder:\nmkdir -p /images/posts/welcome_post cp ~/Desktop/sunrise.jpeg /images/posts/welcome_post/.  Now let\u0026rsquo;s test this in our navbar file src/_components/shared/navbar.erb:\n\u0026lt;header\u0026gt; \u0026lt;%# \u0026lt;img src=\u0026quot;/images/logo.svg\u0026quot; alt=\u0026quot;Logo\u0026quot; /\u0026gt; %\u0026gt; \u0026lt;img src=\u0026quot;/images/posts/welcome/sunrise.jpeg\u0026quot; alt=\u0026quot;Sunrise\u0026quot; /\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;!-- ... --\u0026gt;  Bridgetown uses Kramdown as the Markdown rendering engine. You can learn more about Kramdown Markdown at: https://kramdown.gettalong.org/quickref.html\nLet\u0026rsquo;s also add it in our sample blog post src/_posts/2022-03-05-welcome-to-bridgetown.md:\n--- layout: post title: \u0026quot;Your First Post on Bridgetown\u0026quot; date: 2022-03-05 23:22:30 +0100 categories: updates --- **Display our image!** ![Sunrise](/images/posts/welcome/sunrise.jpeg) _Now on to the post_ You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `bridgetown serve`, which launches a web server and auto-regenerates your site when a file is updated. ...  Hopefully you see the image:\n once on the page http://localhost:4000/ twice on the page http://localhost:4000/updates/2022/03/05/welcome-to-bridgetown/  New post A new page within a dated collection.\nWe just need to make a new file with the correct headers.\ntouch src/_posts/playing_with_bridgetown.md cat \u0026lt;\u0026lt;EOF\u0026gt;\u0026gt;src/_posts/playing_with_bridgetown.md --- layout: post title: \u0026quot;Fun with Bridgetown\u0026quot; date: 2022-03-07 01:01:01 +0100 categories: ruby --- ## Fun is Rewarding EOF  Now if you go to: http://localhost:4000/posts your new page\u0026rsquo;s title should be listed and if you click on it\u0026rsquo;s title you should see the page with the URL: http://localhost:4000/ruby/2022/03/07/playing_with_bridgetown/ - the category is the first part of the url, then the date, and finally the title.\nControlling the URLs (permalinks) This is important since you are likely to need to use specific URLs (in my case, I want the new site to have the same urls as the old site). This is documented at: https://www.bridgetownrb.com/docs/content/permalinks\nThere are several default url formats - I will show you a simple override - using the predefined variables.\nfirst go to bridgetown.config.yml and add to the following to end of the file:\ncollections: posts: permalink: /blogs/:categories/:name/  \u0026lsquo;slug\u0026rsquo; is basically the file-name \u0026amp; categories is defined in the\nAfter changing bridgetown.config.yml you MUST stop bridgetown ^c and start it again bin/bridgetown start!\nnow if you go back to http://localhost:4000/posts and click on the link for the new post:\n you should get the url: http://localhost:4000/blogs/ruby/playing_with_bridgetown/ instead of the (pretty) url: http://localhost:4000/ruby/2022/03/07/playing_with_bridgetown/  Define a New Collections Lets assume in addition to publishing your blog - you also want to publish your future presentations and past slides.\nwe will start by defining the new collection \u0026rsquo;talks\u0026rsquo; in the bridgetown.config.yml file - so now the end of the file should look like:\n# bridgetown.config.yml # ... collections: posts: permalink: /blogs/:categories/:slug/ talks: output: true future: true sort_by: date sort_direction: descending permalink: /presentations/:categories/:slug/   \u0026lsquo;output\u0026rsquo; seems to be required for custom collections (I guess this allows a category to be turned on or offs) \u0026lsquo;future\u0026rsquo; true means that if the front-matter has a future date - it will be published anyway \u0026lsquo;sort_by\u0026rsquo; allows you to pick a front-matter key and sort by it \u0026lsquo;sort_direction\u0026rsquo; is pretty clear - ascending or descending are the two choices  Now we can create our layout for the new collection:\ncat \u0026lt;\u0026lt;EOF\u0026gt;\u0026gt; src/_layouts/talks.erb --- layout: default --- \u0026lt;h1\u0026gt;\u0026lt;big\u0026gt;TALK Title:\u0026lt;/big\u0026gt; \u0026lt;%= resource.data.title %\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;\u0026lt;big\u0026gt;Topic:\u0026lt;/big\u0026gt; \u0026lt;%= resource.data.categories %\u0026gt;\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;\u0026lt;big\u0026gt;Date:\u0026lt;/big\u0026gt; \u0026lt;%= resource.data.date %\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;%= yield %\u0026gt; EOF  This layout loads the default layout and for each talk we will have the \u0026rsquo;title\u0026rsquo;, \u0026rsquo;topic\u0026rsquo; and \u0026lsquo;date\u0026rsquo;!\nNow we will need the index page for this collection that will list all the talks:\ncat \u0026lt;\u0026lt;EOF\u0026gt;\u0026gt; src/_pages/talks.md --- layout: talks title: My Presentations --- \u0026lt;ul\u0026gt; \u0026lt;% collections.talks.resources.each do |talk| %\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;\u0026lt;%= talk.relative_url %\u0026gt;\u0026quot;\u0026gt;\u0026lt;%= talk.data.title %\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/ul\u0026gt; If you like a talk, please tweet about it. EOF  Now of course we will need to create a talk page (with a publication date in the past):\ncat \u0026lt;\u0026lt;EOF\u0026gt;\u0026gt;src/_talks/collection_intro.me --- layout: talks title: \u0026quot;Introduction to Bridgetown Collections\u0026quot; date: 2022-03-05 23:22:30 +0100 categories: websites --- Learning about collections - in case you want more than simple posts  Lets start Bridgetwn and be sure that worked\nNow lets advertise a future talk:\ncat \u0026lt;\u0026lt;EOF\u0026gt;\u0026gt;src/_talks/future-collections.me --- layout: talks title: \u0026quot;The Future Bridgetown\u0026quot; date: 2222-22-22 22:22:22 +0100 draft: true categories: websites --- The future looks promising  we should now see 2 talks listed at; http://localhost:4000/talks\nCreate a Draft Post Without being able to use a future Date - we can simply add \u0026lt;% next if blog.data.draft %\u0026gt; to our index page\n--- layout: blog title: Ruby Blogs --- \u0026lt;ul\u0026gt; \u0026lt;% collections.ruby_blogs.resources.each do |blog| %\u0026gt; \u0026lt;% next if blog.data.draft %\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;\u0026lt;%= blog.relative_url %\u0026gt;\u0026quot;\u0026gt;\u0026lt;%= blog.data.title %\u0026gt;-\u0026lt;%= blog.data.draft %\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/ul\u0026gt;  now it should skip any file with draft: true\nprototypes - Similar Talks  https://edge.bridgetownrb.com/docs/prototype-pages#searching-in-collections\nYou\u0026rsquo;ve probably seen a section on many webpages with \u0026lsquo;similar\u0026rsquo; articles (which lists articles with the same tag or category) - let\u0026rsquo;s set that up for talks.\nFirst make a few talks with tags and categories.\nNow lets create the pages to define our \u0026lsquo;similar\u0026rsquo; talks:\nmkdir -p src/talks/categories cat\u0026lt;\u0026lt;EOF\u0026gt;src/talks/categories/categories.html --- title: Talks about :prototype-term-titleize prototype: term: categories collection: talks --- EOF mkdir -p src/talks/tags cat\u0026lt;\u0026lt;EOF\u0026gt;src/talks/tags/tag.html --- title: Talks about :prototype-term-titleize prototype: term: tag collection: talks --- EOF  Pagination  https://www.bridgetownrb.com/docs/prototype-pages\nThis required pagination is enabled ( https://www.bridgetownrb.com/docs/content/pagination/)\nDeploy Let\u0026rsquo;s now deploy this Webpage (using the configure command) it is very straightforward!\n First, be sure you have pushed your project to github or gitlab - create the repo online and push it with:  git add . git commit -m \u0026quot;Configured w TailwindCSS and Handlee Font\u0026quot; git remote add origin git@github.com:gitusername/bridge_tail_site.git git branch -M main git push -u origin main   Second, install the config for your deploy service (in this case netlify) by typing:  bundle exec bridgetown configure netlify git add bin/netlify.sh netlify.toml git commit -m \u0026quot;add netlify config\u0026quot; git push  Third, connect your netlify account to the repo you just created. Four, click deploy within the netlify site (if it hasn\u0026rsquo;t already startet) and wait 5-10 mins (yes its kinda slow to deploy) and you should have your new website!  Woo Hoo.\nWhat didn\u0026rsquo;t work (yet!) Bridgetown File Routing Let\u0026rsquo;s try the new File Routing feature described at: https://edge.bridgetownrb.com/docs/routes\nFirst update the Gemfile - uncomment: gem \u0026quot;bridgetown-routes\u0026quot;, \u0026quot;~\u0026gt; 1.0.0.beta3\u0026quot;, group: :bridgetown_plugins - now it should look similar to:\n# Gemfile source \u0026quot;https://rubygems.org\u0026quot; git_source(:github) { |repo| \u0026quot;https://github.com/#{repo}.git\u0026quot; } gem \u0026quot;bridgetown\u0026quot;, \u0026quot;~\u0026gt; 1.0.0.beta3\u0026quot; # Uncomment to add file-based dynamic routing to your project: gem \u0026quot;bridgetown-routes\u0026quot;, \u0026quot;~\u0026gt; 1.0.0.beta3\u0026quot;, group: :bridgetown_plugins gem \u0026quot;puma\u0026quot;, \u0026quot;~\u0026gt; 5.5\u0026quot;  Now we need to run bundler:\nbundle install  Now setup the Roda config server/roda_app.rb:\n# server/roda_app.rb require \u0026quot;bridgetown-routes\u0026quot; class RodaApp \u0026lt; Bridgetown::Rack::Roda # Uncomment to use Bridgetown SSR: # plugin :bridgetown_ssr # And optionally file-based routing: plugin :bridgetown_routes route do |r| # Load Roda routes in server/routes (and src/_routes via `bridgetown-routes`) Bridgetown::Rack::Routes.start! self end end  Now lets add:\n# ./server/routes/preview.rb class Routes::Preview \u0026lt; Bridgetown::Rack::Routes route do |r| r.on \u0026quot;preview\u0026quot; do # Our special rendering pathway to preview a page # route: /preview/:collection/:path r.get String, String do |collection, path| item = Bridgetown::Model::Base.find(\u0026quot;repo://#{collection}/#{path}\u0026quot;) unless item.content.present? next Bridgetown::Model::Base.find(\u0026quot;repo://pages/_pages/404.html\u0026quot;) .render_as_resource .output end item .render_as_resource .output end end end end  Now lets make an index page for this route:\nmkdir -p src/_routes/items cat \u0026lt;\u0026lt;EOF\u0026gt;src/_routes/items/index.erb ---\u0026lt;% # route: /items r.get do render_with data: { layout: :page, title: \u0026quot;Dynamic Items\u0026quot;, items: [ { number: 1, slug: \u0026quot;123-abc\u0026quot; }, { number: 2, slug: \u0026quot;456-def\u0026quot; }, { number: 3, slug: \u0026quot;789-xyz\u0026quot; }, ] } end %\u0026gt;--- \u0026lt;ul\u0026gt; \u0026lt;% resource.data.items.each do |item| %\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;/items/\u0026lt;%= item[:slug] %\u0026gt;\u0026quot;\u0026gt;Item #\u0026lt;%= item[:number] %\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/ul\u0026gt; EOF  Now lets create the template for items:\ncat \u0026lt;\u0026lt;EOF\u0026gt;\u0026gt;src/_routes/items/[slug].erb ---\u0026lt;% # route: /items/:slug r.get do item_id, *item_sku = r.params[:slug].split(\u0026quot;-\u0026quot;) item_sku = item_sku.join(\u0026quot;-\u0026quot;) render_with data: { layout: :page, title: \u0026quot;Item Page\u0026quot;, item_id: item_id, item_sku: item_sku } end %\u0026gt;--- \u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Item ID:\u0026lt;/strong\u0026gt; \u0026lt;%= resource.data.item_id %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Item SKU:\u0026lt;/strong\u0026gt; \u0026lt;%= resource.data.item_sku %\u0026gt;\u0026lt;/p\u0026gt; EOF  AlpineJS installed as a module Not a show stopper but irritates me.\nI tried using the Bridgetown Javascript install instructions at: https://www.bridgetownrb.com/docs/frontend-assets#javascript \u0026amp; also the AlpineJS instructions at: https://alpinejs.dev/essentials/installation#as-a-module\nI am hoping to install AlpineJS as an imported module (so building isn\u0026rsquo;t depending on a web-connection and the code needed is local). So I tried removing the AplineJS script tag from the header:\n\u0026lt;!-- src/_partials/_head.erb --\u0026gt; ... \u0026lt;!-- AlpineJS script tag--\u0026gt; \u0026lt;%# \u0026lt;script defer src=\u0026quot;https://unpkg.com/alpinejs@3.9.0/dist/cdn.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; %\u0026gt; \u0026lt;%= live_reload_dev_js %\u0026gt;  Then installing alpinejs\nyarn add alpinejs  and I confirmed that I see the AlpineJS in the node_modules folder.\nThen I import and start AlpineJS in frontend/javascript/index.js so it looked like:\n// frontend/javascript/index.js import \u0026quot;index.css\u0026quot; import Alpine from 'alpinejs' // Import all JavaScript \u0026amp; CSS files from src/_components import components from \u0026quot;bridgetownComponents/**/*.{js,jsx,js.rb,css}\u0026quot; console.info(\u0026quot;Bridgetown is loaded!\u0026quot;) window.Alpine = Alpine Alpine.start()  But unfortunately, this doesn\u0026rsquo;t work :( If you know how to make it work, I\u0026rsquo;ll be glad to update this document.\nI have also created a github discussion to hopefully help: https://github.com/bridgetownrb/bridgetown/discussions/506\nFeature still to explore Add a Custom Font\nBundle Configs\n Setup for purging css: (bundle exec bridgetown configure purgecss) - https://www.bridgetownrb.com/docs/bundled-configurations#purgecss-post-build-hook - installed by default with Tailwind Rails Default JS - (bundle exec bridgetown configure stimulus) - https://www.bridgetownrb.com/docs/bundled-configurations#stimulus Rails Turbo features: (bundle exec bridgetown configure turbo) - https://www.bridgetownrb.com/docs/bundled-configurations#turbo Animation Transitions: (bundle exec bridgetown configure swup) - https://www.bridgetownrb.com/docs/bundled-configurations#swupjs-page-transitions  Automations\n Bulma Configured Site: (bundle exec bridgetown apply https://github.com/whitefusionhq/bulmatown) Cloudinary Configuration: (bundle exec bridgetown apply https://github.com/bridgetownrb/bridgetown-cloudinary) Netlify Configuration: (bundle exec bridgetown apply https://github.com/bridgetownrb/automations/netlify.rb) - how is this different from Netlify bundle configure?  Testing\n MiniTests: (bundle exec bridgetown configure minitesting) - https://www.bridgetownrb.com/docs/testing#use-ruby-and-minitest-to-test-html-directly Cypres JS Testing: (bundle exec bridgetown apply https://github.com/ParamagicDev/bridgetown-automation-cypress)  Plugins\n SEO Tags (bundle add bridgetown-seo-tag -g bridgetown_plugins): https://github.com/bridgetownrb/bridgetown-seo-tag Atom Feed (bundle add bridgetown-feed -g bridgetown_plugins): https://github.com/bridgetownrb/bridgetown-feed SVG in HTML inline (bundle add \u0026ldquo;bridgetown-svg-inliner\u0026rdquo; -g bridgetown_plugins): https://github.com/ayushn21/bridgetown-svg-inliner Liquid QuickSearch (bundle add bridgetown-quick-search -g bridgetown_plugins): https://github.com/bridgetownrb/bridgetown-quick-search Add a SiteMap (bundle add bridgetown-sitemap -g bridgetown_plugins): https://github.com/ayushn21/bridgetown-sitemap Markdown JS (bundle add bridgetown-mdjs -g bridgetown_plugins): https://github.com/bridgetownrb/bridgetown-mdjs HTML Minify (bundle add bridgetown-minify-html -g bridgetown_plugins): https://github.com/bt-rb/bridgetown-minify-html Github ViewComponents (bundle add bridgetown-view-component -g bridgetown_plugins): https://github.com/bridgetownrb/bridgetown-view-component \u0026ndash; but the docs are here: https://www.bridgetownrb.com/docs/components/ruby#need-compatibility-with-rails-try-viewcomponent-experimental GraphQL Api for Bridgetown (bundle add graphtown -g bridgetown_plugins): https://github.com/whitefusionhq/graphtown Bulma Starter (bundle exec bridgetown apply https://github.com/whitefusionhq/bulmatown): https://github.com/whitefusionhq/bulmatown (something went wrong on my first try - and don\u0026rsquo;t use this with tailwindcss :)  Content Management Plugins\n Notable MD Editor (bundle add bridgetown-notable -g bridgetown_plugins): https://github.com/jamie/bridgetown-notable Prismic Flat CMS (bin/bridgetown apply https://github.com/bridgetownrb/bridgetown-prismic): https://github.com/bridgetownrb/bridgetown-prismic  Conclusion This looks promising for people familiar with Rails, we will see how it competes with Astro and the other JAMF Stacks for the general public.\nSo far, the only downsides have been:\n I am not sure I fully understand the logic of 3 added aspects of additional features - for example why is there a netlify automation and bundle config? I have only been able to install AlpineJS as a weblink and not as an included module (If I figure it out I\u0026rsquo;ll update this document and or make a configuration script) - maybe I just need to learn into StimulusJS. I would like to use Fly.io too (if I figure it out I\u0026rsquo;ll write a configuration script)  Apparently, Vue, React, Bulma plugin-configuations are comming too. As well as workflows and deployment for github and gitlab. This should be interesting and fun.\n","date":1646438220,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1647129420,"objectID":"6c862d0ba8c4e500dd5fec3170bdc469","permalink":"https://btihen.me/post_ruby_rails/bridgetown_1_x_ruby_static_stite_orientation/","publishdate":"2022-03-05T01:57:00+02:00","relpermalink":"/post_ruby_rails/bridgetown_1_x_ruby_static_stite_orientation/","section":"post_ruby_rails","summary":"A fun and straightforward way to build static sites using your Ruby \u0026 Rails knowledge","tags":["Ruby","ERB","Static Site","Bridgetown"],"title":"Bridgetown 1.0 - Ruby Static-Site Orientation","type":"post_ruby_rails"},{"authors":["Bill Tihen","Paul Magnuson"],"categories":[],"content":"Collaboration leads to good things! When Bill (IT and education) and Paul (education and summer camp) began informing their teaching with Agile, a fresh take on some common educational practices emerged. Together they looked with outsider/insider perspectives at collaboration, exploration, student agency, and doing school in uplifting ways.\nWhat emerged is (EDgility)[https://edgility.school], a set of practices anyone can use to nudge their teaching in the direction of greater student engagement, shared control of decision making, and practice of highly transferable skills. Bill and Paul discuss how they arrived at the practices of EDgility, using an example of one of Bill’s middle school classes, a STEM class on nautical design, what the school referred to as “the boat class.”\nWe think you’ll enjoy the practical advice, based on a real world example, to strengthen your ability to shift learning to the learner, where it belongs.\n https://www.link-conference.org/team/bill-tihen/\n","date":1646352000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646352000,"objectID":"216ead51529246f3ba1469f11f7e439a","permalink":"https://btihen.me/publication/balkan_education_summit_2022_edgility_talk/","publishdate":"2022-03-04T01:03:26+02:00","relpermalink":"/publication/balkan_education_summit_2022_edgility_talk/","section":"publication","summary":"As part of the ECIS Leadership Conference - April 2020, Guide and Lead Managing Partner, Tim Logan gives an overview of the importance of agility in building schools as life-affirming 21st century organizations.","tags":["Agile","Education","EDgility"],"title":"EDgility - Encouraging Agency and Collaboration","type":"publication"},{"authors":["Bill Tihen","Paul Magnuson"],"categories":[],"content":"Collaboration leads to good things! When Bill (IT and education) and Paul (education and summer camp) began informing their teaching with Agile, a fresh take on some common educational practices emerged. Together they looked with outsider/insider perspectives at collaboration, exploration, student agency, and doing school in uplifting ways.\nWhat emerged is (EDgility)[https://edgility.school], a set of practices anyone can use to nudge their teaching in the direction of greater student engagement, shared control of decision making, and practice of highly transferable skills. Bill and Paul discuss how they arrived at the practices of EDgility, using an example of one of Bill’s middle school classes, a STEM class on nautical design, what the school referred to as “the boat class.”\nWe think you’ll enjoy the practical advice, based on a real world example, to strengthen your ability to shift learning to the learner, where it belongs.\n https://www.link-conference.org/team/bill-tihen/\n","date":1646352000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646352000,"objectID":"fae4207946ef7cd203da07fa9685a2b0","permalink":"https://btihen.me/in_news/balkan_education_summit_2022_edgility/","publishdate":"2022-03-04T01:03:26+02:00","relpermalink":"/in_news/balkan_education_summit_2022_edgility/","section":"in_news","summary":"As part of the ECIS Leadership Conference - April 2020, Guide and Lead Managing Partner, Tim Logan gives an overview of the importance of agility in building schools as life-affirming 21st century organisations.","tags":["Agile","Education","21 Century","Reflections"],"title":"EDgility - Enouraging Agency and Collaboration","type":"in_news"},{"authors":["Bill Tihen"],"categories":["Code"],"content":"I have been enjoying the tools associated with Elixir and exploring the frontend. LiveView helps make that more intuitive and when that isn\u0026rsquo;t enough, AlpineJS is a lightweight JS tool with a similar syntax as Vue.\nInstall asdf - and required software   https://www.cogini.com/blog/using-asdf-with-elixir-and-phoenix/  https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58  On a Mac I used Homebrew:\nbrew install asdf echo -e '\\n. $(brew --prefix asdf)/asdf.sh' \u0026gt;\u0026gt; ~/.bash_profile echo -e '\\n. $(brew --prefix asdf)/etc/bash_completion.d/asdf.bash' \u0026gt;\u0026gt; ~/.bash_profile source ~/.bash_profile # (or open a new terminal)  Now you can install asdf software packages:\nasdf plugin-add erlang asdf plugin-add elixir asdf plugin-add Postgres  Now you need to install the desired versions (usually the newest) - currently:\nasdf list all erlang asdf install erlang 24.2.2 asdf global erlang 24.2.2 # note the elixir version otp must match the erlang version! asdf list all elixir asdf install elixir 1.13.3-otp-24 asdf global elixir 1.13.3-otp-24 # asdf install elixir 1.11.4-otp-24 # if you mismatch elixir with erlang you will get errors like: # {\u0026quot;init terminating in do_boot\u0026quot;,{undef,[{elixir,start_cli,[],[]},{init,start_em,1,[]},{init,do_boot,3,[]}]}} asdf list all Postgres asdf install Postgres 14.2  Get the newest Elixir tools mix local.rebar --force mix local.hex --force  Get the newest Phoenix Hex Package Once you have established you have the requrements - the download the newest version of Phoenix (go to: https://hexdocs.pm/phoenix/installation.html#phoenix to see the newest version) - at the time of this writing its 1.5.8 - be sure its installed using:\nmix archive.install hex phx_new 1.6.6 --force  create a project with asdf settings First we will creat the folder / project location\nmkdir petal  Now we will tell it which software to use:\ntouch petal/.tool-versions cat \u0026lt;\u0026lt;EOF \u0026gt;\u0026gt;petal/.tool-versions erlang 24.2.2 elixir 1.13.3-otp-24 Postgres 14.2 EOF  Create a new Phoenix Project  https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58\nNow you can simply do:\nmix phx.new petal --live cd petal mix ecto.create  assuming all is good lets configure git:\ngit init git add . git commit -m \u0026quot;initial Phoenix install with LiveView\u0026quot;  credo add credo to mix.exs\n{:credo, \u0026quot;~\u0026gt; 1.6\u0026quot;}, {:phx_gen_tailwind, \u0026quot;~\u0026gt; 0.1.3\u0026quot;, only: :dev, runtime: false}  configure Credo \u0026amp; TailwindCSS\nmix deps.get mix credo gen.config mix phx.gen.tailwind  Test TailwindCSS add to the top of: lib/slacker_gen_tail_web/templates/page/index.html.heex\n\u0026lt;div class=\u0026quot;text-green-500 text-5xl text-center\u0026quot;\u0026gt;Large Centered Green TailwindCSS\u0026lt;/div\u0026gt;  start phoenix mix -S phx.server\ninstall AlpineJS  https://www.youtube.com/watch?v=vZBHkvTAb2U https://sergiotapia.com/phoenix-160-liveview-esbuild-tailwind-jit-alpinejs-a-brief-tutorial\ncd assets npm install alpinejs cd ..  Now change app.js is to require our new setup:\n# assets/js/app.js // .. after the app.scss import add: import Alpine from \u0026quot;alpinejs\u0026quot;;  still in assets/js/app.js find:\nlet csrfToken = document.querySelector(\u0026quot;meta[name='csrf-token']\u0026quot;).getAttribute(\u0026quot;content\u0026quot;) let liveSocket = new LiveSocket(\u0026quot;/live\u0026quot;, Socket, {params: {_csrf_token: csrfToken}})  and change to:\n// after all the imports window.Alpine = Alpine; Alpine.start(); let hooks = {}; let csrfToken = document.querySelector(\u0026quot;meta[name='csrf-token']\u0026quot;).getAttribute(\u0026quot;content\u0026quot;) let liveSocket = new LiveSocket(\u0026quot;/live\u0026quot;, Socket, { params: { _csrf_token: csrfToken }, hooks: hooks, dom: { onBeforeElUpdated(from, to) { if (from._x_dataStack) { window.Alpine.clone(from, to); } }, }, });  now change the loading of assets/app.js in the root file to load assets/js/app.js to load AlpineJS into Phoenix you do that with in lib/fonts_web/templates/layout/root.html.heex by changing:\n \u0026lt;!-- change this from app.js to js/app.js --\u0026gt; \u0026lt;script defer phx-track-static type=\u0026quot;text/javascript\u0026quot; src={Routes.static_path(@conn, \u0026quot;/assets/app.js\u0026quot;)}\u0026gt;\u0026lt;/script\u0026gt;  to:\n \u0026lt;!-- change this from app.js to js/app.js --\u0026gt; \u0026lt;script defer phx-track-static type=\u0026quot;text/javascript\u0026quot; src={Routes.static_path(@conn, \u0026quot;/assets/js/app.js\u0026quot;)}\u0026gt;\u0026lt;/script\u0026gt;  so now lib/fonts_web/templates/layout/root.html.heex should look like:\n\u0026lt;!-- lib/fonts_web/templates/layout/root.html.heex --\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;/\u0026gt; \u0026lt;meta http-equiv=\u0026quot;X-UA-Compatible\u0026quot; content=\u0026quot;IE=edge\u0026quot;/\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width, initial-scale=1.0\u0026quot;/\u0026gt; \u0026lt;%= csrf_meta_tag() %\u0026gt; \u0026lt;%= live_title_tag assigns[:page_title] || \u0026quot;SlackerPetal\u0026quot;, suffix: \u0026quot; · Phoenix Framework\u0026quot; %\u0026gt; \u0026lt;link phx-track-static rel=\u0026quot;stylesheet\u0026quot; href={Routes.static_path(@conn, \u0026quot;/assets/app.css\u0026quot;)}/\u0026gt; \u0026lt;!-- change the `javascript` static path from `/assets/app.js` to `/assets/app.js` to load AlpineJS --\u0026gt; \u0026lt;%# \u0026lt;script defer phx-track-static type=\u0026quot;text/javascript\u0026quot; src={Routes.static_path(@conn, \u0026quot;/assets/app.js\u0026quot;)}\u0026gt;\u0026lt;/script\u0026gt; %\u0026gt; \u0026lt;script defer phx-track-static type=\u0026quot;text/javascript\u0026quot; src={Routes.static_path(@conn, \u0026quot;/assets/js/app.js\u0026quot;)}\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;header\u0026gt; \u0026lt;section class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;nav\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;https://hexdocs.pm/phoenix/overview.html\u0026quot;\u0026gt;Get Started\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;%= if function_exported?(Routes, :live_dashboard_path, 2) do %\u0026gt; \u0026lt;li\u0026gt;\u0026lt;%= link \u0026quot;LiveDashboard\u0026quot;, to: Routes.live_dashboard_path(@conn, :home) %\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;a href=\u0026quot;https://phoenixframework.org/\u0026quot; class=\u0026quot;phx-logo\u0026quot;\u0026gt; \u0026lt;img src={Routes.static_path(@conn, \u0026quot;/images/phoenix.png\u0026quot;)} alt=\u0026quot;Phoenix Framework Logo\u0026quot;/\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;%= @inner_content %\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Test AlpineJS TEST by adding to the end of: lib/petal_web/live/page_live.html.leex\n\u0026lt;section\u0026gt; \u0026lt;h2\u0026gt;Alpine JS Installed\u0026lt;/h2\u0026gt; \u0026lt;div x-data=\u0026quot;{name:''}\u0026quot;\u0026gt; \u0026lt;label for=\u0026quot;name\u0026quot;\u0026gt;Name:\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026quot;name\u0026quot; type=\u0026quot;text\u0026quot; x-model=\u0026quot;name\u0026quot; /\u0026gt; \u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;\u0026lt;em\u0026gt;Output:\u0026lt;/em\u0026gt;\u0026lt;/b\u0026gt; \u0026lt;span x-text=\u0026quot;name\u0026quot;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt;  test with: mix phx.server\nwhen typing the name should appear below!\nAdd CSS Components to TailwindCSS we will create a file for our default CSS styles the: assets/css/default.css file:\n# assuming you are in the root directory touch assets/css/default.css  Put your default site CSS here.\nLet\u0026rsquo;s also create some custom CSS components:\n# assuming you are still in the assets directory on the cli mkdir assets/css/components touch assets/css/components/buttons.css cat \u0026lt;\u0026lt;EOF \u0026gt;assets/css/components/buttons.css @layer components { .btn-redish { @apply bg-red-300 hover:bg-red-600 text-blue-800 font-bold py-2 px-4 rounded; } .btn-greenish { @apply bg-green-300 hover:bg-green-600 text-blue-800 font-bold py-2 px-4 rounded; } } EOF  Let\u0026rsquo;s add our components (\u0026amp; Default CSS to our config)\n/* Import tailwind - with postcss-import installed */ @import \u0026quot;tailwindcss/base\u0026quot;; @import \u0026quot;tailwindcss/components\u0026quot;; @import \u0026quot;tailwindcss/utilities\u0026quot;; /* custom styles - put after base imports! */ @import \u0026quot;./default.css\u0026quot;; /* import custom components */ @import \u0026quot;./components/buttons.css\u0026quot;; /* default phoenix styles - replaced bby default.css file */ /* @import \u0026quot;./phoenix.css\u0026quot;; */  add a test html from tailwind to the end of: lib/petal_web/live/page_live.html.leex\n\u0026lt;section class=\u0026quot;grid grid-cols-1 gap-4\u0026quot;\u0026gt; \u0026lt;!-- tailwind text --\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h2 class=\u0026quot;text-red-500 text-5xl font-bold text-center\u0026quot;\u0026gt;Tailwind CSS with Alpine JS Dropdown\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- alpinejs dropdown test --\u0026gt; \u0026lt;div x-data=\u0026quot;{ open: false }\u0026quot; class=\u0026quot;relative text-left\u0026quot;\u0026gt; \u0026lt;button @click=\u0026quot;open = !open\u0026quot; @keydown.escape.window=\u0026quot;open = false\u0026quot; @click.away=\u0026quot;open = false\u0026quot; class=\u0026quot;flex items-center h-8 pl-3 pr-2 border border-black focus:outline-none\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;text-sm leading-none\u0026quot;\u0026gt; Options \u0026lt;/span\u0026gt; \u0026lt;svg class=\u0026quot;w-4 h-4 mt-px ml-2\u0026quot; xmlns=\u0026quot;http://www.w3.org/2000/svg\u0026quot; viewBox=\u0026quot;0 0 20 20\u0026quot; fill=\u0026quot;currentColor\u0026quot;\u0026gt; \u0026lt;path fill-rule=\u0026quot;evenodd\u0026quot; d=\u0026quot;M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\u0026quot; clip-rule=\u0026quot;evenodd\u0026quot; /\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;div x-cloak x-show=\u0026quot;open\u0026quot; x-transition:enter=\u0026quot;transition ease-out duration-100\u0026quot; x-transition:enter-start=\u0026quot;transform opacity-0 scale-95\u0026quot; x-transition:enter-end=\u0026quot;transform opacity-100 scale-100\u0026quot; x-transition:leave=\u0026quot;transition ease-in duration-75\u0026quot; x-transition:leave-start=\u0026quot;transform opacity-100 scale-100\u0026quot; x-transition:leave-end=\u0026quot;transform opacity-0 scale-95\u0026quot; class=\u0026quot;absolute flex flex-col w-40 mt-1 border border-black shadow-xs\u0026quot;\u0026gt; \u0026lt;a class=\u0026quot;flex items-center h-8 px-3 text-sm hover:bg-gray-200\u0026quot; href=\u0026quot;#\u0026quot;\u0026gt;Settings\u0026lt;/a\u0026gt; \u0026lt;a class=\u0026quot;flex items-center h-8 px-3 text-sm hover:bg-gray-200\u0026quot; href=\u0026quot;#\u0026quot;\u0026gt;Support\u0026lt;/a\u0026gt; \u0026lt;a class=\u0026quot;flex items-center h-8 px-3 text-sm hover:bg-gray-200\u0026quot; href=\u0026quot;#\u0026quot;\u0026gt;Sign Out\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- alpinejs counter test --\u0026gt; \u0026lt;div\u0026gt; \u0026lt;p class=\u0026quot;mt-5 font-bold text-center\u0026quot;\u0026gt;Counter with Component Buttons\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- If you want a box around the counter use: \u0026lt;div class=\u0026quot;flex items-center justify-center h-screen bg-gray-200\u0026quot;\u0026gt; --\u0026gt; \u0026lt;div class=\u0026quot;mt-10 flex justify-center\u0026quot; x-data=\u0026quot;{ count: 0 }\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;btn-redish\u0026quot; x-on:click=\u0026quot;count--\u0026quot;\u0026gt;Decrement\u0026lt;/button\u0026gt; \u0026lt;code\u0026gt;count: \u0026lt;/code\u0026gt;\u0026lt;code x-text=\u0026quot;count\u0026quot;\u0026gt;\u0026lt;/code\u0026gt; \u0026lt;button class=\u0026quot;btn-greenish\u0026quot; x-on:click=\u0026quot;count++\u0026quot;\u0026gt;Increment\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt;  Start phoenix with:\niex -S mix phx.server  Now we should have a dropdown \u0026amp; our colored component buttons on our counter.\nAdd a custom Font  https://experimentingwithcode.com/custom-fonts-with-phoenix-and-tailwind/\nFind a font at: https://fonts.google.com/ (or any other source of fonts)\nI will use handlee as it is very distinctive - to make the setup easier I will download handlee from: https://google-webfonts-helper.herokuapp.com/fonts/handlee?subsets=latin\nI will put the fonts in the folder: assets/fonts/handlee\nmkdir -p assets/fonts/handlee touch assets/fonts/handlee/handless.css cat \u0026lt;\u0026lt;EOF\u0026gt;\u0026gt;assets/fonts/handlee/handless.css /* handlee-regular - latin - copied from: https://google-webfonts-helper.herokuapp.com/fonts/handlee?subsets=latin */ /* be sure the font-path is local to where the fonts are */ @font-face { font-family: 'Handlee'; font-style: normal; font-weight: 400; src: local(''), url('handlee-v12-latin-regular.woff2') format('woff2'), url('handlee-v12-latin-regular.woff') format('woff'); } EOF  Now lets setup esbuild to manage the CSS and fonts - the default in config/config.exs is:\n# config/config.exs config :esbuild, version: \u0026quot;0.14.0\u0026quot;, default: [ args: ~w(js/app.js --bundle --target=es2017 --outdir=../priv/static/assets --external:/fonts/* --external:/images/*), cd: Path.expand(\u0026quot;../assets\u0026quot;, __DIR__), env: %{\u0026quot;NODE_PATH\u0026quot; =\u0026gt; Path.expand(\u0026quot;../deps\u0026quot;, __DIR__)} ]  We will need to add our FontCSS path fonts/handlee/handlee.css to the build System along with the font types to load:--loader:.woff2=file --loader:.woff=file, so now it should look like:\nconfig :esbuild, version: \u0026quot;0.14.0\u0026quot;, default: [ args: ~w(js/app.js fonts/handlee/handlee.css --bundle --loader:.woff2=file --loader:.woff=file --target=es2017 --outdir=../priv/static/assets --external:/fonts/* --external:/images/*), cd: Path.expand(\u0026quot;../assets\u0026quot;, __DIR__), env: %{\u0026quot;NODE_PATH\u0026quot; =\u0026gt; Path.expand(\u0026quot;../deps\u0026quot;, __DIR__)} ]  Now you NEED to restart phoenix once a config file changes!\nAssuming everything is working you will see:\n the fonts files in: priv/static/assets/ the fonts css in: priv/static/assets/fonts/handlee/handlee.css  this is critical - if this isn\u0026rsquo;t working you MUST fix it!\nIntegrate the font into CSS (\u0026amp; TailwindCSS) Now you will need to tell TailwindCSS about the font so you can use: font-handprint as a CSS class.\nYour initial assets/tailwind.config.js file will look like:\nmodule.exports = { mode: 'jit', purge: [ './js/**/*.js', '../lib/*_web/**/*.*ex' ], theme: { extend: {}, }, variants: { extend: {}, }, plugins: [], }  Your define you font in the theme section with:\nmodule.exports = { mode: 'jit', purge: [ './js/**/*.js', '../lib/*_web/**/*.*ex' ], theme: { extend: { fontFamily: { handprint: ['Handlee'] }, }, }, variants: { extend: {}, }, plugins: [], }  Working in Switzerland it is convenient to use very multi-lingual fonts such as Noto and redefine the sans and serif fonts - in fact, my goto fonts and setup are:\nmodule.exports = { mode: 'jit', purge: [ './js/**/*.js', '../lib/*_web/**/*.*ex' ], theme: { extend: { fontFamily: { comic: ['ComicNeue'], hand: ['Handless'], sans: ['NotoSans', 'sans-serif'], serif: ['NotoSerif', 'serif'] }, }, }, variants: { extend: {}, }, plugins: [], }  Integrate the Fonts Into Phoenix in the root.html.heex file add the static route /assets/fonts/Hanlee/hanlee.css before the /assets/app.css.\nThis is done with the following html route:\n\u0026lt;!-- add font before app.css --\u0026gt; \u0026lt;link phx-track-static rel=\u0026quot;stylesheet\u0026quot; href={Routes.static_path(@conn, \u0026quot;/assets/fonts/Hanlee/hanlee.css\u0026quot;)}/\u0026gt; \u0026lt;link phx-track-static rel=\u0026quot;stylesheet\u0026quot; href={Routes.static_path(@conn, \u0026quot;/assets/app.css\u0026quot;)}/\u0026gt;  So now lib/fonts_web/templates/layout/root.html.heex would look like:\n\u0026lt;!-- lib/fonts_web/templates/layout/root.html.heex --\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;/\u0026gt; \u0026lt;meta http-equiv=\u0026quot;X-UA-Compatible\u0026quot; content=\u0026quot;IE=edge\u0026quot;/\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width, initial-scale=1.0\u0026quot;/\u0026gt; \u0026lt;%= csrf_meta_tag() %\u0026gt; \u0026lt;%= live_title_tag assigns[:page_title] || \u0026quot;SlackerPetal\u0026quot;, suffix: \u0026quot; · Phoenix Framework\u0026quot; %\u0026gt; \u0026lt;!-- add font here BEFORE `/assets/app.css` --\u0026gt; \u0026lt;link phx-track-static rel=\u0026quot;stylesheet\u0026quot; href={Routes.static_path(@conn, \u0026quot;/assets/fonts/Hanlee/hanlee.css\u0026quot;)}/\u0026gt; \u0026lt;link phx-track-static rel=\u0026quot;stylesheet\u0026quot; href={Routes.static_path(@conn, \u0026quot;/assets/app.css\u0026quot;)}/\u0026gt; \u0026lt;!-- change the `javascript` static path from `/assets/app.js` to `/assets/app.js` to load AlpineJS --\u0026gt; \u0026lt;%# \u0026lt;script defer phx-track-static type=\u0026quot;text/javascript\u0026quot; src={Routes.static_path(@conn, \u0026quot;/assets/app.js\u0026quot;)}\u0026gt;\u0026lt;/script\u0026gt; %\u0026gt; \u0026lt;script defer phx-track-static type=\u0026quot;text/javascript\u0026quot; src={Routes.static_path(@conn, \u0026quot;/assets/js/app.js\u0026quot;)}\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;header\u0026gt; \u0026lt;section class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;nav\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;https://hexdocs.pm/phoenix/overview.html\u0026quot;\u0026gt;Get Started\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;%= if function_exported?(Routes, :live_dashboard_path, 2) do %\u0026gt; \u0026lt;li\u0026gt;\u0026lt;%= link \u0026quot;LiveDashboard\u0026quot;, to: Routes.live_dashboard_path(@conn, :home) %\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;a href=\u0026quot;https://phoenixframework.org/\u0026quot; class=\u0026quot;phx-logo\u0026quot;\u0026gt; \u0026lt;img src={Routes.static_path(@conn, \u0026quot;/images/phoenix.png\u0026quot;)} alt=\u0026quot;Phoenix Framework Logo\u0026quot;/\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;%= @inner_content %\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Test you new font Now add to the file lib/slacker_gen_tail_web/templates/page/index.html.heex to the following html:\n\u0026lt;p class=\u0026quot;text-red-500 text-5xl text-center font-handprint\u0026quot;\u0026gt;Hand Printed\u0026lt;/p\u0026gt;  Ideally you now see your new font displayed within the \u0026ldquo;Hand Printed\u0026rdquo; text\nNOTE: if you get an error like: (Phoenix.Router.NoRouteError) no route found for GET /assets/fonts/Handlee/handlee.css\nCheck your esbundle config and that priv/static/assets/fonts/handlee/handlee.css is being copied (Static routes always point to: priv/static/)!\nResources (1.6.x)   https://www.youtube.com/watch?v=vZBHkvTAb2U  https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58  https://sergiotapia.com/phoenix-160-liveview-esbuild-tailwind-jit-alpinejs-a-brief-tutorial  https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix  https://thinkingelixir.com/petal-stack-in-elixir/  https://larainfo.com/blogs/build-simple-count-app-using-apline-js-with-tailwind-css  https://fullstackphoenix.com/tutorials/combine-phoenix-liveview-with-alpine-js  https://www.cogini.com/blog/using-asdf-with-elixir-and-phoenix/  https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58  https://tailwindcss.com/  https://github.com/alpinejs/alpine  https://github.com/tailwindlabs/tailwindcss  https://experimentingwithcode.com/custom-fonts-with-phoenix-and-tailwind/  https://fullstackphoenix.com/tutorials/add-tailwind-html-generators-in-phoenix  https://elixirforum.com/t/how-do-i-use-a-custom-font-with-phoenix-1-6-and-esbuild/43791/16  Older Resources   https://www.youtube.com/watch?v=o4Prej0wIZA  http://blog.pthompson.org/alpine-js-and-liveview  https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix  https://fullstackphoenix.com/tutorials/get-started-with-tailwind-in-phoenix  https://fullstackphoenix.com/tutorials/combine-phoenix-liveview-with-alpine-js  https://medium.com/mindvalley-technology/how-to-add-tailwindcss-to-your-phoenix-project-e2250ad31ace  https://thinkingelixir.com/podcast-episodes/021-tailwind-css-alpine-js-and-liveview-with-patrick-thompson/  ","date":1646348513,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646348513,"objectID":"f6766acb7dd887f344bfeea5758d144c","permalink":"https://btihen.me/post_elixir_phoenix/phoenix_1_6_petal_w_gen_n_custom_fonts/","publishdate":"2022-03-04T01:01:53+02:00","relpermalink":"/post_elixir_phoenix/phoenix_1_6_petal_w_gen_n_custom_fonts/","section":"post_elixir_phoenix","summary":"Create a modern webapp with tremendous flexibility","tags":["Phoenix","Phoenix 1.6.x","Elixir","TailwindCSS","TailwindCSS 3.x","AlpineJS","AlpineJS 3.x","LiveView","PETAL","PETAL Stack","Custom Font"],"title":"Phoenix 1.6 Easy PETAL Stack Setup (w/a Custom Font","type":"post_elixir_phoenix"},{"authors":["Bill Tihen"],"categories":["Code"],"content":"I have been enjoying the tools associated with Elixir and exploring the frontend. LiveView helps make that more intuitive and when that isn\u0026rsquo;t enough, AlpineJS is a lightweight JS tool with a similar syntax as Vue.\nInstall asdf - and required software   https://www.cogini.com/blog/using-asdf-with-elixir-and-phoenix/  https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58  On a Mac I used Homebrew:\nbrew install asdf echo -e '\\n. $(brew --prefix asdf)/asdf.sh' \u0026gt;\u0026gt; ~/.bash_profile echo -e '\\n. $(brew --prefix asdf)/etc/bash_completion.d/asdf.bash' \u0026gt;\u0026gt; ~/.bash_profile source ~/.bash_profile # (or open a new terminal)  Now you can install asdf software packages:\nasdf plugin-add erlang asdf plugin-add elixir asdf plugin-add Postgres  Now you need to install the desired versions (usually the newest) - currently:\nasdf list all erlang asdf install erlang 24.2.2 asdf global erlang 24.2.2 # note the elixir version otp must match the erlang version! asdf list all elixir asdf install elixir 1.13.3-otp-24 asdf global elixir 1.13.3-otp-24 # asdf install elixir 1.11.4-otp-24 # if you mismatch elixir with erlang you will get errors like: # {\u0026quot;init terminating in do_boot\u0026quot;,{undef,[{elixir,start_cli,[],[]},{init,start_em,1,[]},{init,do_boot,3,[]}]}} asdf list all Postgres asdf install Postgres 14.2  Get the newest Elixir tools mix local.rebar --force mix local.hex --force  Get the newest Phoenix Hex Package Once you have established you have the requirements - the download the newest version of Phoenix (go to: https://hexdocs.pm/phoenix/installation.html#phoenix to see the newest version) - at the time of this writing its 1.5.8 - be sure its installed using:\nmix archive.install hex phx_new 1.6.6 --force  create a project with asdf settings First we will create the folder / project location\nmkdir petal  Now we will tell it which software to use:\ntouch petal/.tool-versions cat \u0026lt;\u0026lt;EOF \u0026gt;\u0026gt;petal/.tool-versions erlang 24.2.2 elixir 1.13.3-otp-24 Postgres 14.2 EOF  Create a new Phoenix Project  https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58\nNow you can simply do:\nmix phx.new petal --live cd petal mix ecto.create  assuming all is good lets configure git:\ngit init git add . git commit -m \u0026quot;initial Phoneix install with LiveView\u0026quot;  credo add credo to mix.exs\n{:credo, \u0026quot;~\u0026gt; 1.6\u0026quot;}  configure credo\nmix deps.get mix credo gen.config  install \u0026amp; test Alpine JS  https://www.youtube.com/watch?v=vZBHkvTAb2U https://sergiotapia.com/phoenix-160-liveview-esbuild-tailwind-jit-alpinejs-a-brief-tutorial\ncd assets npm install alpinejs cd ..  Now change app.js is to require our new setup:\n# assets/js/app.js // .. after the app.scss import add: import Alpine from \u0026quot;alpinejs\u0026quot;;  still in assets/js/app.js find:\nlet csrfToken = document.querySelector(\u0026quot;meta[name='csrf-token']\u0026quot;).getAttribute(\u0026quot;content\u0026quot;) let liveSocket = new LiveSocket(\u0026quot;/live\u0026quot;, Socket, {params: {_csrf_token: csrfToken}})  and change to:\n// after all the imports window.Alpine = Alpine; Alpine.start(); let hooks = {}; let csrfToken = document.querySelector(\u0026quot;meta[name='csrf-token']\u0026quot;).getAttribute(\u0026quot;content\u0026quot;) let liveSocket = new LiveSocket(\u0026quot;/live\u0026quot;, Socket, { params: { _csrf_token: csrfToken }, hooks: hooks, dom: { onBeforeElUpdated(from, to) { if (from._x_dataStack) { window.Alpine.clone(from, to); } }, }, });  TEST by adding to the end of: lib/petal_web/live/page_live.html.leex\n\u0026lt;section\u0026gt; \u0026lt;h2\u0026gt;Alpine JS Installed\u0026lt;/h2\u0026gt; \u0026lt;div x-data=\u0026quot;{name:''}\u0026quot;\u0026gt; \u0026lt;label for=\u0026quot;name\u0026quot;\u0026gt;Name:\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026quot;name\u0026quot; type=\u0026quot;text\u0026quot; x-model=\u0026quot;name\u0026quot; /\u0026gt; \u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;\u0026lt;em\u0026gt;Output:\u0026lt;/em\u0026gt;\u0026lt;/b\u0026gt; \u0026lt;span x-text=\u0026quot;name\u0026quot;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt;  test with: mix phx.server\nwhen typing the name should appear below!\nlet\u0026rsquo;s snapshot:\ngit add . git commit -m \u0026quot;phoenix with alpine js\u0026quot;  Integrating Tailwind into phoenix  https://www.youtube.com/watch?v=vZBHkvTAb2U https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix https://sergiotapia.com/phoenix-160-liveview-esbuild-tailwind-jit-alpinejs-a-brief-tutorial\nlets install tailwind:\ncd assets npm install autoprefixer postcss postcss-import postcss-cli tailwindcss --save-dev cd ..  comment out import \u0026quot;../css/app.css\u0026quot; to avoid pipeline compilation conflicts\n// assets/js/app.js // We import the CSS which is extracted to its own file by esbuild. // Remove this line if you add a your own CSS build pipeline (e.g postcss). // import \u0026quot;../css/app.css\u0026quot;  now create \u0026amp; configure postcss.config.js\ncat \u0026lt;\u0026lt;EOF\u0026gt;assets/postcss.config.js module.exports = { plugins: { \u0026quot;postcss-import\u0026quot;: {}, tailwindcss: {}, autoprefixer: {}, } } EOF  now configure tailwind with (to purge *.js, *.eex, *.leex, *.heex files)\ncat \u0026lt;\u0026lt;EOF \u0026gt;assets/tailwind.config.js module.exports = { mode: \u0026quot;jit\u0026quot;, purge: [ \u0026quot;./js/**/*.js\u0026quot;, \u0026quot;../lib/*_web/**/*.*ex\u0026quot; ], theme: { extend: {}, }, variants: { extend: {}, }, plugins: [], }; EOF  in config/dev.exs update the watcher with:\n# config/dev.exs watchers: [ esbuild: {Esbuild, :install_and_run, [:default, ~w(--sourcemap=inline --watch)]}, npx: [ \u0026quot;tailwindcss\u0026quot;, \u0026quot;--input=css/app.css\u0026quot;, \u0026quot;--output=../priv/static/assets/app.css\u0026quot;, \u0026quot;--postcss\u0026quot;, \u0026quot;--watch\u0026quot;, cd: Path.expand(\u0026quot;../assets\u0026quot;, __DIR__) ] ]  to BUILD ASSETS in Production add in deps/phoenix/package.json:\n\u0026quot;scripts\u0026quot;: { \u0026quot;deploy\u0026quot;: \u0026quot;NODE_ENV=production tailwindcss --postcss --minify --input=css/app.css --output=../priv/static/assets/app.css\u0026quot; }  and change this to:\n\u0026quot;scripts\u0026quot;: { \u0026quot;deploy\u0026quot;: \u0026quot;NODE_ENV=production webpack --mode production\u0026quot;, \u0026quot;watch\u0026quot;: \u0026quot;webpack --mode development --watch\u0026quot; },  we will create a file for our custom styles the assets/css/default-styles.css file:\n# assuming you are in the root directory touch assets/css/default-styles.css  Let\u0026rsquo;s also create our a custom component (we will make buttons for a counter to be sure tailwind and aplineJS are playing well together):\n# assuming you are still in the assets directory on the cli mkdir assets/css/components touch assets/css/components/buttons.css cat \u0026lt;\u0026lt;EOF \u0026gt;assets/css/components/buttons.css @layer components { .btn-redish { @apply bg-red-300 hover:bg-red-600 text-blue-800 font-bold py-2 px-4 rounded; } .btn-greenish { @apply bg-green-300 hover:bg-green-600 text-blue-800 font-bold py-2 px-4 rounded; } } EOF  Now will will configure Phoenix to load Tailwind, our custom-styles and our custom-components \u0026ndash; DO THIS AT THE TOP OF the file assets/css/app.scss (@imports must be before all else):\n/* Import tailwind - with postcss-import installed */ @import \u0026quot;tailwindcss/base\u0026quot;; @import \u0026quot;tailwindcss/components\u0026quot;; @import \u0026quot;tailwindcss/utilities\u0026quot;; /* custom styles - put after base imports! */ @import \u0026quot;./default-styles.css\u0026quot;; /* import custom components */ @import \u0026quot;./components/buttons.css\u0026quot;; /* default phoenix styles - eventually remove */ @import \u0026quot;./phoenix.css\u0026quot;;  add a test html from tailwind to the end of: lib/petal_web/live/page_live.html.leex\n\u0026lt;section class=\u0026quot;grid grid-cols-1 gap-4\u0026quot;\u0026gt; \u0026lt;!-- tailwind text --\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h2 class=\u0026quot;text-red-500 text-5xl font-bold text-center\u0026quot;\u0026gt;Tailwind CSS with Alpine JS Dropdown\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- alpinejs dropdown test --\u0026gt; \u0026lt;div x-data=\u0026quot;{ open: false }\u0026quot; class=\u0026quot;relative text-left\u0026quot;\u0026gt; \u0026lt;button @click=\u0026quot;open = !open\u0026quot; @keydown.escape.window=\u0026quot;open = false\u0026quot; @click.away=\u0026quot;open = false\u0026quot; class=\u0026quot;flex items-center h-8 pl-3 pr-2 border border-black focus:outline-none\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;text-sm leading-none\u0026quot;\u0026gt; Options \u0026lt;/span\u0026gt; \u0026lt;svg class=\u0026quot;w-4 h-4 mt-px ml-2\u0026quot; xmlns=\u0026quot;http://www.w3.org/2000/svg\u0026quot; viewBox=\u0026quot;0 0 20 20\u0026quot; fill=\u0026quot;currentColor\u0026quot;\u0026gt; \u0026lt;path fill-rule=\u0026quot;evenodd\u0026quot; d=\u0026quot;M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\u0026quot; clip-rule=\u0026quot;evenodd\u0026quot; /\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;div x-cloak x-show=\u0026quot;open\u0026quot; x-transition:enter=\u0026quot;transition ease-out duration-100\u0026quot; x-transition:enter-start=\u0026quot;transform opacity-0 scale-95\u0026quot; x-transition:enter-end=\u0026quot;transform opacity-100 scale-100\u0026quot; x-transition:leave=\u0026quot;transition ease-in duration-75\u0026quot; x-transition:leave-start=\u0026quot;transform opacity-100 scale-100\u0026quot; x-transition:leave-end=\u0026quot;transform opacity-0 scale-95\u0026quot; class=\u0026quot;absolute flex flex-col w-40 mt-1 border border-black shadow-xs\u0026quot;\u0026gt; \u0026lt;a class=\u0026quot;flex items-center h-8 px-3 text-sm hover:bg-gray-200\u0026quot; href=\u0026quot;#\u0026quot;\u0026gt;Settings\u0026lt;/a\u0026gt; \u0026lt;a class=\u0026quot;flex items-center h-8 px-3 text-sm hover:bg-gray-200\u0026quot; href=\u0026quot;#\u0026quot;\u0026gt;Support\u0026lt;/a\u0026gt; \u0026lt;a class=\u0026quot;flex items-center h-8 px-3 text-sm hover:bg-gray-200\u0026quot; href=\u0026quot;#\u0026quot;\u0026gt;Sign Out\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- alpinejs counter test --\u0026gt; \u0026lt;div\u0026gt; \u0026lt;p class=\u0026quot;mt-5 font-bold text-center\u0026quot;\u0026gt;Counter with Component Buttons\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- If you want a box around the counter use: \u0026lt;div class=\u0026quot;flex items-center justify-center h-screen bg-gray-200\u0026quot;\u0026gt; --\u0026gt; \u0026lt;div class=\u0026quot;mt-10 flex justify-center\u0026quot; x-data=\u0026quot;{ count: 0 }\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;btn-redish\u0026quot; x-on:click=\u0026quot;count--\u0026quot;\u0026gt;Decrement\u0026lt;/button\u0026gt; \u0026lt;code\u0026gt;count: \u0026lt;/code\u0026gt;\u0026lt;code x-text=\u0026quot;count\u0026quot;\u0026gt;\u0026lt;/code\u0026gt; \u0026lt;button class=\u0026quot;btn-greenish\u0026quot; x-on:click=\u0026quot;count++\u0026quot;\u0026gt;Increment\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt;  Test with iex -S mix phx.server  Now we should have a dropdown \u0026amp; our colored component buttons on our counter.\nnow lets snapshot our PETAL setup:\ngit add . git commit -m \u0026quot;PETAL 1.6.x Configured\u0026quot;  Add a custom Font  https://experimentingwithcode.com/custom-fonts-with-phoenix-and-tailwind/\nWe will download 2 Fonts:\n Noto Sans - (full international support \u0026amp; very readable): https://google-webfonts-helper.herokuapp.com/fonts/noto-sans?subsets=latin Quickens Comic (easy to read and fun) - https://graphicgoods.net/downloads/quickens-free-font/  Noto Sans We will start with Noto - listed on Google fonts from Webfonts Helper\nCopy the CSS from the website (prefer modern browswers if possible) - update the Customize folder prefix\nmkdir -p assets/vendor/fonts/NotoSans cat \u0026lt;\u0026lt;EOF\u0026gt;assets/vendor/fonts/NotoSans/noto_sans.css /* noto-sans-regular - latin-ext_latin */ @font-face { font-family: 'Noto Sans'; font-style: normal; font-weight: 400; src: local(''), url('../fonts/NotoSans/noto-sans-v25-latin-ext_latin-regular.woff2') format('woff2'), /* Chrome 26+, Opera 23+, Firefox 39+ */ url('../fonts/NotoSans/noto-sans-v25-latin-ext_latin-regular.woff') format('woff'); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */ } EOF  Quickens (otf) Download and convert the font at:\n  https://transfonter.org/  https://onlinefontconverter.com/  https://www.fontsquirrel.com/tools/webfont-generator  mkdir -p assets/vendor/fonts/Quickens cat \u0026lt;\u0026lt;EOF\u0026gt;assets/vendor/fonts/Quickens/quickens.css /* otf not recommended - convert the font at: * https://transfonter.org/ * https://onlinefontconverter.com/ * https://www.fontsquirrel.com/tools/webfont-generator @font-face { font-family: 'Quickens'; font-style: normal; font-weight: 400; src: local(''), url('quickens-regular.otf') format('opentype'), url('quickens-rough.otf') format('opentype'); } */ @font-face { font-family: 'Quickens'; font-style: normal; font-weight: 400; src: local(''), url('quickens_regular-webfont.woff2') format('woff2'), /* Chrome 26+, Opera 23+, Firefox 39+ */ url('quickens_regular-webfont.woff') format('woff'); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */ } @font-face { font-family: 'QuickensRough'; font-style: normal; font-weight: 400; src: local(''), url('quickens_rough-webfont.woff2') format('woff2'), /* Chrome 26+, Opera 23+, Firefox 39+ */ url('quickens_rough-webfont.woff') format('woff'); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */ } EOF  Add Fonts to HTML # /lib/fonts_web/templates/layout/root.html.heex \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;/\u0026gt; \u0026lt;meta http-equiv=\u0026quot;X-UA-Compatible\u0026quot; content=\u0026quot;IE=edge\u0026quot;/\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width, initial-scale=1.0\u0026quot;/\u0026gt; \u0026lt;%= csrf_meta_tag() %\u0026gt; \u0026lt;%= live_title_tag assigns[:page_title] || \u0026quot;SlackerPetal\u0026quot;, suffix: \u0026quot; · Phoenix Framework\u0026quot; %\u0026gt; \u0026lt;!-- add font here --\u0026gt; \u0026lt;link phx-track-static rel=\u0026quot;stylesheet\u0026quot; href={Routes.static_path(@conn, \u0026quot;/assets/vendor/fonts/NotoSans/noto_sans.css\u0026quot;)}/\u0026gt; \u0026lt;link phx-track-static rel=\u0026quot;stylesheet\u0026quot; href={Routes.static_path(@conn, \u0026quot;/assets/vendor/fonts/NotoSerif/noto_serif.css\u0026quot;)}/\u0026gt; \u0026lt;link phx-track-static rel=\u0026quot;stylesheet\u0026quot; href={Routes.static_path(@conn, \u0026quot;/assets/vendor/fonts/Quickens/quickens.css\u0026quot;)}/\u0026gt; \u0026lt;!-- end custom fonts --\u0026gt; \u0026lt;link phx-track-static rel=\u0026quot;stylesheet\u0026quot; href={Routes.static_path(@conn, \u0026quot;/assets/app.css\u0026quot;)}/\u0026gt; \u0026lt;!-- change this from app.js to js/app.js --\u0026gt; \u0026lt;%# \u0026lt;script defer phx-track-static type=\u0026quot;text/javascript\u0026quot; src={Routes.static_path(@conn, \u0026quot;/assets/app.js\u0026quot;)}\u0026gt;\u0026lt;/script\u0026gt; %\u0026gt; \u0026lt;script defer phx-track-static type=\u0026quot;text/javascript\u0026quot; src={Routes.static_path(@conn, \u0026quot;/assets/js/app.js\u0026quot;)}\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;header\u0026gt; \u0026lt;section class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;nav\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;https://hexdocs.pm/phoenix/overview.html\u0026quot;\u0026gt;Get Started\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;%= if function_exported?(Routes, :live_dashboard_path, 2) do %\u0026gt; \u0026lt;li\u0026gt;\u0026lt;%= link \u0026quot;LiveDashboard\u0026quot;, to: Routes.live_dashboard_path(@conn, :home) %\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;a href=\u0026quot;https://phoenixframework.org/\u0026quot; class=\u0026quot;phx-logo\u0026quot;\u0026gt; \u0026lt;img src={Routes.static_path(@conn, \u0026quot;/images/phoenix.png\u0026quot;)} alt=\u0026quot;Phoenix Framework Logo\u0026quot;/\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;%= @inner_content %\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  OOPS (Phoenix.Router.NoRouteError) no route found for GET /assets/vendor/fonts/NotoSerif/noto_serif.css\nUpdate the esbuild configuration update args in\n# /config/config.exs # Configure esbuild (the version is required) config :esbuild, version: \u0026quot;0.12.18\u0026quot;, default: [ args: ~w(js/app.js vendor/fonts/NotoSans/noto_sans.css vendor/fonts/Quickens/quickens.css --bundle --loader:.woff2=file --loader:.woff=file --target=es2017 --outdir=../priv/static/assets), cd: Path.expand(\u0026quot;../assets\u0026quot;, __DIR__), env: %{\u0026quot;NODE_PATH\u0026quot; =\u0026gt; Path.expand(\u0026quot;../deps\u0026quot;, __DIR__)} ]  be careful --target=es2017 in also --target=es2016 in some Phoenix versions, but best to upgrade.\nUpdate the Tailwind configuration The final step is to update Tailwind (set NotoSans to the default font \u0026amp; make quickens available)\n# /assets/tailwind.config.js const defaultTheme = require('tailwindcss/defaultTheme') module.exports = { mode: 'jit', purge: [ './js/**/*.js', '../lib/*_web/**/*.*ex' ], theme: { extend: { fontFamily: { sans: ['NotoSans var', ...defaultTheme.fontFamily.sans], quicken: ['Quickens'] }, }, }, variants: { extend: {}, }, plugins: [], }  Resources (1.6.x)   https://www.youtube.com/watch?v=vZBHkvTAb2U  https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58  https://sergiotapia.com/phoenix-160-liveview-esbuild-tailwind-jit-alpinejs-a-brief-tutorial  https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix  https://thinkingelixir.com/petal-stack-in-elixir/  https://larainfo.com/blogs/build-simple-count-app-using-apline-js-with-tailwind-css  https://fullstackphoenix.com/tutorials/combine-phoenix-liveview-with-alpine-js  https://www.cogini.com/blog/using-asdf-with-elixir-and-phoenix/  https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58  https://tailwindcss.com/  https://github.com/alpinejs/alpine  https://github.com/tailwindlabs/tailwindcss  https://experimentingwithcode.com/custom-fonts-with-phoenix-and-tailwind/  https://fullstackphoenix.com/tutorials/add-tailwind-html-generators-in-phoenix  https://elixirforum.com/t/how-do-i-use-a-custom-font-with-phoenix-1-6-and-esbuild/43791/16  Older Resources   https://www.youtube.com/watch?v=o4Prej0wIZA  http://blog.pthompson.org/alpine-js-and-liveview  https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix  https://fullstackphoenix.com/tutorials/get-started-with-tailwind-in-phoenix  https://fullstackphoenix.com/tutorials/combine-phoenix-liveview-with-alpine-js  https://medium.com/mindvalley-technology/how-to-add-tailwindcss-to-your-phoenix-project-e2250ad31ace  https://thinkingelixir.com/podcast-episodes/021-tailwind-css-alpine-js-and-liveview-with-patrick-thompson/  ","date":1645916513,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653174113,"objectID":"ad089382e065eec732ac1ef5cc0d01a8","permalink":"https://btihen.me/post_elixir_phoenix/phoenix_1_6_petal_setup_with_asdf/","publishdate":"2022-02-27T01:01:53+02:00","relpermalink":"/post_elixir_phoenix/phoenix_1_6_petal_setup_with_asdf/","section":"post_elixir_phoenix","summary":"The underlying tooling for a PETAL Stack","tags":["Phoenix","Phoenix 1.6.x","Elixir","TailwindCSS","TailwindCSS 3.x","AlpineJS","AlpineJS 3.x","LiveView","PETAL","PETAL Stack","ASDF"],"title":"Phoenix 1.6 PETAL Stack Setup by Hand","type":"post_elixir_phoenix"},{"authors":["Bill Tihen"],"categories":["rails","auth"],"content":"I wrote a little app for a small non-profit group. Some of them had severe problems with password management - so this article is how I solved that.\nThe easiest way to approach this is to use Rails built-in Secure Global IDs, in this way no database migrations are needed.\nOverview  User enters their email-address in a simple form If account is found - a link with a token is generated and email is sent User is notified that the link is on its way (even if the account is not found and no email is sent) When the user follows the link in the email, a session is generated Session valid until the session expires or the user logs out (deleting the session).  NOTE: Since you are using Devise, I will assume you are using it to also manage accounts. However to keep the code short I will only show what is needed for this one feature.\nUnderstanding GlobalIDs Let\u0026rsquo;s start by understanding how Global IDs work\n We start by grabbing a user object and generating a token. Next we use the token to retrieve the same user object. Code to demostrate the usage:  bin/rails c user_orig = User.first # * the `for: 'user_auth'` must matching on the receiving end. # * the `expires_in: 1.hour` can be set for any length of time (default is 30 days) sgid = user_orig.to_sgid(expires_in: 1.hour, for: 'user_auth') # now that we have a secured global id, we can generate a token auth_token = sgid.to_s # token from the Global ID # should retrieve the user since the token is still valid and the `for:` string matches user_retrieved = GlobalID::Locator.locate_signed(auth_token, for: 'user_auth') # try this token again in an hour+ and it should fail! user_retrieved.id == user_orig.id # should be nil, since the `for:` string didn't match GlobalID::Locator.locate_signed(auth_token, for: 'admins_access').nil?  Global IDs for login To use a Global ID will need a user\u0026rsquo;s email to send it to them and generate a token points to a url that can verify the token and create a session. So we would need code that looks something like:\nemail = params[:email] user = User.find_by(email: email) sgid = user.to_sgid(expires_in: 1.hour, for: 'user_auth') auth_url = Rails.application.routes.url_helpers .auth_user_session_url(auth_token: sgid.to_s) UserAuthMailer.send_link(user, auth_url).deliver_now  Of course we don\u0026rsquo;t have the auth_user_session_url route and UserAuthMailer.send_link yet, but we will build that soon.\nTo unpack the token and build a session we will need code that looks like:\nauth_token = params[:auth_token] user = GlobalID::Locator.locate_signed(auth_token, for: 'user_auth') if user.present? sign_in(user) # a devise method flash[:notice] = \u0026quot;Welcome back! #{user.email}\u0026quot; else flash[:alert] = 'invalid token' end redirect_to root_path  Lets figure out where all this code goes to integrate with both Rails and Devise.\nSimple App This code-repo is posted at: https://github.com/btihen/ruby_kafi_passwordless_devise_code (actually this has code to demo two methods)\nCreate a Rails Project\nbin/rails new passwordless_devise_code cd passwordless_devise_code bin/rails db:create bin/rails g controller Landing index bin/rails g scaffold Pet name species bin/rails db:migrate ## config/routes.rb Rails.application.routes.draw do resources :pets root to: \u0026quot;landing#index\u0026quot; end  The landing page and pets should both be fully available.\nAdd the Devise Gem User-Controller to manage users:\nbundle add devise bundle install bin/rails generate devise:install bin/rails generate devise User # update the migration to match any added features bin/rails db:migrate  Devise / Rails Config for email and URLs Devise and Rails need a few config tweeks to do what we want. (the example is for development, but when publishing of course production will need the appropriate configs too)\n# config/environments/development.rb self.default_url_options = { host: 'http://localhost:3000' } config.action_mailer.default_url_options = { host: 'localhost', port: 3000 } # app/views/layouts/application.html.erb \u0026lt;p class=\u0026quot;notice\u0026quot;\u0026gt;\u0026lt;%= notice %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026quot;alert\u0026quot;\u0026gt;\u0026lt;%= alert %\u0026gt;\u0026lt;/p\u0026gt;  Require Authentication to access Pets Now lets activate Devise on all pages, except the landing page.\n# app/controllers/application_controller.rb class ApplicationController \u0026lt; ActionController::Base before_action :authenticate_user! end # app/controllers/landing_controller.rb class LandingController \u0026lt; ApplicationController skip_before_action :authenticate_user! def index end end  Now the landing page should be available, but not the pets page.\nSetup Session Authentication We are going to need to generate our own DeviseSession controller and add to it.\nrails g devise:controllers users -c=sessions # app/controllers/users/sessions_controller.rb: class Users::SessionsController \u0026lt; Devise::SessionsController def auth_token auth_token = params[:auth_token] user = GlobalID::Locator.locate_signed(auth_token, for: 'user_auth') # if we get a user then we know the secured global ID checked out if user.present? sign_in(user) flash[:notice] = \u0026quot;Welcome back! #{user.email}\u0026quot; redirect_to pets_path else flash[:alert] = 'OOPS - something went wrong.' redirect_to root_path end end end  We need to tell Devise and Rails about our new code in the routes:\n#config/routes.rb Rails.application.routes.draw do # tell devise about our sessions controller devise_for :users, controllers: { sessions: 'users/sessions' } devise_scope :user do # tell rails and devise about our new passwordless authorization route get 'users/auth_token/:auth_token', as: :auth_user_session, to: 'users/sessions#auth_token' end resources :pets root to: \u0026quot;landing#index\u0026quot; end  If we try this now we will get a password error, since devise always assumes a user MUST have and has entered a password.\nAllow Devise to ignore passwords It is tricky to remove the passwords, but easy to ignore them with:\nclass User \u0026lt; ApplicationRecord before_validation :set_password, on: :create # don't require passwords with user_authenticate! def password_required? false # because we aren't using passwords end private # set random Devise passwords to keep devise happy def set_password tmp_passwd = SecureRandom.alphanumeric(30) # the longer the better (more or less) self.password = tmp_passwd self.password_confirmation = tmp_passwd end end  Testing our new model and controller bin/rails c # create new devise user (without a known password) User.create(email: \u0026quot;tester@test.ch\u0026quot;, name: \u0026quot;Tester\u0026quot;) user = User.last sgid = user.to_sgid(expires_in: 1.hour, for: 'user_auth') auth_url = Rails.application.routes.url_helpers .auth_user_session_url(auth_token: sgid.to_s) # `auth_user_session_url` - matches our route name we set!  Copy this generated url into your browser and you should end up on the pets page!\nEmailing our auth_token Now that we know the Auth Token works, lets learn to email them to the appropriate email\n# create the Emailer code with: bin/rails g mailer UserAuth send_link # app/mailers/user_auth_mailer.rb class UserAuthMailer \u0026lt; ApplicationMailer def send_url(user, auth_url) @user = user @url = auth_url @host = Rails.application.config.hosts.first mail to: @user.email, subject: 'Sign in into #{@host}' end end  Now lets create the email contents - let\u0026rsquo;s include a greeting, the sending host and of course the auth_url (we will determine later)\n# app/views/user_auth_mailer/send_url.html.erb \u0026lt;p\u0026gt; Hi \u0026lt;%= @user.email %\u0026gt;, \u0026lt;br\u0026gt;\u0026lt;br\u0026gt; For access to \u0026lt;%= @host %\u0026gt; \u0026lt;%= link_to \u0026quot;Click here\u0026quot;, @url %\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt; or in plain-text: \u0026lt;%= @url %\u0026gt; \u0026lt;/p\u0026gt; # app/views/user_auth_mailer/send_url.text.erb Hi \u0026lt;%= @user.email %\u0026gt;, For access to \u0026lt;%= @host %\u0026gt; follow this link: \u0026lt;%= @url %\u0026gt;  Test the emailer Start mailhog and then:\nbin/rails c user = User.first sgid = user.to_sgid(expires_in: 1.hour, for: 'user_auth') auth_url = Rails.application.routes.url_helpers .auth_user_session_url(auth_token: sgid.to_s) UserAuthMailer.send_link(user, auth_url).deliver_now  Now open the mailhog browser tab (or copy the url from the console) and click on the link and pets should open.\nNow the Hard (Devise Strategy) part Now we have all that we need to update Devise with a new Strategy.\nmkdir app/lib/devise mkdir app/lib/devise/models mkdir app/lib/devise/strategies touch app/lib/devise/models/token_authenticatable.rb touch app/lib/devise/strategies/token_authenticatable.rb # app/lib/devise/models/passwordless_authenticatable.rb require Rails.root.join('app/lib/devise/strategies/token_authenticatable') module Devise module Models module TokenAuthenticatable extend ActiveSupport::Concern end end end # app/lib/devise/strategies/token_authenticatable.rb require 'devise/strategies/authenticatable' require_relative '../../../mailers/user_mailer' module Devise::Strategies class TokenAuthenticatable \u0026lt; Authenticatable def authenticate! email = params.dig(:user, :email) user = User.find_by(email: email) if user.present? \u0026amp;\u0026amp; !user.locked_at? # and other restrictions as (depending on what was configured) auth_sgid = user.to_sgid(expires_in: 1.hour, for: 'user_auth') auth_token = auth_sgid.to_s auth_url = Rails.application.routes.url_helpers .auth_user_session_url(login_token: auth_token) UserAuthMailer.send_url(user, auth_url).deliver_later end fail!(\u0026quot;An email was sent to you with an authorization link.\u0026quot;)s end end end Warden::Strategies.add(:token_authenticatable, Devise::Strategies::TokenAuthenticatable)  NOTE: this strategy authenticates that the user is allowed to get a token. The auth method in sessions_controller - authenticates the token and creates a session.\nTell Devise to use the new Strategy Now we want to move Devise away from its default database_athenticable to token_authenticable\nSo now we need to add :token_authenticatable to our User model:\n# app/models/users.rb class User \u0026lt; ApplicationRecord before_validation :set_password, on: :create # at this point validatable is basically only checking that the email is valid devise :token_authenticatable, :validatable def password_required? false # because we aren't using passwords end private # since we aren't using passwords def set_password tmp_passwd = SecureRandom.alphanumeric(20) self.password = tmp_passwd self.password_confirmation = tmp_passwd end end  However, this isn\u0026rsquo;t enough - devise must know to load this strategy at boot - we do this with by adding the following to the VERY TOP of Devise initializer file:\n# config/initializers/devise.rb Devise.add_module(:token_authenticatable, { strategy: true, route: :session, controller: :sessions, model: 'app/lib/devise/models/token_authenticatable' })  NOTE: if all is good the devise routes should be there (plus our extra one):\nnew_user_session GET /users/sign_in(.:format) users/sessions#new user_session POST /users/sign_in(.:format) users/sessions#create destroy_user_session DELETE /users/sign_out(.:format) users/sessions#destroy auth_user_session GET /users/auth_token(.:format) users/sessions#auth_token  Devise Views (remove the passwords) Now we need to change the password in the views so we will need to generate the devise views (and configure devise to use scoped views is probably best):\n# config/initializers/devise.rb: config.scoped_views = true # generate the devise views (to override them) bin/rails generate devise:views users  Now you will need to remove the password field from all the views. For this project, I will only show the sign_in page:\n# app/views/users/sessions/new.html.erb \u0026lt;h2\u0026gt;Log in\u0026lt;/h2\u0026gt; \u0026lt;%= form_for(resource, as: resource_name, url: user_session_path) do |f| %\u0026gt; \u0026lt;div class=\u0026quot;field\u0026quot;\u0026gt; \u0026lt;%= f.label :email %\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;%= f.email_field :email, autofocus: true, autocomplete: \u0026quot;email\u0026quot; %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% if devise_mapping.rememberable? %\u0026gt; \u0026lt;div class=\u0026quot;field\u0026quot;\u0026gt; \u0026lt;%= f.check_box :remember_me %\u0026gt; \u0026lt;%= f.label :remember_me %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;div class=\u0026quot;actions\u0026quot;\u0026gt; \u0026lt;%= f.submit \u0026quot;Log in\u0026quot; %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;%= render \u0026quot;users/shared/links\u0026quot; %\u0026gt;  Security Note NOTE: I prefer a short sgid key life-spans and longer session-lifespans (both are configurable)\nBy default rails sessions have no expiration (until logout) and sgids are valid for a month. I find both of these settings too long. To change this default behavior, you can set the session length with the setting:\n# config/initializers/session_store.rb Rails.application.config.session_store :cookie_store, expire_after: 14.days  And you saw in the code where the sgid lifespan is defined.\nTest the full flow With all that completed you should be able to test the full workflow!\n start rails with: bin/rails s start mailhog with: mailhog go to: http://localhost:3000/user/home (should get redirected to the below URL) go to: http://localhost:3000/user/logins enter the \u0026ldquo; tester@test.ch\u0026rdquo; email Check mailhog for the link http://localhost:8025/ click the link you should now be on http://localhost:3000/user/home  Resources Rails GlobalID\nThe nice thing about these is that the auto expire - simplifying the code a lot.\n  https://github.com/rails/globalid  https://www.magicalruby.com/implementing-magic-links-in-rails/  Token using SecureRandom\nWith these you need to create your own expiration and lookup system (more code add a migration), but will work with any framework.\n (using uuids) - https://oozou.com/blog/how-to-implement-passwordless-authentication-in-ruby-on-rails-154 (using SecureRandom) - https://abevoelker.com/skipping-the-database-with-stateless-tokens-a-hidden-rails-gem-and-a-useful-web-technique/  Devise Options\n Devise Plugin - https://github.com/abevoelker/devise-passwordless Do it Yourself Devise - https://dev.to/matiascarpintini/magic-links-with-ruby-on-rails-and-devise-4e3o Do it yourself Devise - https://www.mintbit.com/blog/passwordless-authentication-in-ruby-on-rails-with-devise  Other Options\n  passwordless gem - https://github.com/mikker/passwordless#token-and-session-expiry\n  magic-link gem - https://github.com/dvanderbeek/magic-link\n  Using Sorcery - https://fullstackheroes.com/rails/sorcery-passwordless-authentication/\n  Using Sourcery - https://www.sitepoint.com/magical-authentication-sorcery/\n  (using JWTs) - https://blog.kiprosh.com/implement-passwordless-authentication-via-magic-link-in-rails-api/ Passwordless Security Overview\n   https://abevoelker.com/skipping-the-database-with-stateless-tokens-a-hidden-rails-gem-and-a-useful-web-technique/\n  Sessions\n  https://api.rubyonrails.org/classes/ActionDispatch/Session/CookieStore.html  https://blog.saeloun.com/2019/09/12/rails-6-adds-dig-to-actiondispatch-request-session.html  ","date":1639784215,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1639784215,"objectID":"d205200078554def6f01649afebca86f","permalink":"https://btihen.me/post_ruby_rails/rails_6_x_passwordless_devise_w_global_ids/","publishdate":"2021-12-18T01:36:55+02:00","relpermalink":"/post_ruby_rails/rails_6_x_passwordless_devise_w_global_ids/","section":"post_ruby_rails","summary":"Devise offers a lot of useful User management, but has no Passwordless Strategy - here's how to do it","tags":["authentication","passwordless","Devise","Signed GlobalID","Magic-Link"],"title":"Passwordless Authentication with Devise","type":"post_ruby_rails"},{"authors":["Bill Tihen"],"categories":["Rails"],"content":"Passwordless Authentication is very convenient for users and generally as secure as passwords (according to many articles as long as the email access-links are short-lived - as email is not very secure).\nTherefore, after some reading, it seems like a good approach is to make a short-lived link, and then transfer the security to a session.\nI found that there seems to be three simple approaches:\n Do it yourself: with a Signed-GlobalID from Rails (self-times out \u0026amp; no migration) Do it yourself: with a Stored-Token (adapts to any framework) Other Options: Devise Plugin (when using devise) or other Gems  This article will focus on using Secure Random - since it can work with any Framework (in Rails however, I prefer to use SignedGlobalIDs - see: https://btihen.me/, since it simplifies the user model and the expiration logic)\nOverview  User enters their email-address in a simple form If account is found - a link with a token is generated and email is sent User is notified that the link is on its way (even if the account is not found and no email is sent) When the user follows the link in the email, a session is generated Session valid until the session expires or the user logs out (deleting the session).  NOTE: I will be assuming that the account must exist, but you could also just create a new account (consider this option carefully and some limits on account creation per IP address or per hour, etc. As you could otherwise be flooded with useless, malicious emails!)\nDo it yourself This is relatively easy to do with built-in Rails security - and I like not being dependent on external code, I\u0026rsquo;ll show a way to do this. In this case, assume that the accounts are already created (or not).\nIf you want to do user registration, confirmation, etc \u0026ndash; then I think it is best to use Devise or some other gem!\nGetting Started Code repo is posted at: https://github.com/btihen/magic_token\nCreate a Rails Project:\nbin/rails new magic_token cd magic_token bin/rails db:create  now start rails and be sure you get the welcome page at: http://localhost:3000\nAssuming all works well:\ngit add . git commit -m \u0026quot;initial commit\u0026quot;  Create a Landing Page We will now make a landing page (it will need to be always available):\nbin/rails g controller landing index --helper false  now lets point the root page to that too - make the routes page look like:\n# config/routes.rb Rails.application.routes.draw do get '/landing', to: 'landing#index', as: :landing root to: \u0026quot;landing#index\u0026quot; end  Now lets check all is well with the routes:\nbin/rails routes | grep landing # should show landing GET /landing(:format) landing#index root GET / landing#index  (quite likely it will be all spread out)\nStart up rails and be sure we can access these pages:\n http://localhost:3000/ http://localhost:3000/landing  Feel free to make them look nicer!\nassuming all works well:\ngit add . git commit -m \u0026quot;add landing page\u0026quot;  Create Users Management Page User-Controller to manage users:\nbin/rails g scaffold User email:string token:string token_expires_at:datetime --helper false bin/rails db:migrate  Lets make a few accounts in the seed file (or enter in the console bin/rails c):\n# db/seeds.rb User.create(email: 'test1@test.ch') User.create(email: 'test2@test.ch')  now run the seed file:\nbin/rails db:seed  Lets start Rails\nbin/rails s  Go to: http://localhost:3000/users\nNow you should see the users \u0026amp; be able to create a few more users.\nFeel free to make the GUI nicer!\nAssuming all is good:\ngit add . git commit -m \u0026quot;user management page\u0026quot;  Add auth restrictions to Application Controller This will allow us to control access to all urls within our app (we will also allow exceptions for a landing page)\nThe application controller ensures only authenticated users (with a session) can access pages - with the following code (especially the users_only, but current_user is also very helpful generally)\n# app/controllers/application_controller.rb class ApplicationController \u0026lt; ActionController::Base before_action :users_only def current_user # `dig` and `find_by` avoid raising an exception w/o a session user_id = session.dig(:user_id) @current_user ||= User.find_by(id: user_id) end private # code to ensure only logged in users have access to users pages def users_only if current_user.blank? # send to login page to get an access link redirect_back(fallback_location: landing_path, :alert =\u0026gt; \u0026quot;Login Required\u0026quot;) # # uncomment to send people access link page (when built) # redirect_back(fallback_location: new_login_path, # :alert =\u0026gt; \u0026quot;Login Required\u0026quot;) end end end  Now we should NOT be able to reach our previous pages\nhttp://localhost:3000/ http://localhost:3000/users http://localhost:3000/landing\nNow lets allow access to the landing page again - we need to add:\nskip_before_action :users_only\nto app/controllers/landing_controller.rb in order to allow unathenticated access.\n# app/controllers/landing_controller.rb class LandingController \u0026lt; ApplicationController skip_before_action :users_only def index end end  Assuming that works:\ngit add . git commit -m \u0026quot;restrict access w/exception\u0026quot;  Create a Users Homepage Now that we have a public home / default page - lets make an authenticed (user) homepage - where we auto-redirect people on login.\nbin/rails g controller home index --helper false  update the routes page with the following (I\u0026rsquo;m not a fan of including the index in the url)\n# config/routes.rb Rails.application.routes.draw do get '/home', to: 'home#index', as: :home resources :users get '/landing', to: 'landing#index', as: :landing root to: \u0026quot;landing#index\u0026quot; end  Now lets check all is well with the routes:\nbin/rails routes | grep home # should show home GET /home(:format) home#index  Assuming the routes are correct when we try to go to:\nhttp://localhost:3000/home\nwe should end up at (be redirected to):\nhttp://localhost:3000/landing\nassuming this works well:\ngit add . git commit -m \u0026quot;restricted user home page\u0026quot;  Optional - setup a mail trap (MailHog) I like to view the emails in a browser to check the look as well as the content, for this quick blog - just viewing the info in the logs is good enough. However, in case you are interested a quick mini MailHog tutorial (for a Mac):\nInstall mailhog:\nbrew install mailhog mailhog  now open config/environments/development.rb\nand add the following mail settings (for development):\n# config/environments/development.rb Rails.application.configure do # Settings specified here will take precedence over those in config/application.rb. # ... # mailhog config config.action_mailer.perform_deliveries = true config.action_mailer.smtp_settings = { address: 'localhost', port: 1025 } # ... end  at this point you will be able to go to: http://localhost:8025/ and you should see a webpage that looks like a simple mailreader. In the future, when you send an email from rails it should be available here.\nCreate an emailer to send Access-Links We need a way to send the login link - so we will create a login mailer with:\nbin/rails generate mailer Login send_link --helper false  Configure our emailer for our needs to send the login link:\n# app/mailer/login_mailer.rb class LoginMailer \u0026lt; ApplicationMailer def send_link(user, login_url) @user = user @login_url = login_url host = Rails.application.config.hosts.first mail(to: @user.email, subject: \u0026quot;Access-Link for #{host}\u0026quot;) end end  Now we need to create the mailer views to send the url with the access token\nThe HTML view:\n# app/views/login_mailer/send_link.html.erb \u0026lt;h1\u0026gt;Hi \u0026lt;%= @user.email %\u0026gt;,\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;\u0026lt;a href=\u0026quot;\u0026lt;%= @login_url %\u0026gt;\u0026quot;\u0026gt;Access-Link for \u0026lt;%= @host %\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; \u0026lt;%= @login_url %\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Link is valid for about an hour from \u0026lt;%= DateTime.now %\u0026gt;\u0026lt;/p\u0026gt;  The text view:\n# app/views/login_mailer/send_link.text.erb Hi \u0026lt;%= @user.email %\u0026gt;, Access-Link for \u0026lt;%= @host %\u0026gt; is: \u0026lt;%= @login_url %\u0026gt; Link is valid for about an hour from \u0026lt;%= DateTime.now %\u0026gt;.  Again feel free to make these pages more beautiful with CSS (Bulma or Tailwind are my favorites)\nLets test our mailer with the rail console:\nbin/rails c # for testing we don't care much which user we pick user = User.first # we will just send a 'fake url' - we are just testing our mail sending url = \u0026quot;http://localhost:3000/landing\u0026quot; # we should should now be able to send the mail with: LoginMailer.send_link(user, url).deliver_later  Now you should be able to see that the mail was send from the console output or by going to: http://localhost:8025/ if you are running mailhog and see the email sent.\nAssuming that work:\ngit add . git commit -m \u0026quot;Login URL mailer\u0026quot;  Create an Session Authorization Controller For the session controller we don\u0026rsquo;t need views or anything else so we can just create the controller file directly.\ntouch app/controllers/sessions_controller.rb  class SessionsController \u0026lt; ApplicationController skip_before_action :users_only, only: :create def create token = params[:token].to_s # find the user with a matching token and with current-time \u0026lt; token_expired_at user = User.where(token: token) .where('users.token_expires_at \u0026gt; (?)', DateTime.now) .first if user # create the session id for current_user to access session[:user_id] = user.id # send the user to their homepage (or where erver you prefer) redirect_to(home_path, notice: \u0026quot;Welcome back #{user.name}\u0026quot;) else flash[:alert] = 'Oops - a valid login link is required' redirect_to(landing_path) # when the login request page is built it might make sense to redirect to: # redirect_to(new_login_path) end end # allow a user to logout / destroy session if desired def destroy user = current_user if user session[:user_id] = nil flash[:notice] = \u0026quot;logout successful\u0026quot; else falsh[:alert] = \u0026quot;Oops, there was a problem\u0026quot; end redirect_to(landing_path) end end  Add to routes (I am using a get for the create instead of a post verb - since I don\u0026rsquo;t know of a way to make a text url embed a post verb) - so we will add:\nget '/sessions/:token', to: 'sessions#create', as: :create_session resources :sessions, only: [:destroy]  to the routes file:\nNow the routes should look something like:\n# config/routes.rb Rails.application.routes.draw do # use get to create since I don't think a text url can create a post get '/sessions/:token', to: 'sessions#create', as: :create_session resources :sessions, only: [:destroy] get '/home', to: 'home#index', as: :home resources :users get '/landing', to: 'landing#index', as: :landing root to: \u0026quot;landing#index\u0026quot; end  now if we check the session routes we should see something like:\nbin/rails routes | grep session create_session GET /sessions/:token(.:format) sessions#create session DELETE /sessions/:id(.:format) sessions#destroy  OPTIONAL: by default rails sessions have no expiration, thus are deleted when the browser closes. To change this default behavior, we need to create the file.\ntouch config/initializers/session_store.rb  Now you can set the session length (time until a new login is required) with the setting:\n# config/initializers/session_store.rb Rails.application.config.session_store :cookie_store, expire_after: 14.days  you might want to use 2 weeks or 4 weeks - whatever you and your users are comfortable with before forcing a new login (if unsure - go with a shorter time-frame)\nLet\u0026rsquo;s setup a user with a known valid token and test our new session controller:\nbin/rails c user = User.first # the token length isn't so important but should be enough to make guessing very hard user.token = SecureRandom.hex(50) # be sure to use a url-safe random-generator # expiration time should be relatively short - email is generally not encrypted user.token_expires_at = DateTime.now + 1.hour user.save user.reload # generate the URL for the session path # (we need to give the full rails path to the url_helpers since we don't have the controller loaded) url = Rails.application.routes.url_helpers.create_session_url(token: user.token, host: 'localhost:3000') # copy the above url into the browser  Now when we enter the url generated in the email (or click on the link in mailhog), we should be redirected to the \u0026ldquo;home\u0026rdquo; page http://localhost:3000/home\nAssumeing that works:\ngit add . git commit -m \u0026quot;session controller (login)\u0026quot;  Access-Link Generation We will need to allow the user to request an access-link.\nLogin Controller Now lets create a user login controller:\nbin/rails g controller Logins new create --helper false  Now we need the Logins Controller login AND be sure to add\nskip_before_action :users_only\nso this page is always available!\nAlso note the code is similar to what we entered previously in the console.\n# app/controllers/users/logins_controller.rb class LoginsController \u0026lt; ApplicationController # we need to skip the users only check so this pages can be accessed skip_before_action :users_only def new user = User.new render :new, locals: {user: user} end def create email = user_params[:email] # we may or may not find a user user = User.find_by(email: email) # always take the time to calculate token info (discourages email fishing) token = SecureRandom.hex(50) # besure to use NOW and not NEW! token_expires_at = DateTime.now + 1.hour token_params = {token: token, token_expires_at: token_expires_at} # if we have a user and the update is successful if user \u0026amp;\u0026amp; user.update(token_params) access_url = create_session_url(token: user.token) LoginMailer.send_link(user, access_url).deliver_later end # # uncomment to add noise to discourage response time monitoring # # in order to mine user emails # mini_wait = Random.new.rand(10..20) / 1000 # wait(mini_wait) # true or not we state we have sent an access link and redirect to the landing page # also prevent email fishing by always returning the same answer redirect_to(landing_path, notice: \u0026quot;Access-Link has been sent\u0026quot;) end private # Only allow a list of trusted parameters through. def user_params params.require(:user).permit(:email) end end  NOTE: In real projects I tend to put all my business logic in a command or service class \u0026ndash; I like skinny models and skinny controllers)\nWe need to add the route to the users login_controller with:\n# config/routes.rb Rails.application.routes.draw do resources :logins, only: [:new, :create] # use get to create since I don't think a text url can create a post get '/sessions/:token', to: 'sessions#create', as: :create_session resources :sessions, only: [:destroy] get '/home', to: 'home#index', as: :home resources :users get '/landing', to: 'landing#index', as: :landing root to: \u0026quot;landing#index\u0026quot; end  now check the routes:\nbin/rails routes | grep logins # should return logins POST /logins(.:format) logins#create new_login GET /logins/new(.:format) logins#new  Lets go to the new page http://localhost:3000/logins/new and be sure that we can get access that page.\nNow login into the console and check the user attributes.\nbin/rails c user = User.find_by(email: 'test1.test.ch') # or whatever email you used user.token # be sure it updated with the same key as in the logs user.token_expires_at # should be an hour into the future # if the date is the year 0000 - then you used .new (with an `e`) instead of .now  Assuming this works:\ngit add . git commit -m \u0026quot;login controller\u0026quot;  Login Form Login email form - we only need app/views/logins/new.html.erb\nWe can delete app/views/logins/create.html.erb as that just posts to an action and then redirects to our user\u0026rsquo;s home_path\n# app/views/ogins/new.html.erb \u0026lt;%= form_for(user, local: true, url: logins_path, # NEW MUST BE PLURAL for POST id: \u0026quot;login-form\u0026quot;, class: \u0026quot;user\u0026quot; ) do |form| %\u0026gt; \u0026lt;div class=\u0026quot;field\u0026quot;\u0026gt; \u0026lt;label class=\u0026quot;label\u0026quot;\u0026gt;Email for Access-Link\u0026lt;/label\u0026gt; \u0026lt;div class=\u0026quot;control\u0026quot;\u0026gt; \u0026lt;%= form.email_field :email, placeholder: \u0026quot;Email\u0026quot;, class: 'input' %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p class=\u0026quot;help\u0026quot;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;control\u0026quot;\u0026gt; \u0026lt;%= form.submit(\u0026quot;Get Access-Link\u0026quot;, class: \u0026quot;button is-success\u0026quot;) %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt;  PS - I dislike using instance variables (and often use \u0026lsquo;input\u0026rsquo; classes) with my forms - this is why this form looks a little different than standard rails.\nNote I often use Bulma - so here is how I like to format my forms (without Bulma installed the form will be ugly).\nLet\u0026rsquo;s test this code:\nFirst:\n go to: http:localhost:3000/home hopefully your are redirected to: http:localhost:3000/landing  Now:\n go to: http:localhost:3000/logins/new enter a user\u0026rsquo;s email address find the login url generated in the email enter that login_url in the browser - (ideally click on the link in mailhog - much like a \u0026lsquo;real user\u0026rsquo; would do) hopefully you are now redirected to http:localhost:3000/home  Assuming this works:\ngit add . git commit -m \u0026quot;login form and create action with redirect\u0026quot;  Resources s Code Repository is at:\nRails GlobalID\nThe nice thing about these is that the auto expire - simplifying the code and the usermodel.\n  https://github.com/rails/globalid  https://www.magicalruby.com/implementing-magic-links-in-rails/  Token using SecureRandom\nWith these you need to create your own expiration and lookup system (more code add a migration), but will work with any framework.\n (using uuids) - https://oozou.com/blog/how-to-implement-passwordless-authentication-in-ruby-on-rails-154 (using SecureRandom) - https://abevoelker.com/skipping-the-database-with-stateless-tokens-a-hidden-rails-gem-and-a-useful-web-technique/  Devise Options\n Devise Plugin - https://github.com/abevoelker/devise-passwordless Do it Yourself Devise - https://dev.to/matiascarpintini/magic-links-with-ruby-on-rails-and-devise-4e3o Do it yourself Devise - https://www.mintbit.com/blog/passwordless-authentication-in-ruby-on-rails-with-devise  Other Options\n  passwordless gem - https://github.com/mikker/passwordless#token-and-session-expiry\n  magic-link gem - https://github.com/dvanderbeek/magic-link\n  Using Sorcery - https://fullstackheroes.com/rails/sorcery-passwordless-authentication/\n  Using Sourcery - https://www.sitepoint.com/magical-authentication-sorcery/\n  (using JWTs) - https://blog.kiprosh.com/implement-passwordless-authentication-via-magic-link-in-rails-api/ Passwordless Security Overview\n   https://abevoelker.com/skipping-the-database-with-stateless-tokens-a-hidden-rails-gem-and-a-useful-web-technique/\n  Sessions\n  https://api.rubyonrails.org/classes/ActionDispatch/Session/CookieStore.html  https://blog.saeloun.com/2019/09/12/rails-6-adds-dig-to-actiondispatch-request-session.html  ","date":1632319797,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1632319797,"objectID":"221868a1269ab8a3938fa68e03f4b435","permalink":"https://btihen.me/post_ruby_rails/rails_6_x_auth_w_magic_links_using_random_token/","publishdate":"2021-09-22T16:09:57+02:00","relpermalink":"/post_ruby_rails/rails_6_x_auth_w_magic_links_using_random_token/","section":"post_ruby_rails","summary":"Passwordless Authentication is very convenient for users and generally as secure as passwords (according to many articles as long as the email access-links are short-lived - as email is not very secure).","tags":["authentication","passwordless auth","MagicLink","SecureRandom"],"title":"Rails 6.x Auth with MagicLink using SecureRandom Token","type":"post_ruby_rails"},{"authors":["Bill Tihen"],"categories":["rails","auth"],"content":"Passwordless Authentication is very convenient for users and generally as secure as passwords (a good security authentication discussion can be found at: ).\nA good approach is to make a short-lived link, and then transfer the security to a session.\nI found that there seems to be three simple approaches:\n Do it yourself: with a Stored-Token (with an expiration date-time) Do it yourself: with a Signed-GlobalID from Rails (self-times out \u0026amp; no stored tokens) Other Options: other Gems for Devise, Sorcery, or independent gems  Overview  User enters their email-address in a simple form If account is found - a link with a token is generated and email is sent User is notified that the link is on its way (even if the account is not found and no email is sent) When the user follows the link in the email, a session is generated Session valid until the session expires or the user logs out (deleting the session).  NOTE: User accounts are assumed to be previously created, and verified. If you need a full set of features - then your best option is probably to use devise, sorcery or authenticate and use an extension or build your own extension to one of these libraries. Either way, this article will clarify the basics of passwordless authentication.\nGetting Started Code Repo is posted at: https://github.com/btihen/magic_sgid\nCreate a Rails Project\nbin/rails new magic_id cd magic_id git add . git commit -m \u0026quot;initial commit on creation\u0026quot;  User-Controller to manage users:\nbin/rails db:create bin/rails g scaffold User name:string email:string bin/rails db:migrate  Lets start Rails\nbin/rails s  Go to: http://localhost:3000/users and create a few users - feel free to make the GUI nicer!\nAssuming all is good:\ngit add . git commit \u0026quot;user management scaffold\u0026quot;  Create a Landing Page we need a landing / root page to send users when they are not logged in:\nbin/rails g controller landing index  now lets point the root page to that too - make the routes page look like:\n# config/routes.rb Rails.application.routes.draw do get '/landing', to: 'landing#index', as: :landing root to: \u0026quot;landing#index\u0026quot; end  I will also remove: app/helpers/landing_helper.rb with:\nrm app/helpers/landing_helper.rb  Now lets check all is well with the routes:\nbin/rails routes | grep landing # should show landing GET /landing(:format) landing#index root GET / landing#index  (quite likely it will be all spread out)\nNow the following pages should be available:\n http://localhost:3000/ http://localhost:3000/landing  again feel free to make them look nice.\nassuming all works well:\ngit add . git commit -m \u0026quot;create landing page and landing \u0026amp; root route\u0026quot;  Create a User Application Controller (restrict access) This will allow us to control access to all urls in the /users paths within our app\nmkdir app/controllers/users touch app/controllers/users/application_controller.rb  The application controller ensures only authenticated users (with a session) can access pages in the users area:\n# app/controllers/users/application_controller.rb class Users::ApplicationController \u0026lt; ApplicationController before_action :users_only def current_user(user_id = session[:user_id]) # `try` and `find_by` avoid raising an exception w/o a session @current_user ||= User.find_by(id: user_id) end private # code to ensure only logged in users have access to users pages def users_only # send person to a safe page if not logged in if current_user.blank? # send to login page to get an access link redirect_back(fallback_location: landing_path, :alert =\u0026gt; \u0026quot;Login Required\u0026quot;) # once the below page is created we can redirect to here instead # redirect_back(fallback_location: new_users_login_path, # :alert =\u0026gt; \u0026quot;Login Required\u0026quot;) end end end  NOTE: if you want all pages protected then put this code in: app/controllers/application_controller.rb and adjust the routes (remove the namespace)!\nRestricted User Home Page we need a landing / root page to send users when they are not logged in:\nbin/rails g controller users/landing index  now lets point the root page to that too - make the routes page look like:\n# config/routes.rb Rails.application.routes.draw do namespace :users do get '/', as: 'root', to: 'home#index' get '/home', as: 'home', to: 'home#index' end get '/landing', to: 'landing#index', as: :landing root to: \u0026quot;landing#index\u0026quot; end  Update the controller to use the Users::ApplicationController:\n# app/controllers/users/home_controller.rb class Users::HomeController \u0026lt; Users::ApplicationController def index end end  I will also remove: app/helpers/users/home_helper.rb with:\nrm app/helpers/users/home_helper.rb  Now lets check all is well with the routes:\nbin/rails routes | grep user # should show users_home GET /users/home(:format) home#index  (quite likely it will be all spread out)\nNow the following pages should NOT be available:\n http://localhost:3000/users http://localhost:3000/users/home  and we should be redirected to the landing page. If you access the home page - then probably the first line is wrong it should be:\nUsers::HomeController \u0026lt; Users::ApplicationController\nassuming all works well:\ngit add . git commit -m \u0026quot;create restricted user home page\u0026quot;  Create an Session Authorization Controller touch app/controllers/users/sessions_controller.rb  class Users::SessionsController \u0026lt; Users::ApplicationController # before_action :users_only, only: :destroy skip_before_action :users_only, only: :create def create sgid_token = params[:token].to_s user = GlobalID::Locator.locate_signed(sgid_token, for: 'user_access') if user # create the session id for current_user to access session[:user_id] = user.id redirect_to(users_home_path, notice: \u0026quot;Welcome back #{user.name}\u0026quot;) else flash[:alert] = 'Oops - you need a new login link' redirect_to(landing_path) # later when created we will redirect to login access link page # redirect_to(new_users_login) end end # allow a user to logout / destroy session if desired def destroy user = current_user if user session[:user_id] = nil flash[:notice] = \u0026quot;logout successful\u0026quot; else falsh[:alert] = \u0026quot;Oops, there was a problem\u0026quot; end redirect_to(landing_path) end end  Add to routes:\n# config/routes.rb Rails.application.routes.draw do namespace :users do get '/', as: 'root', to: 'home#index' get '/home', as: 'home', to: 'home#index' # use get to create since I don't think a text url can create a post get '/sessions/:token', as: 'session_create', to: 'sessions#create' # allow logout / destroy the session resources :sessions, only: [:destroy] end get '/landing', to: 'landing#index', as: :landing root to: \u0026quot;landing#index\u0026quot; end  To test this go to rails console:\nbin/rails c # create our own token user = User.first global_id = User.find(user.id).to_sgid(expires_in: 1.hour, for: 'user_access') access_token = global_id.to_s # check that this global_id works (we should get the same user) GlobalID::Locator.locate_signed(access_token, for: 'user_access') # add url helpers to console include ActionView::Helpers include ActionView::Helpers::UrlHelper # generate the URL for the session Rails.application.routes.url_helpers.users_session_create_url(token: global_id.to_s, host: 'locahost:3000') # should get something like: # \u0026quot;http://locahost:3000/users/sessions/BAh7CEkiCGdpZAY6BkVUSSItZ2lkOi8vbWFnaWMtbGlua3MvVXNlci8xP2V4cGlyZXNfaW49MzYwMAY7AFRJIgxwdXJwb3NlBjsAVEkiEHVzZXJfYWNjZXNzBjsAVEkiD2V4cGlyZXNfYXQGOwBUSSIdMjAyMS0wOS0xOVQxNTozNzo0MS4wNjdaBjsAVA==--c948a0a5ccbae391c7ab9c808677fe41da4cbc28\u0026quot; # copy this url into the browser # now we be on: `http://localhost:3000/user/` \u0026amp; `http://localhost:3000/user/home` # if you try again in an hour it should not work!  Note: by default rails sessions have no expiration, thus are deleted when the browser closes. To change this default behavior, you can set the session length with the setting:\n# config/initializers/session_store.rb Rails.application.config.session_store :cookie_store, expire_after: 14.days  Assuming all works:\ngit add . git commit -m \u0026quot;session controller gives access to users_home\u0026quot;  Access-Link Generation We will need to allow the user to request an access-link. We will do this with (we won\u0026rsquo;t be generating any models just a controller and a submission form - scaffold_controller does this for us):\nCreate a Mailer to send Access-Links We need a way to send the login link - so we will create a login mailer with:\nbin/rails generate mailer Login send_link  Configure our emailer for our needs with:\nclass LoginMailer \u0026lt; ApplicationMailer def send_link(user, login_url) @user = user @login_url = login_url host = Rails.application.config.hosts.first mail(to: @user.email, subject: \u0026quot;Access-Link for #{host}\u0026quot;) end end  And of course set up the views that contain the contents of the email: The HTML Version\n# app/views/login_mailer/send_link.html.erb \u0026lt;h1\u0026gt;Hi \u0026lt;%= @user.name %\u0026gt;,\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;\u0026lt;a href=\u0026quot;\u0026lt;%= @login_url %\u0026gt;\u0026quot;\u0026gt;Access-Link for \u0026lt;%= @host %\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; \u0026lt;%= @login_url %\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Link is valid for about an hour from \u0026lt;%= DateTime.now %\u0026gt;\u0026lt;/p\u0026gt;  The text version:\n# app/views/login_mailer/send_link.text.erb Hi \u0026lt;%= @user.name %\u0026gt;, Access-Link for \u0026lt;%= @host %\u0026gt; is: \u0026lt;%= @login_url %\u0026gt; Link is valid for about an hour from \u0026lt;%= DateTime.now %\u0026gt;.  Setup Mailhog (OPTIONAL) This is optional - technical testing can be done from the log file - but to see what the email formatting looks like this is VERY HELPFUL.\nbrew install mailhog mailhog  Configure Rails to send emails to port 1025 in development (where mailhog listens)\n# config/environments/development.rb Rails.application.configure do # Settings specified here will take precedence over those in config/application.rb. # ... # mailhog config config.action_mailer.perform_deliveries = true config.action_mailer.smtp_settings = { address: 'localhost', port: 1025 } # ... end  now open - to view:\nopen localhost:8025  Controller Now lets create a user login controller:\ntouch app/controllers/users/logins_controller.rb  Add the contents of the controller:\n# app/controllers/users/logins_controller.rb class Users::LoginsController \u0026lt; Users::ApplicationController skip_before_action :users_only def new user = User.new render :new, locals: {user: user} end def create email = user_params[:email] ip_address = request.remote_ip # the participant might already exist in our db or possimagic_link_url = participants_session_auth_url(token: participant.login_token)bly a new participant user = User.find_by(email: email) if user # create a signed expiring Rails Global ID - this makes LONG tokens, but browswers can handle it # all browsers should handle up to 2000 characters. # https://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers # https://www.geeksforgeeks.org/maximum-length-of-a-url-in-different-browsers/ global_id = user.to_sgid(expires_in: 1.hour, for: 'user_access') access_url = users_session_create_url(token: global_id.to_s) LoginMailer.send_link(user, access_url).deliver_later else # if user isn't found then grab a user and compute the global_id and url (but don't send an email) # in order to make the time of both paths similar - so people can't find user emails checking the response times # see: https://abevoelker.com/skipping-the-database-with-stateless-tokens-a-hidden-rails-gem-and-a-useful-web-technique/ global_id = User.first.to_sgid(expires_in: 1.hour, for: 'user_access') access_url = user_auth_url(token: global_id.to_s) end # uncomment to add noise to further make email fishing difficult to time # mini_wait = Random.new.rand(10..20) / 1000 # wait(mini_wait) # true or not we state we have sent an access link and redirect to the landing page # also prevent email fishing by always returning the same answer redirect_to(landing_path, notice: \u0026quot;Access-Link has been sent\u0026quot;) end private # Only allow a list of trusted parameters through. def user_params params.require(:user).permit(:email) end end  NOTE: You can let the GlobalID be valid for however long you want (in hours), but since email isn\u0026rsquo;t very secure, it seems wise to keep this short lived. The default time is 30.days\nWe need to add the route to the users login_controller with:\n# config/routes.rb Rails.application.routes.draw do # restricted area (protected by user login - Users::ApplicationController) namespace :users do get '/', as: 'root', to: 'home#index' get '/home', as: 'home', to: 'home#index' # use get to create since I don't think a text url can create a post get '/sessions/:token', as: 'session_create', to: 'sessions#create' # allow logout / destroy the session resources :sessions, only: [:destroy] # login (generates link and emails to the user) resources :logins, only: [:new, :create] end get '/landing', to: 'landing#index', as: :landing root to: \u0026quot;landing#index\u0026quot; end  now check the routes:\nbin/rails routes | grep users # should return users_logins POST /users/logins(.:format) users/logins#create new_users_login GET /users/logins/new(.:format) users/logins#new  Email / Access Link form Login email form:\nmkdir app/views/users/logins touch app/views/users/logins/new.html.erb  Note I often use Bulma - so here is how I like to format my forms (without Bulma installed the form will be ugly). Also note, I dislike using instance variables in my form - so this is why the form looks a little extra complicated.\n# app/views/users/logins/new.html.erb \u0026lt;%= form_for(user, local: true, url: users_logins_path, # NEW MUST BE PLURAL for POST id: \u0026quot;user-login-form\u0026quot;, class: \u0026quot;user\u0026quot; ) do |form| %\u0026gt; \u0026lt;div class=\u0026quot;field\u0026quot;\u0026gt; \u0026lt;label class=\u0026quot;label\u0026quot;\u0026gt;Email for Access-Link\u0026lt;/label\u0026gt; \u0026lt;div class=\u0026quot;control\u0026quot;\u0026gt; \u0026lt;%= form.email_field :email, placeholder: \u0026quot;Email\u0026quot;, class: 'input' %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p class=\u0026quot;help\u0026quot;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;control\u0026quot;\u0026gt; \u0026lt;%= form.submit(\u0026quot;Get Access-Link\u0026quot;, class: \u0026quot;button is-success\u0026quot;) %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt;  Test the full flow using the command line create some users:\nbin/rails c User.create(email: \u0026quot;tester@test.ch\u0026quot;, name: \u0026quot;Tester\u0026quot;)  start rails with: bin/rails s start mailhog with: mailhog go to: http://localhost:3000/user/home (should get redirected to the below URL) go to: http://localhost:3000/user/logins enter the \u0026ldquo; tester@test.ch\u0026rdquo; email Check mailhog for the link http://localhost:8025/ Click the link you should now be on http://localhost:3000/user/home\nAssuming everything works:\ngit add . git commit -m \u0026quot;working magic links using Rails Global ID\u0026quot;  NOTE: obviously automated tests are important (both spec and feature tests).\nResources Rails GlobalID\nThe nice thing about these is that the auto expire - simplifying the code a lot.\n  https://github.com/rails/globalid  https://www.magicalruby.com/implementing-magic-links-in-rails/  Token using SecureRandom\nWith these you need to create your own expiration and lookup system (more code add a migration), but will work with any framework.\n (using uuids) - https://oozou.com/blog/how-to-implement-passwordless-authentication-in-ruby-on-rails-154 (using SecureRandom) - https://abevoelker.com/skipping-the-database-with-stateless-tokens-a-hidden-rails-gem-and-a-useful-web-technique/  Devise Options\n Devise Plugin - https://github.com/abevoelker/devise-passwordless Do it Yourself Devise - https://dev.to/matiascarpintini/magic-links-with-ruby-on-rails-and-devise-4e3o Do it yourself Devise - https://www.mintbit.com/blog/passwordless-authentication-in-ruby-on-rails-with-devise  Other Options\n  passwordless gem - https://github.com/mikker/passwordless#token-and-session-expiry\n  magic-link gem - https://github.com/dvanderbeek/magic-link\n  Using Sorcery - https://fullstackheroes.com/rails/sorcery-passwordless-authentication/\n  Using Sourcery - https://www.sitepoint.com/magical-authentication-sorcery/\n  (using JWTs) - https://blog.kiprosh.com/implement-passwordless-authentication-via-magic-link-in-rails-api/ Passwordless Security Overview\n   https://abevoelker.com/skipping-the-database-with-stateless-tokens-a-hidden-rails-gem-and-a-useful-web-technique/\n  Sessions\n  https://api.rubyonrails.org/classes/ActionDispatch/Session/CookieStore.html  https://blog.saeloun.com/2019/09/12/rails-6-adds-dig-to-actiondispatch-request-session.html  ","date":1632008215,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1632181015,"objectID":"bc545a935cadd2060e60976e698c626d","permalink":"https://btihen.me/post_ruby_rails/rails_6_x_auth_w_magic_links_using_signed_global_id/","publishdate":"2021-09-19T01:36:55+02:00","relpermalink":"/post_ruby_rails/rails_6_x_auth_w_magic_links_using_signed_global_id/","section":"post_ruby_rails","summary":"Several simple approaches to password-less rails authentication","tags":["authentication","passwordless auth","MagicLink","Signed GlobalID"],"title":"Rails 6.x+ Auth with MagicLinks using Rails Signed GlobalIDs","type":"post_ruby_rails"},{"authors":["Bill Tihen"],"categories":[],"content":"I thought it would be fun to test the new alpha version of rails - but I always forget how to do this without upgrading an existing projects.\nDiscover the Rails Pre-release versions gem list rails --remote --prerelease -e  \u0026ndash;remote - checks the rubygems site - not the locally installed versions \u0026ndash;prerelease - find pre-release versions -e - use an exact match (many packages have rails in the name).\nInstall the Rails Alpha Gems gem install rails --version 7.0.0.alpha2  this installs a usable local version of rails\nInitailize a new Rails project with a specific version rails _7.0.0.alpha2_ new magic_links  Now continue as normal!\n","date":1631992800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1631992800,"objectID":"412b63166ba477434dad75a28ddc90fa","permalink":"https://btihen.me/post_ruby_rails/rails_7_0_alpha_test_drive/","publishdate":"2021-09-18T21:20:00+02:00","relpermalink":"/post_ruby_rails/rails_7_0_alpha_test_drive/","section":"post_ruby_rails","summary":"I thought it would be fun to test the new alpha version of rails - but I always forget how to do this without upgrading an existing projects.\nDiscover the Rails Pre-release versions gem list rails --remote --prerelease -e  \u0026ndash;remote - checks the rubygems site - not the locally installed versions \u0026ndash;prerelease - find pre-release versions -e - use an exact match (many packages have rails in the name).","tags":["rails","install","initialize"],"title":"Rails 7.0alpha2 Test-drive","type":"post_ruby_rails"},{"authors":["Bill Tihen"],"categories":[],"content":"  https://discuss.rubyonrails.org/t/database-fields-are-polluted-with-both-nil-and-empty-values-when-submitting-forms/74877/3  https://bitbucket.org/tiu/rails-application-template/src/master/rails/lib/types/type/string.rb  https://stackoverflow.com/questions/3879680/how-can-i-make-rails-3-localize-my-date-formats/45743846#45743846  Lets start by making a sample project (without tests -T):\nrails new task_cards -T cd task_cards  We will use a generator to create the structures we need and just focus clean inputs.\nrails g scaffold Card title:string description:text  Now lets make our attribute types that cleanup string inputs (we will put them in the a new folder we will call types):\nmkdir app/types touch app/types/string_stripped_type.rb touch app/types/text_trimmed_type.rb  To make a string type that removes leading, trailing and duplicate spaces we will use the squish method.\n# app/types/string_squished_type.rb class StringSquishedType \u0026lt; ActiveRecord::Type::String # cast the incomming value for Rails def cast(value) value.to_s.squish end # convert the data to what the Database expects def serialize(value) value.to_s end end  Since text may want to have newlines and other double spaces we will only remove (trim) leading and trailing spaces:\n# app/types/text_trimmed_type.rb class TextTrimmedType \u0026lt; ActiveRecord::Type::String # cast the incomming value for Rails def cast(value) value.to_s.strip end # convert the data to what the Database expects def serialize(value) value.to_s end end  To simplify our code we will define short names for our new types \u0026ndash; in the config/initializers folder we will make a new file called types.rb:\ntouch config/initializers/attribute_types.rb  To make a string type that removes leading, trailing and duplicate spaces we will use the squish method.\n# config/initializers/attribute_types.rb ActiveRecord::Type.register(:string_stripped, StringSquishedType) ActiveRecord::Type.register(:text_trimmed, TextTrimmedType)  Now lets add our new virutual data types that we will use in our forms to our model:\n# app/models/card.rb class Card \u0026lt; ApplicationRecord attribute :title_in, :string_squished # attribute :title_in, StringSquishedType.new attribute :description_in. :text_trimmed, default: '--' # attribute :description_in, TextTrimmedType.new, default: '--' validate :title_in, presence: true end   https://bitbucket.org/tiu/rails-application-template/src/master/rails/lib/types/type/string.rb\n# lib/types/type/string.rb # frozen_string_literal: true module Type # * +squish+ if true, squish value when casting # * +strip+ if true, strip value when casting # * +nilify_blank+ if true, set blank value to nil when casting class String \u0026lt; ActiveModel::Type::String def initialize(precision: nil, limit: nil, scale: nil, strip: false, squish: false, nilify_blank: false) @strip = strip @squish = squish @nilify_blank = nilify_blank super(precision: precision, limit: limit, scale: scale) end def serialize(value) super(value) apply_options(value) end private def cast_value(value) value = super(value) apply_options(value) end def apply_options(value) return unless value if @squish value = value.squish elsif @strip value = value.strip end value = nil if @nilify_blank \u0026amp;\u0026amp; value.blank? value end end end   https://bitbucket.org/tiu/rails-application-template/src/master/rails/lib/types/type/editor_text.rb\n# lib/types/type/editor_text.rb # frozen_string_literal: true # Strips out empty spaces that are default on Ckeditor 5 module Type class EditorText \u0026lt; ActiveModel::Type::String EMPTY_P_TAG_REGEX = %r{\\A(\u0026lt;p[^\u0026gt;]*\u0026gt;(\\s|\u0026amp;nbsp;|\u0026lt;/?\\s?br\\s?/?\u0026gt;)*\u0026lt;/?p\u0026gt;)\\1*\\z}.freeze def serialize(value) super(value) apply_options(value) end private def cast_value(value) value = super(value) apply_options(value) end def apply_options(value) return if value.nil? remove_empty_p_tags(value) end def remove_empty_p_tags(value) value.match?(EMPTY_P_TAG_REGEX) ? nil : value end end end   https://bitbucket.org/tiu/rails-application-template/src/master/rails/lib/types/type/token.rb\n# lib/types/type/token.rb # frozen_string_literal: true # Represents a user-entered code, like a coupon code, discount code or confirmation number. # Avoids ambiguous characters that could cause user confusion or apprehension. module Type class Token \u0026lt; ActiveRecord::Type::String AMBIGUITIES = [ %w[B 8], %w[D O 0], %w[G 6], %w[I 1 l], %w[S 5], %w[Z 2] ].flatten.freeze CHARACTERS = ([*('A'..'Z'), *('0'..'9')] - AMBIGUITIES).freeze LENGTH = 6 def initialize(precision: nil, limit: nil, scale: nil, length: LENGTH) @length = length super(precision: precision, limit: limit, scale: scale) end private def cast_value(value) if value == :random random_number elsif value.is_a? ::String value = value.upcase value if value.chars.all? { |c| c.in? CHARACTERS } end end def random_number Array.new(@length) { CHARACTERS.sample }.join end end end  # lib/types/localized_date.rb # frozen_string_literal: true # Convert localized date string to Date object. This takes I18n formatted date strings # (e.g. in form text inputs) and casts them back to Date objects when writing the attribute. # # See ActiveModel::Type::Date for original, which attempts to parse the Date string, causing # the months and days swap if input is in \u0026quot;%m/%d/%Y\u0026quot; format. # class LocalizedDate \u0026lt; ActiveRecord::Type::Date # Full specifier is: %\u0026lt;flag\u0026gt;\u0026lt;width\u0026gt;\u0026lt;modifier\u0026gt;\u0026lt;conversion\u0026gt; FORMAT_STRING_EXPR = /(?\u0026lt;=%)(?\u0026lt;flag\u0026gt;[-_0^#])?(?\u0026lt;width\u0026gt;\\d)?/.freeze def initialize(format: default_format) @format_string = safe_format_string(format) end # Deserialize db value using Date::DATE_FORMATS[:db] def deserialize(value) cast_value(value, format: Date::DATE_FORMATS[:db]) unless value.nil? end private def cast_value(value, format: @format_string) if value.is_a?(::String) return if value.empty? Date.strptime(value, format) elsif value.respond_to?(:to_date) value.to_date else value end rescue ArgumentError nil end def default_format I18n.translate(\u0026quot;date.formats.default\u0026quot;) end # Date.strptime doesn't support flags and width, so remove them. # See https://ruby-doc.org/stdlib/libdoc/date/rdoc/Date.html#method-c-strptime def safe_format_string(value) value.gsub FORMAT_STRING_EXPR, '' end end  # config/initializers/types.rb # frozen_string_literal: true # NOTE: when using custom types with Postgres arrays they must be registered (here) to work. # When registered, they become a subtype of ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Array # which handles the array bits before invoking your custom type. # # attribute :links, :link, array: true # this works, becoming an array subtype # attribute :links, Type::Link.new, array: true # this acts like a non-array type # # Next, confirm the type with `MyModel.type_for_attribute(:links)` Dir[Rails.root.join('lib/types/**/*.rb')].sort.each { |f| require f } ActiveRecord::Type.register(:localized_date, LocalizedDate) ActiveRecord::Type.register(:string, Type::String, override: true) ActiveRecord::Type.register(:token, Type::Token) ActiveModel::Type.register(:localized_date, LocalizedDate) ActiveModel::Type.register(:string, Type::String, override: true) ActiveModel::Type.register(:token, Type::Token)   https://stackoverflow.com/questions/3879680/how-can-i-make-rails-3-localize-my-date-formats/45743846#45743846\nHow Rails Transforms Attributes\nHere\u0026rsquo;s a quick tour of the Rails Attributes API. You can skip this section, but then you won\u0026rsquo;t know how this stuff works. What fun is that?\nUnderstanding how Rails handles user input for your attribute will let us override only one method instead of making a more complete custom type. It will also help you write better code, since rails\u0026rsquo; code is pretty good.\nSince you didn\u0026rsquo;t mention a model, I\u0026rsquo;ll assume you have a Post with a :publish_date attribute (some would prefer the name :published_on, but I digress). What is your type?\nFind out what type :publish_date is. We don\u0026rsquo;t care that it is an instance of Date, we need to know what type_for_attribute returns:\nThis method is the only valid source of information for anything related to the types of a model's attributes.  $ rails c \u0026gt; post = Post.where.not(publish_date: nil).first \u0026gt; post.publish_date.class =\u0026gt; Date \u0026gt; Post.type_for_attribute('publish_date').type =\u0026gt; :date  Now we know the :publish_date attribute is a :date type. This is defined by ActiveRecord::Type::Date, which extends ActiveModel::Type::Date (ActiveRecord Types are here: https://api.rubyonrails.org/classes/ActiveRecord/Type.html), which extends ActiveModel::Type::Value (ActiveModel Types are here: https://api.rubyonrails.org/classes/ActiveModel/Type.htmlValue.html).\nHow is user input transformed by ActiveRecord::Type::Date?\nSo, when you set :publish_date, the value is passed to cast, which calls cast_value. Since form input is a String, it will try a fast_string_to_date then fallback_string_to_date which uses Date._parse.\nIf you\u0026rsquo;re getting lost, don\u0026rsquo;t worry. You don\u0026rsquo;t need to understand rails\u0026rsquo; code to customize an attribute. Defining a Custom Type\nNow that we understand how Rails uses the attributes API, we can easily make our own. Just create a custom type to override cast_value to expect localized date strings:\nclass LocalizedDate \u0026lt; ActiveRecord::Type::Date private # Convert localized date string to Date object. This takes I18n formatted date strings # from user input and casts them back to Date objects. def cast_value(value) if value.is_a?(::String) return if value.empty? format = I18n.translate(\u0026quot;date.formats.short\u0026quot;) Date.strptime(value, format) rescue nil elsif value.respond_to?(:to_date) value.to_date else value end end end  See how I just copied rails\u0026rsquo; code and made a small tweak. Easy. You might want to improve on this with a call to super and move the :short format to an option or constant.\nRegister your type so it can be referenced by a symbol:\n# config/initializers/types.rb ActiveRecord::Type.register(:localized_date, LocalizedDate)  Override the :publish_date type with your custom type:\n# app/models/post.rb class Post \u0026lt; ApplicationRecord attribute :publish_date, :localized_date end  Now you can use localized values in your form inputs:\n# app/views/posts/_form.html.erb \u0026lt;%= form_for(@post) do |f| %\u0026gt; \u0026lt;%= f.label :publish_date %\u0026gt; \u0026lt;%= f.text_field :publish_date, value: (I18n.localize(value, format: :short) if value.present?) %\u0026gt; \u0026lt;% end %\u0026gt;  ","date":1628723482,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628723482,"objectID":"da36ce15b763a3ad2a28bd368c2ed8c6","permalink":"https://btihen.me/post_ruby_rails/rails_6_x_squished_strings_type/","publishdate":"2021-08-12T01:11:22+02:00","relpermalink":"/post_ruby_rails/rails_6_x_squished_strings_type/","section":"post_ruby_rails","summary":"String inputs that strip away leading, trailing and double spaces using typed virtual attributes","tags":["Rails 5","Rails 6","Types","Virtual Attributes"],"title":"Squished String Type (Rails 5/6)","type":"post_ruby_rails"},{"authors":["Bill Tihen"],"categories":[],"content":"Purpose In the interest of coding Rails in a way to work well with other code bases, I looking at ways to do complex database relations in a framework agnostic way. In particular, this article will primarily explore Polymorphic Relationships.\nThis is the second article in the series. This article builds on (part 1)[post_ruby_rails/rails_6_x_agnostic_associations_1/]\nOverview In this case, I want to model a contact list of businesses and people. Some people will be associated with a company. Additionally, we will track transactions with each person and business.\nThe basic model will then look something like:\n ┌───────────┐ ┌───────────┐ │ │╲ ╱│ │ ┌──────────────○┼│ Contact │───────────│UserContact│ │ │ │╱ ╲│ │ │ └───────────┘ └───────────┘ │ ┼ ╲│╱ │ ○ │ │ │ │ │ │ │ ╱│╲ ╱│╲ │ ┌───────────┐ ┌───────────┐ │ │ │╲ │ │ │ │ Business │─○───────┼│ Person │ │ │ │╱ │ │ │ └───────────┘ └───────────┘ │ ╲│╱ ╲│╱ │ │ │ │ │ │ │ │ ○ │ │ ┼ ╱│╲ │ ┌───────────┐ ┌───────────┐ │ │ │ ╱│ │ └──────────────○┼│ Remark │┼──────────│ User │ │ │ ╲│ │ └───────────┘ └───────────┘  Rails app and first Models  ┌────────────┐ ┌───────────┐ │ │╲ 1 │ │ │ Business │─○──────────┼│ Person │ │-legal_name │╱0..* │-full_name │ └────────────┘ └───────────┘  We discussed/explained in (part 1)[post_ruby_rails/rails_6_x_agnostic_associations_1/]\nPolymorphic (STI) - sometime called inverse polymorphic  ┌─────────────┐ │ Contact │ │ relations* │ │+display_name│ └─────────────┘ ┼ │ ┌───────────────┴────────────┐ │ │ ╱│╲ ╱│╲ ┌─────────────┐ ┌─────────────┐ │ Business │╲ │ Person │ │ -legal_name │─○──────────┼│ -full_name │ │+display_name│╱ │+display_name│ └─────────────┘ └─────────────┘ + array: supplier, reseller, customer, sales-rep * virtual attribute (public method)  We disucssed/explained this in (part 2)[post_ruby_rails/rails_6_x_agnostic_associations_2/]\nPolymorphic Modeling Is a model that can be associated with several different models - serving a similar purpose in all cases. For example perhaps we would like to leave remarks on our interactions with various other business partners as shown below.\n┌───────────┐ ┌───────────┐ │ │╲ │ │ │ Business │─○───────┼│ Person │ │ │╱ │ │ └───────────┘ └───────────┘ ╲│╱ ╲│╱ │ │ │ │ │ ○ │ ┼ │ ┌───────────┐ ┌───────────┐ │ │ │ ╱│ │ └──────────────○┼│ Remark │┼──────────│ User │ │ │ ╲│ │ └───────────┘ └───────────┘  A Remark could be either associated with either a person or a business - this is called polymorphism. For ubiquitous things like comments, pictures, etc. this is a common approach.\nThe standard rails way - is convenient (only uses 2 columns for any number of models), but lacks a foreign key so the DB can\u0026rsquo;t ensure Data integrity. For this reason, many other frameworks do not encourage this approach. So we will use an approach accepted by all frameworks.\nModels and relationships Lets build the user model first so we have all the models needed by Remark.\nbin/rails g model User email:string:uniq  Let\u0026rsquo;s add an email validation to match the DB settings (and case insensitive):\n# app/models/user.rb class User \u0026lt; ApplicationRecord validates :name, presence: true, uniqueness: { case_sensitive: false } end  Given the simplicity of this model we can just continue. lets build Remark now.\nbin/rails g model Remark note:text user:references business:references person:references  Like contact we will need to update the migration to allow null in the Business and Person foreign keys, but not for user. Then we will update the models too.\nupdate the migration to ensure we have a note and user, and allow either a business or person associated with each remark:\n# db/migrate/20210530104742_create_remarks.rb class CreateRemarks \u0026lt; ActiveRecord::Migration[6.1] def change create_table :remarks do |t| t.text :note, null: false t.references :business, foreign_key: true t.references :person, foreign_key: true t.references :user, null: false, foreign_key: true t.timestamps end end end  Now we will update the User, Business and Person models to know they could have many remarks with has_many :remarks:\n# app/models/user.rb class User \u0026lt; ApplicationRecord has_many :remarks validates :email, presence: true, uniqueness: { case_sensitive: false } end  # app/models/person.rb class Person \u0026lt; ApplicationRecord has_one :contact has_many :remarks belongs_to :business, optional: true validates :contact, presence: true validates :full_name, presence: true def display_name full_name end def employee_count nil end def associated_business_name business\u0026amp;.display_name end end  # app/models/business.rb class Business \u0026lt; ApplicationRecord has_one :contact has_many :people has_many :remarks accepts_nested_attributes_for :contact validates :contact, presence: true validates :legal_name, presence: true def display_name legal_name end def employee_count people.count end def associated_business_name \u0026quot;\u0026quot; end end  update the Remark model with the validations to enforce relations:\n# app/models/remark.rb class Remark \u0026lt; ApplicationRecord belongs_to :user belongs_to :person, optional: true belongs_to :business, optional: true validates :user, presence: true validates :note, presence: true # validate :validate_remarkable_belongs_to_one_and_only_one_foreign_key def remarkable business || person end private # exclusive or (XOR) is true if one or the other is true, but both # if un-persisted we could get a model w/o an id # if persisted we could have a model and an id def validate_remarkable_belongs_to_one_and_only_one_foreign_key return if (business_id.present? ^ person_id.present?) || (business.present? ^ person.present?) # add to base since, some forms may not have the person/business fields errors.add :base, 'must belong to ONE business or person, but not both' # errors.add :remarkable, 'must belong to a business or a person' end end  Lets be sure this migrates:\nbin/rails db:migrate  Now lets add the following to the end of our seed file:\n# db/seed.rb # We will create a few users require 'securerandom' 10.times do username = SecureRandom.alphanumeric(10) # or use SecureRandom.uuid User.create!(email: \u0026quot;#{username}@example.ch\u0026quot;) end # Lets add a remark to most People and Business (using a random user) users = User.all Person.all.each_with_index do |person, index| next if rand(1..3) == 1 # skip one in 3 people user = users.sample Remark.create!(person: person, user: user, note: \u0026quot;some note about #{person.display_name}, by user: #{user.email}\u0026quot;) end Business.all.each_with_index do |business, index| next if rand(1..4) == 1 # skip one in 4 businesses user = users.sample Remark.create!(business: business, user: user, note: \u0026quot;some note about #{business.display_name}, by user: #{user.email}\u0026quot;) end  Lets check the seed with:\nbin/rails db:seed  Cool that works!\nlets snapshot:\ngit add . git commit -m \u0026quot;polymorphic remark relations created\u0026quot;  Views Comming soon \u0026hellip;\nAssuming this works, let\u0026rsquo;s see the \u0026ldquo;/people\u0026rdquo; page:\nbin/rails s open localhost:3000/businesses/  N+1 checks Great - lets snapshot:\ngit add . git commit -m \u0026quot;created an agnostic polymorphic model with data integrity enforced\u0026quot;  Input Forms (\u0026amp; Building new Info) ","date":1622332620,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628294220,"objectID":"7a722b00ec10a5f7eb3316c4040a40aa","permalink":"https://btihen.me/post_ruby_rails/rails_6_x_agnostic_associations_3/","publishdate":"2021-05-30T01:57:00+02:00","relpermalink":"/post_ruby_rails/rails_6_x_agnostic_associations_3/","section":"post_ruby_rails","summary":"Framework Agnostic Associations - Data models that work across many frameworks","tags":["Rails","Databases","Data models","Framework Agnostic","belongs_to","has_one"],"title":"Rails 6.x - Framework Agnostic Associations - part 2","type":"post_ruby_rails"},{"authors":["Bill Tihen"],"categories":[],"content":"Purpose In the interest of coding Rails in a way to work well with other code bases, I looking at ways to do complex database relations in a framework agnostic way. In particular, this article will primarily explore Polymorphic Relationships.\nThis is the second article in the series. This article builds on (part 1)[post_ruby_rails/rails_6_x_agnostic_associations_1/]\nOverview In this case, I want to model a contact list of businesses and people. Some people will be associated with a company. Additionally, we will track transactions with each person and business.\nThe basic model will then look something like:\n ┌───────────┐ ┌───────────┐ │ │╲ ╱│ │ ┌──────────────○┼│ Contact │───────────│UserContact│ │ │ │╱ ╲│ │ │ └───────────┘ └───────────┘ │ ┼ ╲│╱ │ ○ │ │ │ │ │ │ │ ╱│╲ ╱│╲ │ ┌───────────┐ ┌───────────┐ │ │ │╲ │ │ │ │ Business │─○───────┼│ Person │ │ │ │╱ │ │ │ └───────────┘ └───────────┘ │ ╲│╱ ╲│╱ │ │ │ │ │ │ │ │ ○ │ │ ┼ ╱│╲ │ ┌───────────┐ ┌───────────┐ │ │ │ ╱│ │ └──────────────○┼│ Remark │┼──────────│ User │ │ │ ╲│ │ └───────────┘ └───────────┘ Created with Monodraw  Rails app and first Models  ┌────────────┐ ┌───────────┐ │ │╲ 1 │ │ │ Business │─○──────────┼│ Person │ │-legal_name │╱0..* │-full_name │ └────────────┘ └───────────┘  We discussed / explained in (part 1)[post_ruby_rails/rails_6_x_agnostic_associations_1/]\nPolymorphic (STI) - sometime called inverse polymorphic In this article we will build this structure (a replacement for Rails STI). Many frameworks will only use columns that can be identified as foreign keys to ensure DB integrity - therefore, we will build this using DB structures that are supported by Rails, Lucky and Phoenix and probably most frameworks.\n ┌─────────────┐ │ Contact │ │ relations* │ │+display_name│ └─────────────┘ ┼ │ ┌───────────────┴────────────┐ │ │ ╱│╲ ╱│╲ ┌─────────────┐ ┌─────────────┐ │ Business │╲ │ Person │ │ -legal_name │─○──────────┼│ -full_name │ │+display_name│╱ │+display_name│ └─────────────┘ └─────────────┘ + array: supplier, reseller, customer, sales-rep * virtual attribute (public method)  A contact could be either a person or a business - but must be one or the other.\nMigration and Relationships Rails doesn\u0026rsquo;t have a built-in array migration, so we use string and then we change the migration:\nbin/rails g scaffold Contact functions:string business:references person:references  Now update the migration to ensure we have a functions as an array \u0026amp; relations as Foreign keys (but optional). Since there we only want/need one of the two foreign_keys at a time they must be nullable and we need to change roles to an array - so now:\n# db/migrate/20210519205042_create_contacts.rb class CreateContacts \u0026lt; ActiveRecord::Migration[6.1] def change create_table :contacts do |t| t.string :functions, array: true, null: false, default: [] t.references :business, foreign_key: true t.references :person, foreign_key: true t.timestamps end end end  update the Contact model with the validations \u0026amp; flexible relations - we also want to be able to refer to the sub-model by one name we will call that contactable - so now the model will look like:\n# app/models/contact.rb class Contact \u0026lt; ApplicationRecord belongs_to :business, optional: true belongs_to :person, optional: true VALID_FUNCTIONS_LIST = %w(supplier reseller customer sales-rep) validate :validate_relationship_functions validate :validate_belongs_to_one_and_only_one_foreign_key def contactable business || person end private # be sure we have the variable, it is an Array \u0026amp; all elements are in the valid list def validate_relationship_functions return if functions.present? \u0026amp;\u0026amp; functions.is_a?(Array) functions.all? { |role| VALID_FUNCTIONS_LIST.include?(role.to_s) } errors.add :functions, \u0026quot;must be ONE or MORE of the following options: #{VALID_FUNCTIONS_LIST.join(',')}\u0026quot; end # exclusive or (XOR) is true if one or the other is true, but both # if un-persisted we could get a model w/o an id # if persisted we could have a model and an id def validate_remarkable_belongs_to_one_and_only_one_foreign_key return if (business_id.present? ^ person_id.present?) || (business.present? ^ person.present?) # add to base since, some forms may not have the person/business fields errors.add :base, 'must belong to ONE business or person, but not both' # errors.add :remarkable, 'must belong to a business or a person' end end  update the Person model and relations and enforce every person is a member of the contact list - with a contact role:\n# app/models/person.rb class Person \u0026lt; ApplicationRecord has_one :contact belongs_to :business, optional: true validates :contact, presence: true validates :full_name, presence: true end  update the business model and relations and enforce every business is a member of the contact list - with a contact role:\n# # app/models/business.rb class Business \u0026lt; ApplicationRecord has_one :contact has_many :people validates :contact, presence: true validates :legal_name, presence: true end  Lets check the seed with:\nbin/rails db:migrate  If we go to a person or business we can no longer make changes - they need to have an associated Contact. We\u0026rsquo;ll start by rolling back the last migration and fixing it with (we can use the logic in the seeds to guide us in the Business/Person creation controller):\nbin/rails db:rollback  we need to fix the old relations in the migration (or simply drop the database and reseed it) - but given this is to article is find cross-framework \u0026ndash; \u0026lsquo;real-world\u0026rsquo; techniques - let\u0026rsquo;s be sure the existing records stay useful. We will assume a business is a supplier, a person associated with a business is a sales-rep, and unassociated people are customers.\n# db/migrate/20210519205042_create_contacts.rb class CreateContacts \u0026lt; ActiveRecord::Migration[6.1] def change create_table :contacts do |t| t.string :functions, array: true, null: false, default: [] t.references :business, foreign_key: true t.references :person, foreign_key: true t.timestamps end # add a contact for each existing company businesses = Business.joins(:people) .group('businesses.id') .select('businesses.*, count(people.id) as people_count') businesses.each do |business| functions = if business.people_count \u0026lt; 10 ['supplier'] elsif business.people_count \u0026lt; 20 ['reseller'] elsif business.people_count \u0026lt; 30 ['supplier', 'reseller'] end Contact.create!(functions: functions, business: business) end # add a contact for each existing person Person.all.each do |person| functions = if person.business ['sales_rep'] else ['customer'] end Contact.create!(functions: functions, person: person) end end end  Lets the existing models now:\nbin/rails db:migrate  OK - we are in business lets update our seed file too:\n# db/seed.rb # create small business w/o employees 20.times do |num| business = Business.create(legal_name: \u0026quot;Business #{num}\u0026quot;, contact: Contact.new(functions: ['supplier'])) end # create individuals 20.times do |num| person = Person.create(full_name: \u0026quot;Individual #{num}\u0026quot;, contact: Contact.new(functions: ['customer'])) end # create big companies with employees 20.times do |bus_num| functions = if bus_num \u0026lt; 3 ['supplier'] elsif bus_num\u0026lt; 5 ['reseller'] elsif bus_num \u0026lt; 8 ['supplier', 'reseller'] else %w[supplier reseller customer] end company = Business.create(legal_name: \u0026quot;Company #{bus_num}\u0026quot;, contact: Contact.new(functions: functions)) bus_num.times do |emp_num| Person.create(full_name: \u0026quot;Employee #{bus_num}-#{emp_num}\u0026quot;, business: company, contact: Contact.new(functions: ['sales-rep'])) end end  Lets check the seed with:\nbin/rails db:seed  Great all works!\nLets make the index page more useful When we visit the contacts page we would like more than the ids - but we need a unified way to present that info so let\u0026rsquo;s add a display_name so we can show the name of the primary model, if a person we would like to know the associated business if present and if a company we would like the employee_count so we will delegate these to the sub-models.\nLet\u0026rsquo;s update contact first by adding:\n# this references our existing contactable delegate :display_name, :associated_business_name, :employee_count, to: :contactable def contactable business || person end  So now the contact model will look like (with validations)\n# app/models/contact.rb class Contact \u0026lt; ApplicationRecord belongs_to :business, optional: true belongs_to :person, optional: true VALID_FUNCTIONS_LIST = %w(supplier reseller customer sales-rep) validate :validate_relationship_functions validate :validate_belongs_to_one_and_only_one_foreign_key delegate :display_name, :associated_business_name, :employee_count, to: :contactable def contactable business || person # would memoize be valuable here? # @contactable ||= (business || person) end private # be sure we have the variable, it is an Array \u0026amp; all elements are in the valid list def validate_relationship_functions return if functions.present? \u0026amp;\u0026amp; functions.is_a?(Array) functions.all? { |role| VALID_FUNCTIONS_LIST.include?(role.to_s) } errors.add :functions, \u0026quot;must be ONE or MORE of the following options: #{VALID_FUNCTIONS_LIST.join(',')}\u0026quot; end # exclusive or (XOR) is true if one or the other is true, but not when both are true # we could get a model (or possibly an id) def validate_belongs_to_one_and_only_one_foreign_key return if business.present? ^ person.present? ^ business_id.present? ^ person_id.present? # add to base since, some forms may not have the person/business fields errors.add :base, 'must belong to ONE business or person, but not both' # errors.add :contactable, 'must belong to a business or a person' end end  Lets update the models to provide the needed info\nBusiness now will look like:\n# app/models/business.rb class Business \u0026lt; ApplicationRecord has_one :contact has_many :people validates :contact, presence: true validates :legal_name, presence: true def display_name legal_name end def employee_count people.count end def associated_business_name \u0026quot;\u0026quot; end end  And person will look like:\n# app/models/person.rb class Person \u0026lt; ApplicationRecord has_one :contact belongs_to :business, optional: true validates :contact, presence: true validates :full_name, presence: true def display_name full_name end def employee_count nil # person count has no meaning under person end def associated_business_name business\u0026amp;.display_name end end  Now lets update the index view to show our new info:\n\u0026lt;h1\u0026gt;Contacts\u0026lt;/h1\u0026gt; \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Person/Business\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Employee Count\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Contact Name\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Business Name\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Relationships\u0026lt;/th\u0026gt; \u0026lt;th colspan=\u0026quot;3\u0026quot;\u0026gt;\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;% @contacts.each do |contact| %\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= contact.contactable.class.name %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= contact.employee_count %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= contact.display_name %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= contact.associated_business_name %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= contact.functions %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= link_to 'Show', contact %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= link_to 'Edit', edit_contact_path(contact) %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= link_to 'Destroy', contact, method: :delete, data: { confirm: 'Are you sure?' } %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt;  Now we see another n+1 query - we will fix the main part - but not the employee count this time:\nclass ContactsController \u0026lt; ApplicationController def index # @contacts = Contact.all @contacts = Contact.includes(:business).includes(:person).all end  Cool now the page is usable (a bit long but we will ignore that)\nLets be sure we can create new contacts I usually use an input model (for more flexibility), but for now I will use nested_params. A few articles on nested params and nested fields:\n  https://www.youtube.com/watch?v=PYYwjTlcoa4  https://www.pluralsight.com/guides/ruby-on-rails-nested-attributes  https://levelup.gitconnected.com/rails-nested-forms-in-three-steps-5580f0ad0e  https://levelup.gitconnected.com/handling-nested-attributes-with-a-has-many-through-association-with-rails-api-f91729547ea5  To start we will tell the contacts model that it can create nested models with do by adding:\naccepts_nested_attributes_for :business accepts_nested_attributes_for :person  so now now the contact model looks like:\n# app/models/contact.rb class Contact \u0026lt; ApplicationRecord belongs_to :business, optional: true belongs_to :person, optional: true accepts_nested_attributes_for :business accepts_nested_attributes_for :person VALID_FUNCTIONS_LIST = %w(supplier reseller customer sales-rep) validate :validate_relationship_functions validate :validate_belongs_to_one_and_only_one_foreign_key delegate :display_name, :associated_business_name, :employee_count, to: :contactable def contactable business || person # would memoize be valuable here? # @contactable ||= (business || person) end private # be sure we have the variable, it is an Array \u0026amp; all elements are in the valid list def validate_relationship_functions return if functions.present? \u0026amp;\u0026amp; functions.is_a?(Array) functions.all? { |role| VALID_FUNCTIONS_LIST.include?(role.to_s) } errors.add :functions, \u0026quot;must be ONE or MORE of the following options: #{VALID_FUNCTIONS_LIST.join(',')}\u0026quot; end # exclusive or (XOR) is true if one or the other is true, but not when both are true # we could get a model (or possibly an id) def validate_belongs_to_one_and_only_one_foreign_key return if business.present? ^ person.present? ^ business_id.present? ^ person_id.present? # add to base since, some forms may not have the person/business fields errors.add :base, 'must belong to ONE business or person, but not both' # errors.add :contactable, 'must belong to a business or a person' end end  In the controller we need to create models as part of @contact to allow nested-fields - which feed the nested attributes. to allow the new information in via strong params:\n# app/controllers/contacts_controller.rb def new @contact = Contact.new # add empty sub-models for our form @contact.person = Person.new @contact.business = Business.new end # update strong params to accept the sub-model attributes # sub-models from nested-forms feeding nested_atttributes in the model # take the form \u0026lt;model_name\u0026gt;_attributes # `functions` is an empty array since it is taking a list of values # person_attributes \u0026amp; business_attributes - need to include the list of attributes to accept! # so in our case: def contact_params contact_attribs = params.require(:contact) .permit(functions: [], # is empty - takes a list of values person_attributes: [:full_name], # needs to include the list of attributes to accept business_attributes: [:legal_name]) end  update the contact form to tie this all together by adding our nested forms:\n\u0026lt;div class=\u0026quot;field-group\u0026quot;\u0026gt; \u0026lt;h2\u0026gt;Create your Contact: a Person or a Business\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;Business\u0026lt;/h3\u0026gt; \u0026lt;%= form.fields_for :business, Business.new do |f| %\u0026gt; \u0026lt;%= f.label :legal_name %\u0026gt; \u0026lt;%= f.text_field :legal_name %\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;h3\u0026gt;Person\u0026lt;/h3\u0026gt; \u0026lt;%= form.fields_for :person, Person.new do |f| %\u0026gt; \u0026lt;%= f.label :full_name %\u0026gt; \u0026lt;%= f.text_field :full_name %\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/div\u0026gt;  We will also need to make the list of possible relationship functions a multi-select - I always forget the format \u0026ndash; so remember BOTH {} are required when using multi-select!! The first one is for normal drop-down select options \u0026ndash; like include_blank, the second one is where the multi-select must go!\nThis looks like:\n\u0026lt;div class=\u0026quot;field\u0026quot;\u0026gt; \u0026lt;%= form.label :functions %\u0026gt; \u0026lt;%= form.select :functions, options_for_select(Contact::VALID_FUNCTIONS_LIST, selected: Contact::VALID_FUNCTIONS_LIST.second), {}, #{:include_blank =\u0026gt; 'None'}, {:multiple =\u0026gt; true, size: 3} %\u0026gt; \u0026lt;/div\u0026gt;  so now the template looks like:\n# app/views/contacts/_form.html.erb \u0026lt;%= form_with(model: contact) do |form| %\u0026gt; \u0026lt;% if contact.errors.any? %\u0026gt; \u0026lt;div id=\u0026quot;error_explanation\u0026quot;\u0026gt; \u0026lt;h2\u0026gt;\u0026lt;%= pluralize(contact.errors.count, \u0026quot;error\u0026quot;) %\u0026gt; prohibited this contact from being saved:\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;% contact.errors.each do |error| %\u0026gt; \u0026lt;li\u0026gt;\u0026lt;%= error.full_message %\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;div class=\u0026quot;field\u0026quot;\u0026gt; \u0026lt;%= form.label :functions %\u0026gt; \u0026lt;%= form.select :functions, options_for_select(Contact::VALID_FUNCTIONS_LIST, selected: Contact::VALID_FUNCTIONS_LIST.second), {}, #{:include_blank =\u0026gt; 'None'}, {:multiple =\u0026gt; true, size: 3} %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;field-group\u0026quot;\u0026gt; \u0026lt;h2\u0026gt;Create your Contact: a Person or a Business\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;Business\u0026lt;/h3\u0026gt; \u0026lt;%= form.fields_for :business, Business.new do |f| %\u0026gt; \u0026lt;%= f.label :legal_name %\u0026gt; \u0026lt;%= f.text_field :legal_name %\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;h3\u0026gt;Person\u0026lt;/h3\u0026gt; \u0026lt;%= form.fields_for :person, Person.new do |f| %\u0026gt; \u0026lt;%= f.label :full_name %\u0026gt; \u0026lt;%= f.text_field :full_name %\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;actions\u0026quot;\u0026gt; \u0026lt;%= form.submit %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt;  Now when we try /contacts we notice one more problem - it is always invalid - rails automatically add a leading \u0026quot;\u0026quot; in an array input list :( - so we will have to clean this up in the strong params. In this case we are working with param objects not a hash so we will do an in-place update (removal of \u0026ldquo;\u0026rdquo;) using:\ncontact_attribs[\u0026quot;functions\u0026quot;].reject! {|f| f.blank? } contact_attribs  we also need to be sure in our case we only send the params of the business or the person, but not both - since we are only creating one. So we will remove whichever one is empty - also with an in-place update - using:\n# find and set to nil the model without params if contact_attribs[\u0026quot;person_attributes\u0026quot;] # since we only have one param we can do contact_attribs[\u0026quot;person_attributes\u0026quot;] = nil if contact_attribs[\u0026quot;person_attributes\u0026quot;][\u0026quot;full_name\u0026quot;].blank? end if contact_attribs[\u0026quot;business_attributes\u0026quot;] # assuming we had multiple params the test is easier with: contact_attribs[\u0026quot;business_attributes\u0026quot;] = nil if contact_attribs[\u0026quot;business_attributes\u0026quot;].to_h.all? {|key,value| value.blank?} end # remove the nested attributes set to nil so contact will only create the desired associated model contact_attribs.reject! {|key, value| value.blank? } contact_attribs  So now the full controller looks like:\nclass ContactsController \u0026lt; ApplicationController before_action :set_contact, only: %i[ show edit update destroy ] def index # @contacts = Contact.all @contacts = Contact.includes(:business).includes(:person).all end def show end def new @contact = Contact.new @contact.person = Person.new @contact.business = Business.new end def edit end def create @contact = Contact.new(contact_params) respond_to do |format| if @contact.save format.html { redirect_to @contact, notice: \u0026quot;Contact was successfully created.\u0026quot; } format.json { render :show, status: :created, location: @contact } else format.html { render :new, status: :unprocessable_entity } format.json { render json: @contact.errors, status: :unprocessable_entity } end end end def update respond_to do |format| if @contact.update(contact_params) format.html { redirect_to @contact, notice: \u0026quot;Contact was successfully updated.\u0026quot; } format.json { render :show, status: :ok, location: @contact } else format.html { render :edit, status: :unprocessable_entity } format.json { render json: @contact.errors, status: :unprocessable_entity } end end end def destroy @contact.destroy respond_to do |format| format.html { redirect_to contacts_url, notice: \u0026quot;Contact was successfully destroyed.\u0026quot; } format.json { head :no_content } end end private # Use callbacks to share common setup or constraints between actions. def set_contact @contact = Contact.find(params[:id]) end # Only allow a list of trusted parameters through. def contact_params # update strong params to accept the sub-model attributes # sub-models from nested-forms feeding nested_atttributes in the model # take the form \u0026lt;model_name\u0026gt;_attributes # `functions` is an empty array since it is taking a list of values # person_attributes \u0026amp; business_attributes - need to include the list of attributes to accept! # so in our case: contact_attribs = params.require(:contact) .permit(functions: [], person_attributes: [:full_name], business_attributes: [:legal_name]) # cleanup array - always delivers with [''] - :( # https://stackoverflow.com/questions/51341912/empty-array-value-being-input-with-simple-form-entries # easiest way in in-place replacement (given that params is now objects and not a hash), but that always makes me a bit nervous # https://stackoverflow.com/questions/20164354/rails-strong-parameters-with-empty-arrays # reject and replace in place contact_attribs[\u0026quot;functions\u0026quot;].reject! {|f| f.blank? } # remove empty model attributes # contact_attribs[\u0026quot;person_attributes\u0026quot;].reject {|key,value| value.blank?} if contact_attribs[\u0026quot;person_attributes\u0026quot;] contact_attribs[\u0026quot;person_attributes\u0026quot;] = nil if contact_attribs[\u0026quot;person_attributes\u0026quot;][\u0026quot;full_name\u0026quot;].blank? end if contact_attribs[\u0026quot;business_attributes\u0026quot;] contact_attribs[\u0026quot;business_attributes\u0026quot;] = nil if contact_attribs[\u0026quot;business_attributes\u0026quot;].to_h.all? {|key,value| value.blank?} end # have to remove nil attributes for models so nested attributes works correctly contact_attribs.reject! {|key, value| value.blank? } # return the attributes with the tidied array contact_attribs end end  now when we try again:\nbin/rails s open localhost:3000/contacts/new  Cool - it works. We could now do the same for the /business/new and /people/new, but we won\u0026rsquo;t do that here in the article. Lets snapshot:\ngit add . git commit -m \u0026quot;created person possibly related to the model\u0026quot;  Polymorphic In the next article we will explore the following in (part 3)[post_ruby_rails/rails_6_x_agnostic_associations_3/]\n┌───────────┐ ┌───────────┐ │ │╲ │ │ │ Business │─○──────────┼│ Person │ │ │╱ │ │ └───────────┘ └───────────┘ ┼ ┼ │ │ └────────────┬────────────┘ │ ╱│╲ ┌───────────┐ │ │ │ Remark │ │ │ └───────────┘  ","date":1622246220,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628294220,"objectID":"6b876265eae2e0658de59d1c3c38aeea","permalink":"https://btihen.me/post_ruby_rails/rails_6_x_agnostic_associations_2/","publishdate":"2021-05-29T01:57:00+02:00","relpermalink":"/post_ruby_rails/rails_6_x_agnostic_associations_2/","section":"post_ruby_rails","summary":"Framework Agnostic Associations - Data models that work across many frameworks","tags":["Rails","Databases","Data models","Framework Agnostic","belongs_to","has_one"],"title":"Rails 6.x - Framework Agnostic Associations - part 2","type":"post_ruby_rails"},{"authors":["Bill Tihen"],"categories":[],"content":"Purpose In the interest of coding Rails in a way to work well with other code bases, I looking at ways to do complex database relations in a framework agnostic way. In particular, this article will primarily explore Polymorphic Relationships.\nThis is the second article in the series. This article is followed up with (part 2)[post_ruby_rails/rails_6_x_agnostic_associations_2/]\nOverview In this case, I want to model a contact list of businesses and people. Some people will be associated with a company. Additionally, we will track transactions with each person and business.\nThe basic model will then look something like:\n ┌───────────┐ ┌───────────┐ │ │╲ ╱│ │ ┌──────────────○┼│ Contact │───────────│UserContact│ │ │ │╱ ╲│ │ │ └───────────┘ └───────────┘ │ ┼ ╲│╱ │ ○ │ │ │ │ │ │ │ ╱│╲ ╱│╲ │ ┌───────────┐ ┌───────────┐ │ │ │╲ │ │ │ │ Business │─○───────┼│ Person │ │ │ │╱ │ │ │ └───────────┘ └───────────┘ │ ╲│╱ ╲│╱ │ │ │ │ │ │ │ │ ○ │ │ ┼ ╱│╲ │ ┌───────────┐ ┌───────────┐ │ │ │ ╱│ │ └──────────────○┼│ Remark │┼──────────│ User │ │ │ ╲│ │ └───────────┘ └───────────┘ Created with Monodraw  Create a default Rails app rails new rails_poly cd rails_poly bin/rails db:create bin/rails db:migrate git add . git commit -m \u0026quot;initial commit\u0026quot;  Starting Simple - optional relations Build Businesses Lets start with the simple relationship between businesses and people:\n┌────────────┐ ┌───────────┐ │ │╲ 1 │ │ │ Business │─○──────────┼│ Person │ │-legal_name │╱0..* │-full_name │ └────────────┘ └───────────┘  For expedience, I\u0026rsquo;ll use scaffolds:\nGenerating a simple business model.\nrails g scaffold Business legal_name  Lets adjust the migration to require the business\u0026rsquo; legal name, by adding null: false to the name:\n# db/migrate/20210516080420_create_businesses.rb class CreateBusinesses \u0026lt; ActiveRecord::Migration[6.1] def change create_table :businesses do |t| t.string :legal_name, null: false t.timestamps end end end  Now we will validate the business\u0026rsquo; name in the model:\n# app/models/business.rb class Business \u0026lt; ApplicationRecord validates :legal_name, presence: true end  Now lets be sure we can migrate:\nbin/rails db:migrate  lets use seed to quickly check our models and relations (\u0026amp; get an idea of how to use them):\n# db/seeds.rb business = Business.create(legal_name: \u0026quot;Business\u0026quot;)  Lets check the seed with:\nbin/rails db:seed  Assuming this works, let\u0026rsquo;s see the \u0026ldquo;/businesses\u0026rdquo; page:\nbin/rails s open localhost:3000/businesses/  Great - lets snapshot:\ngit add . git commit -m \u0026quot;created business model\u0026quot;  Build People Now let\u0026rsquo;s build the person model and its relations to businesses.\nrails g scaffold Person full_name business:references  In this case we want the person to optionally be a member of a business, so lets update the both the models and the migration. Starting with the migration, we need to remove null: false in the foreign key, and add that to the name - so it should now look like:\n# db/migrate/20210516080414_create_people.rb class CreatePeople \u0026lt; ActiveRecord::Migration[6.1] def change create_table :people do |t| t.string :full_name, null: false t.references :company, foreign_key: true t.timestamps end end end  Now lets adjust the person model - we\u0026rsquo;ll make the relation optional with optional: true and require the name with the validation validates :full_name, presence: true, so it should now look like:\n# app/models/person.rb class Person \u0026lt; ApplicationRecord belongs_to :company, optional: true validates :full_name, presence: true end  And lets let the Business know it can have lots of people with has_many :people - now the model will look like:\n# app/models/business.rb class Business \u0026lt; ApplicationRecord has_many :people validates :legal_name, presence: true end  Lets check the migrations work:\nbin/rails db:migrate  lets use seed a couple of people too - so it now looks like:\n# db/seed.rb business = Business.create(legal_name: \u0026quot;Business\u0026quot;) company = Business.create(legal_name: \u0026quot;Company\u0026quot;) company.build_person(full_name: \u0026quot;Company Man\u0026quot;) company.save person = Person.create(full_name: \u0026quot;Own Person\u0026quot;)  Lets check the seed with:\nbin/rails db:seed  Now lets check our pages again:\nbin/rails s open localhost:3000  Lets check the index pages\nOn the business page it would be nice to see how many employees - so we can update the model with:\n# app/models/business.rb class Business \u0026lt; ApplicationRecord has_many :people validates :legal_name, presence: true def people_count people.count end end  And now people_count is added as a virtual attribute (as well as all other business fields because of 'businesses.*) - now we can use in our view using = \u0026lt;td\u0026gt;\u0026lt;%= business.people_count %\u0026gt;\u0026lt;/td\u0026gt; so now it would look something like:\n# app/views/businesses/index.html.erb \u0026lt;h1\u0026gt;Businesses\u0026lt;/h1\u0026gt; \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Legal name\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Employee Count\u0026lt;/th\u0026gt; \u0026lt;th colspan=\u0026quot;3\u0026quot;\u0026gt;\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;% @businesses.each do |business| %\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= business.legal_name %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= business.people_count %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= link_to 'Show', business %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= link_to 'Edit', edit_business_path(business) %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= link_to 'Destroy', business, method: :delete, data: { confirm: 'Are you sure?' } %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt;  and on the \u0026lsquo;/people\u0026rsquo; page it would be nice to see there business name instead of id.\nso in the model:\n# app/model/person.rb class Person \u0026lt; ApplicationRecord belongs_to :business, optional: true validates :full_name, presence: true def associated_business_name business\u0026amp;.legal_name end end  and in the index view:\n# app/views/people/index.html.erb \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Full name\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Business\u0026lt;/th\u0026gt; \u0026lt;th colspan=\u0026quot;3\u0026quot;\u0026gt;\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;% @people.each do |person| %\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= person.full_name %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= person.associated_business_name %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= link_to 'Show', person %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= link_to 'Edit', edit_person_path(person) %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= link_to 'Destroy', person, method: :delete, data: { confirm: 'Are you sure?' } %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt;  to show all employees on the business show page we can do:\n# app/views/businesses/show.html.erb \u0026lt;p\u0026gt; \u0026lt;strong\u0026gt;Legal name:\u0026lt;/strong\u0026gt; \u0026lt;%= @business.legal_name %\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Employee\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;% @business.people.each do |person| %\u0026gt; \u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;person.full_name\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt;  And now lets look for n+1 queries - to do that we will create many records in the seeds file:\n# db/seeds.rb business = Business.create(legal_name: \u0026quot;Business\u0026quot;) company = Business.create(legal_name: \u0026quot;Company\u0026quot;) boss_man = Person.create(full_name: \u0026quot;Company Man\u0026quot;, business: company) person = Person.create(full_name: \u0026quot;Own Person\u0026quot;) # larger numbers (look for n+1 lookups) 50.times do |business_number| company = Business.create(legal_name: \u0026quot;Company #{business_number}\u0026quot;) business_number.times do |employee_number| Person.create(full_name: \u0026quot;Employee #{employee_number}\u0026quot;, business: company) end end  Now when we visit \u0026lsquo;/people\u0026rsquo; we see an n+1 (to look up the business to get the business name) - this is an easy fix with a pre-load in the controller - just add .include(:business) to the query - now the index method will look like\n# app/controllers/people_controller.rb class PeopleController \u0026lt; ApplicationController def index @people = Person.include(:business).all end  Fix n+1 lookups - for the business employee count is a bit trickier - to avoid lots of look ups we need the db to do the count and add the count as a virtual attribute - this is done with the following query:\n# app/controllers/people_controller.rb class BusinessController \u0026lt; ApplicationController def index # businesses = Business.all # (N+1 when using referring to people) # select must go last or it gets lost / overwritten @businesses = Business.joins(:people) .group('businesses.id') .select('businesses.*, count(people.id) as people_count') end  to avoid confusion - lets rename the method in the class to employee_count:\n# app/models/business.rb class Business \u0026lt; ApplicationRecord has_many :people validates :legal_name, presence: true def employee_count people.count end end  lets run the seeds again:\nbin/rails db:seed  cool now when we look at the log we just have one query instead of many!\nNow let\u0026rsquo;s make the people form to associate a business by name instead of the id!\n# app/views/people/_form.html.erb \u0026lt;%= form_with(model: person) do |form| %\u0026gt; \u0026lt;% if person.errors.any? %\u0026gt; \u0026lt;div id=\u0026quot;error_explanation\u0026quot;\u0026gt; \u0026lt;h2\u0026gt;\u0026lt;%= pluralize(person.errors.count, \u0026quot;error\u0026quot;) %\u0026gt; prohibited this person from being saved:\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;% person.errors.each do |error| %\u0026gt; \u0026lt;li\u0026gt;\u0026lt;%= error.full_message %\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;div class=\u0026quot;field\u0026quot;\u0026gt; \u0026lt;%= form.label :full_name %\u0026gt; \u0026lt;%= form.text_field :full_name %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;field\u0026quot;\u0026gt; \u0026lt;%= form.label :business %\u0026gt; \u0026lt;%= form.select :business_id, Business.all.collect { |b| [ b.legal_name, b.id ] }, prompt: \u0026quot;Select One\u0026quot;, include_blank: true %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;actions\u0026quot;\u0026gt; \u0026lt;%= form.submit %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt;  Great - lets snapshot:\ngit add . git commit -m \u0026quot;created person related to businesses - w/o n+1\u0026quot;  Polymorphic (STI) - sometime called inverse polymorphic  ┌───────────────┐ │ Contact │ │ (functions)+ │ + supplier, reseller, customer, sales-rep │(display_name)*│ * virtual attribute └───────────────┘ ┼ 1 ┌────────────┴─────────────┐ ╱│╲ * * ╱│╲  ┌───────────────┐ ┌───────────────┐ │ Business │╲ 1 │ Person │ │ (legal_name) │ ○ ─ ─ ─ ┼│ (full_name) │ │(display_name)│╱ 0.. │(display_name)*│ └───────────────┘ └───────────────┘\nA contact could be either a person or a business - but must be one or the other.\nThis is implemented in (part 2)[post_ruby_rails/rails_6_x_agnostic_associations_2/]\nPolymorphic a model associated with several different models - serving a similar purpose in both cases\n ┌────────────┐ ┌───────────┐ │ │╲ 1 │ │ │ Business │ ○ ─ ─ ─ ┼│ Person │ │ │╱ 0..* │ │ └────────────┘ └───────────┘ ╲│╱ * * ╲│╱ └───────────┬──────────┘ ┼ 1 ┌──────────────┐ │ │ │ Transaction │ │ │ └──────────────┘  A contact could be either a person or a business - but must be one or the other.\nbin/rails g Contact roles:array business:references person:references  update the migration to ensure we have a role provided \u0026amp; relations:\n#  update the Contact model with the validations \u0026amp; flexible relations:\n# contact.rb  update the Person model and relations:\n# person.rb  update the Business model and relations:\n# business.rb  lets use seed a couple of people too - so it now looks like:\n# db/seed.rb business = Business.create(legal_name: \u0026quot;Business\u0026quot;) company = Business.create(legal_name: \u0026quot;Company\u0026quot;) company.build_person(full_name: \u0026quot;Company Man\u0026quot;) company.save person = Person.create(full_name: \u0026quot;Own Person\u0026quot;)  Lets check the seed with:\nbin/rails db:seed  Assuming this works, let\u0026rsquo;s see the \u0026ldquo;/people\u0026rdquo; page:\nbin/rails s open localhost:3000/businesses/  Great - lets snapshot:\ngit add . git commit -m \u0026quot;created person possibly related to the model\u0026quot;  ","date":1621382220,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628294220,"objectID":"c1fc4107f4bb9ab0e988ed6e3b4c006f","permalink":"https://btihen.me/post_ruby_rails/rails_6_x_agnostic_associations_1/","publishdate":"2021-05-19T01:57:00+02:00","relpermalink":"/post_ruby_rails/rails_6_x_agnostic_associations_1/","section":"post_ruby_rails","summary":"Framework Agnostic Associations - Data models that work across many frameworks","tags":["Rails","Databases","Data models","Framework Agnostic","belongs_to","has_many"],"title":"Rails 6.x - Framework Agnostic Associations - part 1","type":"post_ruby_rails"},{"authors":["Bill Tihen"],"categories":["Code","Lucky","Crystal Language"],"content":"Motivation It is helpful to be able to configure your cli-tasks to work the same as lucky. In lucky you can configure the application\u0026rsquo;s behavior / settings in the config folder.\nFor example, Lucky by default will pluralize staff as staffs - which is ok if you are talking about shepherd staffs - but not employees.\nConfiguration As of Lucky 0.28.0 wordsmith works well with configuration - adding your own settings. You simple create an inflector.cr file in the config folder. Here is an example config:\n# config/inflector.cr # `staff` as in employees - not walking sticks: Wordsmith::Inflector.inflections.uncountable(\u0026quot;staff\u0026quot;) Wordsmith::Inflector.inflections.irregular(\u0026quot;person\u0026quot;, \u0026quot;persons\u0026quot;)  when we test our new lucky config with lucky exec:\nlucky exec # then when vim or nano opens you can enter something like: require \u0026quot;../../src/app.cr\u0026quot; include Lucky::TextHelpers pp pluralize(2, \u0026quot;staff\u0026quot;) pp pluralize(2, \u0026quot;person\u0026quot;)  you will get the expected:\n\u0026quot;2 staff\u0026quot; \u0026quot;2 persons\u0026quot;  Problem However, currently, the settings is only used by the lucky application and not the lucky generators (gen.tasks) - which are pre-compiled. They are pre-compiled on install - BEFORE you even create a config file. Thus the generators generate files that are incompatible with Lucky\u0026rsquo;s configured behavior.\nThis is what happens - it generates staffs files and routes :(\nlucky gen.resource.browser Staff name:String Created CreateStaffs::V20210811201213 in ./db/migrations/20210811201213_create_staffs.cr Generated Staff in ./src/models/staff.cr Generated SaveStaff in ./src/operations/save_staff.cr Generated DeleteStaff in ./src/operations/delete_staff.cr Generated StaffQuery in ./src/queries/staff_query.cr Generated Staffs::Index in ./src/actions/staffs/index.cr Generated Staffs::Show in ./src/actions/staffs/show.cr Generated Staffs::New in ./src/actions/staffs/new.cr Generated Staffs::Create in ./src/actions/staffs/create.cr Generated Staffs::Edit in ./src/actions/staffs/edit.cr Generated Staffs::Update in ./src/actions/staffs/update.cr Generated Staffs::Delete in ./src/actions/staffs/delete.cr Generated Staffs::IndexPage in ./src/pages/staffs/index_page.cr Generated Staffs::ShowPage in ./src/pages/staffs/show_page.cr Generated Staffs::NewPage in ./src/pages/staffs/new_page.cr Generated Staffs::EditPage in ./src/pages/staffs/edit_page.cr Generated Staffs::FormFields in ./src/components/staffs/form_fields.cr  Solution (Lucky contributors are considering more elegant solutions)\nWith guidance from the lucky team we found a clumsy solution. Once we understood that the tasks were pre-compiled automatically. I was able to read how the script worked and noticed it responds to a skip pre-compile env_var and so we were able to solve it with the following procedure:\n# clean up repo of gen.tasks that were problematic # git clean -fd # remove previously compiled shards rm -rf lib \u0026amp;\u0026amp; rm -rf bin # after trashing all the shard - safest to be sure they are intact (or even updated) SKIP_LUCKY_TASK_PRECOMPILATION=true shards install # or shards update # re-run the setup SKIP_LUCKY_TASK_PRECOMPILATION=true ./script/setup  Now with the first task it will compile the task (a bit slow), but it uses your config file!\nlucky gen.resource.browser Staff name:String compiling ...  Now we finally get the expected results when we run the task!\nCreated CreateStaff::V20210812185142 in ./db/migrations/20210812185142_create_staff.cr Generated Staff in ./src/models/staff.cr Generated SaveStaff in ./src/operations/save_staff.cr Generated DeleteStaff in ./src/operations/delete_staff.cr Generated StaffQuery in ./src/queries/staff_query.cr Generated Staff::Index in ./src/actions/staff/index.cr Generated Staff::Show in ./src/actions/staff/show.cr Generated Staff::New in ./src/actions/staff/new.cr Generated Staff::Create in ./src/actions/staff/create.cr Generated Staff::Edit in ./src/actions/staff/edit.cr Generated Staff::Update in ./src/actions/staff/update.cr Generated Staff::Delete in ./src/actions/staff/delete.cr Generated Staff::IndexPage in ./src/pages/staff/index_page.cr Generated Staff::ShowPage in ./src/pages/staff/show_page.cr Generated Staff::NewPage in ./src/pages/staff/new_page.cr Generated Staff::EditPage in ./src/pages/staff/edit_page.cr Generated Staff::FormFields in ./src/components/staff/form_fields.cr  ","date":1620774113,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628722913,"objectID":"e0f6271042c3d40a71b359f660273830","permalink":"https://btihen.me/post_crystal/lucky_0_28_0_inflections/","publishdate":"2021-05-12T01:01:53+02:00","relpermalink":"/post_crystal/lucky_0_28_0_inflections/","section":"post_crystal","summary":"Motivation It is helpful to be able to configure your cli-tasks to work the same as lucky. In lucky you can configure the application\u0026rsquo;s behavior / settings in the config folder.","tags":["language","inflections","configuration"],"title":"Lucky Language Inflections - 0.28.0","type":"post_crystal"},{"authors":["Bill Tihen"],"categories":["Code","Lucky","Crystal Language"],"content":"Motivation It is helpful to be able to configure your cli-tasks to work the same as lucky. In lucky you can configure the application\u0026rsquo;s behavior / settings in the config folder.\nFor example, Lucky by default will pluralize staff as staffs - which is ok if you are talking about shepherd staffs - but not employees.\nConfiguration As of Lucky 0.28.0 wordsmith works well with configuration - adding your own settings. You simple create an inflector.cr file in the config folder. Here is an example config:\n# config/inflector.cr # `staff` as in employees - not walking sticks: Wordsmith::Inflector.inflections.uncountable(\u0026quot;staff\u0026quot;) Wordsmith::Inflector.inflections.irregular(\u0026quot;person\u0026quot;, \u0026quot;persons\u0026quot;)  when we test our new lucky config with lucky exec:\nlucky exec # then when vim or nano opens you can enter something like: require \u0026quot;../../src/app.cr\u0026quot; include Lucky::TextHelpers pp pluralize(2, \u0026quot;staff\u0026quot;) pp pluralize(2, \u0026quot;person\u0026quot;)  you will get the expected:\n\u0026quot;2 staff\u0026quot; \u0026quot;2 persons\u0026quot;  Problem However, currently, the settings is only used by the lucky application and not the lucky generators (gen.tasks) - which are pre-compiled. They are pre-compiled on install - BEFORE you even create a config file. Thus the generators generate files that are incompatible with Lucky\u0026rsquo;s configured behavior.\nThis is what happens - it generates staffs files and routes :(\nlucky gen.resource.browser Staff name:String Created CreateStaffs::V20210811201213 in ./db/migrations/20210811201213_create_staffs.cr Generated Staff in ./src/models/staff.cr Generated SaveStaff in ./src/operations/save_staff.cr Generated DeleteStaff in ./src/operations/delete_staff.cr Generated StaffQuery in ./src/queries/staff_query.cr Generated Staffs::Index in ./src/actions/staffs/index.cr Generated Staffs::Show in ./src/actions/staffs/show.cr Generated Staffs::New in ./src/actions/staffs/new.cr Generated Staffs::Create in ./src/actions/staffs/create.cr Generated Staffs::Edit in ./src/actions/staffs/edit.cr Generated Staffs::Update in ./src/actions/staffs/update.cr Generated Staffs::Delete in ./src/actions/staffs/delete.cr Generated Staffs::IndexPage in ./src/pages/staffs/index_page.cr Generated Staffs::ShowPage in ./src/pages/staffs/show_page.cr Generated Staffs::NewPage in ./src/pages/staffs/new_page.cr Generated Staffs::EditPage in ./src/pages/staffs/edit_page.cr Generated Staffs::FormFields in ./src/components/staffs/form_fields.cr  Solution (Lucky contributors are considering more elegant solutions)\nWith guidance from the lucky team we found a clumsy solution. Once we understood that the tasks were pre-compiled automatically. I was able to read how the script worked and noticed it responds to a skip pre-compile env_var and so we were able to solve it with the following procedure:\n# clean up repo of gen.tasks that were problematic # git clean -fd # remove previously compiled shards rm -rf lib \u0026amp;\u0026amp; rm -rf bin # after trashing all the shard - safest to be sure they are intact (or even updated) SKIP_LUCKY_TASK_PRECOMPILATION=true shards install # or shards update # re-run the setup SKIP_LUCKY_TASK_PRECOMPILATION=true ./script/setup  Now with the first task it will compile the task (a bit slow), but it uses your config file!\nlucky gen.resource.browser Staff name:String compiling ...  Now we finally get the expected results when we run the task!\nCreated CreateStaff::V20210812185142 in ./db/migrations/20210812185142_create_staff.cr Generated Staff in ./src/models/staff.cr Generated SaveStaff in ./src/operations/save_staff.cr Generated DeleteStaff in ./src/operations/delete_staff.cr Generated StaffQuery in ./src/queries/staff_query.cr Generated Staff::Index in ./src/actions/staff/index.cr Generated Staff::Show in ./src/actions/staff/show.cr Generated Staff::New in ./src/actions/staff/new.cr Generated Staff::Create in ./src/actions/staff/create.cr Generated Staff::Edit in ./src/actions/staff/edit.cr Generated Staff::Update in ./src/actions/staff/update.cr Generated Staff::Delete in ./src/actions/staff/delete.cr Generated Staff::IndexPage in ./src/pages/staff/index_page.cr Generated Staff::ShowPage in ./src/pages/staff/show_page.cr Generated Staff::NewPage in ./src/pages/staff/new_page.cr Generated Staff::EditPage in ./src/pages/staff/edit_page.cr Generated Staff::FormFields in ./src/components/staff/form_fields.cr  ","date":1620774113,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628722913,"objectID":"2863fdb0e07fdc762a7bfbe3307d7f6f","permalink":"https://btihen.me/post_tech_notes/lucky_0_28_0_inflections/","publishdate":"2021-05-12T01:01:53+02:00","relpermalink":"/post_tech_notes/lucky_0_28_0_inflections/","section":"post_tech_notes","summary":"Motivation It is helpful to be able to configure your cli-tasks to work the same as lucky. In lucky you can configure the application\u0026rsquo;s behavior / settings in the config folder.","tags":["language","inflections","configuration"],"title":"Lucky Language Inflections - 0.28.0","type":"post_tech_notes"},{"authors":["Bill Tihen"],"categories":["Code","Lucky","Crystal Language"],"content":"Purpose I learned about Lucky improvements (fixes from the minor bugs after my first article) and wanted to test them out.\nThe Lucky repo describes the changes to the shards file and the code base too. https://github.com/luckyframework/lucky/blob/master/UPGRADE_NOTES.md\nUpgrading First lets be sure we have a recent crystal version:\nasdf install crystal 1.1.1 asdf global crystal 1.1.1  Second, Upgrade the lucky-cli:\n# if you don't already have this git clone https://github.com/luckyframework/lucky_cli cd lucky_cli git fetch git checkout v0.28.0 # note this does not match the lucky-framework version (0.27.2)! shards install crystal build src/lucky.cr cp lucky /usr/local/bin cd .. lucky -v # hopefully responds with: 0.28.0  Now lets be sure we update .tools-available in the lucky project folder:\nThen (in the project folder - type:\ncd project_name # my lucky-project asdf local crystal 1.1.1  Lets lets update the shards file to \u0026ndash; according to the upgrade guide we should use the following settings:\n# shard.yml name: animals version: 0.1.0 targets: animals: main: src/animals.cr crystal: \u0026gt;= 1.0.0 dependencies: lucky: github: luckyframework/lucky version: ~\u0026gt; 0.28.0 authentic: github: luckyframework/authentic version: ~\u0026gt; 0.8.0 carbon: github: luckyframework/carbon version: ~\u0026gt; 0.2.0 # this should be removed # dotenv: # github: gdotdesign/cr-dotenv # version: ~\u0026gt; 0.8.0 # use this instead - be shure to follow the instructions at (global search and replace is your friend): # https://github.com/luckyframework/lucky/blob/master/UPGRADE_NOTES.md lucky_env: github: luckyframework/lucky_env version: ~\u0026gt; 0.1.3 lucky_task: github: luckyframework/lucky_task # version: ~\u0026gt; 0.8.0 jwt: github: crystal-community/jwt # version: ~\u0026gt; 0.7.3 development_dependencies: lucky_flow: github: luckyframework/lucky_flow # version: ~\u0026gt; 0.7.3  Now type:\nshards update shards list  Cool - it worked!\nNow lets see if your site still works\ncrystal spec  and start up the project with:\nlucky dev  while we are at it we should update the yarn / node packages too.\nyarn upgrade  ","date":1620601313,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628809313,"objectID":"5170a7e4239db30fd512d6dd86b022e5","permalink":"https://btihen.me/post_crystal/lucky_0_28_0_upgrade/","publishdate":"2021-05-10T01:01:53+02:00","relpermalink":"/post_crystal/lucky_0_28_0_upgrade/","section":"post_crystal","summary":"Exploring how to upgrade crystal projects (Lucky)","tags":["upgrade","shards"],"title":"Lucky Framework Upgrade","type":"post_crystal"},{"authors":["Bill Tihen"],"categories":["Code","Lucky","Crystal Language"],"content":"Purpose I learned about Lucky improvements (fixes from the minor bugs after my first article) and wanted to test them out.\nThe Lucky repo describes the changes to the shards file and the code base too. https://github.com/luckyframework/lucky/blob/master/UPGRADE_NOTES.md\nUpgrading First lets be sure we have a recent crystal version:\nasdf install crystal 1.1.1 asdf global crystal 1.1.1  Second, Upgrade the lucky-cli:\n# if you don't already have this git clone https://github.com/luckyframework/lucky_cli cd lucky_cli git fetch git checkout v0.28.0 # note this does not match the lucky-framework version (0.27.2)! shards install crystal build src/lucky.cr cp lucky /usr/local/bin cd .. lucky -v # hopefully responds with: 0.28.0  Now lets be sure we update .tools-available in the lucky project folder:\nThen (in the project folder - type:\ncd project_name # my lucky-project asdf local crystal 1.1.1  Lets lets update the shards file to \u0026ndash; according to the upgrade guide we should use the following settings:\n# shard.yml name: animals version: 0.1.0 targets: animals: main: src/animals.cr crystal: \u0026gt;= 1.0.0 dependencies: lucky: github: luckyframework/lucky version: ~\u0026gt; 0.28.0 authentic: github: luckyframework/authentic version: ~\u0026gt; 0.8.0 carbon: github: luckyframework/carbon version: ~\u0026gt; 0.2.0 # this should be removed # dotenv: # github: gdotdesign/cr-dotenv # version: ~\u0026gt; 0.8.0 # use this instead - be shure to follow the instructions at (global search and replace is your friend): # https://github.com/luckyframework/lucky/blob/master/UPGRADE_NOTES.md lucky_env: github: luckyframework/lucky_env version: ~\u0026gt; 0.1.3 lucky_task: github: luckyframework/lucky_task # version: ~\u0026gt; 0.8.0 jwt: github: crystal-community/jwt # version: ~\u0026gt; 0.7.3 development_dependencies: lucky_flow: github: luckyframework/lucky_flow # version: ~\u0026gt; 0.7.3  Now type:\nshards update shards list  Cool - it worked!\nNow lets see if your site still works\ncrystal spec  and start up the project with:\nlucky dev  while we are at it we should update the yarn / node packages too.\nyarn upgrade  ","date":1620601313,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628809313,"objectID":"2bcb157e98405189231108b8fe1974d7","permalink":"https://btihen.me/post_tech_notes/lucky_0_28_0_upgrade/","publishdate":"2021-05-10T01:01:53+02:00","relpermalink":"/post_tech_notes/lucky_0_28_0_upgrade/","section":"post_tech_notes","summary":"Exploring how to upgrade crystal projects (Lucky)","tags":["upgrade","shards"],"title":"Lucky Framework Upgrade","type":"post_tech_notes"},{"authors":["Bill Tihen"],"categories":["Code","Lucky","Crystal Language"],"content":"Purpose My goal is to have a simple tutorial to understand and use basic Lucky framework features. I recommend this as a great platform if you work in English and publish in English.\nIf internationalization and or other languages and language flexibility are important to you and your work, then I recommend Rails or Phoenix. If/when internationalization and language flexibility become easier - I\u0026rsquo;ll probably switch to Lucky.\nWhy Lucky  Lucky offers all the features I use in Rails - but is type safe and faster than rails. Lucky\u0026rsquo;s focus is on run-time stability (its not the fastest Crystal Framework, but it faster than rails). The code / structure is well organized. The Lucky Discord community is extremely helpful! The Docs are generally good when you are investigating a specific component \u0026amp; when that is missing - the codebase can be searched (and the code is clear)  See: https://luckyframework.org/guides/getting-started/why-lucky for a full list of what Lucky aims to improve.\nPS - I didn\u0026rsquo;t try out more advanced features such as file uploads, remote file storage, sending emails, etc. These are all common in the apps I write.\nWhy Not Lucky (0.27) I am hoping that Lucky 1.0 will address much of the following.\n I found I had to read a lot of docs (scattered over many locations) \u0026amp; experiment to grock the basic design/mindset what do for common simple things: (like making a field optional and how to adapt a shared / component form) There aren\u0026rsquo;t many Stack Overflow or Blogs describing basic usage. The docs in some cases are incomplete, misleading or have missing information and are not oriented to getting doing the things a framework beginner needs to know. The helper scripts don\u0026rsquo;t help with Relationships - that must be done by hand Language support is very hard to accomplish - I was never able to reliably use the inflector. Setting up internationalization is time consuming and manual and as far as I can tell possibly not easy to integrate with the inflector.  The language support is a BIGGIE for me - living in a country where we regularly work with multiple language (Rails and/or Phoenix have much better i18n support)!\nI don\u0026rsquo;t see the lack of Stack Overflow articles as such a big problem since the Lucky Discord group is so helpful.\nResources This article is a collection of making sense of the following resources\n  https://luckycasts.com/  https://luckyframework.org/guides  https://onchain.io/blog/lucky_tutorial  https://github.com/andrewmcodes/awesome-lucky  https://github.com/stephendolan/lucky_jumpstart  https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1  Installing Lucky For more information see: https://luckyframework.org/guides/getting-started/installing\nThe brew install of lucky (on a MacOS) is bit broken, but the Linux install technique works well on MacOS!\nFirst be sure openssl and postgresql are installed and findable:\nbrew install openssl postgresql # and depending on your shell either (if you don't know which it is safe to do both): echo 'export PKG_CONFIG_PATH=/usr/local/opt/openssl/lib/pkgconfig' \u0026gt;\u0026gt;~/.zshrc echo 'export PKG_CONFIG_PATH=/usr/local/opt/openssl/lib/pkgconfig' \u0026gt;\u0026gt;~/.bash_profile # IMPORTANT - OPEN a new terminal # or if you know what shell you are using you can reload it with source! source ~/.bash_profile  Now install (or be sure ASDF is installed). https://asdf-vm.com/#/core-manage-asdf-vm\nbrew install asdf # assuming bash echo -e \u0026quot;\\n. $(brew --prefix asdf)/asdf.sh\u0026quot; \u0026gt;\u0026gt; ~/.bash_profile echo -e \u0026quot;\\n. $(brew --prefix asdf)/etc/bash_completion.d/asdf.bash\u0026quot; \u0026gt;\u0026gt; ~/.bash_profile # or zsh echo -e \u0026quot;\\n. $(brew --prefix asdf)/asdf.sh\u0026quot; \u0026gt;\u0026gt; ${ZDOTDIR:-~}/.zshrc  Now we add asdf plugin for crystal:\nasdf plugin-add crystal https://github.com/asdf-community/asdf-crystal.git  For both Ruby and Crystal the following is also helpful:\necho \u0026quot;legacy_version_file = yes\u0026quot; \u0026gt;\u0026gt;~/.asdfrc  Lucky 0.27 needs Crystal 0.36.1 (not Crystal 1.0.0) - so we install it with:\nasdf install crystal 0.36.1  I like to the local folder to crystal 0.36.1 (\u0026amp; the node version too) - this will allow use to install and run the lucky-cli tool\necho \u0026quot;cyrstal 0.36.1\u0026quot; \u0026gt;\u0026gt; .tool-versions echo \u0026quot;node 14.16.0\u0026quot; \u0026gt;\u0026gt; .tool-versions  (but you can also just use: asdf global crystal 0.36.1 - so you don\u0026rsquo;t have to set the crystal version in every file you work in)!\nNow let\u0026rsquo;s install lucky_cli \u0026amp; also lucky\ngit clone https://github.com/luckyframework/lucky_cli cd lucky_cli git checkout v0.27.0 shards install # if this following step fails (you probably forgot to reload your shell after the openssl lib path update) crystal build src/lucky.cr # make your compiled lucky_cli available everywhere mv lucky /usr/local/bin  Now if you check your settings you should get:\nlucky -v # This should return 0.27.0 node -v # should be 12.x or greater yarn -v # should be 1.x or greater psql --version # should be 10.x or greater  Start a Lucky Project Create your new Lucky project with the wizzard (just answer questions) - other options are at: https://luckyframework.org/guides/getting-started/starting-project\nlucky init cd {project_name} # update the db settings in: `config/database.cr` # if this step fails you may have forgotten to reload the shell after updating the openssl path script/setup # run lucky with: lucky dev  Ok lets do an initial commit:\ngit add . git commit -m \u0026quot;initial commit after create\u0026quot;  Quick Lucky Test Tip Lets quickly test our new config with lucky exec - type:\nlucky exec  This gives you an edit in your cli and you can type a small amount of code and it will be compiles and print you the results - ie:\nlucky exec # then when vim or nano opens you can enter something like: require \u0026quot;../../src/app.cr\u0026quot; include Lucky::TextHelpers pp pluralize(2, \u0026quot;human\u0026quot;)  and hopefuly you get 2 humans - cool - it works lets snapshot our changes.\ngit add . git commit -m \u0026quot;language inflection updates and customization\u0026quot;  Scaffold a Simple Resource  https://luckyframework.org/guides/command-line-tasks/built-in\nNow if we try again (we are free to use human again):\nlucky gen.resource.browser Human name:String  Now lets run the migration:\nlucky db.migrate # oops I haven't create the DB yet lucky db.create # now migrate lucky db.migrate # start lucky \u0026amp; test lucky dev  Now log_in and create humans at the /humans url\nCool - lets snapshot:\ngit add . git commit -m \u0026quot;First simple 'Human' resource with scaffold\u0026quot;  Create a Related Model  https://www.luckyframework.org/guides/database/models#belongs-to https://www.luckyframework.org/guides/database/models#has-many-one-to-many https://luckyframework.org/guides/database/migrations#associations\nUnfortunately, the Lucky generators don\u0026rsquo;t understand belongs_to so we will need to do a few extra tweeks \u0026ndash; since we can\u0026rsquo;t do something like human:belongs_to or human:references like with Rails.\nSo if we want to scaffold \u0026ldquo;pets\u0026rdquo; now and have them belong to humans (and humans can have many pets) - we first do:\nlucky gen.resource.browser Pet name:String breed:String species:String age:Int32 house_trained:Bool  Now let\u0026rsquo;s setup the relationships:\nFirst we need to update the migration with the human foreign_key using: add_belongs_to\nSo we need to update our pets migration to:\n# db/migrations/yyyymmddxxxxxx_create_pets.cr class CreatePets::V20210502100912 \u0026lt; Avram::Migrator::Migration::V1 def migrate create table_for(Pet) do primary_key id : Int64 add_timestamps add name : String add breed : String add species : String add age : Int32 add house_trained : Bool # When the associated human is deleted, their pets are also deleted # because we set on_delete: :cascade add_belongs_to human : Human, on_delete: :cascade # relationship - newly added end end def rollback drop table_for(Pet) end end  Now that the pets database table will is correct - lets update the pet model too. This is straight-forward we just need to add belongs_to human : Human in the model file so it changes to:\n# src/models/pet.cr class Pet \u0026lt; BaseModel table do column name : String column breed : String # column breed : String? - makes this field optional column species : String column age : Int32 column house_trained : Bool belongs_to human : Human # relationship - newly added end end  now we need to add has_many to the Human model. So we change it to:\n# src/models/human.cr class Human \u0026lt; BaseModel table do column name : String has_many pets : Pet # relationship - newly added end end  Now we can migrate:\nlucky db.migrate  Lucky HTML and RootPage Routing  https://luckycasts.com/videos/lucky-html-in-crystal https://www.luckyframework.org/guides/http-and-routing/routing-and-params#root-page\nIf we look in src/actions/home/index.cr we see:\n# src/actions/home/index.cr class Home::Index \u0026lt; BrowserAction include Auth::AllowGuests get \u0026quot;/\u0026quot; do if current_user? redirect Me::Show else # html Landing::IndexPage html Lucky::WelcomePage end end end  As we can see - when we are not logged in \u0026ldquo;/\u0026rdquo; points to Lucky::WelcomePage or whatever new landing page we make and when logged in we are pointed to the Me::Show page.\nLet practice adding some html and add links to our expected resources:\n \u0026lsquo;/humans\u0026rsquo; \u0026lsquo;/pets\u0026rsquo;  So lets change this too and practice lucky html\nWe will add our list of resources - \u0026lsquo;pets\u0026rsquo; and \u0026lsquo;humans\u0026rsquo;.\nSo from looking at the existing html in src/pages/me/show_page.cr it\u0026rsquo;s like a combo of haml and JS to create executable blocks with {} so I created the method: private def resource_links and tried out two methods of linking - not bad, but I figure it will take a bit of practice with this new format. I don\u0026rsquo;t know the reason behind this, since almost all web resources will need to be reformatted - but I assume it is pre-compiled and thus fast!\nIn the end I created this:\n# src/pages/me/show_page.cr class Me::ShowPage \u0026lt; MainLayout def content h1 \u0026quot;This is your profile:\u0026quot; h2 \u0026quot;Email: #{@current_user.email}\u0026quot; resource_links helpful_tips end private def resource_links h2 \u0026quot;Available Resources\u0026quot; ul do li { a \u0026quot;Pet Owners\u0026quot;, href: \u0026quot;/humans\u0026quot; } li { link_to_pets } end end private def helpful_tips h3 \u0026quot;Next, you may want to:\u0026quot; ul do li { link_to_authentication_guides } li \u0026quot;Modify this page: src/pages/me/show_page.cr\u0026quot; li \u0026quot;Change where you go after sign in: src/actions/home/index.cr\u0026quot; end end private def link_to_pets a \u0026quot;Pets\u0026quot;, href: \u0026quot;/pets\u0026quot; end private def link_to_authentication_guides a \u0026quot;Check out the authentication guides\u0026quot;, href: \u0026quot;https://luckyframework.org/guides/authentication\u0026quot; end end  lets test it out:\nlucky dev  cool - good enough for now.\ngit add . git commit -m \u0026quot;added html links to user_home_page 'me'\u0026quot;  Seed Files  https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1 https://luckyframework.org/guides/database/database-setup#seeding-data\nNow we can create seed files and be sure our basic relations work:\nLets test our building a model and the Lucky mechanisms before we get fancy with relationships and in particular polymorphism.\n https://luckyframework.org/guides/tutorial/new-resource\nSo we will generate an animal resource - using a full stack generator:\nlucky gen.resource.browser Animal nick_name:String species:String lucky db.migrate  Now let\u0026rsquo;s create some sample data in tasks/db/seed/sample_data.cr - via the seed task - from these instructions: https://luckyframework.org/guides/database/database-setup#seeding-data as our base.\nWe will start by using what\u0026rsquo;s used to save when we create new records with incomming data. SaveAnimal.create!(nick_name: \u0026quot;racky coon\u0026quot;) so now our file will look like:\n# tasks/db/seed/sample_data.cr require \u0026quot;../../../spec/support/factories/**\u0026quot; class Db::Seed::SampleData \u0026lt; LuckyTask::Task summary \u0026quot;Add sample database records helpful for development\u0026quot; def call SavePet.create!(nick_name: \u0026quot;racky coon\u0026quot;) puts \u0026quot;Done adding sample data\u0026quot; end end  We test this with:\nlucky db.seed.sample_data  assuming this runs we should be able to view this data in our db (I often use the cli - but you might also want to use: dbgate https://dbgate.org/):\npsql \\l \\c lucky_poly_development select * from animals;  cool - lets try a factory too - these are especially help when complex and building relationships, etc:\n# spec/support/factories/animal_factory.cr class AnimalFactory \u0026lt; Avram::Factory def initialize nick_name \u0026quot;Nick Name\u0026quot; end end  now lets try using our factory in the seed file:\n# tasks/db/seed/sample_data.cr require \u0026quot;../../../spec/support/factories/**\u0026quot; class Db::Seed::SampleData \u0026lt; LuckyTask::Task summary \u0026quot;Add sample database records helpful for development\u0026quot; def call SaveAnimal.create!(nick_name: \u0026quot;racky coon\u0026quot;, species: \u0026quot;racoon\u0026quot;) # using a factory: https://luckyframework.org/guides/testing/creating-test-data#factory-create AnimalFactory.create do |factory| factory.nick_name(\u0026quot;Dyno\u0026quot;) factory.species(\u0026quot;Dog\u0026quot;) end # a shortcut way to write a block in crystal, see: https://crystal-lang.org/reference/syntax_and_semantics/blocks_and_procs.html#short-one-argument-syntax AnimalFactory.create \u0026amp;.nick_name(\u0026quot;Shiné\u0026quot;).species(\u0026quot;cat\u0026quot;) puts \u0026quot;Done adding sample data\u0026quot; end end  test again with:\nlucky db.seed.sample_data  Sweet, let\u0026rsquo;s snapshot and try more complex stuff!\ngit add . git commit -m \u0026quot;add a simple model and seed data in it\u0026quot;  Simple Lucky Forms (in pages instead of shared)  https://luckycasts.com/videos/component-basics https://luckycasts.com/videos/lucky-html-in-crystal https://luckyframework.org/guides/frontend/html-forms https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1 https://luckyframework.org/guides/frontend/html-forms#shared-components\nLets test the web page\nlucky dev  and go to the url /pets and create a Pet.\nWe discover we have problems - validation errors.\n Type mismatches (crystal is strongly typed - but the form generator ignores this - so we need to adjust by hans) Required human_id is missing (the generator isn\u0026rsquo;t aware of belongs_to)  I didn\u0026rsquo;t find lots of Documentation or examples on Components, but I did find this article - which got me started on Lucky html and forms: https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1\nAfter I figured out how to update FormComponents I found this: https://luckycasts.com/videos/component-basics - I\u0026rsquo;ll go back and view this!\nThis got me going! However, one difficulty I had was the Boolean field house_trained - I tried both Checkboxes and Radio Buttons, but I kept getting overload errors (which I finally realized were type mis-matches - you can\u0026rsquo;t send text into a Boolean field). So I settled on a select_list where I can present a tuple with a \u0026ldquo;human readable value\u0026rdquo; and a \u0026ldquo;model value\u0026rdquo;.\nSo in the end my first draft form looked like:\n# src/pages/pets/new_page.cr class Pets::NewPage \u0026lt; MainLayout needs operation : SavePet quick_def page_title, \u0026quot;New Pet\u0026quot; def content h1 \u0026quot;New Pet\u0026quot; render_pet_form(operation) end def render_pet_form(op) # comment out the form component for now # form_for Pets::Create do # # Edit fields in src/components/pets/form_fields.cr # mount Pets::FormFields, op # submit \u0026quot;Save\u0026quot;, data_disable_with: \u0026quot;Saving...\u0026quot; # end form_for Pets::Create do div do label_for op.name text_input op.name end div do label_for op.species select_input(op.species, class: \u0026quot;custom-select\u0026quot;) do select_prompt(\u0026quot;Select\u0026quot;) options_for_select(op.species, [{\u0026quot;Cat\u0026quot;, \u0026quot;cat\u0026quot;}, {\u0026quot;Dog\u0026quot;, \u0026quot;dog\u0026quot;}]) end end # eventually allow for this to be blank # eventually allow a dropdown list to be dependent on species div do label_for op.breed text_input op.breed end div do label_for op.age number_input(op.age, class: \u0026quot;custom-input\u0026quot;, min: \u0026quot;0\u0026quot;, max: \u0026quot;99\u0026quot;) end div do label_for op.house_trained select_input(op.house_trained, class: \u0026quot;custom-select\u0026quot;) do select_prompt(\u0026quot;Select\u0026quot;) options_for_select(op.house_trained, [{\u0026quot;yes\u0026quot;, true}, {\u0026quot;No\u0026quot;, false}]) end end div do label_for op.human_id select_input op.human_id do options_for_select(op.human_id, humans_for_select) end end submit \u0026quot;Save Pet\u0026quot; end end # find all the humans and create a tuple of the name and id - displayed and passed to model private def humans_for_select HumanQuery.new.map do |human| { human.name, human.id } end end end  of course this isn\u0026rsquo;t shared by the edit page, but it is still helpful to see the Lucky way to create html.\nSo after a while I figured out how to revert this code and use SharedForms (I think this is a form of FrontEnd Components).\nLets test again:\nlucky dev  Cool it works as I expect\ngit add . git commit -m \u0026quot;a working 'new' html form - not shared\u0026quot;  Shared Web Form - Component  https://luckycasts.com/videos/component-basics https://luckyframework.org/guides/frontend/html-forms https://luckyframework.org/guides/frontend/html-forms#shared-components\nWith a little more experience with Lucky HTML lets try the component forms again at src/components/pets/form_fields.cr (so lets revert: src/pages/pets/new_page.cr back to:\n# src/pages/pets/new_page.cr class Pets::NewPage \u0026lt; MainLayout needs operation : SavePet quick_def page_title, \u0026quot;New Pet\u0026quot; def content h1 \u0026quot;New Pet\u0026quot; render_pet_form(operation) end def render_pet_form(op) form_for Pets::Create do # Edit fields in src/components/pets/form_fields.cr mount Pets::FormFields, op submit \u0026quot;Save\u0026quot;, data_disable_with: \u0026quot;Saving...\u0026quot; end end end  Once I had build the first form and understood the errors - so the same form as a form_component looks like:\n# src/components/pets/form_fields.cr class Pets::FormFields \u0026lt; BaseComponent needs operation : SavePet def render mount Shared::Field, operation.name, \u0026amp;.text_input(autofocus: \u0026quot;true\u0026quot;) mount Shared::Field, operation.species do |input_html| input_html.select_input append_class: \u0026quot;select-input\u0026quot; do select_prompt(\u0026quot;Select\u0026quot;) options_for_select operation.species, [{\u0026quot;Dog\u0026quot;, \u0026quot;dog\u0026quot;}, {\u0026quot;Cat\u0026quot;, \u0026quot;cat\u0026quot;}] end end mount Shared::Field, operation.breed mount Shared::Field, operation.age, \u0026amp;.number_input(append_class: \u0026quot;custom-input\u0026quot;, min: \u0026quot;0\u0026quot;, max: \u0026quot;99\u0026quot;) mount Shared::Field, operation.house_trained do |input_html| input_html.select_input append_class: \u0026quot;select-input\u0026quot; do select_prompt(\u0026quot;Select\u0026quot;) options_for_select operation.house_trained, [{\u0026quot;yes\u0026quot;, true}, {\u0026quot;no\u0026quot;, false}] end end mount Shared::Field, operation.human_id do |input_html| input_html.select_input append_class: \u0026quot;select-input\u0026quot; do select_prompt(\u0026quot;Select\u0026quot;) options_for_select operation.human_id, options_for_humans end end end private def options_for_humans HumanQuery.new.map do |human| { human.name, human.id } end end end  NOTE:\n  the documentation has several examples with: attrs: [:required] in the form. This does client side validation (will not even submit the form if empty). I don\u0026rsquo;t recommend using this generally.\n  if you don\u0026rsquo;t put anything next to the variable a text input without anything more than the errors are assumed \u0026amp;.text_input()\n  Lets test again:\nlucky dev  cool - lets snapshot:\ngit add . git commit -m \u0026quot;working shared form component with a variety of types\u0026quot;  Redirect after Create / Update to Index  https://luckyframework.org/guides/http-and-routing/routing-and-params\nI find it annoying after creating and updating a resource to have to then manually go back to the index page from the show page.\nIn lucky the routing/controll happens in the action files.\nTo change what happens after creating and updating a Pet we simply change src/actions/pets/create.cr to:\n# src/actions/pets/create.cr class Pets::Create \u0026lt; BrowserAction post \u0026quot;/pets\u0026quot; do SavePet.create(params) do |operation, pet| if pet flash.success = \u0026quot;The record has been saved\u0026quot; html IndexPage, pets: PetQuery.new # new action (copied from index) # redirect Show.with(pet.id) # old no longer wanted else flash.failure = \u0026quot;It looks like the form is not valid\u0026quot; html NewPage, operation: operation end end end end  And update src/actions/pets/update.cr is similarly easy:\n# src/actions/pets/update.cr class Pets::Update \u0026lt; BrowserAction put \u0026quot;/pets/:pet_id\u0026quot; do pet = PetQuery.find(pet_id) SavePet.update(pet, params) do |operation, updated_pet| if operation.saved? flash.success = \u0026quot;The record has been updated\u0026quot; html IndexPage, pets: PetQuery.new # redirect Show.with(updated_pet.id) else flash.failure = \u0026quot;It looks like the form is not valid\u0026quot; html EditPage, operation: operation, pet: updated_pet end end end end  I appreciate how explicit these are!\nOptional Fields Often a breed is unknown - we could just add an unknown value, but that\u0026rsquo;s silly, lets figure out how to work with unknown / unneeded data and allow nil in our breed field.\nSince Crystal is strongly typed - one needs to explicitly mark that a field can be nil with ? - you can see the docs here: https://luckyframework.org/guides/database/models#adding-a-column\nSo to make breed optional we will change the pets model to:\nclass Pet \u0026lt; BaseModel table do column name : String column species : String column breed : String? # adding `?` makes the field optional (nil-able) column age : Int32 column house_trained : Bool # relations belongs_to owner : Owner end end  Now when I run lucky - I\u0026rsquo;ll expect to find some errors - (probably in a view saying I need null protecction). However instead I get:\nUnhandled exception: Pet has defined 'breed' as nilable (String?), but the database column does not allow nils. web | web | Either mark the column as required in Pet: web | web | # Remove the '?' web | column breed : String web | web | Or, make the column optional in a migration: web | web | ▸ Generate a migration: web | web | lucky gen.migration MakePetBreedOptional web | web | ▸ Make the column optional: web | web | make_optional :pets, :breed  Oddly, I don\u0026rsquo;t see anything in the migration Docs https://www.luckyframework.org/guides/database/migrations about marking a file optional (nor how to make it optional in the original migration). Since we w\nBut lets try:\nlucky gen.migration MakePetBreedOptional  Hmm, the error says what to put in the migration, but not the rollback, lets search the luckyframework repos and see what we find: https://github.com/luckyframework/avram/blob/f676a9a7d2e70d74891ad686039bf393983d0760/src/avram/migrator/statement_helpers.cr\nHere we see what the options are so lets edit the migration to look like:\nclass MakePetBreedOptional::V20210507125901 \u0026lt; Avram::Migrator::Migration::V1 def migrate make_optional :pets, :breed # alter table_for(Pet) do # make_optional :breed # end end def rollback # query for breed fields that are nil and fill them BEFORE making the field REQUIRED! PetQuery.new.breed.is_nil.each do |pet| SavePet.update!(pet, breed: \u0026quot;unknown\u0026quot;) end # this would work too, but might as well let the db do the heavy lifting # PetQuery.new.each do |pet| # SavePet.update!(pet, breed: \u0026quot;unknown\u0026quot;) if pet.breed.nil? # end # simple way of making ONE field required make_required :pets, :breed # this would be better when changing lots of fields # alter table_for(Pet) do # make_required :breed # end end end  OK - lets try again:\nlucky dev  Cool it works - lets make a new record - with an null value.\nLets look at the record within postgresql:\npsql -d pets_development select * from pets; id | created_at | updated_at | name | breed | species | age | house_trained | owner_id ----+------------------------+------------------------+-------+-------+---------+-----+---------------+---------- 1 | 2021-05-07 15:23:28+02 | 2021-05-07 15:23:28+02 | Nyima | | dog | 11 | t | 1 \\q  Now let\u0026rsquo;s be sure our rollback works. Notice - before we make it required we find records with nil values and fill them unknown. An example of adding data logic within a migration can be found at: https://luckyframework.org/guides/database/migrations#using-fill_existing_with-and-default-values\nlucky db.rollback  OK - good the migration didn\u0026rsquo;t crash - lets check the DB.\npsql -d pets_development select * from pets; id | created_at | updated_at | name | breed | species | age | house_trained | owner_id ----+------------------------+------------------------+-------+---------+---------+-----+---------------+---------- 1 | 2021-05-07 15:23:28+02 | 2021-05-07 16:28:55+02 | Nyima | unknown | dog | 11 | t | 1 \\q  Nice it worked.\nDisplay Validation Errors If we leave some fields out - Lucky gives us validation errors - all fields appear to be required without explicitly allowing nils - but we don\u0026rsquo;t see them with our default form. Lets fix that.\nAdd Validations Let\u0026rsquo;s add a few custom validations:\n minimal pet_name length numeric range  Tests for our Validations Now that we have some logic lets add some tests\n  BrowserTesting  Pretty URLs Looks interesting and easy\n  https://github.com/luckyframework/avram_slugify  Lucky PubSub   https://github.com/luckyframework/pulsar  Bulma Integration Integrate CSS Frameworks\nView Components  https://luckycasts.com/videos/component-basics https://luckyframework.org/guides/frontend/rendering-html#creating-and-using-components\nTailwind Integration  https://luckycasts.com/videos/tailwind-css\nLet\u0026rsquo;s make the pages a bit nicer\nHTML to Lucky formatter  https://luckyframework.org/html\nIf we want to create some more complex pages with tailwind - lets use the converted to help.\nDynamic Front-end - Selections Dependencies (AlpineJS / StimulusJS) ?  https://luckycasts.com/videos/stimulus-js\nMake the breed list, dependent on the species list Lets change the Front-End language on the fly Lets make the new TailwindUI menu bar have the dynamic features.\nHas many through  https://www.luckyframework.org/guides/database/models#has-many-through-many-to-many\nPolymorphic Relationships  https://www.luckyframework.org/guides/database/models#polymorphic-associations\nOne reason I favor Lucky is the database Avram supports polymorphic relationships - which seems to come up a lot in my code - so lets see how to get it working and support multiple types:\nPets -\u0026gt; Cats, Dogs, Horses, etc\nOptional Relations Internationalization (i18n)  https://luckycasts.com/videos/translations https://luckyframework.org/guides/frontend/internationalization\nDynamic i18n in Front-End? Components (with scopes) Lucky Code Scopes Resource Authorization  https://github.com/stephendolan/pundit\nWeb Sockets For now something like LiveView and Hotwire are not yet integrated into lucky - its build your own.\n https://github.com/cable-cr/cable https://github.com/luckyframework/lucky/issues/554\nDeploying Lucky \u0026amp; ENV  https://fullstackstanley.com/read/categories/lucky-framework/\nSecurity (Alternatives)  https://github.com/grottopress/shield\nMessage / Events - Queues   Redis  Sidekiq  InMemory-JobQueue  Language Inflections Lucky 0.27.0 has problems using config/inflector.cr settings (fixed in Lucky 0.28.0). However, both versions have problems with loading these language configs into the pre-compiled lucky tasks.\nTHere\u0026rsquo;s what happens (do a git snapshot):\nlucky gen.resource.browser Human name:String  OOPS - that generated the plural of Human as Humen instead of Humans!\nlets clear all our incorrect files and fix this (if you did a git snapshot previously):\ngit clean -fd  Now let\u0026rsquo;s create a new config file for inflections config/inflector.cr and enter:\n# config/inflector.cr require \u0026quot;wordsmith\u0026quot; # `staff` as in employees - not walking sticks: Wordsmith::Inflector.inflections.uncountable(\u0026quot;staff\u0026quot;) Wordsmith::Inflector.inflections.irregular(\u0026quot;human\u0026quot;, \u0026quot;humans\u0026quot;) Wordsmith::Inflector.inflections.irregular(\u0026quot;person\u0026quot;, \u0026quot;persons\u0026quot;)  when we test our new lucky config with lucky exec:\nlucky exec # then when vim or nano opens you can enter something like: require \u0026quot;../../src/app.cr\u0026quot; include Lucky::TextHelpers pp pluralize(2, \u0026quot;staff\u0026quot;) pp pluralize(2, \u0026quot;person\u0026quot;)  you will get the expected:\n\u0026quot;2 staff\u0026quot; \u0026quot;2 persons\u0026quot;  Given the tasks are pre-compiled do the following:\n# clean up repo of gen.tasks that were problematic # git clean -fd # remove previously compiled shards rm -rf lib \u0026amp;\u0026amp; rm -rf bin # after trashing all the shard - safest to be sure they are intact (or even updated) SKIP_LUCKY_TASK_PRECOMPILATION=true shards install # or shards update # re-run the setup SKIP_LUCKY_TASK_PRECOMPILATION=true ./script/setup  Now with the first task it will compile the task (a bit slow), but it uses your config file!\nlucky gen.resource.browser Staff name:String compiling ...  Sweet - this works for human - but not people - which is already defined in wordsmith. The fix for this is to copy the entire wordsmith inflector file, adjust it to your needs and put it in config/inflector.cr\n https://github.com/luckyframework/wordsmith/blob/master/src/wordsmith/inflections.cr\n# config/inflector.cr require \u0026quot;wordsmith\u0026quot; module Wordsmith # its important to clear all existing settings Inflector.inflections.clear # make adjustments as needed to the original file Inflector.inflections.plural(/$/, \u0026quot;s\u0026quot;) Inflector.inflections.plural(/s$/i, \u0026quot;s\u0026quot;) # etc, etc, etc Inflector.inflections.irregular(\u0026quot;human\u0026quot;, \u0026quot;humans\u0026quot;) Inflector.inflections.irregular(\u0026quot;person\u0026quot;, \u0026quot;persons\u0026quot;) # added staff to the list Inflector.inflections.uncountable(%w(equipment information rice money species series fish sheep jeans police staff)) end  Now if we try again we will have the same problem! We need to remove our binaries and recompile lucky with our need config! (I lost a lot of time on this detail)! Do this with:\nrm -rf lib \u0026amp;\u0026amp; rm -rf bin SKIP_LUCKY_TASK_PRECOMPILATION=true shards install SKIP_LUCKY_TASK_PRECOMPILATION=true ./script/setup  Now we can try to create a new Resource again. In Lucky 0.28.0 this config has gotten better, but the pre-compiled tasks still create confusion.\n","date":1619910113,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628722913,"objectID":"34c3eacd0c7cc41de8de9b91361a3c05","permalink":"https://btihen.me/post_crystal/lucky_0_27_project_basics/","publishdate":"2021-05-02T01:01:53+02:00","relpermalink":"/post_crystal/lucky_0_27_project_basics/","section":"post_crystal","summary":"A simple but reasonably comprehensive overview of Lucky features - with the context of a 'mini-project'","tags":["Relationships","Basics","Forms","Components","Routing","Lucky","Web Framework","Crystal Language"],"title":"Lucky Framework with Crystal Language","type":"post_crystal"},{"authors":["Bill Tihen"],"categories":["Code","Lucky","Crystal Language"],"content":"Purpose My goal is to have a simple tutorial to understand and use basic Lucky framework features. I recommend this as a great platform if you work in English and publish in English.\nIf internationalization and or other languages and language flexibility are important to you and your work, then I recommend Rails or Phoenix. If/when internationalization and language flexibility become easier - I\u0026rsquo;ll probably switch to Lucky.\nWhy Lucky  Lucky offers all the features I use in Rails - but is type safe and faster than rails. Lucky\u0026rsquo;s focus is on run-time stability (its not the fastest Crystal Framework, but it faster than rails). The code / structure is well organized. The Lucky Discord community is extremely helpful! The Docs are generally good when you are investigating a specific component \u0026amp; when that is missing - the codebase can be searched (and the code is clear)  See: https://luckyframework.org/guides/getting-started/why-lucky for a full list of what Lucky aims to improve.\nPS - I didn\u0026rsquo;t try out more advanced features such as file uploads, remote file storage, sending emails, etc. These are all common in the apps I write.\nWhy Not Lucky (0.27) I am hoping that Lucky 1.0 will address much of the following.\n I found I had to read a lot of docs (scattered over many locations) \u0026amp; experiment to grock the basic design/mindset what do for common simple things: (like making a field optional and how to adapt a shared / component form) There aren\u0026rsquo;t many Stack Overflow or Blogs describing basic usage. The docs in some cases are incomplete, misleading or have missing information and are not oriented to getting doing the things a framework beginner needs to know. The helper scripts don\u0026rsquo;t help with Relationships - that must be done by hand Language support is very hard to accomplish - I was never able to reliably use the inflector. Setting up internationalization is time consuming and manual and as far as I can tell possibly not easy to integrate with the inflector.  The language support is a BIGGIE for me - living in a country where we regularly work with multiple language (Rails and/or Phoenix have much better i18n support)!\nI don\u0026rsquo;t see the lack of Stack Overflow articles as such a big problem since the Lucky Discord group is so helpful.\nResources This article is a collection of making sense of the following resources\n  https://luckycasts.com/  https://luckyframework.org/guides  https://onchain.io/blog/lucky_tutorial  https://github.com/andrewmcodes/awesome-lucky  https://github.com/stephendolan/lucky_jumpstart  https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1  Installing Lucky For more information see: https://luckyframework.org/guides/getting-started/installing\nThe brew install of lucky (on a MacOS) is bit broken, but the Linux install technique works well on MacOS!\nFirst be sure openssl and postgresql are installed and findable:\nbrew install openssl postgresql # and depending on your shell either (if you don't know which it is safe to do both): echo 'export PKG_CONFIG_PATH=/usr/local/opt/openssl/lib/pkgconfig' \u0026gt;\u0026gt;~/.zshrc echo 'export PKG_CONFIG_PATH=/usr/local/opt/openssl/lib/pkgconfig' \u0026gt;\u0026gt;~/.bash_profile # IMPORTANT - OPEN a new terminal # or if you know what shell you are using you can reload it with source! source ~/.bash_profile  Now install (or be sure ASDF is installed). https://asdf-vm.com/#/core-manage-asdf-vm\nbrew install asdf # assuming bash echo -e \u0026quot;\\n. $(brew --prefix asdf)/asdf.sh\u0026quot; \u0026gt;\u0026gt; ~/.bash_profile echo -e \u0026quot;\\n. $(brew --prefix asdf)/etc/bash_completion.d/asdf.bash\u0026quot; \u0026gt;\u0026gt; ~/.bash_profile # or zsh echo -e \u0026quot;\\n. $(brew --prefix asdf)/asdf.sh\u0026quot; \u0026gt;\u0026gt; ${ZDOTDIR:-~}/.zshrc  Now we add asdf plugin for crystal:\nasdf plugin-add crystal https://github.com/asdf-community/asdf-crystal.git  For both Ruby and Crystal the following is also helpful:\necho \u0026quot;legacy_version_file = yes\u0026quot; \u0026gt;\u0026gt;~/.asdfrc  Lucky 0.27 needs Crystal 0.36.1 (not Crystal 1.0.0) - so we install it with:\nasdf install crystal 0.36.1  I like to the local folder to crystal 0.36.1 (\u0026amp; the node version too) - this will allow use to install and run the lucky-cli tool\necho \u0026quot;cyrstal 0.36.1\u0026quot; \u0026gt;\u0026gt; .tool-versions echo \u0026quot;node 14.16.0\u0026quot; \u0026gt;\u0026gt; .tool-versions  (but you can also just use: asdf global crystal 0.36.1 - so you don\u0026rsquo;t have to set the crystal version in every file you work in)!\nNow let\u0026rsquo;s install lucky_cli \u0026amp; also lucky\ngit clone https://github.com/luckyframework/lucky_cli cd lucky_cli git checkout v0.27.0 shards install # if this following step fails (you probably forgot to reload your shell after the openssl lib path update) crystal build src/lucky.cr # make your compiled lucky_cli available everywhere mv lucky /usr/local/bin  Now if you check your settings you should get:\nlucky -v # This should return 0.27.0 node -v # should be 12.x or greater yarn -v # should be 1.x or greater psql --version # should be 10.x or greater  Start a Lucky Project Create your new Lucky project with the wizzard (just answer questions) - other options are at: https://luckyframework.org/guides/getting-started/starting-project\nlucky init cd {project_name} # update the db settings in: `config/database.cr` # if this step fails you may have forgotten to reload the shell after updating the openssl path script/setup # run lucky with: lucky dev  Ok lets do an initial commit:\ngit add . git commit -m \u0026quot;initial commit after create\u0026quot;  Quick Lucky Test Tip Lets quickly test our new config with lucky exec - type:\nlucky exec  This gives you an edit in your cli and you can type a small amount of code and it will be compiles and print you the results - ie:\nlucky exec # then when vim or nano opens you can enter something like: require \u0026quot;../../src/app.cr\u0026quot; include Lucky::TextHelpers pp pluralize(2, \u0026quot;human\u0026quot;)  and hopefuly you get 2 humans - cool - it works lets snapshot our changes.\ngit add . git commit -m \u0026quot;language inflection updates and customization\u0026quot;  Scaffold a Simple Resource  https://luckyframework.org/guides/command-line-tasks/built-in\nNow if we try again (we are free to use human again):\nlucky gen.resource.browser Human name:String  Now lets run the migration:\nlucky db.migrate # oops I haven't create the DB yet lucky db.create # now migrate lucky db.migrate # start lucky \u0026amp; test lucky dev  Now log_in and create humans at the /humans url\nCool - lets snapshot:\ngit add . git commit -m \u0026quot;First simple 'Human' resource with scaffold\u0026quot;  Create a Related Model  https://www.luckyframework.org/guides/database/models#belongs-to https://www.luckyframework.org/guides/database/models#has-many-one-to-many https://luckyframework.org/guides/database/migrations#associations\nUnfortunately, the Lucky generators don\u0026rsquo;t understand belongs_to so we will need to do a few extra tweeks \u0026ndash; since we can\u0026rsquo;t do something like human:belongs_to or human:references like with Rails.\nSo if we want to scaffold \u0026ldquo;pets\u0026rdquo; now and have them belong to humans (and humans can have many pets) - we first do:\nlucky gen.resource.browser Pet name:String breed:String species:String age:Int32 house_trained:Bool  Now let\u0026rsquo;s setup the relationships:\nFirst we need to update the migration with the human foreign_key using: add_belongs_to\nSo we need to update our pets migration to:\n# db/migrations/yyyymmddxxxxxx_create_pets.cr class CreatePets::V20210502100912 \u0026lt; Avram::Migrator::Migration::V1 def migrate create table_for(Pet) do primary_key id : Int64 add_timestamps add name : String add breed : String add species : String add age : Int32 add house_trained : Bool # When the associated human is deleted, their pets are also deleted # because we set on_delete: :cascade add_belongs_to human : Human, on_delete: :cascade # relationship - newly added end end def rollback drop table_for(Pet) end end  Now that the pets database table will is correct - lets update the pet model too. This is straight-forward we just need to add belongs_to human : Human in the model file so it changes to:\n# src/models/pet.cr class Pet \u0026lt; BaseModel table do column name : String column breed : String # column breed : String? - makes this field optional column species : String column age : Int32 column house_trained : Bool belongs_to human : Human # relationship - newly added end end  now we need to add has_many to the Human model. So we change it to:\n# src/models/human.cr class Human \u0026lt; BaseModel table do column name : String has_many pets : Pet # relationship - newly added end end  Now we can migrate:\nlucky db.migrate  Lucky HTML and RootPage Routing  https://luckycasts.com/videos/lucky-html-in-crystal https://www.luckyframework.org/guides/http-and-routing/routing-and-params#root-page\nIf we look in src/actions/home/index.cr we see:\n# src/actions/home/index.cr class Home::Index \u0026lt; BrowserAction include Auth::AllowGuests get \u0026quot;/\u0026quot; do if current_user? redirect Me::Show else # html Landing::IndexPage html Lucky::WelcomePage end end end  As we can see - when we are not logged in \u0026ldquo;/\u0026rdquo; points to Lucky::WelcomePage or whatever new landing page we make and when logged in we are pointed to the Me::Show page.\nLet practice adding some html and add links to our expected resources:\n \u0026lsquo;/humans\u0026rsquo; \u0026lsquo;/pets\u0026rsquo;  So lets change this too and practice lucky html\nWe will add our list of resources - \u0026lsquo;pets\u0026rsquo; and \u0026lsquo;humans\u0026rsquo;.\nSo from looking at the existing html in src/pages/me/show_page.cr it\u0026rsquo;s like a combo of haml and JS to create executable blocks with {} so I created the method: private def resource_links and tried out two methods of linking - not bad, but I figure it will take a bit of practice with this new format. I don\u0026rsquo;t know the reason behind this, since almost all web resources will need to be reformatted - but I assume it is pre-compiled and thus fast!\nIn the end I created this:\n# src/pages/me/show_page.cr class Me::ShowPage \u0026lt; MainLayout def content h1 \u0026quot;This is your profile:\u0026quot; h2 \u0026quot;Email: #{@current_user.email}\u0026quot; resource_links helpful_tips end private def resource_links h2 \u0026quot;Available Resources\u0026quot; ul do li { a \u0026quot;Pet Owners\u0026quot;, href: \u0026quot;/humans\u0026quot; } li { link_to_pets } end end private def helpful_tips h3 \u0026quot;Next, you may want to:\u0026quot; ul do li { link_to_authentication_guides } li \u0026quot;Modify this page: src/pages/me/show_page.cr\u0026quot; li \u0026quot;Change where you go after sign in: src/actions/home/index.cr\u0026quot; end end private def link_to_pets a \u0026quot;Pets\u0026quot;, href: \u0026quot;/pets\u0026quot; end private def link_to_authentication_guides a \u0026quot;Check out the authentication guides\u0026quot;, href: \u0026quot;https://luckyframework.org/guides/authentication\u0026quot; end end  lets test it out:\nlucky dev  cool - good enough for now.\ngit add . git commit -m \u0026quot;added html links to user_home_page 'me'\u0026quot;  Seed Files  https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1 https://luckyframework.org/guides/database/database-setup#seeding-data\nNow we can create seed files and be sure our basic relations work:\nLets test our building a model and the Lucky mechanisms before we get fancy with relationships and in particular polymorphism.\n https://luckyframework.org/guides/tutorial/new-resource\nSo we will generate an animal resource - using a full stack generator:\nlucky gen.resource.browser Animal nick_name:String species:String lucky db.migrate  Now let\u0026rsquo;s create some sample data in tasks/db/seed/sample_data.cr - via the seed task - from these instructions: https://luckyframework.org/guides/database/database-setup#seeding-data as our base.\nWe will start by using what\u0026rsquo;s used to save when we create new records with incomming data. SaveAnimal.create!(nick_name: \u0026quot;racky coon\u0026quot;) so now our file will look like:\n# tasks/db/seed/sample_data.cr require \u0026quot;../../../spec/support/factories/**\u0026quot; class Db::Seed::SampleData \u0026lt; LuckyTask::Task summary \u0026quot;Add sample database records helpful for development\u0026quot; def call SavePet.create!(nick_name: \u0026quot;racky coon\u0026quot;) puts \u0026quot;Done adding sample data\u0026quot; end end  We test this with:\nlucky db.seed.sample_data  assuming this runs we should be able to view this data in our db (I often use the cli - but you might also want to use: dbgate https://dbgate.org/):\npsql \\l \\c lucky_poly_development select * from animals;  cool - lets try a factory too - these are especially help when complex and building relationships, etc:\n# spec/support/factories/animal_factory.cr class AnimalFactory \u0026lt; Avram::Factory def initialize nick_name \u0026quot;Nick Name\u0026quot; end end  now lets try using our factory in the seed file:\n# tasks/db/seed/sample_data.cr require \u0026quot;../../../spec/support/factories/**\u0026quot; class Db::Seed::SampleData \u0026lt; LuckyTask::Task summary \u0026quot;Add sample database records helpful for development\u0026quot; def call SaveAnimal.create!(nick_name: \u0026quot;racky coon\u0026quot;, species: \u0026quot;racoon\u0026quot;) # using a factory: https://luckyframework.org/guides/testing/creating-test-data#factory-create AnimalFactory.create do |factory| factory.nick_name(\u0026quot;Dyno\u0026quot;) factory.species(\u0026quot;Dog\u0026quot;) end # a shortcut way to write a block in crystal, see: https://crystal-lang.org/reference/syntax_and_semantics/blocks_and_procs.html#short-one-argument-syntax AnimalFactory.create \u0026amp;.nick_name(\u0026quot;Shiné\u0026quot;).species(\u0026quot;cat\u0026quot;) puts \u0026quot;Done adding sample data\u0026quot; end end  test again with:\nlucky db.seed.sample_data  Sweet, let\u0026rsquo;s snapshot and try more complex stuff!\ngit add . git commit -m \u0026quot;add a simple model and seed data in it\u0026quot;  Simple Lucky Forms (in pages instead of shared)  https://luckycasts.com/videos/component-basics https://luckycasts.com/videos/lucky-html-in-crystal https://luckyframework.org/guides/frontend/html-forms https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1 https://luckyframework.org/guides/frontend/html-forms#shared-components\nLets test the web page\nlucky dev  and go to the url /pets and create a Pet.\nWe discover we have problems - validation errors.\n Type mismatches (crystal is strongly typed - but the form generator ignores this - so we need to adjust by hans) Required human_id is missing (the generator isn\u0026rsquo;t aware of belongs_to)  I didn\u0026rsquo;t find lots of Documentation or examples on Components, but I did find this article - which got me started on Lucky html and forms: https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1\nAfter I figured out how to update FormComponents I found this: https://luckycasts.com/videos/component-basics - I\u0026rsquo;ll go back and view this!\nThis got me going! However, one difficulty I had was the Boolean field house_trained - I tried both Checkboxes and Radio Buttons, but I kept getting overload errors (which I finally realized were type mis-matches - you can\u0026rsquo;t send text into a Boolean field). So I settled on a select_list where I can present a tuple with a \u0026ldquo;human readable value\u0026rdquo; and a \u0026ldquo;model value\u0026rdquo;.\nSo in the end my first draft form looked like:\n# src/pages/pets/new_page.cr class Pets::NewPage \u0026lt; MainLayout needs operation : SavePet quick_def page_title, \u0026quot;New Pet\u0026quot; def content h1 \u0026quot;New Pet\u0026quot; render_pet_form(operation) end def render_pet_form(op) # comment out the form component for now # form_for Pets::Create do # # Edit fields in src/components/pets/form_fields.cr # mount Pets::FormFields, op # submit \u0026quot;Save\u0026quot;, data_disable_with: \u0026quot;Saving...\u0026quot; # end form_for Pets::Create do div do label_for op.name text_input op.name end div do label_for op.species select_input(op.species, class: \u0026quot;custom-select\u0026quot;) do select_prompt(\u0026quot;Select\u0026quot;) options_for_select(op.species, [{\u0026quot;Cat\u0026quot;, \u0026quot;cat\u0026quot;}, {\u0026quot;Dog\u0026quot;, \u0026quot;dog\u0026quot;}]) end end # eventually allow for this to be blank # eventually allow a dropdown list to be dependent on species div do label_for op.breed text_input op.breed end div do label_for op.age number_input(op.age, class: \u0026quot;custom-input\u0026quot;, min: \u0026quot;0\u0026quot;, max: \u0026quot;99\u0026quot;) end div do label_for op.house_trained select_input(op.house_trained, class: \u0026quot;custom-select\u0026quot;) do select_prompt(\u0026quot;Select\u0026quot;) options_for_select(op.house_trained, [{\u0026quot;yes\u0026quot;, true}, {\u0026quot;No\u0026quot;, false}]) end end div do label_for op.human_id select_input op.human_id do options_for_select(op.human_id, humans_for_select) end end submit \u0026quot;Save Pet\u0026quot; end end # find all the humans and create a tuple of the name and id - displayed and passed to model private def humans_for_select HumanQuery.new.map do |human| { human.name, human.id } end end end  of course this isn\u0026rsquo;t shared by the edit page, but it is still helpful to see the Lucky way to create html.\nSo after a while I figured out how to revert this code and use SharedForms (I think this is a form of FrontEnd Components).\nLets test again:\nlucky dev  Cool it works as I expect\ngit add . git commit -m \u0026quot;a working 'new' html form - not shared\u0026quot;  Shared Web Form - Component  https://luckycasts.com/videos/component-basics https://luckyframework.org/guides/frontend/html-forms https://luckyframework.org/guides/frontend/html-forms#shared-components\nWith a little more experience with Lucky HTML lets try the component forms again at src/components/pets/form_fields.cr (so lets revert: src/pages/pets/new_page.cr back to:\n# src/pages/pets/new_page.cr class Pets::NewPage \u0026lt; MainLayout needs operation : SavePet quick_def page_title, \u0026quot;New Pet\u0026quot; def content h1 \u0026quot;New Pet\u0026quot; render_pet_form(operation) end def render_pet_form(op) form_for Pets::Create do # Edit fields in src/components/pets/form_fields.cr mount Pets::FormFields, op submit \u0026quot;Save\u0026quot;, data_disable_with: \u0026quot;Saving...\u0026quot; end end end  Once I had build the first form and understood the errors - so the same form as a form_component looks like:\n# src/components/pets/form_fields.cr class Pets::FormFields \u0026lt; BaseComponent needs operation : SavePet def render mount Shared::Field, operation.name, \u0026amp;.text_input(autofocus: \u0026quot;true\u0026quot;) mount Shared::Field, operation.species do |input_html| input_html.select_input append_class: \u0026quot;select-input\u0026quot; do select_prompt(\u0026quot;Select\u0026quot;) options_for_select operation.species, [{\u0026quot;Dog\u0026quot;, \u0026quot;dog\u0026quot;}, {\u0026quot;Cat\u0026quot;, \u0026quot;cat\u0026quot;}] end end mount Shared::Field, operation.breed mount Shared::Field, operation.age, \u0026amp;.number_input(append_class: \u0026quot;custom-input\u0026quot;, min: \u0026quot;0\u0026quot;, max: \u0026quot;99\u0026quot;) mount Shared::Field, operation.house_trained do |input_html| input_html.select_input append_class: \u0026quot;select-input\u0026quot; do select_prompt(\u0026quot;Select\u0026quot;) options_for_select operation.house_trained, [{\u0026quot;yes\u0026quot;, true}, {\u0026quot;no\u0026quot;, false}] end end mount Shared::Field, operation.human_id do |input_html| input_html.select_input append_class: \u0026quot;select-input\u0026quot; do select_prompt(\u0026quot;Select\u0026quot;) options_for_select operation.human_id, options_for_humans end end end private def options_for_humans HumanQuery.new.map do |human| { human.name, human.id } end end end  NOTE:\n  the documentation has several examples with: attrs: [:required] in the form. This does client side validation (will not even submit the form if empty). I don\u0026rsquo;t recommend using this generally.\n  if you don\u0026rsquo;t put anything next to the variable a text input without anything more than the errors are assumed \u0026amp;.text_input()\n  Lets test again:\nlucky dev  cool - lets snapshot:\ngit add . git commit -m \u0026quot;working shared form component with a variety of types\u0026quot;  Redirect after Create / Update to Index  https://luckyframework.org/guides/http-and-routing/routing-and-params\nI find it annoying after creating and updating a resource to have to then manually go back to the index page from the show page.\nIn lucky the routing/controll happens in the action files.\nTo change what happens after creating and updating a Pet we simply change src/actions/pets/create.cr to:\n# src/actions/pets/create.cr class Pets::Create \u0026lt; BrowserAction post \u0026quot;/pets\u0026quot; do SavePet.create(params) do |operation, pet| if pet flash.success = \u0026quot;The record has been saved\u0026quot; html IndexPage, pets: PetQuery.new # new action (copied from index) # redirect Show.with(pet.id) # old no longer wanted else flash.failure = \u0026quot;It looks like the form is not valid\u0026quot; html NewPage, operation: operation end end end end  And update src/actions/pets/update.cr is similarly easy:\n# src/actions/pets/update.cr class Pets::Update \u0026lt; BrowserAction put \u0026quot;/pets/:pet_id\u0026quot; do pet = PetQuery.find(pet_id) SavePet.update(pet, params) do |operation, updated_pet| if operation.saved? flash.success = \u0026quot;The record has been updated\u0026quot; html IndexPage, pets: PetQuery.new # redirect Show.with(updated_pet.id) else flash.failure = \u0026quot;It looks like the form is not valid\u0026quot; html EditPage, operation: operation, pet: updated_pet end end end end  I appreciate how explicit these are!\nOptional Fields Often a breed is unknown - we could just add an unknown value, but that\u0026rsquo;s silly, lets figure out how to work with unknown / unneeded data and allow nil in our breed field.\nSince Crystal is strongly typed - one needs to explicitly mark that a field can be nil with ? - you can see the docs here: https://luckyframework.org/guides/database/models#adding-a-column\nSo to make breed optional we will change the pets model to:\nclass Pet \u0026lt; BaseModel table do column name : String column species : String column breed : String? # adding `?` makes the field optional (nil-able) column age : Int32 column house_trained : Bool # relations belongs_to owner : Owner end end  Now when I run lucky - I\u0026rsquo;ll expect to find some errors - (probably in a view saying I need null protecction). However instead I get:\nUnhandled exception: Pet has defined 'breed' as nilable (String?), but the database column does not allow nils. web | web | Either mark the column as required in Pet: web | web | # Remove the '?' web | column breed : String web | web | Or, make the column optional in a migration: web | web | ▸ Generate a migration: web | web | lucky gen.migration MakePetBreedOptional web | web | ▸ Make the column optional: web | web | make_optional :pets, :breed  Oddly, I don\u0026rsquo;t see anything in the migration Docs https://www.luckyframework.org/guides/database/migrations about marking a file optional (nor how to make it optional in the original migration). Since we w\nBut lets try:\nlucky gen.migration MakePetBreedOptional  Hmm, the error says what to put in the migration, but not the rollback, lets search the luckyframework repos and see what we find: https://github.com/luckyframework/avram/blob/f676a9a7d2e70d74891ad686039bf393983d0760/src/avram/migrator/statement_helpers.cr\nHere we see what the options are so lets edit the migration to look like:\nclass MakePetBreedOptional::V20210507125901 \u0026lt; Avram::Migrator::Migration::V1 def migrate make_optional :pets, :breed # alter table_for(Pet) do # make_optional :breed # end end def rollback # query for breed fields that are nil and fill them BEFORE making the field REQUIRED! PetQuery.new.breed.is_nil.each do |pet| SavePet.update!(pet, breed: \u0026quot;unknown\u0026quot;) end # this would work too, but might as well let the db do the heavy lifting # PetQuery.new.each do |pet| # SavePet.update!(pet, breed: \u0026quot;unknown\u0026quot;) if pet.breed.nil? # end # simple way of making ONE field required make_required :pets, :breed # this would be better when changing lots of fields # alter table_for(Pet) do # make_required :breed # end end end  OK - lets try again:\nlucky dev  Cool it works - lets make a new record - with an null value.\nLets look at the record within postgresql:\npsql -d pets_development select * from pets; id | created_at | updated_at | name | breed | species | age | house_trained | owner_id ----+------------------------+------------------------+-------+-------+---------+-----+---------------+---------- 1 | 2021-05-07 15:23:28+02 | 2021-05-07 15:23:28+02 | Nyima | | dog | 11 | t | 1 \\q  Now let\u0026rsquo;s be sure our rollback works. Notice - before we make it required we find records with nil values and fill them unknown. An example of adding data logic within a migration can be found at: https://luckyframework.org/guides/database/migrations#using-fill_existing_with-and-default-values\nlucky db.rollback  OK - good the migration didn\u0026rsquo;t crash - lets check the DB.\npsql -d pets_development select * from pets; id | created_at | updated_at | name | breed | species | age | house_trained | owner_id ----+------------------------+------------------------+-------+---------+---------+-----+---------------+---------- 1 | 2021-05-07 15:23:28+02 | 2021-05-07 16:28:55+02 | Nyima | unknown | dog | 11 | t | 1 \\q  Nice it worked.\nDisplay Validation Errors If we leave some fields out - Lucky gives us validation errors - all fields appear to be required without explicitly allowing nils - but we don\u0026rsquo;t see them with our default form. Lets fix that.\nAdd Validations Let\u0026rsquo;s add a few custom validations:\n minimal pet_name length numeric range  Tests for our Validations Now that we have some logic lets add some tests\n  BrowserTesting  Pretty URLs Looks interesting and easy\n  https://github.com/luckyframework/avram_slugify  Lucky PubSub   https://github.com/luckyframework/pulsar  Bulma Integration Integrate CSS Frameworks\nView Components  https://luckycasts.com/videos/component-basics https://luckyframework.org/guides/frontend/rendering-html#creating-and-using-components\nTailwind Integration  https://luckycasts.com/videos/tailwind-css\nLet\u0026rsquo;s make the pages a bit nicer\nHTML to Lucky formatter  https://luckyframework.org/html\nIf we want to create some more complex pages with tailwind - lets use the converted to help.\nDynamic Front-end - Selections Dependencies (AlpineJS / StimulusJS) ?  https://luckycasts.com/videos/stimulus-js\nMake the breed list, dependent on the species list Lets change the Front-End language on the fly Lets make the new TailwindUI menu bar have the dynamic features.\nHas many through  https://www.luckyframework.org/guides/database/models#has-many-through-many-to-many\nPolymorphic Relationships  https://www.luckyframework.org/guides/database/models#polymorphic-associations\nOne reason I favor Lucky is the database Avram supports polymorphic relationships - which seems to come up a lot in my code - so lets see how to get it working and support multiple types:\nPets -\u0026gt; Cats, Dogs, Horses, etc\nOptional Relations Internationalization (i18n)  https://luckycasts.com/videos/translations https://luckyframework.org/guides/frontend/internationalization\nDynamic i18n in Front-End? Components (with scopes) Lucky Code Scopes Resource Authorization  https://github.com/stephendolan/pundit\nWeb Sockets For now something like LiveView and Hotwire are not yet integrated into lucky - its build your own.\n https://github.com/cable-cr/cable https://github.com/luckyframework/lucky/issues/554\nDeploying Lucky \u0026amp; ENV  https://fullstackstanley.com/read/categories/lucky-framework/\nSecurity (Alternatives)  https://github.com/grottopress/shield\nMessage / Events - Queues   Redis  Sidekiq  InMemory-JobQueue  Language Inflections Lucky 0.27.0 has problems using config/inflector.cr settings (fixed in Lucky 0.28.0). However, both versions have problems with loading these language configs into the pre-compiled lucky tasks.\nTHere\u0026rsquo;s what happens (do a git snapshot):\nlucky gen.resource.browser Human name:String  OOPS - that generated the plural of Human as Humen instead of Humans!\nlets clear all our incorrect files and fix this (if you did a git snapshot previously):\ngit clean -fd  Now let\u0026rsquo;s create a new config file for inflections config/inflector.cr and enter:\n# config/inflector.cr require \u0026quot;wordsmith\u0026quot; # `staff` as in employees - not walking sticks: Wordsmith::Inflector.inflections.uncountable(\u0026quot;staff\u0026quot;) Wordsmith::Inflector.inflections.irregular(\u0026quot;human\u0026quot;, \u0026quot;humans\u0026quot;) Wordsmith::Inflector.inflections.irregular(\u0026quot;person\u0026quot;, \u0026quot;persons\u0026quot;)  when we test our new lucky config with lucky exec:\nlucky exec # then when vim or nano opens you can enter something like: require \u0026quot;../../src/app.cr\u0026quot; include Lucky::TextHelpers pp pluralize(2, \u0026quot;staff\u0026quot;) pp pluralize(2, \u0026quot;person\u0026quot;)  you will get the expected:\n\u0026quot;2 staff\u0026quot; \u0026quot;2 persons\u0026quot;  Given the tasks are pre-compiled do the following:\n# clean up repo of gen.tasks that were problematic # git clean -fd # remove previously compiled shards rm -rf lib \u0026amp;\u0026amp; rm -rf bin # after trashing all the shard - safest to be sure they are intact (or even updated) SKIP_LUCKY_TASK_PRECOMPILATION=true shards install # or shards update # re-run the setup SKIP_LUCKY_TASK_PRECOMPILATION=true ./script/setup  Now with the first task it will compile the task (a bit slow), but it uses your config file!\nlucky gen.resource.browser Staff name:String compiling ...  Sweet - this works for human - but not people - which is already defined in wordsmith. The fix for this is to copy the entire wordsmith inflector file, adjust it to your needs and put it in config/inflector.cr\n https://github.com/luckyframework/wordsmith/blob/master/src/wordsmith/inflections.cr\n# config/inflector.cr require \u0026quot;wordsmith\u0026quot; module Wordsmith # its important to clear all existing settings Inflector.inflections.clear # make adjustments as needed to the original file Inflector.inflections.plural(/$/, \u0026quot;s\u0026quot;) Inflector.inflections.plural(/s$/i, \u0026quot;s\u0026quot;) # etc, etc, etc Inflector.inflections.irregular(\u0026quot;human\u0026quot;, \u0026quot;humans\u0026quot;) Inflector.inflections.irregular(\u0026quot;person\u0026quot;, \u0026quot;persons\u0026quot;) # added staff to the list Inflector.inflections.uncountable(%w(equipment information rice money species series fish sheep jeans police staff)) end  Now if we try again we will have the same problem! We need to remove our binaries and recompile lucky with our need config! (I lost a lot of time on this detail)! Do this with:\nrm -rf lib \u0026amp;\u0026amp; rm -rf bin SKIP_LUCKY_TASK_PRECOMPILATION=true shards install SKIP_LUCKY_TASK_PRECOMPILATION=true ./script/setup  Now we can try to create a new Resource again. In Lucky 0.28.0 this config has gotten better, but the pre-compiled tasks still create confusion.\n","date":1619910113,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628722913,"objectID":"921e1c83969ad963f4cc14fd3ce5fd3f","permalink":"https://btihen.me/post_tech_notes/lucky_0_27_project_basics/","publishdate":"2021-05-02T01:01:53+02:00","relpermalink":"/post_tech_notes/lucky_0_27_project_basics/","section":"post_tech_notes","summary":"A simple but reasonably comprehensive overview of Lucky features - with the context of a 'mini-project'","tags":["Relationships","Basics","Forms","Components","Routing","Lucky","Web Framework","Crystal Language"],"title":"Lucky Framework with Crystal Language","type":"post_tech_notes"},{"authors":["Bill Tihen"],"categories":["Code"],"content":"Auth Auth with POW\n  https://www.youtube.com/watch?v=hnD0Z0LGMIk  https://www.skcript.com/svr/using-bamboo-to-send-emails-in-phoenix/  https://www.kabisa.nl/tech/real-world-phoenix-lets-auth-some-users/  https://experimentingwithcode.com/phoenix-authentication-with-pow-part-1/  https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/  https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl  https://www.kabisa.nl/tech/real-world-phoenix-sign-up-flow-spa-style-with-liveview/  https://medium.com/@andreichernykh/phoenix-simple-authentication-authorization-in-step-by-step-tutorial-form-dc93ea350153  POW and LiveViews\n  https://dev.to/oliverandrich/how-to-connect-pow-and-live-view-in-your-phoenix-project-1ga1  Auth with auth.gen\n  https://elixircasts.io/using-phx_gen_auth-for-phoenix-authentication  https://experimentingwithcode.com/phoenix-authentication-with-phx-gen-auth-part-1/  https://experimentingwithcode.com/phoenix-authentication-with-phx-gen-auth-part-2/  https://fullstackphoenix.com/tutorials/combining-authentication-solutions-with-guardian-and-phx-gen-auth  Auth with PubSub\n  https://curiosum.dev/blog/elixir-phoenix-liveview-messenger-part-3  Auth with Email\n  https://hex.pm/packages/bamboo  https://hexdocs.pm/bamboo_smtp/readme.html  https://elixircasts.io/sending-email-with-bamboo-part-1  https://elixircasts.io/sending-email-with-bamboo-part-2  https://devato.com/post/use-bamboo-to-send-email-in-phoenix  https://www.kabisa.nl/tech/real-world-phoenix-lets-send-some-emails/  https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl  General Auth Principles https://nithinbekal.com/posts/phoenix-authentication/\nMail in Test Env   https://github.com/mailhog/MailHog  https://mailcatcher.me/  Intro Pow has the advantage that it updates security patches \u0026ndash; since its a well maintained library.\nThis repo can be found at: https://github.com/btihen/phoenix_1_5_pow_auth_config\nGet the latest version from: https://hex.pm/packages/pow\n{:pow, \u0026quot;~\u0026gt; 1.0\u0026quot;}  Install the dependency:\nmix deps.get  Install POW:\nmix pow.install  Lets verify all is good with the install:\nmix deps.compile mix help | grep pow  Now hopefully you see some new pow commands\nConfigure Pow There are three files you\u0026rsquo;ll need to configure first before you can use Pow.\nFirst, append this to config/config.exs:\nconfig :fare, :pow, user: Fare.Users.User, repo: Fare.Repo  Next, add Pow.Plug.Session plug to lib/fare_web/endpoint.ex after plug Plug.Session:\ndefmodule FareWeb.Endpoint do use Phoenix.Endpoint, otp_app: :fare # add this line HERE! # ... plug Plug.Session, @session_options plug Pow.Plug.Session, otp_app: :fare # add this line HERE! plug FareWeb.Router end  Last, update lib/fare_web/router.ex with the Pow routes - this first time we need to do a little extra config:\npipeline :api do plug :accepts, [\u0026quot;json\u0026quot;] end scope \u0026quot;/\u0026quot;, MyAppWeb do pipe_through [:browser, :protected] # Add your protected routes here end scope \u0026quot;/\u0026quot;, MyAppWeb do pipe_through :browser live \u0026quot;/\u0026quot;, PageLive, :index end  Should now look like:\npipeline :api do plug :accepts, [\u0026quot;json\u0026quot;] end pipeline :protected do plug Pow.Plug.RequiredAuthentication, error_handler: Pow.Phoenix.PlugErrorHandler end scope \u0026quot;/\u0026quot; do pipe_through :browser pow_routes() end scope \u0026quot;/\u0026quot;, MyAppWeb do pipe_through [:browser, :protected] # Add your protected routes here resources \u0026quot;/tasks\u0026quot;, TaskController end scope \u0026quot;/\u0026quot;, MyAppWeb do pipe_through :browser live \u0026quot;/\u0026quot;, PageLive, :index end  Now lets check the routes - that all is well configured:\nmix phx.routes | grep pow  Hopefully you see some new pow routes.\nNow we can migrate to create our users table:\nmix ecto.migrate  Now if we start phoenix:\nmix phx.server  and open phoenix: localhost:4000\nPOW user Links  https://experimentingwithcode.com/phoenix-authentication-with-pow-part-1/\nNotice there is no menu option to login - lets build a simple signup/signin/logout link.\nIn root.html.eex find \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;https://hexdocs.pm/phoenix/overview.html\u0026quot;\u0026gt;Get Started\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; and we will replace it with:\n\u0026lt;%= if Pow.Plug.current_user(@conn) do %\u0026gt; \u0026lt;li\u0026gt; \u0026lt;%= link \u0026quot;#{@current_user.email}\u0026quot;, to: Routes.pow_registration_path(@conn, :edit) %\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;%= link \u0026quot;Sign-out\u0026quot;, to: Routes.pow_session_path(@conn, :delete), method: :delete %\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;% else %\u0026gt; \u0026lt;li\u0026gt;\u0026lt;%= link \u0026quot;Sign-in\u0026quot;, to: Routes.pow_session_path(@conn, :new) %\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;%= link \u0026quot;Register\u0026quot;, to: Routes.pow_registration_path(@conn, :new) %\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;% end %\u0026gt;  Now reload and try it out:\n you should be able to register sign-out sign in  Customizable Login pages Generate the pages to customize with:\nmix pow.phoenix.gen.templates  now be sure to change the config in config/confix.ex from:\nconfig :my_app, :pow, user: MyApp.Users.User, repo: Fare.Repo  to:\nconfig :my_app, :pow, user: MyApp.Users.User, repo: MyApp.Repo, web_module: MyAppWeb  Without updating the config the newly generated pages won\u0026rsquo;t be used!\nThe new templates to modify are found in:\n lib/fare_web/templates/pow/registration \u0026amp; lib/fare_web/templates/pow/session  Now make a small change to the pages to ensure all works.\nCreate a restricted user page  https://www.youtube.com/watch?v=hnD0Z0LGMIk https://experimentingwithcode.com/phoenix-authentication-with-pow-part-1/\nCreate a normal html page first:\nmix phx.gen.html Tasks Task tasks description:string completed:boolean  BE SURE TO PUT the new route in the protected area of the routes file:\n# lib/fare_web/router.ex scope \u0026quot;/\u0026quot;, MyAppWeb do pipe_through [:browser, :protected] # Add your protected routes here resources \u0026quot;/tasks\u0026quot;, TaskController end  Now of course run the migration:\nmix ecto.migrate  now /tasks should only be availble to signed in users. Be sure you are logged out and cannot get to the /tasks route (and infact are redirected to sign-in). And once logged in the page works as expected.\nExtensions Persistent Login Sessions (Remember me)  https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/\nCurrently every time the user closes the browser they are logged out - the login cookie doesn\u0026rsquo;t persist - most users would like the option to change this - with a remember me option.\nin config/config.exs change the :pow config to look like:\nconfig :my_app, :pow, user: MyApp.Users.User, repo: MyApp.Repo, web_module: MyAppWeb, # add the following two lines extensions: [PowPersistentSession], controller_callbacks: Pow.Extension.Phoenix.ControllerCallbacks  in /lib/my_app_web/endpoint.ex we need to add the persistent cookie setting immediately after the Pow.Plug.Session plug and before the routing MyAppWeb.Router plug \u0026ndash; now the end of the endpoint file should look like:\n# enable Pow session based authentication plug Pow.Plug.Session, otp_app: :warehouse # enable Pow persistent sessions plug PowPersistentSession.Plug.Cookie # routing plug plug MyAppWeb.Router end  just above the login button on the sign-in page add the following check-box:\n# lib/fare_web/templates/pow/session/new.html.eex \u0026lt;%= label f, :persistent_session, \u0026quot;Remember me\u0026quot; %\u0026gt; \u0026lt;%= checkbox f, :persistent_session %\u0026gt; \u0026lt;div\u0026gt; \u0026lt;%= submit \u0026quot;Sign in\u0026quot; %\u0026gt; \u0026lt;/div\u0026gt;  restart Phoenix with: mix phx.server and now you should be able to close your browser and re-open the link and stay logged in if the remember-me is clicked.\nAfter Logout - go to Landing Page (After Hook Routing)  https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/\nOne little annoying thing is that when we logout we go to the sign-in page instead of the landing page. We can fix that by adding a call_back_route - you can find all the callback routes at: https://github.com/danschultzer/pow/blob/master/lib/pow/phoenix/routes.ex - we will use: the after_sign_out_path callback.\nTo do this we will make a new pow.routes file:\ntouch lib/warehouse_web/pow/routes.ex  Add the following contents:\ncat \u0026lt;\u0026lt; EOF\u0026gt; lib/my_app_web/pow/routes.ex defmodule MyAppWeb.Pow.Routes do use Pow.Phoenix.Routes alias MyAppWeb.Router.Helpers, as: Routes def after_sign_out_path(conn), do: Routes.page_path(conn, :index) end EOF  Now finally update config/confix.exs by adding routes_backend: MyAppWeb.Pow.Routes to the :pow config so now it would look like:\nconfig :my_app, :pow, user: MyApp.Users.User, repo: MyApp.Repo, web_module: MyAppWeb, extensions: [PowPersistentSession], controller_callbacks: Pow.Extension.Phoenix.ControllerCallbacks, routes_backend: MyAppWeb.Pow.Routes # add this line  Assuming all works we will snapshot now!\ngit add . git commit -m \u0026quot;on logout go to landing page\u0026quot;  Password Reset and Email Confirmation  https://github.com/pow-auth/pow_assent https://www.youtube.com/watch?v=hnD0Z0LGMIk https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/\nThe following are the possible extensions:\n PowResetPassword PowEmailConfirmation PowPersistentSession PowInvitation  Let\u0026rsquo;s start with password reset and email confirmation.\nFirst we need to do a migration:\nmix pow.extension.ecto.gen.migrations --extension PowResetPassword --extension PowEmailConfirmation  now update the phoenix config config/config.ex again from:\nconfig :my_app, :pow, user: MyApp.Users.User, repo: MyApp.Repo, web_module: MyAppWeb  to:\nconfig :my_app, :pow, user: MyApp.Users.User, repo: MyApp.Repo, web_module: MyAppWeb, extensions: [PowPersistentSession, PowResetPassword, PowEmailConfirmation], controller_callbacks: Pow.Extension.Phoenix.ControllerCallbacks  now update the LIB_PATH/users/user.ex file from:\ndefmodule Fare.Users.User do use Ecto.Schema use Pow.Ecto.Schema schema \u0026quot;users\u0026quot; do pow_user_fields() timestamps() end end  to:\ndefmodule MyApp.Users.User do use Ecto.Schema use Pow.Ecto.Schema use Pow.Extension.Ecto.Schema, extensions: [PowResetPassword, PowEmailConfirmation] schema \u0026quot;users\u0026quot; do pow_user_fields() timestamps() end def changeset(user_or_changeset, attrs) do user_or_changeset |\u0026gt; pow_changeset(attrs) |\u0026gt; pow_extension_changeset(attrs) end end  And of course the routes WEB_PATH/router.ex too - at the top of the file add: so it looks like:\ndefmodule MyAppWeb.Router do use MyAppWeb, :router use Pow.Phoenix.Router use Pow.Extension.Phoenix.Router, extensions: [PowResetPassword, PowEmailConfirmation]  And in the pow routes config change from:\nscope \u0026quot;/\u0026quot; do pipe_through :browser pow_routes() end  to:\nscope \u0026quot;/\u0026quot; do pipe_through :browser pow_routes() pow_extension_routes() end  Now finally, we need can update any views needed by POW\u0026rsquo;s new extensions with:\nmix pow.extension.phoenix.gen.templates --extension PowResetPassword --extension PowEmailConfirmation  Now we can update the sign-in page with a reset password button. We will add the following, to the end of lib/fare_web/templates/pow/session/new.html.eex:\n| \u0026lt;span\u0026gt; \u0026lt;%= link \u0026quot;Reset Password\u0026quot;, to: Routes.pow_reset_password_reset_password_path(@conn, :new) %\u0026gt; \u0026lt;/span\u0026gt;  Now lets be sure we can link to reset password view.\nFirst we will do our migration:\nmix ecto.migrate  now to to sign-in and see if the reset password link works. Cool it does, but it we try to use it - it complains it needs email back-end setup.\nEmail backend  https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl\nFirst we will create a mailer function in: lib/my_app_web/pow/pow_mailer.ex\nmkdir lib/my_app_web/pow/ touch lib/my_app_web/pow/pow_mailer.ex cat \u0026lt;\u0026lt;EOF \u0026gt; lib/my_app_web/pow/pow_mailer.ex defmodule FareWeb.Pow.Mailer do use Pow.Phoenix.Mailer require Logger @impl true def cast(%{user: user, subject: subject, text: text, html: html}) do # Forward Struct to logger - disable/remove when Bamboo configured %{to: user.email, subject: subject, text: text, html: html} end @impl true def process(email) do # log email sent Logger.debug(\u0026quot;E-mail sent: #{inspect email}\u0026quot;) end end EOF  now that we have an email template we need to tell pow about the mailer with the config: mailer_backend: MyAppWeb.Pow.Mailer in config/config.exs so change to:\n# config for pow - user authentication config :my_app, :pow, user: MyApp.Users.User, repo: MyApp.Repo, web_module: MyAppWeb, mailer_backend: MyAppWeb.Pow.Mailer, # add this extensions: [PowPersistentSession, PowResetPassword, PowEmailConfirmation], controller_callbacks: Pow.Extension.Phoenix.ControllerCallbacks  Now generate the POW mail templates - with:\nmix pow.extension.phoenix.mailer.gen.templates --extension PowResetPassword --extension PowEmailConfirmation  Phoenix also needs to know about the mailer templates we will generate so add to lib/my_app_web.ex:\ndef mailer_view do quote do use Phoenix.View, root: \u0026quot;lib/my_app_web/templates\u0026quot;, namespace: MyAppWeb use Phoenix.HTML end end  Now the final config change in config/config.ex to access our new templates:\n# config for pow - user authentication config :fare, :pow, user: Fare.Users.User, repo: Fare.Repo, web_module: MyAppWeb, web_mailer_module: MyAppWeb, # add this to access the templates mailer_backend: MyAppWeb.Pow.Mailer, extensions: [PowPersistentSession, PowResetPassword, PowEmailConfirmation], controller_callbacks: Pow.Extension.Phoenix.ControllerCallbacks  Now if we resart phoenix and test out reset link - we should see in the logs \u0026lsquo;a pretend sent email\u0026rsquo; - something like:\n[debug] E-mail sent: %{html: \u0026quot;\u0026lt;h3\u0026gt;Hi,\u0026lt;/h3\u0026gt;\\n\u0026lt;p\u0026gt;Please use the following link to reset your password:\u0026lt;/p\u0026gt;\\n\u0026lt;p\u0026gt;\u0026lt;a href=\\\u0026quot;http://localhost:4000/reset-password/SFMyNTY.MTJkNDliZWItZTg2My00ZDM3LTg2YzgtYzE5MDdjMDk5ODgz.kFRCfvdOSeEnupbbujdAKoaCuMXXk91qzZCUMrB43mw\\\u0026quot;\u0026gt;http://localhost:4000/reset-password/SFMyNTY.MTJkNDliZWItZTg2My00ZDM3LTg2YzgtYzE5MDdjMDk5ODgz.kFRCfvdOSeEnupbbujdAKoaCuMXXk91qzZCUMrB43mw\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt;\\n\u0026lt;p\u0026gt;You can disregard this email if you didn\u0026amp;#39;t request a password reset.\u0026lt;/p\u0026gt;\u0026quot;, subject: \u0026quot;Reset password link\u0026quot;, text: \u0026quot;Hi,\\n\\nPlease use the following link to reset your password:\\n\\nhttp://localhost:4000/reset-password/SFMyNTY.MTJkNDliZWItZTg2My00ZDM3LTg2YzgtYzE5MDdjMDk5ODgz.kFRCfvdOSeEnupbbujdAKoaCuMXXk91qzZCUMrB43mw\\n\\nYou can disregard this email if you didn't request a password reset.\\n\u0026quot;, to: \u0026quot;btihen@gmail.com\u0026quot;}  copy the link out of the email in the log:\nhttp://localhost:4000/reset-password/SFMyNTY.MTJkNDliZWItZTg2My00ZDM3LTg2YzgtYzE5MDdjMDk5ODgz.kFRCfvdOSeEnupbbujdAKoaCuMXXk91qzZCUMrB43mw  into the browser - type a new password and try to login.\nAssuming all works we will snapshot now!\ngit add . git commit -m \u0026quot;pow configured to send emails - no sender yet\u0026quot;  After Logout - go to Landing Page (After Hook Routing)  https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/\nOne little annoying thing is that when we logout we go to the sign-in page instead of the landing page. We can fix that by adding a call_back_route - you can find all the callback routes at: https://github.com/danschultzer/pow/blob/master/lib/pow/phoenix/routes.ex - we will use: the after_sign_out_path callback.\nTo do this we will make a new pow.routes file:\ntouch lib/warehouse_web/pow/routes.ex  Add the following contents:\ncat \u0026lt;\u0026lt; EOF\u0026gt; lib/my_app_web/pow/routes.ex defmodule MyAppWeb.Pow.Routes do use Pow.Phoenix.Routes alias MyAppWeb.Router.Helpers, as: Routes def after_sign_out_path(conn), do: Routes.page_path(conn, :index) end EOF  Now finally update config/confix.exs by adding routes_backend: MyAppWeb.Pow.Routes to the :pow config so now it would look like:\nconfig :my_app, :pow, user: MyApp.Users.User, repo: MyApp.Repo, web_module: MyAppWeb, web_mailer_module: MyAppWeb, mailer_backend: MyAppWeb.Pow.Mailer, routes_backend: MyAppWeb.Pow.Routes, # Add this line controller_callbacks: Pow.Extension.Phoenix.ControllerCallbacks, extensions: [PowPersistentSession, PowResetPassword, PowEmailConfirmation]  Assuming all works we will snapshot now!\ngit add . git commit -m \u0026quot;on logout go to landing page\u0026quot;  Configure Email BAMBOO with POW   https://hexdocs.pm/bamboo/readme.html  https://www.kabisa.nl/tech/real-world-phoenix-lets-send-some-emails/  https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl  Use Bamboo to do the mailing find the new versions at:\n  https://hex.pm/packages/bamboo Add to mix.exs:  {:bamboo, \u0026quot;~\u0026gt; 2.1\u0026quot;}  get the new dependency:\nmix deps.get  In the Test Config we need to configure bamboo with:\n# config/test.exs config :my_app, MyApp.Mailer, adapter: Bamboo.TestAdapter  In the Dev Config lets setup the in-memory email config\n# config/dev.exs config :fare, FareWeb.Pow.Mailer, adapter: Bamboo.LocalAdapter  When using Bamboo.LocalAdapter in dev mode we can view the email (without digging through the log file) using Bamboo.EmailPreviewPlug - we set this up with:\nif Mix.env == :dev do forward \u0026quot;/sent_emails\u0026quot;, Bamboo.EmailPreviewPlug end  Now let\u0026rsquo;s setup our mailer to use Bamboo - we will edit:\n# lib/my_app_web/pow/pow_mailer.ex defmodule MyAppWeb.Pow.Mailer do use Pow.Phoenix.Mailer # ADDED to use Bamboo use Bamboo.Mailer, otp_app: :fare # Bamboo needs to know the supervisor import Bamboo.Email # provides access to the Bamboo's methods require Logger @impl true def cast(%{user: user, subject: subject, text: text, html: html}) do # ADDED when Bamboo is configured new_email( to: user.email, from: \u0026quot;reading-list@example.com\u0026quot;, subject: subject, html_body: html, text_body: text ) end @impl true def process(email) do # ADDED when Bamboo is configured deliver_now(email) # check email functionality and contents Logger.debug(\u0026quot;E-mail sent: #{inspect email}\u0026quot;) end end  Let\u0026rsquo;s register a new account (or reset a password). Now we can see the sent email at: http://localhost/sent_emails (in dev mode)\nBamboo Adapters - SMTP Config (Production Ideas) Available adapters are listed at: https://hexdocs.pm/bamboo/readme.html#available-adapters\nGiven the number of adapters - here we will configure just SMTP (and learn to trap it while testing)\n https://www.kabisa.nl/tech/real-world-phoenix-lets-send-some-emails/ https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl\nUse Bamboo to do the mailing find the new versions at:\n  https://hex.pm/packages/bamboo  https://hex.pm/packages/bamboo_smtp Add to mix.exs:  {:bamboo, \u0026quot;~\u0026gt; 2.1\u0026quot;}, {:bamboo_smtp, \u0026quot;~\u0026gt; 2.1\u0026quot;}  Now install and setup up: https://github.com/mailhog/ (on a MacOS) simply install with:\nbrew install mailhog  and run mailhog with:\nmailhog  or if you want mailhog running all the time in the background you can type:\nbrew services start mailhog  Or you can use: or https://mailcatcher.me/\nThese serivices - listen on localhost:1025 and you can view the email at: http://localhost:8025\nnow configure the mail service (in config/dev.exs) to use Mailhog or Mailcather with Phoenix by adding:\n# config/dev.exs config :my_app, MyAppWeb.Pow.Mailer, adapter: Bamboo.SMTPAdapter, server: \u0026quot;localhost\u0026quot;, port: 1025  In production it might look like:\n# config/config.exs config :my_app, MyApp.Mailer, adapter: Bamboo.SMTPAdapter, server: \u0026quot;smtp.domain\u0026quot;, hostname: \u0026quot;your.domain\u0026quot;, port: 1025, username: \u0026quot;your.name@your.domain\u0026quot;, # or {:system, \u0026quot;SMTP_USERNAME\u0026quot;} password: \u0026quot;pa55word\u0026quot;, # or {:system, \u0026quot;SMTP_PASSWORD\u0026quot;} tls: :if_available, # can be `:always` or `:never` allowed_tls_versions: [:\u0026quot;tlsv1\u0026quot;, :\u0026quot;tlsv1.1\u0026quot;, :\u0026quot;tlsv1.2\u0026quot;], # or {:system, \u0026quot;ALLOWED_TLS_VERSIONS\u0026quot;} w/ comma seprated values (e.g. \u0026quot;tlsv1.1,tlsv1.2\u0026quot;) ssl: false, # can be `true` retries: 1, no_mx_lookups: false, # can be `true` auth: :if_available # can be `:always`. If your smtp relay requires authentication set it to `:always`.  Now you will need to start your mail-trap (in a separate cli terminal):\nmailhog # or `mailcather`  Now when you register a new account or change a password you can see the email at:\nhttp://localhost:8025  Customizing - POW Flash messages  https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/\nCreate a new module for our messages.\ntouch lib/my_app_web/pow/messages.ex cat \u0026lt;\u0026lt;EOF\u0026gt;\u0026gt;lib/my_app_web/pow/messages.ex defmodule MyAppWeb.Pow.Messages do use Pow.Phoenix.Messages use Pow.Extension.Phoenix.Messages, # add extensions in use extensions: [PowResetPassword, PowEmailConfirmation] import MyAppWeb.Gettext # PowMessages - functions defined: # https://hexdocs.pm/pow/Pow.Phoenix.Messages.html#summary # https://github.com/danschultzer/pow/blob/master/lib/pow/phoenix/messages.ex def signed_in(_conn), do: gettext(\u0026quot;Welcome back.\u0026quot;) def signed_out(_conn), do: gettext(\u0026quot;Signed out successfullly.\u0026quot;) def user_not_authenticated(_conn), do: gettext(\u0026quot;You need to sign in to see this page.\u0026quot;) # PowResetPassword - functions defined: # https://github.com/danschultzer/pow/blob/master/lib/extensions/reset_password/phoenix/messages.ex def invalid_token(_conn), do: \u0026quot;The reset token has expired.\u0026quot; def password_has_been_reset(_conn), do: \u0026quot;The password has been updated.\u0026quot; def email_has_been_sent(_conn), do: \u0026quot;An email with reset instructions has been sent to you.\u0026quot; # PowEmailConfirmation - functions defined: # https://github.com/danschultzer/pow/blob/master/lib/extensions/email_confirmation/phoenix/messages.ex def email_has_been_confirmed(_conn), do: \u0026quot;The email address has been confirmed.\u0026quot; def email_confirmation_failed(_conn), do: \u0026quot;The email address couldn't be confirmed.\u0026quot; def email_confirmation_required(_conn), do: \u0026quot;You need to confirm your e-mail with the link e-mailed to you.\u0026quot; end EOF  To be able to use this module we need to tell our config about it - so we update config/config.exs with messages_backend: FareWeb.Pow.Messages - so now it looks like:\nconfig :fare, :pow, user: Fare.Users.User, repo: Fare.Repo, web_module: FareWeb, web_mailer_module: FareWeb, mailer_backend: Fare.Pow.Mailer, routes_backend: FareWeb.Pow.Routes, messages_backend: FareWeb.Pow.Messages, # Add this line controller_callbacks: Pow.Extension.Phoenix.ControllerCallbacks, extensions: [PowPersistentSession, PowResetPassword, PowEmailConfirmation]  Now you should see your custom messages!\nlet\u0026rsquo;s snapshot this:\ngit add . git commit -m \u0026quot;allow POW to send custom / i18n messages\u0026quot;  Configure to allow 3rd Parties - Google, Apple, Github, etc.  https://github.com/pow-auth/pow_assent https://www.youtube.com/watch?v=hnD0Z0LGMIk\nFirst add to the mix file:\n# third party auth {:pow_assent, \u0026quot;~\u0026gt; 0.4.10\u0026quot;}, # recommended for SSL validation with :httpc adapter {:certifi, \u0026quot;~\u0026gt; 2.4\u0026quot;}, {:ssl_verify_fun, \u0026quot;~\u0026gt; 1.1\u0026quot;},  and of course: mix deps.get\nand install with: mix pow_assent.install\nand now configure lib/fare/users/user.ex after use Pow.Ecto.Schema add use PowAssent.Ecto.Schema so now the top of this file should look like:\n# lib/fare/users/user.ex defmodule Fare.Users.User do use Ecto.Schema use Pow.Ecto.Schema use PowAssent.Ecto.Schema # added in this step use Pow.Extension.Ecto.Schema, extensions: [PowResetPassword, PowEmailConfirmation]  At the top of the lib/fare_web/router.ex file after use PowAssent.Phoenix.Router add use PowAssent.Phoenix.Router - now the top of this file should look like:\n# lib/fare_web/router.ex defmodule MyAppWeb.Router do use MyAppWeb, :router use Pow.Phoenix.Router use PowAssent.Phoenix.Router use Pow.Extension.Phoenix.Router, extensions: [PowResetPassword, PowEmailConfirmation]  Now after the last pipelines add a new pipeline and its scope - its a copy of the :browser pipeline - without :protect_from_forgery since that conflicts with OAuth \u0026amp; after pow_routes() add pow_assent_routes() so now this section of the routes looks like (when Phoenix is configured for LiveView):\npipeline :skip_csrf_protection do plug :accepts, [\u0026quot;html\u0026quot;] plug :fetch_session plug :fetch_live_flash plug :put_root_layout, {FareWeb.LayoutView, :root} # plug :protect_from_forgery # conflicts with oauth plug :put_secure_browser_headers end scope \u0026quot;/\u0026quot; do pipe_through :skip_csrf_protection # this adds new pow routes pow_assent_authorization_post_callback_routes() end scope \u0026quot;/\u0026quot; do pipe_through :browser pow_routes() pow_assent_routes() # newly added pow_extension_routes() end  Remember to run the new migrations with:\nmix ecto.migrate  Generate the PowAssent template too (the page when using this where the user add username and OAuth password from remote site):\nmix pow_assent.phoenix.gen.templates  Setup remote OAuth providers (Github - for now) Go to: https://github.com/settings/applications/new\nEnter an Application name and enter the Homepage url as:\nhttp://localhost:4000/  and the Authorization callback (for our dev environment) as:\nhttp://localhost:4000/auth/github/callback  Configure Github Credential Secrets\n  https://hexdocs.pm/elixir/Application.html  https://devato.com/post/handling-environment-variables-in-phoenix  https://stackoverflow.com/questions/44510403/phoenix-import-module-into-config  https://stackoverflow.com/questions/30995743/how-to-get-a-variable-value-from-environment-files-in-phoenix  First update .gitignore with the line:\n**/*.secret.exs  then add in our case the dev.secrets.exs file:\ntouch config/dev.secret.exs  Once you get your Client ID and Client secrets you can configure config/dev.secret.exs with the following config:\nimport Config config :my_app, :pow_assent, providers: [ github: [ client_id: \u0026quot;REPLACE_WITH_CLIENT_ID\u0026quot;, client_secret: \u0026quot;REPLACE_WITH_CLIENT_SECRET\u0026quot;, strategy: Assent.Strategy.Github ] ]  Now at the END of config/dev.exs add the line:\nimport_config \u0026quot;dev.secret.exs\u0026quot;  Now at the end of:\n lib/my_app_web/templates/pow/registration/edit.html.eex (edit profile), lib/my_app_web/templates/pow/registration/new.html.eex (register), lib/fare_web/templates/pow/session/new.html.eex (sign-in)  add the following comprehension to list all the configured OAuth log-in links:\n\u0026lt;%= for link \u0026lt;- PowAssent.Phoenix.ViewHelpers.provider_links(@conn), do: content_tag(:span, link) %\u0026gt;  Resources:  pow readme: https://hexdocs.pm/pow/README.html video tutorial: https://www.youtube.com/watch?v=hnD0Z0LGMIk add pubsub https://curiosum.dev/blog/elixir-phoenix-liveview-messenger-part-3 add email to pow: https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl  https://experimentingwithcode.com/phoenix-authentication-with-pow-part-1/  https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/  ","date":1619305313,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628290913,"objectID":"1e7ffc901bcd640336fffc428c6865cc","permalink":"https://btihen.me/post_elixir_phoenix/phoenix_1_5_authentication_pow/","publishdate":"2021-04-25T01:01:53+02:00","relpermalink":"/post_elixir_phoenix/phoenix_1_5_authentication_pow/","section":"post_elixir_phoenix","summary":"Create a modern Phoenix SPA with tremendous flexibility","tags":["Phoenix","Elixir","Authentication","POW","Email","HogMail"],"title":"Phoenix 1.5 authentication with POW","type":"post_elixir_phoenix"},{"authors":["Bill Tihen"],"categories":["Code"],"content":"Here is a quick example of how to create a very simple \u0026ldquo;real-time\u0026rdquo;-\u0026ldquo;single-page-app\u0026rdquo; using phoenix-liveview. This provides the same functionality to as Realtime Rails with Hotwire - in order to compare.\nThe repo can be found here: https://github.com/btihen/live-tweets\ncreate / config a project First we will creat the folder / project location\nmkdir tweets  Now we will tell it which software to use:\ntouch tweets/.tool-versions cat \u0026lt;\u0026lt;EOF \u0026gt;\u0026gt;tweets/.tool-versions erlang 23.3.1 elixir 1.11.4-otp-23 nodejs lts-Fermium Postgres 13.2 EOF  Create a new Phoenix Project  https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58\nNow you can simply do:\nmix phx.new tweets --live  You will now get the message:\nThe directory /Users/btihen/Dropbox/devel/marpori/tweets already exists. Are you sure you want to continue? [Yn]  Say Y yes. Say Y yes again when you see:\nFetch and install dependencies? [Yn]  This can take a few minutes - when done, enter the directory and setup.\ncd tweets  Adjust the DB settings as needed in: config/dev.exs\nCreate the database and lets see if default tests work and we get the start page.\nmix ecto.create mix test mix phx.server  assuming all is good lets snapshot:\ngit init git add . git commit -m \u0026quot;initial setup commit\u0026quot;  This code commit can be seen at: https://github.com/btihen/live-tweets/commit/2eb9016371db3210eaf3a1cb35e4066e3b67bdbe\ncreate our tweet model Create this with the generator (notice we are using mix phx.gen.live not mix phx.gen.html):\nmix phx.gen.live Messages Post posts body:text  Change migration to require data - add null: false to our field so it now looks like:\n# priv/repo/migrations/20210418084643_create_posts.exs defmodule Tweets.Repo.Migrations.CreatePosts do use Ecto.Migration def change do create table(:posts) do add :body, :text, null: false timestamps() end end end  Now lets update the routes as described by the generator - in lib/tweets_web/router.ex so the section that looks like:\nscope \u0026quot;/\u0026quot;, TweetsWeb do pipe_through :browser live \u0026quot;/\u0026quot;, PageLive, :index end  should be change to:\nscope \u0026quot;/\u0026quot;, TweetsWeb do pipe_through :browser # live \u0026quot;/\u0026quot;, PageLive, :index live \u0026quot;/\u0026quot;, PostLive.Index, :index live \u0026quot;/posts\u0026quot;, PostLive.Index, :index live \u0026quot;/posts/new\u0026quot;, PostLive.Index, :new live \u0026quot;/posts/:id/edit\u0026quot;, PostLive.Index, :edit live \u0026quot;/posts/:id\u0026quot;, PostLive.Show, :show live \u0026quot;/posts/:id/show/edit\u0026quot;, PostLive.Show, :edit end  Now check our field body is required in validations \u0026ndash; in our changeset. We see validate_required([:body]) in the file: lib/tweets/messages/post.ex - so we are all set.\ndef changeset(post, attrs) do post |\u0026gt; cast(attrs, [:body]) |\u0026gt; validate_required([:body]) end  So it time to migrate \u0026amp; test:\nmix ecto.migrate mix test  Hmm - the tests generator and html use different html standards: to make the tests pass test that phoenix returns can\u0026amp;#39;t be blank instead of can\u0026amp;apos;t be blank in test/tweets_web/live/post_live_test.exs\nalso change: \u0026quot;Welcome to Phoenix!\u0026quot; to \u0026quot;Listing Posts\u0026quot; in test/tweets_web/live/page_live_test.exs\nNow lets see how our new SPA works:\nmix phx.server  It works, but we want to list the most recent tweets at the top of the page \u0026ndash; let\u0026rsquo;s investigate \u0026ndash; open lib/tweets_web/live/post_live/index.ex we see in the mount command:\n# lib/tweets_web/live/post_live/index.ex def mount(_params, _session, socket) do {:ok, assign(socket, :posts, list_posts())} end  It uses list_posts() to get the list - so let\u0026rsquo;s change this function.\nOpen: lib/tweets/messages.ex and change:\n# lib/tweets/messages.ex def list_posts do Repo.all(Post) end  to\n# lib/tweets/messages.ex def list_posts do Post |\u0026gt; order_by(desc: :inserted_at) |\u0026gt; Repo.all end  Cool now our SPA works like we want \u0026ndash; but it isn\u0026rsquo;t real-time between two users / browsers.\nThis code can be seen at: https://github.com/btihen/live-tweets/commit/3f432d7c06d974f9c2349937a35e391dedeb2ad6\nBroadcast changes with Pubsub Phoenix uses Websockets to do real-time communication. In our \u0026ldquo;context\u0026rdquo; we will create our channel - the pipeline that the socket uses to send information back and forth to various \u0026ldquo;subscribers\u0026rdquo; - viewers of our page.\nSetup the \u0026ldquo;Messages\u0026rdquo; Channel We go into: lib/tweets/messages.ex and at the top of the file add the Broadcast Setup:\n# lib/tweets/messages.ex defmodule Tweets.Messages do @moduledoc \u0026quot;\u0026quot;\u0026quot; The Messages context. \u0026quot;\u0026quot;\u0026quot; import Ecto.Query, warn: false alias Tweets.Repo alias Tweets.Messages.Post # Setup Broadcasting @topic inspect(__MODULE__) def subscribe do Phoenix.PubSub.subscribe(Tweets.PubSub, @topic) end def notify_subscribers({:ok, post}, event) do posts = list_posts() Phoenix.PubSub.broadcast(Tweets.PubSub, @topic, {__MODULE__, event, posts}) {:ok, post} end def notify_subscribers({:error, post}, event) do {:error, post} end # Setup Broadcasting ...  Lets quickly review this new code:\n@topic inspect(__MODULE__)\nmakes @topic named Tweets.Messages - but if we change the module name it changes @topic too.\nsubscribe function - allows us to register our index page with channel created automatically by LiveView.\nWe have two notify_subscribers because we will call these after we do our DB actions - writing to the DB could fail or succeed. If we have success then we will update all subscribers and the last line tuple passes the results of the interaction back to the actual user. (Of course we don\u0026rsquo;t need to notify when the DB transaction fails, we only need to pass the message back to the user).\nSubscribing to the \u0026lsquo;Messages\u0026rsquo; Channel Now that we have notify_subscribers that broadcasts Phoenix.PubSub.broadcast(Tweets.PubSub, @topic, {__MODULE__, event, posts}) we need a way to subscribe to this channel and receive these messages in all our index pages.\n# lib/tweets_web/live/post_live/index.ex defmodule TweetsWeb.PostLive.Index do use TweetsWeb, :live_view alias Tweets.Messages alias Tweets.Messages.Post @impl true def mount(_params, _session, socket) do # register with the channel if connection to LiveView if connected?(socket), do: Messages.subscribe() {:ok, assign(socket, :posts, list_posts())} end @impl true def handle_info({Messages, \u0026quot;posts-changed\u0026quot;, posts}, socket) do socket = assign(socket, :posts, posts) {:noreply, socket} end ...  The important changes are to subscribe to the channel we we have subscribed to our Websocket we do this in the mount function with if connected?(socket), do: Messages.subscribe()\nNow we need a way to recieve information from the channel this is done with the handle_info function - so we will simply take the new list of posts and update the socket and index will take care of the rest \u0026ndash; automatically!\nSending Messages to the Channel So now to activate our changes - we need to send to the channel via notify_subscribers when we successfully change something in the Messages \u0026ldquo;post\u0026rdquo; context. To do this we will make small changes to the create_post, update_post and delete_post functions. We will add notify_subscribers({status, post}, \u0026quot;posts-changed\u0026quot;) to the end of each function. Since we only defined one event \u0026quot;posts-changed\u0026quot; in our index page handle_info function \u0026ndash; we will hard-code that into our notify_subscribers call\nSo our simple DB calls in Messages currently looks like:\n# lib/tweets/messages.ex def create_post(attrs \\\\ %{}) do %Post{} |\u0026gt; Post.changeset(attrs) |\u0026gt; Repo.insert() end def update_post(%Post{} = post, attrs) do post |\u0026gt; Post.changeset(attrs) |\u0026gt; Repo.update() end def delete_post(%Post{} = post) do Repo.delete(post) end  Now becomes:\n# lib/tweets/messages.ex def create_post(attrs \\\\ %{}) do {status, post} = %Post{} |\u0026gt; Post.changeset(attrs) |\u0026gt; Repo.insert() notify_subscribers({status, post}, \u0026quot;posts-changed\u0026quot;) end def update_post(%Post{} = post, attrs) do {status, post} = post |\u0026gt; Post.changeset(attrs) |\u0026gt; Repo.update() notify_subscribers({status, post}, \u0026quot;posts-changed\u0026quot;) end def delete_post(%Post{} = post) do {status, post} = post |\u0026gt; Repo.delete() notify_subscribers({status, post}, \u0026quot;posts-changed\u0026quot;) end  Note: in-order to pass the DB transaction information back to the user, we need to capture that information with the tuple: {status, post} - which notify_subscribers will pass back and will be returned to the user - the returns values will be either {:ok, post} or {:error, post_changeset}\nLet\u0026rsquo;s be sure we didn\u0026rsquo;t break anything and run our tests again:\nmix test  Ideally, all is still good so lets try our updated app now:\nmix phx.server  Now any changes we make should be seen all users.\nCool, lets snapshot this.\ngit checkout -b liveview_spa_broadcast_with_pubsub git add . git commit -m \u0026quot;add realtime broadcast to all users\u0026quot;  This code can be seen at: https://github.com/btihen/live-tweets/commit/32c179e05cae68c5a2a6d49f54bf5a8dcf4d4dac\nSummary In my mind this is far simpler to setup as a single page app - using the LiveView generator and a little more work to add broadcasting than in Rails. Converting a Standard Phoenix HTML page to LiveView however is considerably more difficult than Converting a Standard Rails page to Hotwire. I also find adding advanced features much more straight-forward in LiveView - as you write the event_handlers in you liveview pages and it is very clear what is happening. In rails you need to know what is happening without being able to see the code. I also like that LiveView - when it can\u0026rsquo;t find an event - you get lots of errors. This is very helpful.\n","date":1618066913,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628290913,"objectID":"2f7d986cc7c9c0e10ba7685e60541e61","permalink":"https://btihen.me/post_elixir_phoenix/phoenix_1_5_liveview_simple_realtime/","publishdate":"2021-04-10T17:01:53+02:00","relpermalink":"/post_elixir_phoenix/phoenix_1_5_liveview_simple_realtime/","section":"post_elixir_phoenix","summary":"Create a dynamic SPA staying mostly in the Pheonix/Elixir mindset","tags":["Phoenix","Elixir","LiveView","SPA"],"title":"Phoenix LiveView - Simple Real-Time SPA","type":"post_elixir_phoenix"},{"authors":["Bill Tihen"],"categories":["Code"],"content":"I have been enjoying the tools associated with Elixir and exploring the frontend. LiveView helps make that more intuitive and when that isn\u0026rsquo;t enough, AlpineJS is a lightweight JS tool with a similar syntax as Vue.\nInstall asdf - and required software   https://thinkingelixir.com/install-elixir-using-asdf/  https://www.cogini.com/blog/using-asdf-with-elixir-and-phoenix/  https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58  On a Mac I used Homebrew:\nbrew install asdf echo -e '\\n. $(brew --prefix asdf)/asdf.sh' \u0026gt;\u0026gt; ~/.bash_profile echo -e '\\n. $(brew --prefix asdf)/etc/bash_completion.d/asdf.bash' \u0026gt;\u0026gt; ~/.bash_profile source ~/.bash_profile # (or open a new terminal)  Now you can install asdf software packages:\nasdf plugin-add erlang asdf plugin-add elixir asdf plugin-add nodejs asdf plugin-add Postgres  Now you need to install the desired versions (usually the newest) - currently:\nasdf list all erlang asdf install erlang 23.3.1 # note the elixir version otp must match the erlang version! asdf list all elixir asdf install elixir 1.11.4-otp-23 # asdf install elixir 1.11.4-otp-24 # if you mismatch elixir with erlang you will get errors like: # {\u0026quot;init terminating in do_boot\u0026quot;,{undef,[{elixir,start_cli,[],[]},{init,start_em,1,[]},{init,do_boot,3,[]}]}} asdf list all nodejs asdf install nodejs lts-fermium asdf list all Postgres asdf install Postgres 13.2  Get the newest Phoenix Hex Package Once you have established you have the requrements - the download the newest version of Phoenix (go to: https://hexdocs.pm/phoenix/installation.html#phoenix to see the newest version) - at the time of this writing its 1.5.8 - be sure its installed using:\nmix archive.install hex phx_new 1.5.8  create / config a project First we will creat the folder / project location\nmkdir fenix  Now we will tell it which software to use:\ntouch fenix/.tool-versions cat \u0026lt;\u0026lt;EOF \u0026gt;\u0026gt;fenix/.tool-versions erlang 23.3.1 elixir 1.11.4-otp-23 Postgres 13.2 nodejs lts-Fermium EOF  Create a new Phoenix Project  https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58\nNow you can simply do:\nmix phx.new fenix --live cd fenix mix ecto.create mix phx.server  assuming all is good lets configure git:\ngit init git add . git commit -m \u0026quot;initial Phoneix install with LiveView\u0026quot;  install \u0026amp; test Alpine JS  https://underjord.io/getting-started-with-petal.html https://dockyard.com/blog/2020/12/21/optimizing-user-experience-with-liveview\ncd assets npm install alpinejs  Now change app.js is to require our new setup:\n# assets/js/app.js // .. after the app.scss import add: import Alpine from \u0026quot;alpinejs\u0026quot;;  still in assets/js/app.js find: let liveSocket = new LiveSocket(\u0026quot;/live\u0026quot;, Socket, {params: {_csrf_token: csrfToken}})`\nand change to:\nlet liveSocket = new LiveSocket(\u0026quot;/live\u0026quot;, Socket, { params: {_csrf_token: csrfToken}, dom: { onBeforeElUpdated(from, to){ if(from.__x){ Alpine.clone(from.__x, to) } } } } )  TEST by adding to the end of: lib/fenix_web/live/page_live.html.leex\n\u0026lt;section\u0026gt; \u0026lt;h2\u0026gt;Alpine JS Installed\u0026lt;/h2\u0026gt; \u0026lt;div x-data=\u0026quot;{name:''}\u0026quot;\u0026gt; \u0026lt;label for=\u0026quot;name\u0026quot;\u0026gt;Name:\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026quot;name\u0026quot; type=\u0026quot;text\u0026quot; x-model=\u0026quot;name\u0026quot; /\u0026gt; \u0026lt;p\u0026gt;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;\u0026lt;em\u0026gt;Output:\u0026lt;/em\u0026gt;\u0026lt;/b\u0026gt; \u0026lt;span x-text=\u0026quot;name\u0026quot;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt;  test with: mix phx.server\nwhen typing the name should appear below!\nlet\u0026rsquo;s snapshot:\ngit add . git commit -m \u0026quot;phoenix with alpine js\u0026quot;  Integrating Tailwind into phoenix  https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix https://fullstackphoenix.com/tutorials/get-started-with-tailwind-in-phoenix\nThis source gives several options - here we install with postcss-import (for components from the beginning):\ncd assets npm install tailwindcss postcss autoprefixer postcss-loader@4.2 postcss-import --save-dev touch postcss.config.js cat \u0026lt;\u0026lt;EOF \u0026gt; postcss.config.js module.exports = { plugins: { \u0026quot;postcss-import\u0026quot;: {}, tailwindcss: {}, autoprefixer: {} } } EOF  now open: assets/webpack.config.js and find:\n{ test: /\\.[s]?css$/, use: [ MiniCssExtractPlugin.loader, 'css-loader', 'sass-loader', ], }  change too (add 'postcss-loader' between 'css-loader' \u0026amp; 'sass-loader'):\n{ test: /\\.[s]?css$/, use: [ MiniCssExtractPlugin.loader, 'css-loader', 'postcss-loader', 'sass-loader', ], }  now initialize tailwind config with:\nnpx tailwindcss init  this creates the file tailwind.config.js we will replace the purge: [], section with:\npurge: [ '../lib/**/*.ex', '../lib/**/*.leex', '../lib/**/*.eex', './js/**/*.js' ],  Now the fill will look like:\nmodule.exports = { purge: [ '../lib/**/*.ex', '../lib/**/*.leex', '../lib/**/*.eex', './js/**/*.js' ], darkMode: false, // or 'media' or 'class' theme: { extend: {}, }, variants: { extend: {}, }, plugins: [], }  now in assets/package.json find:\n\u0026quot;scripts\u0026quot;: { \u0026quot;deploy\u0026quot;: \u0026quot;webpack --mode production\u0026quot;, \u0026quot;watch\u0026quot;: \u0026quot;webpack --mode development --watch\u0026quot; },  and change this to:\n\u0026quot;scripts\u0026quot;: { \u0026quot;deploy\u0026quot;: \u0026quot;NODE_ENV=production webpack --mode production\u0026quot;, \u0026quot;watch\u0026quot;: \u0026quot;webpack --mode development --watch\u0026quot; },  we will create a file for our custom styles the assets/css/custom-style.css file:\n# assuming you are still in the assets directory on the cli touch css/custom-styles.css  Let\u0026rsquo;s also create our a custom component (we will make buttons for a counter to be sure tailwind and aplineJS are playing well together):\n# assuming you are still in the assets directory on the cli mkdir css/components touch css/components/buttons.css cat \u0026lt;\u0026lt;EOF \u0026gt; css/components/buttons.css @layer components { .btn-redish { @apply bg-red-300 hover:bg-red-600 text-blue-800 font-bold py-2 px-4 rounded; } .btn-greenish { @apply bg-green-300 hover:bg-green-600 text-blue-800 font-bold py-2 px-4 rounded; } } EOF  Now will will configure Phoenix to load Tailwind, our custom-styles and our custom-components \u0026ndash; DO THIS AT THE TOP OF the file assets/css/app.scss (@imports must be before all else):\n/* Import tailwind - with postcss-import installed */ @import \u0026quot;tailwindcss/base\u0026quot;; @import \u0026quot;tailwindcss/components\u0026quot;; @import \u0026quot;tailwindcss/utilities\u0026quot;; /* custom styles - put after base imports! */ @import \u0026quot;./custom-styles.css\u0026quot;; /* import custom components */ @import \u0026quot;./components/buttons.css\u0026quot;; /* default phoenix styles - eventually remove */ @import \u0026quot;./phoenix.css\u0026quot;;  add a test html from tailwind to the end of: lib/fenix_web/live/page_live.html.leex\n\u0026lt;section class=\u0026quot;grid grid-cols-1 gap-4\u0026quot;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h2 class=\u0026quot;text-red-500 text-5xl font-bold text-center\u0026quot;\u0026gt;Tailwind CSS with AlpineJS\u0026lt;/h2\u0026gt; \u0026lt;p class=\u0026quot;mt-5 font-bold text-center\u0026quot;\u0026gt;Red Title with Colored Counter Buttons\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;mt-10 flex justify-center\u0026quot; x-data=\u0026quot;{ count: 0 }\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;btn-redish\u0026quot; x-on:click=\u0026quot;count--\u0026quot;\u0026gt;Decrement\u0026lt;/button\u0026gt; \u0026lt;code\u0026gt;count: \u0026lt;/code\u0026gt;\u0026lt;code x-text=\u0026quot;count\u0026quot;\u0026gt;\u0026lt;/code\u0026gt; \u0026lt;button class=\u0026quot;btn-greenish\u0026quot; x-on:click=\u0026quot;count++\u0026quot;\u0026gt;Increment\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt;  Now when we start the server with mix phx.server we should have a centered / red title and colored buttons on our counter.\nnow lets snapshot our PETAL setup:\ngit add . git commit -m \u0026quot;Tailwind installed\u0026quot;  Resources   https://www.youtube.com/watch?v=o4Prej0wIZA  http://blog.pthompson.org/alpine-js-and-liveview  https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix  https://fullstackphoenix.com/tutorials/get-started-with-tailwind-in-phoenix  https://fullstackphoenix.com/tutorials/combine-phoenix-liveview-with-alpine-js  https://medium.com/mindvalley-technology/how-to-add-tailwindcss-to-your-phoenix-project-e2250ad31ace  https://thinkingelixir.com/podcast-episodes/021-tailwind-css-alpine-js-and-liveview-with-patrick-thompson/  ","date":1618009313,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628290913,"objectID":"40abf26fdd004de9b65ab1ad239fbe9f","permalink":"https://btihen.me/post_elixir_phoenix/phoenix_1_5_petal_setup_with_asdf/","publishdate":"2021-04-10T01:01:53+02:00","relpermalink":"/post_elixir_phoenix/phoenix_1_5_petal_setup_with_asdf/","section":"post_elixir_phoenix","summary":"Create a modern Phoenix SPA with tremendous flexibility","tags":["Phoenix","Elixir","TailwindCSS","AlpineJS","LiveView","PETAL Stack"],"title":"Phoenix 1.5 PETAL Stack Setup - w/ asdf","type":"post_elixir_phoenix"},{"authors":["Bill Tihen"],"categories":[],"content":"Overview As was seen in Using Hotwire with Flash Messages Hotwire can easily load data - let\u0026rsquo;s do this in a lazy loaded way (after the html is loaded we add data).\nBasic Setup Start with the code at the end of: Using Hotwire in Rails\nPrepare our code Let\u0026rsquo;s remove the extra Tweet.new load in the controller\u0026rsquo;s index method:\n# app/controllers/tweets_controller.rb def index @tweets = Tweet.all.order(created_at: :desc) # @tweet = Tweet.new # no longer needed end  now if we try our code we get a null value error (for course).\nSo to fix this we need to load the data back in (and restructure our index page a bit).\nTurbo works well if you use the normal templates - so in this case we will use the new template on the home page to call the new form and get its own data:\n# app/views/tweets/index.html.erb \u0026lt;h1\u0026gt;Tweets\u0026lt;/h1\u0026gt; \u0026lt;%= turbo_stream_from \u0026quot;tweets\u0026quot; %\u0026gt; \u0026lt;h2 class=\u0026quot;mt-3 h4 text-muted\u0026quot;\u0026gt;New Tweet\u0026lt;/h2\u0026gt; \u0026lt;div class=\u0026quot;card card-body\u0026quot;\u0026gt; \u0026lt;%= turbo_frame_tag \u0026quot;new-tweet\u0026quot;, src: new_tweet_path, target: \u0026quot;_top\u0026quot; %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h2 class=\u0026quot;mt-3 h4 text-muted\u0026quot;\u0026gt;Tweet Feed\u0026lt;/h2\u0026gt; \u0026lt;%= turbo_frame_tag \u0026quot;tweets\u0026quot; do %\u0026gt; \u0026lt;%= render @tweets %\u0026gt; \u0026lt;% end %\u0026gt;  Notice the new template is using the dom_id \u0026ldquo;new-tweet\u0026rdquo; and not \u0026ldquo;new_tweet\u0026rdquo;. Also note that this tag has a src: - that is where it is getting its data source (\u0026amp; view to use) - in this case the new_tweet_path routes to tweets_controller#new and that calls the veiw template. The final thing to note is the target - this tells the turbo_tag to look / act outside the contraints of its frame (otherwise we couldn\u0026rsquo;t reach the controller).\nCurrently this won\u0026rsquo;t work yet - we need to create a matching tag \u0026ndash; including the target in the new template. So our updated new template now looks like:\napp/views/tweets/new.html.erb \u0026lt;h1\u0026gt;New Tweet\u0026lt;/h1\u0026gt; \u0026lt;%= turbo_frame_tag \u0026quot;new-tweet\u0026quot;, target: \u0026quot;_top\u0026quot; do %\u0026gt; \u0026lt;%= render 'form', tweet: @tweet %\u0026gt; \u0026lt;% end %\u0026gt;  Now we should have a new form that uses the standard rails data flow within the index - just like the display and edit of individual tweets also uses show and edit templates too.\nResources The repo where you can find this code in the branch: https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_lazy_load_data\n","date":1616889420,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628294220,"objectID":"f1d24ca00d9815f89a92a1a3dc206f0a","permalink":"https://btihen.me/post_ruby_rails/rails_6_1_hotwire_lazy_load_data/","publishdate":"2021-03-28T01:57:00+02:00","relpermalink":"/post_ruby_rails/rails_6_1_hotwire_lazy_load_data/","section":"post_ruby_rails","summary":"A simple Single Page App using Rails and flash messages with Hotwire","tags":["Rails","Hotwire","SPA","WebSocket","realtime","lazy load data"],"title":"Rails 6.1 - Hotwire with Lazy Loading","type":"post_ruby_rails"},{"authors":["Bill Tihen"],"categories":[],"content":"Overview Now that you have the basics of using Hotwire in Rails Using Hotwire in Rails - its interesting to try using it in other contexts, inparticular modals are very useful for inputs in Single Page Apps. So in this Blog we will make the new input form a modal and leave the edit as an in-place form.\nBasic Setup Start with the code at the end of: Using Hotwire in Rails\nAdd jQuery to Bootstrap Setup First we need to ensure we have JS and JQuery (installed with Bootstrap) - so we will simply add the following to the end of our \u0026lt;body\u0026gt; in the application.html.erb file:\n# app/views/layouts/application.html.erb \u0026lt;body\u0026gt; \u0026lt;p id=\u0026quot;notice\u0026quot;\u0026gt;\u0026lt;%= notice %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;%= yield %\u0026gt; \u0026lt;script src=\u0026quot;https://code.jquery.com/jquery-3.5.1.slim.min.js\u0026quot; integrity=\u0026quot;sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\u0026quot; crossorigin=\u0026quot;anonymous\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js\u0026quot; integrity=\u0026quot;sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx\u0026quot; crossorigin=\u0026quot;anonymous\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt;  Add Modal to Index So we will start by replacing the new-form with a button that toggles the modal.\n# app/views/tweets/index.html.erb \u0026lt;h1\u0026gt;Tweets\u0026lt;/h1\u0026gt; \u0026lt;%= turbo_stream_from \u0026quot;tweets\u0026quot; %\u0026gt; \u0026lt;h2 class=\u0026quot;mt-3 h4 text-muted\u0026quot;\u0026gt;New Tweet\u0026lt;/h2\u0026gt; \u0026lt;%= render \u0026quot;tweets/modal_new\u0026quot;, tweet: @tweet %\u0026gt; \u0026lt;h2 class=\u0026quot;mt-3 h4 text-muted\u0026quot;\u0026gt;Tweet Feed\u0026lt;/h2\u0026gt; \u0026lt;%= turbo_frame_tag \u0026quot;tweets\u0026quot; do %\u0026gt; \u0026lt;%= render @tweets %\u0026gt; \u0026lt;% end %\u0026gt;  So now lets make a partial that has the modal toggle button and the associated html to enable the modal to function (this code is basically copied from the Bootstrap website):\n# app/views/tweets/_modal_new.html.erb \u0026lt;%= link_to \u0026quot;#\u0026quot;, class: 'btn btn-sm btn-outline-primary', data: { toggle: \u0026quot;modal\u0026quot;, target: \u0026quot;#tweetModal\u0026quot; } do %\u0026gt; New Tweet \u0026lt;% end %\u0026gt; \u0026lt;div class=\u0026quot;modal fade\u0026quot; id=\u0026quot;tweetModal\u0026quot; tabindex=\u0026quot;-1\u0026quot; aria-labelledby=\u0026quot;exampleModalLabel\u0026quot; aria-hidden=\u0026quot;true\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;modal-dialog\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;modal-content\u0026quot;\u0026gt; \u0026lt;%= render \u0026quot;tweets/modal_form\u0026quot;, tweet: tweet %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;  Notice we have a partial for the form still - this is because we have to point turbo at a dom_id within a partial (without doing this we can\u0026rsquo;t get validation errors back into this form). This is a mix of the Bootstrap example code placed within the rails form.\n# app/views/tweets/_modal_form.html.erb \u0026lt;%= form_with(model: tweet, id: dom_id(tweet)) do |form| %\u0026gt; \u0026lt;div class=\u0026quot;modal-header\u0026quot;\u0026gt; \u0026lt;h5 class=\u0026quot;modal-title\u0026quot;\u0026gt;New Tweet\u0026lt;/h5\u0026gt; \u0026lt;button type=\u0026quot;button\u0026quot; class=\u0026quot;close\u0026quot; data-dismiss=\u0026quot;modal\u0026quot; aria-label=\u0026quot;Close\u0026quot;\u0026gt; \u0026lt;span aria-hidden=\u0026quot;true\u0026quot;\u0026gt;\u0026amp;times;\u0026lt;/span\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;modal-body\u0026quot;\u0026gt; \u0026lt;% if tweet.errors.any? %\u0026gt; \u0026lt;div id=\u0026quot;error_explanation\u0026quot;\u0026gt; \u0026lt;h2\u0026gt;\u0026lt;%= pluralize(tweet.errors.count, \u0026quot;error\u0026quot;) %\u0026gt; prohibited this tweet from being saved:\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;% tweet.errors.each do |error| %\u0026gt; \u0026lt;li\u0026gt;\u0026lt;%= error.full_message %\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;div class=\u0026quot;field\u0026quot;\u0026gt; \u0026lt;%= form.label :body %\u0026gt; \u0026lt;%= form.text_area :body %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;modal-footer\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;actions\u0026quot;\u0026gt; \u0026lt;%= form.submit class: \u0026quot;btn btn-sm btn-outline-success\u0026quot; %\u0026gt; \u0026lt;%= link_to \u0026quot;Cancel\u0026quot;, tweet, class: \u0026quot;btn btn-sm btn-outline-danger\u0026quot; %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt;  Test  Modal Opens Modal Close Works Modal Cancel Works Create valid Tweet \u0026ndash; works and broadcasts Create invalid Tweet \u0026ndash; Errors go to wrong form (must click cancel or reload)  In fact, if you put the regular form back into the index page you will see that the validation errors show up there.\nFix validation errors We fix this like this like a normal form - we change how the controller uses turbo_stream. So instead of pointing to the partial: \u0026ldquo;tweets/form\u0026rdquo; we need to point to \u0026ldquo;tweets/modal_form\u0026rdquo; (the new partial with the form).\n# app/controllers/tweets_controller.rb def create @tweet = Tweet.new(tweet_params) respond_to do |format| if @tweet.save format.html { redirect_to tweets_url, notice: \u0026quot;Tweet was successfully created.\u0026quot; } format.json { render :show, status: :created, location: @tweet } else format.turbo_stream { # route turbo_stream validation errors render turbo_stream: turbo_stream.replace( @tweet, partial: \u0026quot;tweets/modal_form\u0026quot;, locals: { tweet: @tweet}) } format.html { render :new, status: :unprocessable_entity } format.json { render json: @tweet.errors, status: :unprocessable_entity } end end end  Now all our tests should work.\nUsing turbo templates Let\u0026rsquo;s refactor - for future flexibility. We\u0026rsquo;ll create the template. Since we are using the create method within the controller - we\u0026rsquo;ll call the file: create.turbo_stream.html.erb - notice, unsurprisingly it looks what\u0026rsquo;s in the controller.\n# app/views/tweets/create.turbo_stream.erb \u0026lt;!-- action dom_id partial with the dom_id actual data --\u0026gt; \u0026lt;%= turbo_stream.replace @tweet, partial: \u0026quot;tweets/modal_form\u0026quot;, locals: { tweet: @tweet } %\u0026gt;  Now we can make the controller look like:\n# app/controllers/tweets_controller.rb def create @tweet = Tweet.new(tweet_params) respond_to do |format| if @tweet.save format.html { redirect_to tweets_url, notice: \u0026quot;Tweet was successfully created.\u0026quot; } format.json { render :show, status: :created, location: @tweet } else format.turbo_stream # route turbo_stream validation errors format.html { render :new, status: :unprocessable_entity } format.json { render json: @tweet.errors, status: :unprocessable_entity } end end end  Using the template allows us the flexibilty to make multiple dynamic changes to the page on a create. This is demonstrated in the post describing using Flash messages with Hotwire.\nResources The repo where you can find this code in the branch: https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_modal_new_tweet\nThe important commit is: https://github.com/btihen/ruby_kafi_hotwire_tweets/commit/0c37fb6071b31d13f4cf3ce2499326893724e131\n","date":1616259420,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628294220,"objectID":"2962f6a191160d8da8eb45fb9807a1cb","permalink":"https://btihen.me/post_ruby_rails/rails_6_1_hotwire_modal_form/","publishdate":"2021-03-20T18:57:00+02:00","relpermalink":"/post_ruby_rails/rails_6_1_hotwire_modal_form/","section":"post_ruby_rails","summary":"A simple Single Page App using Rails and Hotwire - integrated with a modal forms","tags":["Rails","Hotwire","SPA","WebSocket","realtime","modal forms"],"title":"Rails 6.1 - Hotwire with Modals","type":"post_ruby_rails"},{"authors":["Bill Tihen"],"categories":[],"content":"Overview Hotwire only updates dom_ids (usually only within a partial) - so other Frontend needs still need to be met with Javascript. Rails uses StimulusJS to augment Hotwire. I Using Hotwire with Flash Messages we created a new instance of Tweet in the turbo_template and sent that to the form. (Pretty non-standard) - we can do this even more simply by using JS to clear the form without instantiating a new object.\nBasic Setup Start with the code at the end of: Using Hotwire with Flash Messages\nStimulusJS to clear forms To enable Flash Messages our create/controller looked like - which seems a little messy - in create (happy-path) we handle all the updates via the create.turbo_stream.erb template and with validation errors we explicity (in the controller - handle the validation errors)\nSo lets start by disabling the code we no longer need in the template:\n# app/views/tweets/create.turbo_stream.erb \u0026lt;%# turbo_stream.replace \u0026quot;tweet-form\u0026quot;, partial: \u0026quot;tweets/form\u0026quot;, locals: { tweet: Tweet.new } %\u0026gt; \u0026lt;%# to send a message to the notice partial %\u0026gt; \u0026lt;%= turbo_stream.append \u0026quot;notice\u0026quot;, partial: \u0026quot;shared/notice\u0026quot;, locals: {notice: \u0026quot;Tweet was successfully created.\u0026quot;} %\u0026gt;  So we are only leaving the turbo_stream.append active.\nLet\u0026rsquo;s test here and be sure the new form doesn\u0026rsquo;t clear after making a new tweet.\nAdd a StimulusJS controller We don\u0026rsquo;t need to add / install or configure StimulusJS since Hotwire already handles this.\nSo let\u0026rsquo;s create the JS file to clear the form - its quite simple we will just use:\n// app/javascript/controllers/reset_form_controller.js import { Controller } from \u0026quot;stimulus\u0026quot; export default class extends Controller { reset() { this.element.reset() } }  In order to tie this to the form we need to go into the form and add the data: info \u0026ndash; so now our form should start with:\n# app/views/tweets/_form.html.erb \u0026lt;%= form_with(model: tweet, id: dom_id(tweet), data: {controller: \u0026quot;reset-form\u0026quot;, action: \u0026quot;turbo:submit-end-\u0026gt;reset-form#reset\u0026quot;} ) do |form| %\u0026gt;  This data tag ties the stimulus controller reset_form_controller.js with the reset-form setting \u0026ndash; notice the html uses a - when ruby uses _. On the form action submit-end then execute (\u0026rsquo;-\u0026gt;\u0026rsquo;) in the controller reset-form the function (\u0026rsquo;#\u0026rsquo;) reset\nFairly straight-forward, but it helps to be aware of the syntax and the differences between Ruby and Javascript.\nResources The repo where you can find this code in the branch: https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_with_stimulus\n","date":1615741020,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628294220,"objectID":"495d100b1a6d2c41efcc3000aaf90988","permalink":"https://btihen.me/post_ruby_rails/rails_6_1_hotwire_and_stimulusjs/","publishdate":"2021-03-14T18:57:00+02:00","relpermalink":"/post_ruby_rails/rails_6_1_hotwire_and_stimulusjs/","section":"post_ruby_rails","summary":"A simple Single Page App using Rails and flash messages with Hotwire","tags":["Rails","Hotwire","SPA","WebSocket","realtime","flash message"],"title":"Rails 6.1 - Hotwire with StimulusJS","type":"post_ruby_rails"},{"authors":["Bill Tihen"],"categories":[],"content":"Overview Now that you have the basics of using Hotwire in Rails Using Hotwire in Rails - its interesting to try using it in other contexts, inparticular modals are very useful for inputs in Single Page Apps. So in this Blog we will make the new input form a modal and leave the edit as an in-place form.\nBasic Setup Start with the code at the end of: Using Hotwire in Rails\nFlash Messages in Partial Remember, turbo_streams requires a dom_id and a partial in order to know where to send / update the HTML it generates \u0026ndash; so let\u0026rsquo;s prepare application.html.erb so that flash messages use partials.\n# app/views/layouts/application.html.erb \u0026lt;body\u0026gt; \u0026lt;%= render \u0026quot;shared/notice\u0026quot;, notice: notice %\u0026gt; \u0026lt;%= yield %\u0026gt; \u0026lt;/body\u0026gt;  and of course we need a partials for notices now (we will keep it very simple):\n# app/views/shared/_notice.html.erb \u0026lt;p id=\u0026quot;notice\u0026quot;\u0026gt;\u0026lt;%= notice %\u0026gt;\u0026lt;/p\u0026gt;  now we will create a turbo template to handle the flash on create:\n# app/views/tweets/create.turbo_stream.erb \u0026lt;%# to send a message to the notice partial %\u0026gt; \u0026lt;!-- action dom_id partial with dom_id data to send in the notice --\u0026gt; \u0026lt;%= turbo_stream.append \u0026quot;notice\u0026quot;, partial: \u0026quot;shared/notice\u0026quot;, locals: {notice: \u0026quot;Tweet created.\u0026quot;} %\u0026gt;  In order for the controller and turbo_stream to handle this non-standard action we need to update the create method in the controller with the instructions format.turbo_stream on a successful create:\n# app/controllers/tweets_controller.rb def create @tweet = Tweet.new(tweet_params) respond_to do |format| if @tweet.save format.turbo_stream # enables flash message on create - via the create template format.html { redirect_to tweets_url, notice: \u0026quot;Tweet was successfully created.\u0026quot; } format.json { render :show, status: :created, location: @tweet } else format.turbo_stream { # route turbo validation errors render turbo_stream: turbo_stream.replace( @tweet, partial: \u0026quot;tweets/form\u0026quot;, locals: { tweet: @tweet}) } format.html { render :new, status: :unprocessable_entity } format.json { render json: @tweet.errors, status: :unprocessable_entity } end end end  Now when we test everything works great, except our form no longer clears. We can fix that by adding a second action to the create template (we will send a Tweet.new - there are other approaches too - covered in Hotwire and StimulusJS)\n# app/views/tweets/create.turbo_stream.erb \u0026lt;%# clear form on create - without using JavaScript - by replacing the old Tweet info with Tweet.new %\u0026gt; \u0026lt;%= turbo_stream.replace \u0026quot;tweet-form\u0026quot;, partial: \u0026quot;tweets/form\u0026quot;, locals: { tweet: Tweet.new } %\u0026gt; \u0026lt;%# to send a message to the notice partial %\u0026gt; \u0026lt;%= turbo_stream.append \u0026quot;notice\u0026quot;, partial: \u0026quot;shared/notice\u0026quot;, locals: {notice: \u0026quot;Tweet was successfully created.\u0026quot;} %\u0026gt;  Refactor You might have noticed, that we have moved most of our turbo_steam template to the template file, but not the replace for validation errors \u0026ndash; since we already have a replace command in our template - we will need to leave our specific instructions in the errors as is \u0026ndash; until we clear the form with JS.\nNOTE: now that we are consolidating our template info it might be tempting to add the following:\n\u0026lt;!-- to prepend on create - disabled to avoid double vision when broadcasting --\u0026gt; \u0026lt;%#% stream_action dom_id_target, render_partial, send_local_variables %\u0026gt; \u0026lt;%= turbo_stream.prepend \u0026quot;tweets\u0026quot;, partial: \u0026quot;tweets/tweet\u0026quot;, locals: { tweet: @tweet } %\u0026gt;  but don\u0026rsquo;t add the default happy path instructions to the template when a model already has a broadcast after hook - if you add this instruction the person creating a new tweet will see two!\nFlash after we update This is now very straight forward we simply add format.turbo_stream to our save and create an update.turbo_stream.erb template\n# app/views/tweets/update.turbo_stream.erb \u0026lt;%# to send a message to the notice partial %\u0026gt; \u0026lt;%= turbo_stream.append \u0026quot;notice\u0026quot;, partial: \u0026quot;shared/notice\u0026quot;, locals: {notice: \u0026quot;Tweet was successfully created.\u0026quot;} %\u0026gt;  And now we can tell the controller to use that:\n# app/controllers/tweets_controller.rb def update respond_to do |format| if @tweet.update(tweet_params) format.turbo_stream format.html { redirect_to @tweet, notice: \u0026quot;Tweet was successfully updated.\u0026quot; } format.json { render :show, status: :ok, location: @tweet } else format.html { render :edit, status: :unprocessable_entity } format.json { render json: @tweet.errors, status: :unprocessable_entity } end end end  We don\u0026rsquo;t have to clear the form on update since the edit template is replaced with the show template already. So we are done.\nResources The repo where you can find this code in the branch: https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_flash_messages\n","date":1615049820,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628294220,"objectID":"f6df180a0d3c27d1476965332f9a2028","permalink":"https://btihen.me/post_ruby_rails/rails_6_1_hotwire_flash_messages/","publishdate":"2021-03-06T18:57:00+02:00","relpermalink":"/post_ruby_rails/rails_6_1_hotwire_flash_messages/","section":"post_ruby_rails","summary":"A simple Single Page App using Rails and flash messages with Hotwire","tags":["Rails","Hotwire","SPA","WebSocket","realtime","flash message"],"title":"Rails 6.1 - Hotwire with Flash Messages","type":"post_ruby_rails"},{"authors":["Bill Tihen"],"categories":[],"content":"Overview  Hotwire is planned to be integrated into Rails 7.x and is already included in the soon to be published book: Modern Front-End Development for Rails: Hotwire, Stimulus, Turbo, and React \nHotwire allows us to build Single Page Apps using Ruby and Rails with nearly NO configuration! It allow very responsive web-applications as it reloads only the parts of the page that change via a socket. Hotwire using Turbo - an evolution of TurboLinks and as such is mobile friendly and in most cases can send the replacement HTML directly from the server to the client with minimal or no client side processing over websockets so there is minimal lag time.\nIn this article we convert a seemingly \u0026lsquo;single-page\u0026rsquo; web app that reloads with every request see previous article Tweets - A Single Page Rails App (using reloads) and convert it into a proper \u0026lsquo;single-page\u0026rsquo; app that only refreshes the aspects that change. This makes web-pages with lots of data and complexity FAST and feel like native apps. This is done with Hotwire (using web-sockets).\nBasic Setup We will be starting with a basic Tweet Simulator it looks something like:\nThe starting code base can be found at: https://github.com/btihen/tweet_simulator_rails\nThe steps to re-create this code can be found at: Tweets - A Single Page Rails App (using reloads)\nThe actual Tweet Hotwire code from this article can be found at:\nInstall and configure Hotwire Install Hotwire To use hotwire - we need to install it:\nbundle add hotwire-rails bin/rails hotwire:install  The hotwire package is smart enough to install via webpack if that\u0026rsquo;s installed or in the asset pipeline if no webpacker is installed. This project uses webpack (but it shouldn\u0026rsquo;t matter).\nThis also installs Stimulus Javascript and enables redis if not already installed. Now you should see the following steps:\n Stimulus config in: application.js and setup. Turbo install and setup Removal of Turbolinks Enable Redis gem Configure Redis to work with ActionCable (Rails Websockets)  and the output should look something like:\nAppending Stimulus setup code to append app/javascript/packs/application.js Creating controllers directory create app/javascript/controllers create app/javascript/controllers/hello_controller.js create app/javascript/controllers/index.js Installing all Stimulus dependencies run yarn add stimulus from \u0026quot;.\u0026quot; ... ✨ Done in 36.58s. Install Turbo run yarn add @hotwired/turbo-rails from \u0026quot;.\u0026quot; ... ✨ Done in 7.40s. insert app/javascript/packs/application.js Remove Turbolinks gsub Gemfile run bin/bundle from \u0026quot;.\u0026quot; run bin/yarn remove turbolinks from \u0026quot;.\u0026quot; yarn remove v1.22.10 [1/2] 🗑 Removing module turbolinks... ... gsub app/javascript/packs/application.js gsub app/javascript/packs/application.js Enable redis in bundle gsub Gemfile Switch development cable to use redis gsub config/cable.yml Turbo successfully installed ⚡️  NOTE: a prerequisite is that you already have Redis (server) installed in your development environment.\nCheck Project config for Hotwire  References to turbolinks must be removed Turbo is installed Stimulus is installed  If you have problems you can experiment try adding one or more of the following:\n\u0026lt;%= yield :head %\u0026gt; \u0026lt;%= turbo_include_tags %\u0026gt; \u0026lt;%= stimulus_include_tags %\u0026gt;  In particular, I found the top two helpful - but this is a new technology - and it is still evolving. In the end the app/views/layouts/application.html.erb might need to look like:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Tweets\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width,initial-scale=1\u0026quot;\u0026gt; \u0026lt;%= csrf_meta_tags %\u0026gt; \u0026lt;%= csp_meta_tag %\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css\u0026quot; integrity=\u0026quot;sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l\u0026quot; crossorigin=\u0026quot;anonymous\u0026quot;\u0026gt; \u0026lt;%= stylesheet_link_tag 'application', media: 'all' %\u0026gt; \u0026lt;%= javascript_pack_tag 'application' %\u0026gt; \u0026lt;%= yield :head %\u0026gt; \u0026lt;%= turbo_include_tags %\u0026gt; \u0026lt;%# stimulus_include_tags %\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;%= yield %\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Check the app is still working and make a git snapshot.\ngit add . git commit -m \u0026quot;install and configure hotwire-rails\u0026quot;  Using Hotwire Avoid the page reloads and only update our changes by sending new HTML\nBroadcast New Tweets to all Clients To broadcast changes to a client we need to modify the model and add the broadcast command. A Broadcast \u0026ldquo;tweets\u0026rdquo; sends changes to the turbo_stream (websocket channel) with the same name. To add the new tweets to the top of the \u0026ldquo;tweets\u0026rdquo; page (frame) we need to use the broadcast_prepend_to instead of the broadcast_append_to (which puts new entries at the bottom)\n# app/models/tweet.rb class Tweet \u0026lt; ApplicationRecord validates :body, presence: true # broadcast \u0026quot;tweets\u0026quot; send all changes to the turbo_stream view \u0026quot;tweets\u0026quot; # broadcast_prepend_to places new information at the top instead of appending to the bottom after_create_commit { broadcast_prepend_to \u0026quot;tweets\u0026quot; } end  In order for this model broadcast to work we need to create a place to send it. We do this in the view via a stream with the command \u0026lt;%= turbo_stream_from \u0026quot;tweets\u0026quot; %\u0026gt; we also need to tell this stream where to update \u0026ndash; we do this with the turbo tag of the same name: \u0026lt;%= turbo_frame_tag \u0026quot;tweets\u0026quot; do %\u0026gt;\nSo lets update our index page :\n# app/views/tweets/index.html.erb \u0026lt;!-- connects to the backend broadcast (via a channel) --\u0026gt; \u0026lt;%= turbo_stream_from \u0026quot;tweets\u0026quot; %\u0026gt; \u0026lt;!-- frame that receives the taged data --\u0026gt; \u0026lt;%= turbo_frame_tag \u0026quot;tweets\u0026quot; do %\u0026gt; \u0026lt;%= render @tweets %\u0026gt; \u0026lt;% end %\u0026gt;  In order to see our new frames lets update our css to make them visible - lets add a border to our turbo-frames:\n# app/assets/stylesheets/tweets.scss turbo-frame { display: block; border: 1px solid green }  Let\u0026rsquo;s check that our new broadcast feature run: bin/rails s and open two browser windows point at http://localhost:3000\nYou can see in the left window we created a new tweet and it automatically appeared in the right window! HOW COOL IS THAT!\nNotice that the \u0026ldquo;blue\u0026rdquo; turbo-frame is around all the displayed tweets.\nLets also take a quick look at the logs - from this transaction:\nStarted POST \u0026quot;/tweets\u0026quot; for 127.0.0.1 at 2021-02-28 21:12:59 +0100 Processing by TweetsController#create as TURBO_STREAM Parameters: {\u0026quot;authenticity_token\u0026quot;=\u0026gt;\u0026quot;[FILTERED]\u0026quot;, \u0026quot;tweet\u0026quot;=\u0026gt;{\u0026quot;body\u0026quot;=\u0026gt;\u0026quot;Fourth Tweet\u0026quot;}, \u0026quot;commit\u0026quot;=\u0026gt;\u0026quot;Create Tweet\u0026quot;} TRANSACTION (1.6ms) BEGIN ↳ app/controllers/tweets_controller.rb:28:in `block in create' Tweet Create (60.1ms) INSERT INTO \u0026quot;tweets\u0026quot; (\u0026quot;body\u0026quot;, \u0026quot;created_at\u0026quot;, \u0026quot;updated_at\u0026quot;) VALUES ($1, $2, $3) RETURNING \u0026quot;id\u0026quot; [[\u0026quot;body\u0026quot;, \u0026quot;Fourth Tweet\u0026quot;], [\u0026quot;created_at\u0026quot;, \u0026quot;2021-02-28 20:12:59.221408\u0026quot;], [\u0026quot;updated_at\u0026quot;, \u0026quot;2021-02-28 20:12:59.221408\u0026quot;]] ↳ app/controllers/tweets_controller.rb:28:in `block in create' TRANSACTION (2.4ms) COMMIT ↳ app/controllers/tweets_controller.rb:28:in `block in create' Rendered tweets/_tweet.html.erb (Duration: 1.7ms | Allocations: 416) [ActionCable] Broadcasting to tweets: \u0026quot;\u0026lt;turbo-stream action=\\\u0026quot;prepend\\\u0026quot; target=\\\u0026quot;tweets\\\u0026quot;\u0026gt;\u0026lt;template\u0026gt;\u0026lt;div class=\\\u0026quot;card card-body\\\u0026quot;\u0026gt;\\n \u0026lt;div\u0026gt;Fourth Tweet\u0026lt;/div\u0026gt;\\n\\n \u0026lt;div class=\\\u0026quot;mt-2\\\u0026quot;\u0026gt;\\n \u0026lt;a class=\\\u0026quot;btn btn-sm btn-outline-success\\\u0026quot; rel=\\\u0026quot;nofollow\\\u0026quot; data-method=\\\u0026quot;post\\\u0026quot; href=\\\u0026quot;/tweets/7/like\\\u0026quot;\u0026gt;Like (0)\u0026lt;/a\u0026gt;\\n\\n \u0026lt;a class=\\\u0026quot;btn btn-sm btn-outline-info\\\u0026quot; rel=\\\u0026quot;nofollow\\\u0026quot; data-method=\\\u0026quot;post\\\u0026quot; href=\\\u0026quot;/tweets/7/retweet\\\u0026quot;\u0026gt;Retweet (0)\u0026lt;/a\u0026gt;\\n\\n \u0026lt;a class=\\\u0026quot;btn btn-sm btn-outline-primary\\\u0026quot; href=\\\u0026quot;/tweets/7/edit\\\u0026quot;\u0026gt;Edit\u0026lt;/a\u0026gt;\\n\\n \u0026lt;a data-confirm=\\\u0026quot;Are you sure?\\\u0026quot; class=\\\u0026quot;btn btn-sm btn-outline-danger\\\u0026quot; rel=\\\u0026quot;nofollow\\\u0026quot; data-method=\\\u0026quot;delete\\\u0026quot; href=\\\u0026quot;/tweets/7\\\u0026quot;\u0026gt;Destroy\u0026lt;/a\u0026gt;\\n \u0026lt;/div\u0026gt;\\n\u0026lt;/div\u0026gt;\\n\u0026lt;/template\u0026gt;\u0026lt;/turbo-stream\u0026gt;\u0026quot; Redirected to http://localhost:3000/tweets Completed 302 Found in 105ms (ActiveRecord: 64.1ms | Allocations: 5636) Turbo::StreamsChannel transmitting \u0026quot;\u0026lt;turbo-stream action=\\\u0026quot;prepend\\\u0026quot; target=\\\u0026quot;tweets\\\u0026quot;\u0026gt;\u0026lt;template\u0026gt;\u0026lt;div class=\\\u0026quot;card card-body\\\u0026quot;\u0026gt;\\n \u0026lt;div\u0026gt;Fourth Tweet\u0026lt;/div\u0026gt;\\n\\n \u0026lt;div class=\\\u0026quot;mt-2\\\u0026quot;\u0026gt;\\n \u0026lt;a class=\\\u0026quot;btn btn-sm btn-outline-success\\\u0026quot; rel=\\\u0026quot;nofollow\\\u0026quot; data-method=\\\u0026quot;post\\\u0026quot; href=\\\u0026quot;/tweets/7/like\\\u0026quot;\u0026gt;Like (0)\u0026lt;/a\u0026gt;\\n\\n \u0026lt;a class=\\\u0026quot;btn btn-s... (via streamed from tweets) Turbo::StreamsChannel transmitting \u0026quot;\u0026lt;turbo-stream action=\\\u0026quot;prepend\\\u0026quot; target=\\\u0026quot;tweets\\\u0026quot;\u0026gt;\u0026lt;template\u0026gt;\u0026lt;div class=\\\u0026quot;card card-body\\\u0026quot;\u0026gt;\\n \u0026lt;div\u0026gt;Fourth Tweet\u0026lt;/div\u0026gt;\\n\\n \u0026lt;div class=\\\u0026quot;mt-2\\\u0026quot;\u0026gt;\\n \u0026lt;a class=\\\u0026quot;btn btn-sm btn-outline-success\\\u0026quot; rel=\\\u0026quot;nofollow\\\u0026quot; data-method=\\\u0026quot;post\\\u0026quot; href=\\\u0026quot;/tweets/7/like\\\u0026quot;\u0026gt;Like (0)\u0026lt;/a\u0026gt;\\n\\n \u0026lt;a class=\\\u0026quot;btn btn-s... (via streamed from tweets) Started GET \u0026quot;/tweets\u0026quot; for 127.0.0.1 at 2021-02-28 21:12:59 +0100 Processing by TweetsController#index as TURBO_STREAM Rendering layout layouts/application.html.erb Rendering tweets/index.html.erb within layouts/application Rendered tweets/_form.html.erb (Duration: 2.6ms | Allocations: 501) Tweet Load (41.8ms) SELECT \u0026quot;tweets\u0026quot;.* FROM \u0026quot;tweets\u0026quot; ORDER BY \u0026quot;tweets\u0026quot;.\u0026quot;created_at\u0026quot; DESC ↳ app/views/tweets/index.html.erb:15 Rendered collection of tweets/_tweet.html.erb [3 times] (Duration: 1.3ms | Allocations: 429) Rendered tweets/index.html.erb within layouts/application (Duration: 50.7ms | Allocations: 2283) [Webpacker] Everything's up-to-date. Nothing to do Rendered layout layouts/application.html.erb (Duration: 75.7ms | Allocations: 7207) Completed 200 OK in 80ms (Views: 34.9ms | ActiveRecord: 41.8ms | Allocations: 7831)  There is a bunch of interesting information, but for now I just want to point out the only thing sent was the new html to display:\n[ActionCable] Broadcasting to tweets: \u0026quot;\u0026lt;turbo-stream action=\\\u0026quot;prepend\\\u0026quot; target=\\\u0026quot;tweets\\\u0026quot;\u0026gt;\u0026lt;template\u0026gt;\u0026lt;div class=\\\u0026quot;card card-body\\\u0026quot;\u0026gt;\\n \u0026lt;div\u0026gt;Fourth Tweet\u0026lt;/div\u0026gt;\\n\\n \u0026lt;div class=\\\u0026quot;mt-2\\\u0026quot;\u0026gt;\\n \u0026lt;a class=\\\u0026quot;btn btn-sm btn-outline-success\\\u0026quot; rel=\\\u0026quot;nofollow\\\u0026quot; data-method=\\\u0026quot;post\\\u0026quot; href=\\\u0026quot;/tweets/7/like\\\u0026quot;\u0026gt;Like (0)\u0026lt;/a\u0026gt;\\n\\n \u0026lt;a class=\\\u0026quot;btn btn-sm btn-outline-info\\\u0026quot; rel=\\\u0026quot;nofollow\\\u0026quot; data-method=\\\u0026quot;post\\\u0026quot; href=\\\u0026quot;/tweets/7/retweet\\\u0026quot;\u0026gt;Retweet (0)\u0026lt;/a\u0026gt;\\n\\n \u0026lt;a class=\\\u0026quot;btn btn-sm btn-outline-primary\\\u0026quot; href=\\\u0026quot;/tweets/7/edit\\\u0026quot;\u0026gt;Edit\u0026lt;/a\u0026gt;\\n\\n \u0026lt;a data-confirm=\\\u0026quot;Are you sure?\\\u0026quot; class=\\\u0026quot;btn btn-sm btn-outline-danger\\\u0026quot; rel=\\\u0026quot;nofollow\\\u0026quot; data-method=\\\u0026quot;delete\\\u0026quot; href=\\\u0026quot;/tweets/7\\\u0026quot;\u0026gt;Destroy\u0026lt;/a\u0026gt;\\n \u0026lt;/div\u0026gt;\\n\u0026lt;/div\u0026gt;\\n\u0026lt;/template\u0026gt;\u0026lt;/turbo-stream\u0026gt;\u0026quot; Redirected to http://localhost:3000/tweets  Using websockets to send html to the parts of the webpage that need to be updated is very efficient.\nSince the broadcast is at the model level, we can even create a new tweet on the cli and all our web-clients will update:\nbin/rails c Tweet.create(body: \u0026quot;CLI tweet appears\u0026quot;)  Lets make a snapshot:\ngit add . git commit -m \u0026quot;new tweets are broadcast to all clients\u0026quot;  Broadcast Deleted Tweets to all Clients we need to add another broadcast to the model:\n# app/models/tweet.rb class Tweet \u0026lt; ApplicationRecord validates :body, presence: true # broadcast \u0026quot;tweets\u0026quot; send all changes to the `turbo_stream` view \u0026quot;tweets\u0026quot; # `broadcast_prepend_to` places new information at the top instead of appending to the bottom after_create_commit { broadcast_prepend_to \u0026quot;tweets\u0026quot; } after_destroy_commit { broadcast_remove_to \u0026quot;tweets\u0026quot; } end  But for this to work we will need to create frames around every tweet so we can find and delete the individual tweet to do this we will at a tag to our _tweet partial.\n# app/views/tweets/_tweet.html.erb \u0026lt;!-- this tag with `tweet` instead of 'tweets' identifies an individual tweet --\u0026gt; \u0026lt;%= turbo_frame_tag tweet do %\u0026gt; \u0026lt;div class=\u0026quot;card card-body\u0026quot;\u0026gt; \u0026lt;div\u0026gt;\u0026lt;%= tweet.body %\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;mt-2\u0026quot;\u0026gt; \u0026lt;%= link_to \u0026quot;Like (#{tweet.likes})\u0026quot;, tweet_like_path(tweet), method: :post, class: \u0026quot;btn btn-sm btn-outline-success\u0026quot; %\u0026gt; \u0026lt;%= link_to \u0026quot;Retweet (#{tweet.retweets})\u0026quot;, tweet_retweet_path(tweet), method: :post, class: \u0026quot;btn btn-sm btn-outline-info\u0026quot; %\u0026gt; \u0026lt;%= link_to 'Edit', edit_tweet_path(tweet), class: \u0026quot;btn btn-sm btn-outline-primary\u0026quot; %\u0026gt; \u0026lt;%= link_to 'Destroy', tweet_path(tweet), method: :delete, data: { confirm: 'Are you sure?' }, class: \u0026quot;btn btn-sm btn-outline-danger\u0026quot; %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt;  Now when you should be able to delete a tweet in the middle of the tweets and not reload the entire page index page. You will notice also that each tweet now has the turbo-frame border.\nIn the above image you can see we are deleting the 3rd tweet - in the middle of the tweets. And of course it works in both our web-clients because of the new broadcast and tags we added.\nLooking at the logs we see that we only send the information that is changing to each client:\nTurbo::StreamsChannel transmitting \u0026quot;\u0026lt;turbo-stream action=\\\u0026quot;remove\\\u0026quot; target=\\\u0026quot;tweet_6\\\u0026quot;\u0026gt;\u0026lt;/turbo-stream\u0026gt;\u0026quot; (via streamed from tweets) Turbo::StreamsChannel transmitting \u0026quot;\u0026lt;turbo-stream action=\\\u0026quot;remove\\\u0026quot; target=\\\u0026quot;tweet_6\\\u0026quot;\u0026gt;\u0026lt;/turbo-stream\u0026gt;\u0026quot; (via streamed from tweets)  here is the full transaction:\nStarted DELETE \u0026quot;/tweets/6\u0026quot; for 127.0.0.1 at 2021-02-28 21:45:44 +0100 Processing by TweetsController#destroy as TURBO_STREAM Parameters: {\u0026quot;authenticity_token\u0026quot;=\u0026gt;\u0026quot;[FILTERED]\u0026quot;, \u0026quot;id\u0026quot;=\u0026gt;\u0026quot;6\u0026quot;} Tweet Load (5.5ms) SELECT \u0026quot;tweets\u0026quot;.* FROM \u0026quot;tweets\u0026quot; WHERE \u0026quot;tweets\u0026quot;.\u0026quot;id\u0026quot; = $1 LIMIT $2 [[\u0026quot;id\u0026quot;, 6], [\u0026quot;LIMIT\u0026quot;, 1]] ↳ app/controllers/tweets_controller.rb:63:in `set_tweet' TRANSACTION (0.8ms) BEGIN ↳ app/controllers/tweets_controller.rb:53:in `destroy' Tweet Destroy (27.4ms) DELETE FROM \u0026quot;tweets\u0026quot; WHERE \u0026quot;tweets\u0026quot;.\u0026quot;id\u0026quot; = $1 [[\u0026quot;id\u0026quot;, 6]] ↳ app/controllers/tweets_controller.rb:53:in `destroy' TRANSACTION (30.8ms) COMMIT ↳ app/controllers/tweets_controller.rb:53:in `destroy' [ActionCable] Broadcasting to tweets: \u0026quot;\u0026lt;turbo-stream action=\\\u0026quot;remove\\\u0026quot; target=\\\u0026quot;tweet_6\\\u0026quot;\u0026gt;\u0026lt;/turbo-stream\u0026gt;\u0026quot; Redirected to http://localhost:3000/tweets Completed 302 Found in 234ms (ActiveRecord: 66.0ms | Allocations: 6664) Turbo::StreamsChannel transmitting \u0026quot;\u0026lt;turbo-stream action=\\\u0026quot;remove\\\u0026quot; target=\\\u0026quot;tweet_6\\\u0026quot;\u0026gt;\u0026lt;/turbo-stream\u0026gt;\u0026quot; (via streamed from tweets) Turbo::StreamsChannel transmitting \u0026quot;\u0026lt;turbo-stream action=\\\u0026quot;remove\\\u0026quot; target=\\\u0026quot;tweet_6\\\u0026quot;\u0026gt;\u0026lt;/turbo-stream\u0026gt;\u0026quot; (via streamed from tweets) Started GET \u0026quot;/tweets\u0026quot; for 127.0.0.1 at 2021-02-28 21:45:44 +0100 Processing by TweetsController#index as TURBO_STREAM Rendering layout layouts/application.html.erb Rendering tweets/index.html.erb within layouts/application Rendered tweets/_form.html.erb (Duration: 1.9ms | Allocations: 501) Tweet Load (1.6ms) SELECT \u0026quot;tweets\u0026quot;.* FROM \u0026quot;tweets\u0026quot; ORDER BY \u0026quot;tweets\u0026quot;.\u0026quot;created_at\u0026quot; DESC ↳ app/views/tweets/index.html.erb:15 Rendered collection of tweets/_tweet.html.erb [3 times] (Duration: 1.2ms | Allocations: 528) Rendered tweets/index.html.erb within layouts/application (Duration: 10.2ms | Allocations: 2380) [Webpacker] Everything's up-to-date. Nothing to do Rendered layout layouts/application.html.erb (Duration: 27.4ms | Allocations: 7296) Completed 200 OK in 31ms (Views: 26.6ms | ActiveRecord: 1.6ms | Allocations: 7918)  Let\u0026rsquo;s take another snapshot:\ngit add . git commit -m \u0026quot;broadcast deleted tweets via hotwire\u0026quot;  Edit / Updates to all clients! Turbo unlike Turbo-Links works with Forms as well as links. This allows us to edit our posts.\nStart with the Create Form Lets start by testing the create form as is with validation errors - if we enter a blank message we should get an error.\nNow lets put this form in a turbo-frame - since we will need this in a form for edit - lets start with the easy case - new / create - where the form will always be in the same location. Ideally, the turbo_stream_from definition is before the first turbo_frame_tag. Now your index view will look something like:\n# app/views/tweets/index.html.erb \u0026lt;p id=\u0026quot;notice\u0026quot;\u0026gt;\u0026lt;%= notice %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;!-- connects to the backend broadcast (via a channel) --\u0026gt; \u0026lt;%= turbo_stream_from \u0026quot;tweets\u0026quot; %\u0026gt; \u0026lt;h1\u0026gt;Tweets\u0026lt;/h1\u0026gt; \u0026lt;h4\u0026gt;New Tweet\u0026lt;/h4\u0026gt; \u0026lt;!-- the form needs to be in a frame - otherwise we can't edit in place --\u0026gt; \u0026lt;%= turbo_frame_tag \u0026quot;tweet-form\u0026quot; do %\u0026gt; \u0026lt;%= render \u0026quot;tweets/form\u0026quot;, tweet: @tweet %\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;h4\u0026gt;Tweet Feed\u0026lt;/h4\u0026gt; \u0026lt;!-- frame that receives the taged data --\u0026gt; \u0026lt;%= turbo_frame_tag \u0026quot;tweets\u0026quot; do %\u0026gt; \u0026lt;%= render @tweets %\u0026gt; \u0026lt;% end %\u0026gt;  Log file - from the log file we see we are still reloading the page see the line: Tweet Load (83.9ms) SELECT \u0026quot;tweets\u0026quot;.* FROM \u0026quot;tweets\u0026quot; ORDER BY \u0026quot;tweets\u0026quot;.\u0026quot;created_at\u0026quot;:\nStarted POST \u0026quot;/tweets\u0026quot; for 127.0.0.1 at 2021-03-01 20:55:34 +0100 Processing by TweetsController#create as TURBO_STREAM Parameters: {\u0026quot;authenticity_token\u0026quot;=\u0026gt;\u0026quot;[FILTERED]\u0026quot;, \u0026quot;tweet\u0026quot;=\u0026gt;{\u0026quot;body\u0026quot;=\u0026gt;\u0026quot;\u0026quot;}, \u0026quot;commit\u0026quot;=\u0026gt;\u0026quot;Create Tweet\u0026quot;} Rendering layout layouts/application.html.erb Rendering tweets/index.html.erb within layouts/application Rendered tweets/_form.html.erb (Duration: 4.9ms | Allocations: 1362) Tweet Load (83.9ms) SELECT \u0026quot;tweets\u0026quot;.* FROM \u0026quot;tweets\u0026quot; ORDER BY \u0026quot;tweets\u0026quot;.\u0026quot;created_at\u0026quot; DESC ↳ app/views/tweets/index.html.erb:23 Rendered collection of tweets/_tweet.html.erb [4 times] (Duration: 2.0ms | Allocations: 700) Rendered tweets/index.html.erb within layouts/application (Duration: 94.0ms | Allocations: 3159) [Webpacker] Everything's up-to-date. Nothing to do Rendered layout layouts/application.html.erb (Duration: 119.2ms | Allocations: 8006) Completed 422 Unprocessable Entity in 125ms (Views: 35.9ms | ActiveRecord: 83.9ms | Allocations: 9244)  To fix this we will need the form to have a tag id - to do this we can update the form with \u0026lt;%= form_with(model: tweet, id: dom_id(tweet)) do |form| %\u0026gt; - also:\n\u0026lt;%= form_with(model: tweet, id: dom_id(tweet)) do |form| %\u0026gt; \u0026lt;% if tweet.errors.any? %\u0026gt; \u0026lt;div id=\u0026quot;error_explanation\u0026quot;\u0026gt; \u0026lt;h2\u0026gt;\u0026lt;%= pluralize(tweet.errors.count, \u0026quot;error\u0026quot;) %\u0026gt; prohibited this tweet from being saved:\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;% tweet.errors.each do |error| %\u0026gt; \u0026lt;li\u0026gt;\u0026lt;%= error.full_message %\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;div class=\u0026quot;field\u0026quot;\u0026gt; \u0026lt;%= form.label :body %\u0026gt; \u0026lt;%= form.text_area :body %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;actions\u0026quot;\u0026gt; \u0026lt;%= form.submit %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt;  But even still we need to the controller how to use the turbo_stream. There are several ways (with and without a template). We will start without a tempate (actually the template info is inline) using: format.turbo_stream { render turbo_stream: turbo_stream.replace(@tweet, partial: \u0026quot;tweets/form\u0026quot;, locals: { tweet: @tweet}) }. Not the create controller should look like:\n# app/controllers/tweets_controller.rb def create @tweet = Tweet.new(tweet_params) respond_to do |format| if @tweet.save format.html { redirect_to tweets_url, notice: \u0026quot;Tweet was successfully created.\u0026quot; } format.json { render :show, status: :created, location: @tweet } else format.turbo_stream { render turbo_stream: turbo_stream.replace(@tweet, partial: \u0026quot;tweets/form\u0026quot;, locals: { tweet: @tweet}) } @tweets = Tweet.all.order(created_at: :desc) format.html { render :index, status: :unprocessable_entity } format.json { render json: @tweet.errors, status: :unprocessable_entity } end end end  Now when we create an invalid message we should see (notice the turbo-frame outline): When we look at the logs we can confirm we are using the TURBO_STREAM for both directions and NOT reloading the page (no LOAD in the log):\nStarted POST \u0026quot;/tweets\u0026quot; for 127.0.0.1 at 2021-03-01 21:22:13 +0100 Processing by TweetsController#create as TURBO_STREAM Parameters: {\u0026quot;authenticity_token\u0026quot;=\u0026gt;\u0026quot;[FILTERED]\u0026quot;, \u0026quot;tweet\u0026quot;=\u0026gt;{\u0026quot;body\u0026quot;=\u0026gt;\u0026quot;\u0026quot;}, \u0026quot;commit\u0026quot;=\u0026gt;\u0026quot;Create Tweet\u0026quot;} Rendered tweets/_form.html.erb (Duration: 3.0ms | Allocations: 1373) Completed 200 OK in 7ms (Views: 0.3ms | ActiveRecord: 0.0ms | Allocations: 2641)  Now that validation errors work again - lets be sure that we can still create a new tweet.\nAssuming all works - lets take a quick snapshot:\ngit add . git commit -m \u0026quot;new tweet form is hooked into turbo-stream and validations still work\u0026quot;  ????? Turbo - is clever enough to figure out the routing in the default case and will use its own stream to update the page - however you could also define an explicit stream - something like: format.turbo_stream { render turbo_stream: turbo_stream.prepend(@tweet, locals: { tweet: @tweet}) } or with format.turbo_stream and a turbo view app/views/tweets/create.turbo_stream - containing: \u0026lt;%= %\u0026gt; ????\nIn-Place Edit In oder to do an in-place edit we will need yet another type of broadcast  after_update_commit { broadcast_replace_to \u0026quot;tweets\u0026quot; } so our new model will now look like:\n# app/models/tweet.rb class Tweet \u0026lt; ApplicationRecord validates :body, presence: true # broadcast \u0026quot;tweets\u0026quot; send all changes to the `turbo_stream` view \u0026quot;tweets\u0026quot; # `broadcast_prepend_to` places new information at the top instead of appending to the bottom after_create_commit { broadcast_prepend_to \u0026quot;tweets\u0026quot; } after_destroy_commit { broadcast_remove_to \u0026quot;tweets\u0026quot; } after_update_commit { broadcast_replace_to \u0026quot;tweets\u0026quot; } end  Now would hope it would all work, but when we click on Edit, the item disappears (and re-appears on reload). Lets look at the logs:\nStarted GET \u0026quot;/tweets/11/edit\u0026quot; for 127.0.0.1 at 2021-03-03 20:10:53 +0100 Processing by TweetsController#edit as HTML Parameters: {\u0026quot;id\u0026quot;=\u0026gt;\u0026quot;11\u0026quot;} Tweet Load (0.7ms) SELECT \u0026quot;tweets\u0026quot;.* FROM \u0026quot;tweets\u0026quot; WHERE \u0026quot;tweets\u0026quot;.\u0026quot;id\u0026quot; = $1 LIMIT $2 [[\u0026quot;id\u0026quot;, 11], [\u0026quot;LIMIT\u0026quot;, 1]] ↳ app/controllers/tweets_controller.rb:68:in `set_tweet' Rendering tweets/edit.html.erb Rendered tweets/_form.html.erb (Duration: 2.3ms | Allocations: 676) Rendered tweets/edit.html.erb (Duration: 3.8ms | Allocations: 980) Completed 200 OK in 8ms (Views: 4.5ms | ActiveRecord: 0.7ms | Allocations: 2104)  We see that it loads the tweet and sends it to the edit.html.erb page (which loads the form partial), but we don\u0026rsquo;t see anything but the index page (minus the tweet we wanted to edit). Unfortunately, Hotwire, doesn\u0026rsquo;t provide an error, it just doesn\u0026rsquo;t find a location to render the edit on our index (since the edit link is within a stream tag) and just replaces our dom_id with nothing. Here is where Hotwire could provide much better feedback.\nIn any case, the fix is straightforward, we need to tell Rails what in the edit page goes into the index page so we can do that with another frame_tag: \u0026lt;%= turbo_frame_tag dom_id(@tweet) do %\u0026gt; Now the edit.html.erb page should look like:\n# app/views/tweets/edit.html.erb \u0026lt;h1\u0026gt;Editing Tweet\u0026lt;/h1\u0026gt; \u0026lt;%= turbo_frame_tag dom_id(@tweet) do %\u0026gt; \u0026lt;%= render 'form', tweet: @tweet %\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;%= link_to 'Show', @tweet %\u0026gt; | \u0026lt;%= link_to 'Back', tweets_path %\u0026gt;  NOTE: We don\u0026rsquo;t need to fix the form partial since we did that in the previous new step with by adding a dom_id tag to the form with: \u0026lt;%= form_with(model: tweet, id: dom_id(tweet)) do |form| %\u0026gt;.\nWe might notice that the edit page lacks formatting (the form is squished up against the left of our frame). This is because our tweet partial has a card div but that is lacking when replace the dom_id with the form \u0026ndash; we can easily fix this by adding the CSS to our edit page:\n# app/views/tweets/edit.html.erb \u0026lt;h1\u0026gt;Editing Tweet\u0026lt;/h1\u0026gt; \u0026lt;%= turbo_frame_tag dom_id(@tweet) do %\u0026gt; \u0026lt;div class=\u0026quot;card card-body\u0026quot;\u0026gt; \u0026lt;%= render 'form', tweet: @tweet %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;%= link_to 'Show', @tweet %\u0026gt; | \u0026lt;%= link_to 'Back', tweets_path %\u0026gt;  Now when we reload and try to edit \u0026ndash; we see what we expect: Now when we actually do an edit we see it all works as expected. From the logs we see it loads the tweet from the db, then the the edit page which loads the frame (this time it actually places it into the dom_id we provided, but unfortunately, we can\u0026rsquo;t see that from the logs)! And we can see that when we submit the edit \u0026ndash; the tweet model sends out the html patch send to both windows we have open.\nStarted GET \u0026quot;/tweets/11/edit\u0026quot; for 127.0.0.1 at 2021-03-03 20:34:56 +0100 Processing by TweetsController#edit as HTML Parameters: {\u0026quot;id\u0026quot;=\u0026gt;\u0026quot;11\u0026quot;} Tweet Load (1.0ms) SELECT \u0026quot;tweets\u0026quot;.* FROM \u0026quot;tweets\u0026quot; WHERE \u0026quot;tweets\u0026quot;.\u0026quot;id\u0026quot; = $1 LIMIT $2 [[\u0026quot;id\u0026quot;, 11], [\u0026quot;LIMIT\u0026quot;, 1]] ↳ app/controllers/tweets_controller.rb:68:in `set_tweet' Rendering tweets/edit.html.erb Rendered tweets/_form.html.erb (Duration: 2.5ms | Allocations: 649) Rendered tweets/edit.html.erb (Duration: 3.8ms | Allocations: 985) Completed 200 OK in 9ms (Views: 5.3ms | ActiveRecord: 1.0ms | Allocations: 2110) Started PATCH \u0026quot;/tweets/11\u0026quot; for 127.0.0.1 at 2021-03-03 20:35:11 +0100 Processing by TweetsController#update as TURBO_STREAM Parameters: {\u0026quot;authenticity_token\u0026quot;=\u0026gt;\u0026quot;[FILTERED]\u0026quot;, \u0026quot;tweet\u0026quot;=\u0026gt;{\u0026quot;body\u0026quot;=\u0026gt;\u0026quot;jump! how high?\u0026quot;}, \u0026quot;commit\u0026quot;=\u0026gt;\u0026quot;Update Tweet\u0026quot;, \u0026quot;id\u0026quot;=\u0026gt;\u0026quot;11\u0026quot;} Tweet Load (1.1ms) SELECT \u0026quot;tweets\u0026quot;.* FROM \u0026quot;tweets\u0026quot; WHERE \u0026quot;tweets\u0026quot;.\u0026quot;id\u0026quot; = $1 LIMIT $2 [[\u0026quot;id\u0026quot;, 11], [\u0026quot;LIMIT\u0026quot;, 1]] ↳ app/controllers/tweets_controller.rb:68:in `set_tweet' TRANSACTION (1.0ms) BEGIN ↳ app/controllers/tweets_controller.rb:45:in `block in update' Tweet Update (58.8ms) UPDATE \u0026quot;tweets\u0026quot; SET \u0026quot;body\u0026quot; = $1, \u0026quot;updated_at\u0026quot; = $2 WHERE \u0026quot;tweets\u0026quot;.\u0026quot;id\u0026quot; = $3 [[\u0026quot;body\u0026quot;, \u0026quot;jump! how high?\u0026quot;], [\u0026quot;updated_at\u0026quot;, \u0026quot;2021-03-03 19:35:11.765970\u0026quot;], [\u0026quot;id\u0026quot;, 11]] ↳ app/controllers/tweets_controller.rb:45:in `block in update' TRANSACTION (2.3ms) COMMIT ↳ app/controllers/tweets_controller.rb:45:in `block in update' Rendered tweets/_tweet.html.erb (Duration: 2.0ms | Allocations: 499) [ActionCable] Broadcasting to tweets: \u0026quot;\u0026lt;turbo-stream action=\\\u0026quot;replace\\\u0026quot; target=\\\u0026quot;tweet_11\\\u0026quot;\u0026gt;\u0026lt;template\u0026gt;\u0026lt;!-- this tag with `tweet` instead of 'tweets' identifies an individual tweet --\u0026gt;\\n\u0026lt;turbo-frame id=\\\u0026quot;tweet_11\\\u0026quot;\u0026gt;\\n\\n\u0026lt;div class=\\\u0026quot;card card-body\\\u0026quot;\u0026gt;\\n \u0026lt;div\u0026gt;jump! how high?\u0026lt;/div\u0026gt;\\n\\n \u0026lt;div class=\\\u0026quot;mt-2\\\u0026quot;\u0026gt;\\n \u0026lt;a class=\\\u0026quot;btn btn-sm btn-outline-success\\\u0026quot; rel=\\\u0026quot;nofollow\\\u0026quot; data-method=\\\u0026quot;post\\\u0026quot; href=\\\u0026quot;/tweets/11/like\\\u0026quot;\u0026gt;Like (0)\u0026lt;/a\u0026gt;\\n\\n \u0026lt;a class=\\\u0026quot;btn btn-sm btn-outline-info\\\u0026quot; rel=\\\u0026quot;nofollow\\\u0026quot; data-method=\\\u0026quot;post\\\u0026quot; href=\\\u0026quot;/tweets/11/retweet\\\u0026quot;\u0026gt;Retweet (0)\u0026lt;/a\u0026gt;\\n\\n \u0026lt;a class=\\\u0026quot;btn btn-sm btn-outline-primary\\\u0026quot; href=\\\u0026quot;/tweets/11/edit\\\u0026quot;\u0026gt;Edit\u0026lt;/a\u0026gt;\\n\\n \u0026lt;a data-confirm=\\\u0026quot;Are you sure?\\\u0026quot; class=\\\u0026quot;btn btn-sm btn-outline-danger\\\u0026quot; rel=\\\u0026quot;nofollow\\\u0026quot; data-method=\\\u0026quot;delete\\\u0026quot; href=\\\u0026quot;/tweets/11\\\u0026quot;\u0026gt;Destroy\u0026lt;/a\u0026gt;\\n \u0026lt;/div\u0026gt;\\n\u0026lt;/div\u0026gt;\\n\\n\u0026lt;/turbo-frame\u0026gt;\u0026lt;/template\u0026gt;\u0026lt;/turbo-stream\u0026gt;\u0026quot; Redirected to http://localhost:3000/tweets Completed 302 Found in 116ms (ActiveRecord: 63.1ms | Allocations: 6308) Turbo::StreamsChannel transmitting \u0026quot;\u0026lt;turbo-stream action=\\\u0026quot;replace\\\u0026quot; target=\\\u0026quot;tweet_11\\\u0026quot;\u0026gt;\u0026lt;template\u0026gt;\u0026lt;!-- this tag with `tweet` instead of 'tweets' identifies an individual tweet --\u0026gt;\\n\u0026lt;turbo-frame id=\\\u0026quot;tweet_11\\\u0026quot;\u0026gt;\\n\\n\u0026lt;div class=\\\u0026quot;card card-body\\\u0026quot;\u0026gt;\\n \u0026lt;div\u0026gt;jump! how high?\u0026lt;/div\u0026gt;\\n\\n \u0026lt;div class=\\\u0026quot;mt-2\\\u0026quot;\u0026gt;\\n \u0026lt;a class=\\\u0026quot;btn btn-sm btn... (via streamed from tweets) Turbo::StreamsChannel transmitting \u0026quot;\u0026lt;turbo-stream action=\\\u0026quot;replace\\\u0026quot; target=\\\u0026quot;tweet_11\\\u0026quot;\u0026gt;\u0026lt;template\u0026gt;\u0026lt;!-- this tag with `tweet` instead of 'tweets' identifies an individual tweet --\u0026gt;\\n\u0026lt;turbo-frame id=\\\u0026quot;tweet_11\\\u0026quot;\u0026gt;\\n\\n\u0026lt;div class=\\\u0026quot;card card-body\\\u0026quot;\u0026gt;\\n \u0026lt;div\u0026gt;jump! how high?\u0026lt;/div\u0026gt;\\n\\n \u0026lt;div class=\\\u0026quot;mt-2\\\u0026quot;\u0026gt;\\n \u0026lt;a class=\\\u0026quot;btn btn-sm btn... (via streamed from tweets)  Lets add a cancel button to the form so we don\u0026rsquo;t need to reload the page to stop editing - we can do that with a show link \u0026lt;%= link_to \u0026quot;Cancel\u0026quot;, @tweet, class: \u0026quot;btn btn-sm btn-outline-danger\u0026quot; %\u0026gt; - so our form would now look like:\n# app/views/tweets/_form.html.erb \u0026lt;%= form_with(model: tweet, id: dom_id(tweet)) do |form| %\u0026gt; \u0026lt;% if tweet.errors.any? %\u0026gt; \u0026lt;div id=\u0026quot;error_explanation\u0026quot;\u0026gt; \u0026lt;h2\u0026gt;\u0026lt;%= pluralize(tweet.errors.count, \u0026quot;error\u0026quot;) %\u0026gt; prohibited this tweet from being saved:\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;% tweet.errors.each do |error| %\u0026gt; \u0026lt;li\u0026gt;\u0026lt;%= error.full_message %\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;div class=\u0026quot;field\u0026quot;\u0026gt; \u0026lt;%= form.label :body %\u0026gt; \u0026lt;%= form.text_area :body %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;action\u0026quot;\u0026gt; \u0026lt;%= form.submit class: \u0026quot;btn btn-sm btn-outline-success\u0026quot; %\u0026gt; \u0026lt;%= link_to \u0026quot;Cancel\u0026quot;, @tweet, class: \u0026quot;btn btn-sm btn-outline-danger\u0026quot; %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt;  Unfortunately, now when we hit cancel - the tweet disappears \u0026ndash; because @tweet points to the show page and our current show page has no turbo_frame with a dom_id. We can fix this by putting our show page (formatted like the tweet partial wrapped in a frame tag with a dom_id) - like:\n# app/views/tweets/show.html.erb \u0026lt;%= turbo_frame_tag dom_id(@tweet) do %\u0026gt; \u0026lt;div class=\u0026quot;card card-body\u0026quot;\u0026gt; \u0026lt;div\u0026gt;\u0026lt;%= @tweet.body %\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;mt-2\u0026quot;\u0026gt; \u0026lt;%= link_to \u0026quot;Like (#{@tweet.likes})\u0026quot;, tweet_like_path(@tweet), method: :post, class: \u0026quot;btn btn-sm btn-outline-success\u0026quot; %\u0026gt; \u0026lt;%= link_to \u0026quot;Retweet (#{@tweet.retweets})\u0026quot;, tweet_retweet_path(@tweet), method: :post, class: \u0026quot;btn btn-sm btn-outline-info\u0026quot; %\u0026gt; \u0026lt;%= link_to 'Edit', edit_tweet_path(@tweet), class: \u0026quot;btn btn-sm btn-outline-primary\u0026quot; %\u0026gt; \u0026lt;%= link_to 'Destroy', tweet_path(@tweet), method: :delete, data: { confirm: 'Are you sure?' }, class: \u0026quot;btn btn-sm btn-outline-danger\u0026quot; %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt;  However, this is a bit silly since this is basically the same as our partial and we have two places to change if we want to adjust our tweet layout \u0026ndash; so we can fix this by using the tweet partial:\n# app/views/tweets/show.html.erb \u0026lt;%= turbo_frame_tag dom_id(@tweet) do %\u0026gt; \u0026lt;%= render @tweet %\u0026gt; \u0026lt;% end %\u0026gt;  This works, but renders a tag inside a turbo_frame with the tweet dom_id inside the same turbo_frame with the same dom_id (I only noticed this since I have the css marking all turbo_frames): This is because the tweet partial also has a dom_id - and show will process whatever it finds \u0026ndash; but only sends whatever is marked by the dom_id.\nThis was a little tricky to notice at first without the HTML inspector \u0026ndash; since in show I used the explicit dom_id: \u0026lt;%= turbo_frame_tag @tweet do %\u0026gt; and in the tweet partial I used the implicit dom_id tag: \u0026lt;%= turbo_frame_tag tweet do %\u0026gt;. Unfortunately, for now Rails Turbo provides does not yet provide warnings when you render the same dom_id twice.\nIn any case, now it may be clear that the the proper solution is that show should now read like:\n# app/views/tweets/show.html.erb \u0026lt;%= render @tweet %\u0026gt;  Now when you inspect the HTML you will only see one dom_id for each tweet and since turbo only replaces items with the correct tags and ids - it renders the tweet partial now. This is all a bit tricky to debug, hopefully, with time more errors or logging will be added - but for now, I suggest adding \u0026lt;!-- --\u0026gt; HTML comments with the name of the file inside each turbo tag to ease debugging \u0026ndash; at least until everything works as wished.\nNow let\u0026rsquo;s be sure the validation still works for edit too. Try to submit an empty edit - we should see: because the form now has a dom_id and the validation errors are sent there.\nIf some other route is happening another way to fix this would be to add format.turbo_stream { render turbo_stream: turbo_stream.replace(@tweet, partial: \u0026quot;tweets/form\u0026quot;, locals: { tweet: @tweet}) } to the controller update method:\n# app/controllers/tweets_controller.rb def update respond_to do |format| if @tweet.update(tweet_params) format.html { redirect_to tweets_url, notice: \u0026quot;Tweet was successfully updated.\u0026quot; } format.json { render :show, status: :ok, location: @tweet } else format.turbo_stream { render turbo_stream: turbo_stream.replace(@tweet, partial: \u0026quot;tweets/form\u0026quot;, locals: { tweet: @tweet}) } format.html { render :edit, status: :unprocessable_entity } format.json { render json: @tweet.errors, status: :unprocessable_entity } end end end  OK - ideally all functionality in the edit form is now working well!\nTime for another snapshot:\ngit add . git commit -m \u0026quot;turbo frame now allows in-place edit and cancel edit without reloading\u0026quot;  Likes and Retweet I was able to get these special routes / actions to update just the calling browser, but unable to get these to broadcast to all open connections.\nResources I am particularly fond of the GoRails videos.\n  https://hotwire.dev/  https://turbo.hotwire.dev/  https://github.com/hotwired/hotwire-rails  https://www.youtube.com/watch?v=NtTfYfWAzw0  https://www.youtube.com/watch?v=77GvSdc2Pf8  https://www.youtube.com/watch?v=NtTfYfWAzw0  https://www.youtube.com/watch?v=MRv4XGu6QkY  https://gorails.com/episodes/hotwire-rails?autoplay=1  https://robrace.dev/build-a-twitter-clone-with-rails-hotwire/  https://blog.cloud66.com/taking-rails-to-the-next-level-with-hotwire/  https://betterprogramming.pub/hotwire-actiontext-and-rails-6-be025dce7d87  ","date":1614531420,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628294220,"objectID":"6af4ab15e6dfa3159fa3cb247e5ac009","permalink":"https://btihen.me/post_ruby_rails/rails_6_1_hotwire_simple_realtime/","publishdate":"2021-02-28T18:57:00+02:00","relpermalink":"/post_ruby_rails/rails_6_1_hotwire_simple_realtime/","section":"post_ruby_rails","summary":"A simple Single Page App using Rails and Hotwire","tags":["Rails","Hotwire","SPA","WebSocket","realtime"],"title":"Rails 6.1 - Hotwire (Simple Realtime SPA)","type":"post_ruby_rails"},{"authors":["Bill Tihen"],"categories":[],"content":"Overview This article is just to have a base app that stays on the index page. We will use this as a starting point for a more efficient single page app by updating this project with Hotwire in the next article Tweets - A Rails based Single Page App using Hotwire\n Hotwire allows us to build Single Page Apps using Ruby and Rails with nearly NO configuration! It allow very responsive web-applications as it reloads only the parts of the page that change via a socket. Hotwire using Turbo - an evolution of TurboLinks and as such is mobile friendly and in most cases can send the replacement HTML directly from the server to the client with minimal or no client side processing over websockets so there is minimal lag time.\nThis code can be found at: https://github.com/btihen/tweet_simulator_rails\nBasic Setup Create the project We\u0026rsquo;ll skip Turbolinks since Turbo replaces Turbolinks and also installs Stimulus\nrails new tweets -d postgresql -T --skip-turbolinks --skip-spring cd tweets git add . git commit -m \u0026quot;initial commit after creation\u0026quot;  I generally take a lot of git snapshots (and then squash them - so its easy to go back to a known good point if things don\u0026rsquo;t work out).\nCreate a Traditional Rails Tweet Clone Tweet Model We\u0026rsquo;ll scaffold the model to get all the parts we need\nbin/rails g scaffold tweet body:text likes:integer retweets:integer  We\u0026rsquo;ll update the migration to prevent blanks - make the migration file look like:\n# db/migrate/yyyymmddHHMMSS_create_tweets.rb class CreateTweets \u0026lt; ActiveRecord::Migration[6.1] def change create_table :tweets do |t| t.text :body, null: false t.integer :likes, null: false, default: 0 t.integer :retweets, null: false, default: 0 t.timestamps end end end  Now we should be able to successfully create and migrate out database\nbin/rails db:create bin/rails db:migrate  Given the Database restrictions we\u0026rsquo;ll add validations to the model. So now it should look like:\n# app/models/tweet.rb class Tweet \u0026lt; ApplicationRecord validates :body, presence: true end  Lets also point the root route at our tweets resource - so now it should look like:\n# config/routes.rb Rails.application.routes.draw do resources :tweets root to: \u0026quot;tweets#index\u0026quot; end  Lets start up rails and be sure everything works so far:\nbin/rails s  go to http://localhost:3000 and make and edit and delete some tweets.\nAssuming it works lets commit these changes.\ngit add . git commit -m \u0026quot;created tweet scaffold, validations and routes\u0026quot;  Let\u0026rsquo;s make this useable (more like a single page app) Lets start by fixing the following problems:\n the create form allows us to choose and edit likes and retweets tweets are listed in the opposite order in oldest to newest to create a new tweet we need to go to a separate new page creating and editing new tweets brings us to a show page (away from our index) message, likes, retweets, etc are all listed in one long table row (we\u0026rsquo;ll fix with some bootstrap css) likes and retweets are not usable  As mentioned users shouldn\u0026rsquo;t choose their likes and retweets: Now lets remove likes and retweets from our form:\n# app/views/tweets/_form.html.erb \u0026lt;%= form_with(model: tweet) do |form| %\u0026gt; \u0026lt;% if tweet.errors.any? %\u0026gt; \u0026lt;div id=\u0026quot;error_explanation\u0026quot;\u0026gt; \u0026lt;h2\u0026gt;\u0026lt;%= pluralize(tweet.errors.count, \u0026quot;error\u0026quot;) %\u0026gt; prohibited this tweet from being saved:\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;% tweet.errors.each do |error| %\u0026gt; \u0026lt;li\u0026gt;\u0026lt;%= error.full_message %\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;div class=\u0026quot;field\u0026quot;\u0026gt; \u0026lt;%= form.label :body %\u0026gt; \u0026lt;%= form.text_area :body %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;actions\u0026quot;\u0026gt; \u0026lt;%= form.submit %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt;  Now the form should look like: If you made several tweets you\u0026rsquo;ll notice that the tweets are in oldest to newest. We\u0026rsquo;ll fix that with the index controller sort order:\n# app/controllers/tweets_controller.rb class TweetsController \u0026lt; ApplicationController before_action :set_tweet, only: %i[ show edit update destroy ] def index @tweets = Tweet.all.order(created_at: :desc) end ... end  now tweets should be newest to oldest\nLet\u0026rsquo;s put our create tweet at the top of our index page\n# app/views/tweets/index.html.erb \u0026lt;p id=\u0026quot;notice\u0026quot;\u0026gt;\u0026lt;%= notice %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;h1\u0026gt;Tweets\u0026lt;/h1\u0026gt; \u0026lt;h4\u0026gt;New Tweet\u0026lt;/h4\u0026gt; \u0026lt;%= render \u0026quot;tweets/form\u0026quot;, tweet: @tweet %\u0026gt; \u0026lt;h4\u0026gt;Tweet Feed\u0026lt;/h4\u0026gt;  now when we check out index page again \u0026ndash; oops, we get an error: errors is null because the new instance isn\u0026rsquo;t available we need to add a new tweet to our index page from the controller:\n# app/controllers/tweets_controller.rb class TweetsController \u0026lt; ApplicationController before_action :set_tweet, only: %i[ show edit update destroy ] def index # put newest tweets at the top of the page @tweets = Tweet.all.order(created_at: :desc) @tweet = Tweet.new end  Now when we view index we should be able to create a tweet on the index page: However, after creation we still go to show page and need to navigate back to the index page - lets fix that in the create controller. We will change the line:\nformat.html { redirect_to @tweet, notice: \u0026quot;Tweet was successfully created.\u0026quot; }\nwith:\nformat.html { redirect_to tweets_url, notice: \u0026quot;Tweet was successfully created.\u0026quot; }\nWe will have the same problem with update \u0026ndash; so let\u0026rsquo;s fix them both. Now the controller should look like:\n# app/controllers/tweets_controller.rb def create @tweet = Tweet.new(tweet_params) respond_to do |format| if @tweet.save format.html { redirect_to tweets_url, notice: \u0026quot;Tweet was successfully created.\u0026quot; } format.json { render :show, status: :created, location: @tweet } else format.html { render :new, status: :unprocessable_entity } format.json { render json: @tweet.errors, status: :unprocessable_entity } end end end def update respond_to do |format| if @tweet.update(tweet_params) format.html { redirect_to tweet_url, notice: \u0026quot;Tweet was successfully updated.\u0026quot; } format.json { render :show, status: :ok, location: @tweet } else format.html { render :edit, status: :unprocessable_entity } format.json { render json: @tweet.errors, status: :unprocessable_entity } end end end  now after we create a new tweet we should \u0026lsquo;stay\u0026rsquo; (it actually reloads - which could be slow if we had many tweets on the page - we will fix this with hotwire) on the index page and see: OK we are almost there, but we still have rows of tables and not a nice tweet feed look.\nLets add Bootstrap CSS for some modest beauty (you can copy this file or use the below link to get the newest Bootstrap CSS)\n# app/views/layout/application.html.erb \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Tweets\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width,initial-scale=1\u0026quot;\u0026gt; \u0026lt;%= csrf_meta_tags %\u0026gt; \u0026lt;%= csp_meta_tag %\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css\u0026quot; integrity=\u0026quot;sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l\u0026quot; crossorigin=\u0026quot;anonymous\u0026quot;\u0026gt; \u0026lt;%= stylesheet_link_tag 'application', media: 'all' %\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;%= yield %\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  you can get the newest bootstrap link from: https://getbootstrap.com/docs/ or https://www.bootstrapcdn.com/\nNow lets make a partial reformat our feed with bootstrap:\n# app/views/tweets/_tweet.html.erb \u0026lt;div class=\u0026quot;card card-body\u0026quot;\u0026gt; \u0026lt;div\u0026gt;\u0026lt;%= tweet.body %\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;mt-2\u0026quot;\u0026gt; \u0026lt;%= \u0026quot;Like (#{tweet.likes})\u0026quot; %\u0026gt; \u0026lt;%= \u0026quot;Retweet (#{tweet.retweets})\u0026quot; %\u0026gt; \u0026lt;%= link_to 'Edit', edit_tweet_path(tweet), class: \u0026quot;btn btn-sm btn-success\u0026quot; %\u0026gt; \u0026lt;%= link_to 'Destroy', tweet_path(tweet), method: :delete, data: { confirm: 'Are you sure?' }, class: \u0026quot;btn btn-sm btn-danger\u0026quot; %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;  Now lets integrate the tweet partial into the index page:\n# app/views/tweets/index.html.erb \u0026lt;p id=\u0026quot;notice\u0026quot;\u0026gt;\u0026lt;%= notice %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;h1\u0026gt;Tweets\u0026lt;/h1\u0026gt; \u0026lt;h4\u0026gt;New Tweet\u0026lt;/h4\u0026gt; \u0026lt;%= render \u0026quot;tweets/form\u0026quot;, tweet: @tweet %\u0026gt; \u0026lt;h4\u0026gt;Tweet Feed\u0026lt;/h4\u0026gt; \u0026lt;%= render @tweets %\u0026gt;  We now have an app that basically works from the index pages (not yet Edit, but without Hotwire, that\u0026rsquo;s difficult \u0026ndash; see the next article)\nLet\u0026rsquo;s take another git snapshot of \u0026lsquo;index\u0026rsquo; reloading app.\ngit add . git commit -m \u0026quot;tweet app mostly from the index page\u0026quot;  Activate likes and retweets To finish this simple app lets activate Likes and Retweets - we will do this with new controllers since this is an independent action from our tweet itself. We will use the create since we are creating a like or a retweet.\nLet\u0026rsquo;s build the like controller - we will redirect back to the index where we want to stay:\n# app/controllers/likes_controller.rb class LikesController \u0026lt; ApplicationController before_action :set_tweet def create @tweet.increment! :likes redirect_to tweets_url end private def set_tweet @tweet = Tweet.find(params[:tweet_id]) end end  And now the retweet controller:\n# app/controllers/retweets_controller.rb class RetweetsController \u0026lt; ApplicationController before_action :set_tweet def create @tweet.increment! :retweets redirect_to tweets_url end private def set_tweet @tweet = Tweet.find(params[:tweet_id]) end end  These controllers are dependent on the tweet so they are subroutes of a tweet - so lets update our routes to be:\n# config/routes.rb Rails.application.routes.draw do resources :tweets do resource :like, only: [:create] resource :retweet, only: [:create] end root to: \u0026quot;tweets#index\u0026quot; end  Now lets add the connection to controller in our front-end with buttons. Note we need to use the method: :post for our like and retweet create because these are normally posted by the edit form. In this case we want to bypass a form and just update.\n# app/views/tweets/_tweet.html.erb \u0026lt;div class=\u0026quot;card card-body\u0026quot;\u0026gt; \u0026lt;div\u0026gt;\u0026lt;%= tweet.body %\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;mt-2\u0026quot;\u0026gt; \u0026lt;%= link_to \u0026quot;Like (#{tweet.likes})\u0026quot;, tweet_like_path(tweet), method: :post, class: \u0026quot;btn btn-sm btn-outline-success\u0026quot; %\u0026gt; \u0026lt;%= link_to \u0026quot;Retweet (#{tweet.retweets})\u0026quot;, tweet_retweet_path(tweet), method: :post, class: \u0026quot;btn btn-sm btn-outline-info\u0026quot; %\u0026gt; \u0026lt;%= link_to 'Edit', edit_tweet_path(tweet), class: \u0026quot;btn btn-sm btn-outline-primary\u0026quot; %\u0026gt; \u0026lt;%= link_to 'Destroy', tweet_path(tweet), method: :delete, data: { confirm: 'Are you sure?' }, class: \u0026quot;btn btn-sm btn-outline-danger\u0026quot; %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;  Test that everything works as expected! Assuming it works - we will take another snapshot.\ngit add . git commit -m \u0026quot;likes and retweets enabled and also 'stay' on index page\u0026quot;  ","date":1613840220,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628294220,"objectID":"b72669ef53e1dae0bd77c5a70534bfbd","permalink":"https://btihen.me/post_ruby_rails/rails_6_1_single_page_app_simulate/","publishdate":"2021-02-20T18:57:00+02:00","relpermalink":"/post_ruby_rails/rails_6_1_single_page_app_simulate/","section":"post_ruby_rails","summary":"A simple Rails App that works off one page (a prep-project to build a Rails SPA with Hotwire)","tags":["Rails","Rails 6","Hotwire","SPA","HTML"],"title":"Tweets - A Single Page Rails App (using reloads)","type":"post_ruby_rails"},{"authors":["Bill Tihen"],"categories":["Education","EDgile","Practice","Classroom"],"content":"Stories, especially a Hero’s Journey, have a long and successful track record of creating engaging stories, movies, and, more recently, captivating ad campaigns for marketers and business executives. For several reasons, I also argue that the Hero’s Journey is very helpful in a learning context - especially if the students themselves are the authors of the story.\nFirst of all, stories allow students a variety of ways to engage with curriculum goals. I generally like to have students create a story related to the unit, giving them just enough guidelines to ensure a good challenge, while still clearly seeing if they have accomplished the goal, all without falling back on the teacher’s opinion.\nTo do this, I start with a statement For example, when creating a unit on biology and robotics, the goal was to have the students create a robot that would keep their plants alive over a two week vacation. If the robot fails, the garden dies. Or in a boat design / physics class, students were to design a boat that met at least one of three prescribed qualities and could survive at least one of three prescribed nautical challenges.\nThe second step is to have the students define a “future” or “imaginary” persona and a goal or reason that this persona is doing the project. I have them document their persona, since at the end of the project, they will present their story using that persona. Students are allowed to adjust their persona and goal as they progress.\nOnce students have chosen a persona, goal and purpose, they start the actual work on their project. At this point, most students are quite engaged since they have picked some aspect of the project that interests them and have found a way that the project and materials relate to their own world. By developing a purpose in the context of the story, they are more likely to be successful when they encounter the “challenge.”\nI am careful to design the projects so that there is no perfect solution and the projects represent a significant challenge. It is important that the students need to think through and explore several aspects of the topic to understand, in their opinion, the best way forward. Of course, it is important to make the whole endeavor doable. Like a good game, it starts off easy and gets progressively harder, building skills as the game - the story - progress. It helps to keep the students focused on the next immediate doable aspect of the project, while keeping an eye on moving toward their goal.\nAs the project gets more challenging and students are working toward the “impossible” perfection they seem to desire, it is important to be patient and supportive. When students struggle, they are learning. When they have to make difficult compromises to best arrive at their goal, or an acceptable variation of the goal, they are learning. Messy is how learning is.\nThe best way I have found to help the students, in addition to observing and guiding them during class, is to regularly review student progress with them, reflecting together on their progress. What about their work is effective? What could they try to be even more effective? What, indeed, does effective mean - to them?\nThe last step is to have the students present their purpose, personas, goal, and project. In short, their heroic journey.\nTo quickly compare the above project flow to an Agile process, including the kickoff, consider these steps:\n Kickoff meeting (define the goals and roles) Daily Standups \u0026amp; other Scrum activities External Scrum demo \u0026amp; Review of feedback Sprint Retrospective (reflecting on what can be even better)  Resources:\n  Hero’s Journey Defined Liftoff: Launching Agile Teams \u0026amp; Projects, by Diana Larsen \u0026amp; Ainsley Nies, (ISBN-13: 978-1680501636) The Agile Samurai: How Agile Masters Deliver Great Software, by Jonathan Rasmusson (ISBN-13 9781934356586)  Advice on Conduction Agile Project Kickoff Meetings, by Ben Kohen  How To Run A Project Kickoff Meeting (With Sample Agendas), by Ben Aston  Invoke/Involve Stories\nAllow students to dream a future and work with difficulties.\n  Common Structure of the Greatest Communicators - A TEDxEast talk by Nancy Duarte. Explores making the status quo unappealing and draw them forward to the future of what can be, drawing people in and using resistance to move forward.  The Clues to a Great Story - shares what he knows about storytelling \u0026ndash; starting at the end and working back to the beginning. A TED talk by Andrew Stanton, the writer behind \u0026ldquo;Toy Story\u0026rdquo; and \u0026ldquo;Wall-E\u0026rdquo; and \u0026ldquo;John Carter.\u0026rdquo; Contains graphic language.  The magical science of storytelling - a TEDxStockholm by David JP Phillips. David JP Phillips shares key neurological findings on storytelling and with the help of his own stories, induces in us the release of four neurotransmitters of his choice.  ","date":1609456580,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609456580,"objectID":"aabb4e2ca5962157f5af9a8c255a4f50","permalink":"https://btihen.me/post_edu/edgilty_btihen_heros_journey/","publishdate":"2021-01-01T01:16:20+02:00","relpermalink":"/post_edu/edgilty_btihen_heros_journey/","section":"post_edu","summary":"Generally people remember stories and much of children’s play involves taking on a persona.  Conveniently, many courses involve multiple units, thus allowing multiple rounds of “play” and “identity” for students. The stories they make need to be thoughtful and challenging enough that students successfully complete the “Hero’s Journey,” with a healthy sense of being  uplifted by the challenges encountered on the way. This is quite doable with a thoughtful implementation of an Agile Kickoff process. One of my favorite books on this subject is in the resources below.","tags":["choice","buy-in","student-directed learning","hero’s journey","challenge","story-telling"],"title":"The Hero's Journey","type":"post_edu"},{"authors":["Bill Tihen"],"categories":["Education","EDgile","Practice","Classroom"],"content":"I do what I can to create an environment where students can learn as much as possible both independently and from each other collaboratively. This has two large impacts. First, as a teacher I am mostly removed from continually correcting students. Second, as a teacher I have time to coach and guide the students when they need help and guidance, in a manner they are asking for. Teaching is much more joyful when you aren’t continually in a position of correcting and judging what is right. The classroom atmosphere is positively impacted as well.\nTo promote independent learning I do what I can to create learning situations (and projects) where natural feedback is integral to the learning process. Natural feedback comes about in circumstances where the student work itself produces the feedback with no dependence on the teacher. For example, while learning about designing boats, if students are printing their designs on a 3D printer, the students themselves will see how their boats float and how they react to adverse conditions, for example waves and wind. If the assignment asks students to test their boats by setting up a fan to blow across the test pool, they will see if their boat can travel across the pool without hitting the side wall or foundering. Or in math and physics students can do what we call sanity checks. Are their calculations plausible? Learning the skill of creating and learning from feedback that you control yourself is a transferable, life-worthy skill, that goes beyond the particular content of an activity or course.\nTo promote collaborative learning, I help students learn how to support each other by giving feedback that is easy to digest. Instead of promoting correction, I ask students to follow the Pixar additive feedback method (see the resources at the end for further information). In short, I have the following demo or presentation rules:\nAs a feedback giver: 1) stop and think, then 2) start with what you like and 3) say what you would like to see more of. There is no corrective feedback or discussions of what you dislike. Students (and the teacher) just offer what they would like to see more of. It’s ok, of course, if that feedback excludes some of what’s there!\nAs a demo presenter: 1) listen and 2) do not comment or or mount a defense to what you are hearing, but clarification questions are allowed and encouraged. After the demo, (3) stop and think; then (4) decide what suggestions to act upon and what not to act upon.\nStudents (and many teachers) are not very practiced at Pixar’s additive feedback, so practice is practice is essential. In fact, initially I guide all demos to ensure they learn the practices to feel safe while demoing, giving and getting additive feedback. After demos I do a quick reflection with the group to help them think through what ideas to use and what to disregard. Over time, the students get good at this and I no longer guide the demos.\nWhen \u0026rsquo;natural\u0026rsquo; feedback isn\u0026rsquo;t easy or when working with technical topics where there are multiple ways to solve a problem and when judgement is important. Then instead of emphasizing \u0026lsquo;additive\u0026rsquo; feedback, I turn to Dr. Michaela Greiler (Doctor McKayla) code review guidelines in her video Respectful, Constructive Code-Review Feedback. She developed these guidelines while working at Microsoft\u0026rsquo;s Research and Development Department while studying the effects of code reviews and feedback on team performance.\nI avoid the phrase \u0026ldquo;constructive feedback,\u0026rdquo; since that phrase is too often code for stating what you personally think is correct. When the teacher does that, from the position of power granted to teachers by way of assigning grades, for example, constructive feedback becomes another way to tell students what is right (according to the teacher) and what students should do. Encouraging additive feedback puts the focus on what the student is learning, not what the teacher is thinking.\nTo ensure that collaborative feedback is practiced I require every project to include at least one adjustment that students must credit to another student’s feedback when they hand-in or present their project.\nResources Technology companies focus on communication and feedback to create an environment of enthusiastic, engaged learners. Fundamentally, they are moving away from an \u0026lsquo;authoritative\u0026rsquo;, \u0026rsquo;telling\u0026rsquo; and \u0026lsquo;corrective\u0026rsquo; approach and instead toward an \u0026lsquo;amplifying\u0026rsquo;, \u0026lsquo;curious\u0026rsquo; and \u0026lsquo;collaborative\u0026rsquo; approach.\nPixar\u0026rsquo;s Plussing\nAmplifying feedback over silencing feedback.\n  Pixar\u0026rsquo;s \u0026ldquo;Plussing\u0026rdquo; - Feedback Tool - In this short video he describes how to use Pixar\u0026rsquo;s Plussing in the the classroom to improve learning and collaboration. David Lee is the Tech \u0026amp; Innovation Specialist at Singapore American School. He is also the author of Design Thinking in the Classroom.  Pixar’s Secret to giving Feedback - a short, clear article describing the differences between silencing and amplifying (\u0026lsquo;plussing\u0026rsquo; or \u0026lsquo;additive\u0026rsquo;) feedback.  How Pixar Fosters Collective Creativity, by Ed Catmull. A Harvard Business Review article that describes the misconception about creativity. The focus of the article is summarize with this quote: \u0026ldquo;The view that good ideas are rarer and more valuable than good people is rooted in a misconception of creativity.\u0026rdquo; Ed Catmull is the author of  Creativity, Inc.: Overcoming the Unseen Forces That Stand in the Way of True Inspiration, ISBN-13: 978-0593070109, by Ed Catmull (co-founder of Pixar) and Amy Wallace. This is the book that sparked a lot of interest in \u0026lsquo;additive\u0026rsquo; or \u0026lsquo;plussing\u0026rsquo; feedback.  Five ways Pixar makes Better Decisions - a Harvard Business Review article that describes how organizations with good judgment have a number of typical attributes. One is that they involve a number of different people in making important decisions. Their senior executives keep in mind that they don’t have a monopoly on knowledge and judgment and therefore involve multiple people in decision processes. Thomas H. Davenport is the President’s Distinguished Professor in Management and Information Technology at Babson College, a research fellow at the MIT Initiative on the Digital Economy, and a senior adviser at Deloitte Analytics. He is the author of over a dozen management books, most recently Only Humans Need Apply: Winners and Losers in the Age of Smart Machines and The AI Advantage.  Effective Feedback\nSharing perspective instead of authoritatively telling.\n  The secret to giving great feedback: The Way We Work, a TED series, by cognitive psychologist LeeAnn Renniger. She shares a scientifically proven method for giving effective feedback. Visit https://go.ted.com/thewaywework for more! She also has a book: Surprise: Embrace the Unpredictable and Engineer the Unexpected, ISBN-13 : 978-0399169823, by Tania Luna and LeeAnn Renninger PhD.  How to Give Respectful and Constructive Code Review Feedback - a short video by Dr. Michaela Greiler (Doctor McKayla) explaining 10 ways to respectfully collaborate and improve.  Technical Feedback (without being the sage on the stage)\n Dr. Michaela Greiler has a full length talk How To Phrase Respectful Code Review Feedback. She is also working on a Code Review Book.  What to Look for in a Code Review, by Trisha Gee of Jet Brains. She also has a talk Code Review Best Practices.  Agile Communication and Management Approaches (classroom management)\n  Become an Effective Software Engineering Manager: How to Be the Leader Your Development Team Needs, ISBN: 9781680507249, by James Stanier. This book is a reflection about how to go beyond agile and what has worked well at Spotify.  Teachers on Communication and Inspiration\n  Teaching Methods for Inspiring the Students of the Future - A TEDxLafayette talk by Joe Ruhl on working with students: Choice, Collaboration, Communication, Critical Thinking, Creativity and Caring.  What makes a good teacher great? - A TEDxSantoDomingo talk by Azul Terronez on connecting and listing to students and developing rapor.  ","date":1607123780,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607123780,"objectID":"a5968106974c9319866929c2a92f368d","permalink":"https://btihen.me/post_edu/explore_uplift_feedback/","publishdate":"2020-12-05T01:16:20+02:00","relpermalink":"/post_edu/explore_uplift_feedback/","section":"post_edu","summary":"Helpful feedback has little to do with what the teacher thinks, for example the pre-supposition the teacher makes about the outcomes of student projects, and is much more about developing an openness to what actually works and what others like, without an absolute truth either stated or implied by the curriculum. Let the students decide what to do by emphasizing these two types of feedback: - Natural feedback - Collaborative feedback ","tags":["feedback","collaboration","natural feedback","self-regulation"],"title":"Feedback: It's Not what You Think","type":"post_edu"},{"authors":["Bill Tihen"],"categories":["Code Editor"],"content":"Need to point Codium to MS extions? Do the following:\nLike Codium but need a MS Code Plugin?  https://stackoverflow.com/questions/37143536/no-extensions-found-when-running-visual-studio-code-from-source\nopen:\nvim /Applications/VSCodium.app/Contents/Resources/app/product.json\nThis can be fixed by adding following to product.json:\n\u0026quot;extensionsGallery\u0026quot;: { \u0026quot;serviceUrl\u0026quot;: \u0026quot;https://marketplace.visualstudio.com/_apis/public/gallery\u0026quot;, \u0026quot;cacheUrl\u0026quot;: \u0026quot;https://vscode.blob.core.windows.net/gallery/index\u0026quot;, \u0026quot;itemUrl\u0026quot;: \u0026quot;https://marketplace.visualstudio.com/items\u0026quot; }  ","date":1604359149,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1605223149,"objectID":"48987dda700e8e21d61f5477a22ee3db","permalink":"https://btihen.me/post_tech_notes/codium_plugins/","publishdate":"2020-11-03T01:19:09+02:00","relpermalink":"/post_tech_notes/codium_plugins/","section":"post_tech_notes","summary":"Learn to set-up mail catcher for safe email testing with an introduction to Docker","tags":["Codium","Editor","Plugin","Tooling"],"title":"Docker Intro using MailCatcher","type":"post_tech_notes"},{"authors":["Bill Tihen"],"categories":["Design","OpenSource"],"content":"Thesarus (word finder)   wordhippo - finds older and specialty words!  Code hightlights   https://highlightjs.org/usage/  Docs   https://plantuml.com/  https://dbdiagram.io/home  https://www.planttext.com/  https://plantuml.com/ie-diagram  https://www.quickdatabasediagrams.com/  https://graphviz.org/doc/info/lang.html  https://modeling-languages.com/uml-tools/#textual  https://mamchenkov.net/wordpress/2015/08/20/graphviz-dot-erds-network-diagrams  https://towardsdatascience.com/drawing-a-uml-diagram-in-the-vs-code-53c2e67deffe  Logos   https://logomakr.com/  https://www.freelogodesign.org/  https://www.namecheap.com/logo-maker/app/  https://hatchful.shopify.com/onboarding/pick-space\\  https://svgx.app/?ref=madewithsvelte.com  Slides   EagleJS - Vue Based  RevealJS - React Based  RemarkJS  GlideJS  Marp   I\u0026rsquo;m often looking for a way to make websites more interesting here are a few resources I use:\nDrawings  https://themeisle.com/blog/free-illustrations/\n  Undraw \u0026ndash; free to use drawings in SVG  manypixels - colors are adjustable!  stubborn.fun - new  drawkit  stories.freepick - with attribution  illlustrations  iradesign - can change the colors!  absurd - funky stuff  icons8 - images, drawings, photos, Icons!  humaaans - all about people and lots of adjustments  grapbox - images, drawings, photos, Icons!  uistore - mix of stuff  Photos - royalty free (without registration)   Unsplash  pexels  pixabay - (sometimes check if you are a robot :)  Image Editing - Free   Seashore Mac Store  Seashore Guide  Seashore Code  Gimp - Mac \u0026amp; Linux  Affinity Photo - paid  Web Drawing   Sketch - straight forward  Affinity Desinger - Paid - but also exports SVG  CSS - NextGen    Windi\n   ViteRuby/Rails\n   Vite/Windi/Rails\n   Vite/Windi/Rails6\n   AwesomeVite.js\n   RailsViewComponents\n   IntroRailsViewComponents\n   RailsViewComponents\n   RailsViewComponents\n   Vite/Phoenix/Article\n   Vite/Phoenix/DemoRepo\n  # learn to build a rails template! git clone https://github.com/justalever/kickoff_vite_rails.git rails new project --skip-webpack-install --skip-javascript -m kickoff_vite_rails/template.rb cd project bin/rails s bin/vite dev (in second window or with forman/overmind)  CSS   Bulma  tailwindcss  headlessui  tailwindui  tailwindtoolbar  CSS / AlpineJS / StimulusJS    AplineToolbox\n   Night/DayTailwindCSS\n   ResponsiveNavBarTailwindCSS\n   AccessibleNavWTailwind\n   NavBarTailwindCSS\n   Vue/Rails6\n   Vue/Rails6-WebCrunch\n   Vue/RailsAPI-WebCrunch\n   Vue/Rails6\n   Vue/Rails6/LevelUp\n   Vue/Buefy/Rails6\n   Buefy-BulmaUI\n  Icons   IonIcons  HeroIcons  SimpleIcons  FeatherIcons  themifyIcons - good variety and brands too  FontAwesome - Icons; many are completely free  FontAwesome6  Noun Project - Icons and photos for all to use (with attribution)  Octicons - free icons on github  Glyphicons - Icons in Bootstrap see also: https://getbootstrap.com/docs/3.3/components/  SimpleIcons  devicon  iconic  DB Svelte Tool   dbgate  SVG Text Logos Sometimes I find it hard to come up with a good logo, but not a shortname.\nWide larger Logo (for Desktop views)\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;svg viewBox=\u0026quot;0 0 240 45\u0026quot; xmlns=\u0026quot;http://www.w3.org/2000/svg\u0026quot;\u0026gt; \u0026lt;style\u0026gt; .heavy { font: bold 30px sans-serif; fill: blue;} .small { font: italic 25px sans-serif; fill: green; } \u0026lt;/style\u0026gt; \u0026lt;text x=\u0026quot;0\u0026quot; y=\u0026quot;35\u0026quot; class=\u0026quot;heavy\u0026quot; fill=\u0026quot;blue\u0026quot;\u0026gt;ED\u0026lt;/text\u0026gt; \u0026lt;text x=\u0026quot;41\u0026quot; y=\u0026quot;35\u0026quot; class=\u0026quot;small\u0026quot; fill=\u0026quot;green\u0026quot;\u0026gt;gility\u0026lt;/text\u0026gt; \u0026lt;/svg\u0026gt;  Small stacked logo (for mobile views)\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;svg viewBox=\u0026quot;0 0 45 45\u0026quot; xmlns=\u0026quot;http://www.w3.org/2000/svg\u0026quot;\u0026gt; \u0026lt;style\u0026gt; .heavy { font: bold 28px sans-serif; fill: blue;} .small { font: italic 18px sans-serif; fill: green; } \u0026lt;/style\u0026gt; \u0026lt;text x=\u0026quot;0\u0026quot; y=\u0026quot;22\u0026quot; class=\u0026quot;heavy\u0026quot; fill=\u0026quot;blue\u0026quot;\u0026gt;ED\u0026lt;/text\u0026gt; \u0026lt;text x=\u0026quot;0\u0026quot; y=\u0026quot;40\u0026quot; class=\u0026quot;small\u0026quot; fill=\u0026quot;green\u0026quot;\u0026gt;gility\u0026lt;/text\u0026gt; \u0026lt;/svg\u0026gt;  ","date":1604188636,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628294236,"objectID":"20b43838fd93900abb66c471f1b04a8b","permalink":"https://btihen.me/post_tech_notes/web_design_resources/","publishdate":"2020-11-01T01:57:16+02:00","relpermalink":"/post_tech_notes/web_design_resources/","section":"post_tech_notes","summary":"Looking for images, drawings, photos and icons -- here are a few helpful resources","tags":["icons","images","pictures","design"],"title":"Web Design Resources","type":"post_tech_notes"},{"authors":["Bill Tihen"],"categories":["Education","EDgile","Practice","Classroom"],"content":"Adaptability is the key or maybe even the definition of agility, as discussed in Paul’s article Adaptability article. In this article I’ll discuss how I try to instill adaptability as a classroom process for student learning. These practices are borrowed from tech companies and business consultants, but I am confident they can be applied in many contexts, including education, when properly adapted.\nWhen I first taught, I only led reflections at the end of a learning unit or project and I encouraged the students to think deeply and go into detail. However, I realized that students have little practice with reflecting on their learning process, making a deep retrospective impractical. Additionally, I encourage an exploratory approach in class, where the student goal purposely doesn’t align with easy-to-google solutions, so students need to learn and adapt as they go. It turns out students generally have little practice adapting as they go, perhaps because the learning path is too easy, or too clean. Thus even project work doesn’t usually involve deep thinking, thoughtful decisions, and compromises to accomplish their goals.\nMy solution was to introduce mini-reflections at the end of each class and then ask what, if anything, students would do differently in the next class. I ask one or two questions, usually from this list:\n What\u0026rsquo;s your goal? What\u0026rsquo;s your goal next class? What/who is allowing you to progress? What/who could help you progress with the next goal? What’s slowing you down? What obstacles are blocking your progress? What can you adjust, change or do more of to enjoy progress?  These mini-retrospectives last about a minute or so and happen on the way out of the class. Teachers will recognize the format as “exit tickets” or “pro-formas.” Because I taught engineering topics and students work in small groups of three to four, the process only takes about vie minutes and is integrated into the cleanup process. (Students are very good about getting started and being engaged - but cleanup seems to be easier to forget somehow. Those who are quicker to catch on do their mini-retrospective first). When the students have to return materials and clear their bench, I look at their work (their lab book and project) as they describe it and we jointly update their burn-down chart (an Agile progress tracking-tool \u0026amp; future blog-post) Importantly, I always ask what went well and how they can maintain and enjoy their progress. If needed, I might also ask what they test to get unstuck, to catch up, etc. Finally, I ask what they have in mind for the next class.\nThese are very quick and neutral discussions that give the students practice reflecting and being asked how they will adjust in a very low-stakes environment. This seems to be exactly the practice many students need. It also turns out that many students enjoy showing off their work at the end of each class. These are not corrective or judgmental teacher lead meetings, but rather quick coaching and check-ins - with the goal of guiding students to self-reflect and self-regulate. This approach can be uplifting and cultivate student confidence and appreciation for learning.\nThere’s research that shows positive interactions lead to positive outcomes - perhaps unsurprisingly - and plenty of reasons to build a sense of uplift into the teaching and learning environment. Uplift is also a practice of EDgility.\nOnce every week or so I meet with each student group during class and do a five-minute reflection (still short, but more in-depth than the one-minute check-ins) and we review more questions. This more in-depth reflection also seems to be important and is where students really start to cultivate confidence in their self-regulation.\nThese many small reflections encourage adaptability. With time students get good at reflection and self-regulation. At this point the students are ready to guide their reflections and self-regulation.\nOnce students have gotten to the point where they are self-reflecting and self-correcting, the students are well on their way with an Agile-Mindset and as self-regulated learners! In my mind, this is a very life-worthy skill.\nNote: Be prepared to be flexible and work with each group differently to meet their needs, different students and groups take longer or shorter to self-reflect and self-regulate. Creating a safe environment where exploration, success and progress are called out and celebrated - is critical, the students have plenty of other classes where correction and short-comings as seen by others (usually the teacher) is called out.\n","date":1601680588,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1601680588,"objectID":"e3867997eefa781511fdcdb015f40219","permalink":"https://btihen.me/post_edu/edgility_btihen_reflection/","publishdate":"2020-10-03T01:16:28+02:00","relpermalink":"/post_edu/edgility_btihen_reflection/","section":"post_edu","summary":"Frequent, even daily, mini-reflections lead to adaptable students and curriculums. Ideally, guide the students to where they are comfortable to self-reflect with you. This of course means guiding the kids to where they have the confidence and insight to self-reflect and self-correct instead of relying (or even fearing) external assessment and correction.","tags":["reflection","adaptability","retrospective","self-regulation","uplift"],"title":"Reflection: The Key to Adaptability","type":"post_edu"},{"authors":["Bill Tihen"],"categories":["Rails"],"content":"Intro TailwindCSS is a very flexible CSS framework and makes it easy to customize unique web pages and animations.\nUnfortunately, with Rails its a bit tricky to install and configure with Rails Standards.\n TailwindCSS 2.0 expects PostCSS 8 and Rails Webpacker uses PostCSS 7 (for now) TailwindCSS 2.0 expects AlpineJS, React or Vue \u0026ndash; by default Rails uses StimulusJS (although you can additionally install AlpineJS)  Rails Setup I am assuming you have followed the Rails setup described at: \nIn the end, I feel like its easier / better to use tailwindcss with AlpineJS since that is how it evolved and lots of Internet resources are available for that.\nInstall Tailwind CSS 2.0 Tailwind CSS 2.0 Install  https://tailwindcss.com/docs\nStart by installing the tailwindcss compatible with postcss7 (necessary until rails-webpacker updates to postcss8) \u0026ndash; with or without upgrading webpacker the following should work:\nyarn add tailwindcss@latest postcss@latest autoprefixer@latest # if you get this error: Error: PostCSS plugin tailwindcss requires PostCSS 8. use: # yarn add tailwindcss@npm:@tailwindcss/postcss7-compat postcss@^7 autoprefixer@^9  now install AlpineJS (its easier to use AlpineJS with tailwind but Stimulus works too - just need to do it all yourself - alpine and stimulus play well together in Rails). Add alpine turbo drive adapter so that the AlpineJS effects work even AFTER clicking on a link!\nyarn add alpinejs yarn add alpine-turbo-drive-adapter  If you see something like:\narn add aplinejs error An unexpected error occurred: “https://registry.yarnpkg.com/aplinejs: Not found”.  then check the spelling of the package(s).\nNow create the tailwind config file\nnpx tailwindcss init  now config tailwind:\n// tailwind.config.js module.exports = { purge: [ './app/**/*/*.html.erb', './app/helpers/**/*/*.rb', './app/javascript/**/*/*.js', './app/javascript/**/*/*.vue', './app/javascript/**/*/*.react' ], darkMode: false, // or 'media' or 'class' theme: { extend: {}, }, variants: { extend: {}, }, plugins: [ // not needed here ? // require('@tailwindcss/forms'), ], }  tell postcss.config.js about tailwind:\n/* postcss.config.js */ module.exports = { plugins: [ require(\u0026quot;tailwindcss\u0026quot;)(\u0026quot;./tailwind.config.js\u0026quot;), require(\u0026quot;postcss-import\u0026quot;), require(\u0026quot;postcss-flexbugs-fixes\u0026quot;), require(\u0026quot;postcss-preset-env\u0026quot;)({ autoprefixer: { flexbox: \u0026quot;no-2009\u0026quot;, }, stage: 3, }), ], }  create application.scss\nmkdir app/javascript/stylesheets touch app/javascript/stylesheets/application.scss cat \u0026lt;\u0026lt;EOF \u0026gt;app/javascript/stylesheets/application.scss /* app/javascript/stylesheets/application.scss */ @import \u0026quot;tailwindcss/base\u0026quot;; @import \u0026quot;tailwindcss/components\u0026quot;; @import \u0026quot;tailwindcss/utilities\u0026quot;; /* Add custom CSS here */ EOF  import tailwind into application.js\n/* app/javascript/packs/application.js */ import Rails from \u0026quot;@rails/ujs\u0026quot; import \u0026quot;@hotwired/turbo-rails\u0026quot; import * as ActiveStorage from \u0026quot;@rails/activestorage\u0026quot; import \u0026quot;channels\u0026quot; // import alpinejs and its necessary rails adaptation import 'alpine-turbo-drive-adapter' require(\u0026quot;alpinejs\u0026quot;) // import tailwind into javascript import \u0026quot;../stylesheets/application.scss\u0026quot; Rails.start() ActiveStorage.start() import \u0026quot;controllers\u0026quot; require(\u0026quot;trix\u0026quot;) require(\u0026quot;@rails/actiontext\u0026quot;)  It\u0026rsquo;s great to get samples from https://tailwindui.com (\u0026amp; other places) - USE THE INSPECTOR to copy the HTML (this will copy the AlpineJS settings too) - the standard copy HTML button requires you to add the JS on your own.\ncreate a navbar:\ntouch app/views/layouts/_navbar.html.erb cat \u0026lt;\u0026lt;EOF \u0026gt;app/views/layouts/_navbar.html.erb \u0026lt;nav x-data=\u0026quot;{ open: false }\u0026quot; class=\u0026quot;bg-gray-800\u0026quot;\u0026gt; \u0026lt;!-- NavBar here --\u0026gt; \u0026lt;/nav\u0026gt; EOF  Create a footer:\n\u0026lt;!-- app/views/layouts/_footer.html.erb --\u0026gt; \u0026lt;footer class=\u0026quot;bg-gray-50\u0026quot; aria-labelledby=\u0026quot;footerHeading\u0026quot;\u0026gt; \u0026lt;h2 id=\u0026quot;footerHeading\u0026quot; class=\u0026quot;sr-only\u0026quot;\u0026gt;Company\u0026lt;/h2\u0026gt; \u0026lt;div class=\u0026quot;max-w-md mx-auto pt-12 px-4 sm:max-w-7xl sm:px-6 lg:pt-16 lg:px-8\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;xl:grid xl:grid-cols-3 xl:gap-8\u0026quot;\u0026gt; Some Footer Info \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;mt-12 border-t border-gray-200 py-8\u0026quot;\u0026gt; \u0026lt;p class=\u0026quot;text-base text-gray-400 xl:text-center\u0026quot;\u0026gt; \u0026amp;copy; 2020 Company, Inc. All rights reserved. \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt;  Update the landing page:\n\u0026lt;!-- app/views/landing/index.html.erb --\u0026gt; \u0026lt;!-- landing page here --\u0026gt;  application.html.erb needs to import the javascript stylesheet and the navbar\n\u0026lt;!-- app/views/layouts/application.html.erb --\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Vivers\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width,initial-scale=1\u0026quot;\u0026gt; \u0026lt;%= csrf_meta_tags %\u0026gt; \u0026lt;%= csp_meta_tag %\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://rsms.me/inter/inter.css\u0026quot;\u0026gt; \u0026lt;%= stylesheet_link_tag 'application', media: 'all' %\u0026gt; \u0026lt;%= stylesheet_pack_tag 'application', media: 'all' %\u0026gt; \u0026lt;%= javascript_pack_tag 'application' %\u0026gt; \u0026lt;%= yield :head %\u0026gt; \u0026lt;%= turbo_include_tags %\u0026gt; \u0026lt;%# stimulus_include_tags %\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;div class=\u0026quot;pb-32\u0026quot;\u0026gt; \u0026lt;%= render 'layouts/navbar' %\u0026gt; \u0026lt;header class=\u0026quot;py-10\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;max-w-9xl mx-auto px-4 sm:px-6 lg:px-8\u0026quot;\u0026gt; \u0026lt;p class=\u0026quot;notice\u0026quot;\u0026gt;\u0026lt;%= notice %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026quot;alert\u0026quot;\u0026gt;\u0026lt;%= alert %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;h1 class=\u0026quot;text-3xl font-bold\u0026quot;\u0026gt; Dashboard \u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;main class=\u0026quot;-mt-32\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;max-w-9xl mx-auto pb-12 px-4 sm:px-6 lg:px-8\u0026quot;\u0026gt; \u0026lt;%= yield %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;%= render 'layouts/footer' %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  You may need to want rails with both (to increase reload speed after changes \u0026ndash; but bin/rails s is enough):\nbin/rails s # runnding the following in a separate window tends to speed CSS / JS recompilation ./bin/webpack-dev-server  Install Tailwind SVG Icons You can embed the Icon directly into the View - downloading from:\n https://heroicons.dev/ https://heroicons.com/\nHowever, you can also use a gem and add flexibility:\n https://github.com/bharget/heroicon\nIn gemfile\ngem \u0026quot;heroicon\u0026quot;  From CLI:\nbundle rails g heroicon:install  Usage:\n\u0026lt;%= heroicon \u0026quot;search\u0026quot; %\u0026gt; \u0026lt;%= heroicon \u0026quot;search\u0026quot;, variant: :outline %\u0026gt; \u0026lt;%= heroicon \u0026quot;search\u0026quot;, options: { class: \u0026quot;text-primary-500\u0026quot; } %\u0026gt;  or https://github.com/andrewjmead/rails_heroicons/\nGemfile\ngem 'rails_heroicons', '~\u0026gt; 1.0.1'  CLI\nbundle gem install rails_heroicons  Usage:\n\u0026lt;%= heroicon('user') %\u0026gt; \u0026lt;%= heroicon('user', class_name: 'icon icon-large') %\u0026gt; \u0026lt;%= heroicon('user', style: :outline, class_name: 'icon icon-large') %\u0026gt;  The classes magically update the SVG embedded using:\nUSE SVG Images / Icons in Rails \u0026ndash; HeroIcons or ZondIcons Downloaded SVG images in Rails: https://heroicons.com/ https://heroicons.dev/ http://www.zondicons.com/icons.html\nOR download the Icons and use the gem: https://github.com/jamesmartin/inline_svg\nGemfile:\ngem 'inline_svg'  CLI:\nbundle gem install inline_svg  USAGE:\n# Sprockets inline_svg_tag(file_name, options={}) # Webpacker inline_svg_pack_tag(file_name, options={})  OR without gem:\nyou can embed the SVG directly into rails using: https://dev.to/hslzr/using-inline-svgs-with-rails-3khb\nReference Articles  https://davidteren.medium.com/tailwindcss-2-0-with-rails-6-1-postcss-8-0-9645e235892d https://web-crunch.com/posts/how-to-install-tailwind-css-2-using-ruby-on-rails\n","date":1599698767,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628293567,"objectID":"010a9060dac2e0d03b65380c8b9f50d0","permalink":"https://btihen.me/post_ruby_rails/rails_6_1_tailwind_2_0_alpinejs/","publishdate":"2020-09-10T02:46:07+02:00","relpermalink":"/post_ruby_rails/rails_6_1_tailwind_2_0_alpinejs/","section":"post_ruby_rails","summary":"Intro TailwindCSS is a very flexible CSS framework and makes it easy to customize unique web pages and animations.\nUnfortunately, with Rails its a bit tricky to install and configure with Rails Standards.","tags":["rails 6","configure","install","tailwindcss","alpinejs"],"title":"Rails 6.1 with TailwindCSS 2.0 and AlpineJS","type":"post_ruby_rails"},{"authors":["Bill Tihen"],"categories":["Rails"],"content":"Intro To document is mostly for me \u0026ndash; at least until I automate my setup defaults. However, I am glad to share and get ideas from others too. I will build a little calendar app I use with friends (it\u0026rsquo;s focused on being mobile friendly and easy to use \u0026ndash; not a full featured calendar).\nRails Setup Taken from:\n  https://gist.github.com/alxndr/7569551  https://www.codewithjason.com/rails-integration-tests-rspec-capybara/  https://hackernoon.com/how-to-build-awesome-integration-tests-with-capybara-j9333y68  create the project: # -T - skips tests; I like rspec # -d postgresql; I like postgresql best for the db # --skip-spring --skip-listen; Spring caches and doesn't notice all changes (even after rails restart) # I have lost several hours not realizing Spring wasn't seeing my changes rails new calendar -T -d postgresql --webpack=stimulus --skip-turbolinks --skip-spring cd calendar # in some cases you may have serveral bundlers or need to create binstubs # gem install bundler:2.1.4 # rails app:update:bin  update the README and initialize Git git add . git commit -m \u0026quot;initial commit\u0026quot; git remote add origin git@gitlab.com:btihen/calendar.git git push -u origin master  Add extra Gems for this project add rspec, devise, factory_bot and stimulus_reflex\nExecute the following command (or add to the Gemfile)\ncat \u0026lt;\u0026lt;EOF \u0026gt;\u0026gt; Gemfile # Project Gems ############## # FRONT END ########### gem \u0026quot;hotwire-rails\u0026quot; # probably not needed as of Rails 7.x # gem \u0026quot;stimulus_reflex\u0026quot;, \u0026quot;~\u0026gt; 3.3\u0026quot; # probably superseeded by hotwire-rails # BACK END ########## gem 'devise' # DEV / TESTS ############# group :development, :test do gem 'awesome_print' # formats pry (\u0026amp; irb outputs into readable formats) gem 'pry-rails' gem 'pry-byebug' # Adds byebug's step debugging and stack navigation # gem 'pry-debugger' # adds step, continue, etc (alternative to pry-byebug) gem 'pry-stack_explorer' # easy stack traces when debugging # more pry gems if needed at: https://spin.atomicobject.com/2012/08/06/live-and-let-pry/ gem 'factory_bot_rails' gem 'faker' # gem 'rspec-rails' gem 'capybara' gem 'rspec-rails', '~\u0026gt; 4.0.0' # lets spring work with rspec gem 'spring-commands-rspec' end group :test do # easier tests (inside rspec) gem 'shoulda-matchers' # cucumber can test emails (rspec too?) # gem 'email_spec' # code coverage gem 'simplecov' gem 'simplecov-console' end EOF  Now uncomment a few Gems in the Original Gemfile Uncomment the following to ensure ActionText and Stimulus Refelx (work properly).\ngem 'image_processing', '~\u0026gt; 1.2'\nis needed by Active Storage (ActionText needs Active Storage)\nand\ngem 'redis', '~\u0026gt; 4.0'\nis needed by Stimulus Reflex (which uses Action Channels) to manage WebSockets\nInstall and configure base gems now run:\nbundle install\nto install all the new gems and create a Gemfile.lock\nInstall ActiveStorage and ActionText run the following commands:\n# bundle exec rails webpacker:install # bundle exec rails webpacker:install:stimulus bundle exec rails active_storage:install bundle exec rails action_text:install bin/rails hotwire:install bin/rails g devise:install bin/rails g rspec:install  Rspec: Config Files Create needed folders for our config mkdir spec/features # a place to put test helper code mkdir spec/support mkdir spec/support/features  Rspec Config file spec/rails_helper.rb  To enable integration tests with rspec add: require 'capybara/rspec' below require 'rspec/rails' To load Test helper code add: Dir[Rails.root.join(\u0026quot;spec/support/**/*.rb\u0026quot;)].each { |file| require file } below require 'capybara/rspec' just after the ActiveRecord config and before RSpec.configure block add:  Capybara.register_driver :selenium_chrome do |app| Capybara::Selenium::Driver.new(app, browser: :chrome) end Capybara.javascript_driver = :selenium_chrome  Add the FactoryBot config in the section with:  RSpec.configure do |config| # ... # support for Factory Bot config.include FactoryBot::Syntax::Methods # setup devise login helpers in Rspec config.include Devise::Test::IntegrationHelpers, type: :request # allows us for force session logouts (im feature tests) config.include Warden::Test::Helpers end  finally at the end of the file add support for shoulda matchers with:  Shoulda::Matchers.configure do |config| config.integrate do |with| with.test_framework :rspec with.library :rails end end  NOW spec/rails_helper.rb should look like (its long, sometimes the full context is clearer):\n# This file is copied to spec/ when you run 'rails generate rspec:install' require 'spec_helper' ENV['RAILS_ENV'] ||= 'test' require File.expand_path('../config/environment', __dir__) # Prevent database truncation if the environment is production abort(\u0026quot;The Rails environment is running in production mode!\u0026quot;) if Rails.env.production? require 'rspec/rails' # Add additional requires below this line. Rails is not loaded until this point! # enables integration/feature tests using rspec require 'capybara/rspec' # loads custom helper test code Dir[Rails.root.join(\u0026quot;spec/support/**/*.rb\u0026quot;)].each { |file| require file } # or you could use: # Dir[Rails.root.join('spec', 'support', '**', '*.rb')].sort.each { |f| require f } # Checks for pending migrations and applies them before tests are run. # If you are not using ActiveRecord, you can remove these lines. begin ActiveRecord::Migration.maintain_test_schema! rescue ActiveRecord::PendingMigrationError =\u0026gt; e puts e.to_s.strip exit 1 end # configure capybara integration tests Capybara.register_driver :selenium_chrome do |app| Capybara::Selenium::Driver.new(app, browser: :chrome) end Capybara.javascript_driver = :selenium_chrome RSpec.configure do |config| # Remove this line if you're not using ActiveRecord or ActiveRecord fixtures config.fixture_path = \u0026quot;#{::Rails.root}/spec/fixtures\u0026quot; # If you're not using ActiveRecord, or you'd prefer not to run each of your # examples within a transaction, remove the following line or assign false # instead of true. config.use_transactional_fixtures = true # You can uncomment this line to turn off ActiveRecord support entirely. # config.use_active_record = false # RSpec Rails can automatically mix in different behaviours to your tests # based on their file location, for example enabling you to call `get` and # `post` in specs under `spec/controllers`. # # You can disable this behaviour by removing the line below, and instead # explicitly tag your specs with their type, e.g.: # # RSpec.describe UsersController, type: :controller do # # ... # end # # The different available types are documented in the features, such as in # https://relishapp.com/rspec/rspec-rails/docs config.infer_spec_type_from_file_location! # Filter lines from Rails gems in backtraces. config.filter_rails_from_backtrace! # arbitrary gems may also be filtered via: # config.filter_gems_from_backtrace(\u0026quot;gem name\u0026quot;) # support for Factory Bot config.include FactoryBot::Syntax::Methods # setup devise login helpers in Rspec (login helpers) config.include Devise::Test::IntegrationHelpers, type: :request # allows us for force session logouts (im feature tests) config.include Warden::Test::Helpers end Shoulda::Matchers.configure do |config| config.integrate do |with| with.test_framework :rspec with.library :rails end end  Create / Test a landing page A simple config test before we setup devise (authentication).\n Generate a page \u0026ndash; I don\u0026rsquo;t (generally) use helpers nor contoller or view specs - so I\u0026rsquo;ll create the landing page using the following generator:  rails g controller Landing index --no-helper --no-assets --no-controller-specs --no-view-specs  Update Routes config/routes.rb with:  get 'landing/index' root to: \u0026quot;landing#index\u0026quot;  Add Hidden Test Content to simplify testing add:  \u0026lt;p hidden id='landing_index'\u0026gt;Landing Index\u0026lt;/p\u0026gt;  Request test:  # spec/requests/landing_request_spec.rb require 'rails_helper' RSpec.describe \u0026quot;Landings\u0026quot;, type: :request do describe \u0026quot;GET /index\u0026quot; do it \u0026quot;returns http success\u0026quot; do get \u0026quot;/landing/index\u0026quot; expect(response).to have_http_status(:success) expect(response.body).to include(\u0026quot;\u0026lt;p hidden id='landing_index'\u0026gt;Landing Index\u0026lt;/p\u0026gt;\u0026quot;) end end end  Feature Test (to be sure they are working too)  # spec/features/landing_page_spec.rb require 'rails_helper' RSpec.describe 'Landing Page Works without a login', type: :feature do scenario 'Visit landing Page' do visit root_path page_tag = find('p#landing_index', text: 'Landing Index', visible: false) expect(page_tag).to be_truthy end end  Test and commit\nrake db:migrate bundle exec rspec git add . git commit -m \u0026quot;rspec: unit and feature tests configured and landing page works\u0026quot; git push  Config Hotwire Ensure the In the end the app/views/layouts/application.html.erb looks like:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Tweets\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width,initial-scale=1\u0026quot;\u0026gt; \u0026lt;%= csrf_meta_tags %\u0026gt; \u0026lt;%= csp_meta_tag %\u0026gt; \u0026lt;!-- Bootstrap 4 if interested \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css\u0026quot; integrity=\u0026quot;sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l\u0026quot; crossorigin=\u0026quot;anonymous\u0026quot;\u0026gt; --\u0026gt; \u0026lt;%= stylesheet_link_tag 'application', media: 'all' %\u0026gt; \u0026lt;%= javascript_pack_tag 'application' %\u0026gt; \u0026lt;%= yield :head %\u0026gt; \u0026lt;%= turbo_include_tags %\u0026gt; \u0026lt;%# stimulus_include_tags %\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p class=\u0026quot;notice\u0026quot;\u0026gt;\u0026lt;%= notice %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026quot;alert\u0026quot;\u0026gt;\u0026lt;%= alert %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;%= yield %\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Devise / User Config Configure dev email for devise:\n# config/environments/development.rb: config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }  Create the user and migration\nrails g devise user # if you will make a custom login (probably needed to look nice) # rails g devise:views  Adjust the migration:\nclass DeviseCreateUsers \u0026lt; ActiveRecord::Migration[6.1] def change create_table :users do |t| ## Database authenticatable t.string :email, null: false, default: \u0026quot;\u0026quot; t.string :encrypted_password, null: false, default: \u0026quot;\u0026quot; ## Recoverable t.string :reset_password_token t.datetime :reset_password_sent_at ## Rememberable t.datetime :remember_created_at ## Trackable t.integer :sign_in_count, default: 0, null: false t.datetime :current_sign_in_at t.datetime :last_sign_in_at t.string :current_sign_in_ip t.string :last_sign_in_ip ## Confirmable # t.string :confirmation_token # t.datetime :confirmed_at # t.datetime :confirmation_sent_at # t.string :unconfirmed_email # Only if using reconfirmable ## Lockable # t.integer :failed_attempts, default: 0, null: false # Only if lock strategy is :failed_attempts # t.string :unlock_token # Only if unlock strategy is :email or :both # t.datetime :locked_at t.timestamps null: false end add_index :users, :email, unique: true add_index :users, :reset_password_token, unique: true # add_index :users, :confirmation_token, unique: true # add_index :users, :unlock_token, unique: true end end  Route file should now look like:\nRails.application.routes.draw do devise_for :users get 'landing/index' root to: \u0026quot;landing#index\u0026quot; end  We will update the user model with password complexity validation:\nclass User \u0026lt; ApplicationRecord # Include default devise modules. Others available are: # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable devise :database_authenticatable, :registerable, :recoverable, :rememberable, :validatable validate :password_complexity def password_complexity # Regexp extracted from https://stackoverflow.com/questions/19605150/regex-for-password-must-contain-at-least-eight-characters-at-least-one-number-a return if password.blank? || password =~ /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^\u0026amp;*-]).{10,70}$/ errors.add :password, 'Complexity requirement not met. Length should be 10-70 characters and include: 1 uppercase, 1 lowercase, 1 digit and 1 special character' end end  Create the user Factory (which also uses Faker):\n# spec/factories/users.rb FactoryBot.define do factory :user do email { Faker::Internet.safe_email } # probably need to add index for uniqueness password { Faker::Internet.password(min_length: 10, max_length: 50, mix_case: true, special_characters: true) } end trait :invalid do email { Faker::Internet.username } password { \u0026quot;hoi\u0026quot; } end end  Create the user spec (uses FactoryBot \u0026amp; Shoulda):\n# spec/models/user_spec.rb require 'rails_helper' RSpec.describe User, type: :model do describe \u0026quot;Factory with\u0026quot; do context \u0026quot;default parameters\u0026quot; do it \u0026quot;creates a valid model\u0026quot; do user = FactoryBot.build :user expect(user.valid?).to be_truthy end end context \u0026quot;invalid parameters\u0026quot; do it \u0026quot;fails model validation\u0026quot; do user = FactoryBot.build :user, :invalid expect(user.valid?).to be_falsey end end end context \u0026quot;ActiveRecord / DB Tests\u0026quot; do it { should have_db_column(:email) } it { should have_db_index(:email).unique } end context \u0026quot;ActiveModel / Validations\u0026quot; do it \u0026quot;detects a bad email\u0026quot; do user = FactoryBot.build :user, email: \u0026quot;bill\u0026quot; expect(user.valid?).to be_falsey expect(user.errors.messages[:email]).to match_array [\u0026quot;is invalid\u0026quot;] end it \u0026quot;detects a non-compliant password\u0026quot; do user = FactoryBot.build :user, password: \u0026quot;hoi\u0026quot; expect(user.valid?).to be_falsey expect(user.errors.messages[:password]).to match_array [\u0026quot;is too short (minimum is 6 characters)\u0026quot;, \u0026quot;Complexity requirement not met. Length should be 10-70 characters and include: 1 uppercase, 1 lowercase, 1 digit and 1 special character\u0026quot;] end end end  Test setup and commit when green: rake db:migrate bundle exec rspec git add . git commit -m \u0026quot;devise configured, FactoryBot, Faker and Shoulda working\u0026quot; git push  create user landing / profile page (autoredirect) Test restricted logins a basic login feature test might look like:\nrequire 'rails_helper' RSpec.describe 'Users Login', type: :feature do let(:user) { FactoryBot.create :user } after :each do Warden.test_reset! end describe 'user logs in successfully' do scenario 'and is redirected to user home page' do user_log_in(user) expect(current_path).to eql(auth_user_root_path) end end end  Install Fonts / Icons Fontawesome (Good with Bulma)  https://kelishrestha.medium.com/how-to-install-font-awesome-with-yarn-in-rails-6-0-c2506543c13d\nyarn add @fortawesome/fontawesome-free  update application.scss\n$fa-font-path: '@fortawesome/fontawesome-free/webfonts'; @import '@fortawesome/fontawesome-free/scss/fontawesome'; @import '@fortawesome/fontawesome-free/scss/solid'; @import '@fortawesome/fontawesome-free/scss/regular'; @import '@fortawesome/fontawesome-free/scss/brands'; @import '@fortawesome/fontawesome-free/scss/v4-shims';  update application.js\nimport \u0026quot;@fortawesome/fontawesome-free/js/all\u0026quot;;  or via cdn: vhttps://fontawesome.com/how-to-use/customizing-wordpress/snippets/setup-cdn-webfont add to application.html.erb ()\n\u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width, initial-scale=1\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://pro.fontawesome.com/releases/v5.10.0/css/all.css\u0026quot; integrity=\u0026quot;sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p\u0026quot; crossorigin=\u0026quot;anonymous\u0026quot;/\u0026gt;  Install BULMA: a CSS Framework (if desired) Bulma is a relatively new CSS framework. It feels like a light, streamlined alternative to Bootstrap. Bulma doesn’t include any JavaScript at all. This means some stuff just won’t work out of the box. For example, the burger menu won’t toggle without a little JavaScript help. We’ll get to that later.\nyarn add bulma  Open app/javascript/packs/application.js and add the following to the top:\nimport '../styles'  Create app/javascript/styles.scss:\n@import '~bulma/bulma';  customize bulma by adding to the top of styles.scss file: https://stackoverflow.com/questions/48809328/bulma-navbar-breakpoint\n@import \u0026quot;~bulma/sass/utilities/initial-variables.sass\u0026quot;; $navbar-breakpoint: $tablet; @import \u0026quot;~bulma/bulma.sass\u0026quot;; @import '~bulma/bulma';  choices are: $desktop (default 960px), $tablet (769px), $widescreen (1152px), $fullhd (1344px) variable defaults: https://bulma.io/documentation/customize/variables/ variables that can be set: https://bulma-customizer.bstash.io\nA sample Bulma navbar Open app/views/layouts/application.html.erb and add the following just above the yield line:\n\u0026lt;%= render 'layouts/navbar' %\u0026gt;  Create app/views/layouts/_navbar.html.erb:\n\u0026lt;div class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;nav class=\u0026quot;navbar\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;navbar-brand\u0026quot;\u0026gt; \u0026lt;a class=\u0026quot;navbar-item\u0026quot; href=\u0026quot;#\u0026quot;\u0026gt; \u0026lt;img src=\u0026quot;https://bulma.io/images/bulma-logo.png\u0026quot; width=\u0026quot;112\u0026quot; height=\u0026quot;28\u0026quot;\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;div class=\u0026quot;navbar-burger burger\u0026quot; data-target=\u0026quot;main-nav\u0026quot;\u0026gt; \u0026lt;span\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026quot;main-nav\u0026quot; class=\u0026quot;navbar-menu\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;navbar-start\u0026quot;\u0026gt; \u0026lt;%= link_to root_url, class: 'navbar-item' do %\u0026gt; \u0026lt;span class=\u0026quot;icon\u0026quot;\u0026gt; \u0026lt;i class=\u0026quot;far fa-gem\u0026quot;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;Home\u0026lt;/span\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;%= link_to home_about_url, class: 'navbar-item' do %\u0026gt; \u0026lt;span class=\u0026quot;icon\u0026quot;\u0026gt; \u0026lt;i class=\u0026quot;far fa-star\u0026quot;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;About\u0026lt;/span\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;/div\u0026gt;  This is basically copied from the Bulma examples. It is a basic nav bar with two menu items; Home and About.\nWe now have all the pieces in place and can start wiring up our Stimulus controllers.\nCreate a Stimulus controller To keep this example simple, we’re going to create a single controller which we’ll attach to the body tag in the main layout. This controller will be responsible for rendering the Font Awesome icons (as described in a previous post) as well as handling our Bulma burger menu.\nCreate app/javascript/controllers/main_controller.js:\nimport fontawesome from '@fortawesome/fontawesome' import icons from '@fortawesome/fontawesome-free-regular' import { Controller } from 'stimulus' export default class extends Controller { initialize() { fontawesome.library.add(icons) } connect() { fontawesome.dom.i2svg() // Get all \u0026quot;navbar-burger\u0026quot; elements var $navbarBurgers = Array.prototype.slice.call(document.querySelectorAll('.navbar-burger'), 0); // Check if there are any navbar burgers if ($navbarBurgers.length \u0026gt; 0) { // Add a click event on each of them $navbarBurgers.forEach(function ($el) { $el.addEventListener('click', function () { // Get the target from the \u0026quot;data-target\u0026quot; attribute var target = $el.dataset.target; var $target = document.getElementById(target); // Toggle the class on both the \u0026quot;navbar-burger\u0026quot; and the \u0026quot;navbar-menu\u0026quot; $el.classList.toggle('is-active'); $target.classList.toggle('is-active'); }); }); } } }  This controller imports the icons from Font Awesome when initialize is called. Every time connect is called it renders the icons and then searches for navbar burgers to attach the appropriate click events on.\nConnect the controller Now we want to connect the body tag to our controller using an HTML5 data attribute.\nOpen app/views/layouts/application.html.erb and add the following attribute to the \u0026lt;body\u0026gt; tag.\n\u0026lt;body data-controller=\u0026quot;main\u0026quot;\u0026gt;  Now it should look like:\n# app/views/layouts/application.html.erb \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Tweets\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width,initial-scale=1\u0026quot;\u0026gt; \u0026lt;%= csrf_meta_tags %\u0026gt; \u0026lt;%= csp_meta_tag %\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css\u0026quot; integrity=\u0026quot;sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l\u0026quot; crossorigin=\u0026quot;anonymous\u0026quot;\u0026gt; \u0026lt;%= stylesheet_link_tag 'application', media: 'all' %\u0026gt; \u0026lt;%= javascript_pack_tag 'application' %\u0026gt; \u0026lt;%= yield :head %\u0026gt; \u0026lt;%= turbo_include_tags %\u0026gt; \u0026lt;%# stimulus_include_tags %\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body data-controller=\u0026quot;main\u0026quot;\u0026gt; \u0026lt;%= render 'layouts/navbar' %\u0026gt; \u0026lt;p class=\u0026quot;notice\u0026quot;\u0026gt;\u0026lt;%= notice %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026quot;alert\u0026quot;\u0026gt;\u0026lt;%= alert %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;%= yield %\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   https://blackninjadojo.com/css/bulma/2019/02/27/how-to-create-a-layout-for-your-rails-application-using-bulma.html\nDiscourgaged - no longer necessary: If you plan to user database_cleaner \u0026ndash; then also see this article to finish your config:\n https://medium.com/@amliving/my-rails-rspec-set-up-6451269847f9\n","date":1599695167,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628293567,"objectID":"aa8b84747652c197ec3c57e4d97b3d6b","permalink":"https://btihen.me/post_ruby_rails/rails_6_install_n_configure/","publishdate":"2020-09-10T01:46:07+02:00","relpermalink":"/post_ruby_rails/rails_6_install_n_configure/","section":"post_ruby_rails","summary":"Intro To document is mostly for me \u0026ndash; at least until I automate my setup defaults. However, I am glad to share and get ideas from others too. I will build a little calendar app I use with friends (it\u0026rsquo;s focused on being mobile friendly and easy to use \u0026ndash; not a full featured calendar).","tags":["rails","configure","install","durable","testing"],"title":"Install and Configure Rails","type":"post_ruby_rails"},{"authors":["Bill Tihen"],"categories":["Education","Classroom","EDgile","Practice"],"content":"I like to find ways to make the topic of study valuable - not to me, but to the students. I actually usually find that value requires a context or integration. If an engineer builds a more efficient transport boat, but the boat regularly sinks when sailing in wind, then the boat has little value despite its newly engineered efficiency. Similarly, student learning proceeds with value.\nGenerally, I have found students will cultivate their own value when they have a choice in how they approach and apply the learning associated with a subject. In particular, students will find value when they can define their own goal consistent with the class agenda and ideally within a context that is valuable or interesting to others.\nTo that end, I encourage students to pick their own learning goals within the open guidelines of the class. I generally ask them to choose their own backstory and context for each subject. For many teachers - and possibly for you, the readers - this may sound silly or like a waste of time. However, creating a backstory and context has many beneficial side effects: a) students have a goal that they chose themselves; b) students have their own context - many teenagers seem to enjoy creating a new experimental identity); and c) students research the broad aspects of a topic and to figure out what is most important in the areas that they find attractive. At this point, assuming the students have the feeling that they will be supported and can accomplish their goal, they have acquired their own value and context for the material and the project.\nThis startup process includes the students learning some background about what they are learning without violating the principle of “cooking from day one.” Teenagers, if not overwhelmed by the idea, enjoy picking their own goals and exercising their indepence. As teachers, it is important to be flexible enough to allow goals that might be outside our teacher expectations, especially if the outcomes are valuable and still fit, perhaps more widely interpreted, with the learning goals of the course.\nHowever, startup with choice is not quite enough. It’s not the whole story.\nStudents must go deep enough in a subject so that they discover viable, but competing, answers to the problems they are working on, so that they can explain why their solutions are defendable within their chosen context. For example, while collaborating with a biology teacher, we decided to combine biology and robotics and have the students build their own mini-robot gardeners to care for their plants over a three week holiday. A few students chose what they believed was the best watering strategy, but they didn’t anticipate that the cleaning staff would move their equipment during the break. The ensuing jiggling dislodged a few sensors, and some plants were flooded with water and drowned. Upon return they learned that “best” is only best if it includes planning for failures. We could have explained planning for failure to the students, but the natural consequences of a flood was a much better teacher and the real world consequences much more memorable.\nBasically, it is important to help ensure that students learn within a context with enough complexity so they learn to choose between multiple possible answers that will each have different strengths and weaknesses.\nMany students are not yet accustomed to the expectation of learning enough about a topic so that they understand its complexity and the context for when it is valuable and when it is not. Therefore, initially, it is usually helpful to have them work through small challenges in a supportive, low risk situation where mistakes and exploration is safe and expected. This creates an uplifting environment where learning is enjoyable and self-motivating. Without uplift, the engagement of value and self-motivation is challenging and the need for judgement increases (and starts a vicious cycle). See the Uplift blog for a further discussion.\nThe depth of knowledge gained when students choose between viable alternatives they have discovered themselves seems surprisingly under-emphasized in schools, since in the professional world this is a basic expectation. We expect our bridges and buildings to do well in earthquakes, high winds, and high water while they also serve our daily needs well. We expect doctors to advise us or pick the best medication, based on our age, sickness, our expectation of quality of life during treatment. We can perhaps leverage value to expect more of our students, too.\nLearning value within a context is a very important life skill - not just an important academic skill.\n","date":1598097918,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598097918,"objectID":"1b0492e840f5c876776dee13b110ceda","permalink":"https://btihen.me/post_edu/edgility_btihen_value/","publishdate":"2020-08-22T14:05:18+02:00","relpermalink":"/post_edu/edgility_btihen_value/","section":"post_edu","summary":"Value is quite straightforward in my mind. It has several parts: a) students see value or a reason to learn the material without being told they must learn or get punished with poor grades; b) students learn to think about the what they learn and know in the context of how it affects others (or fits into a bigger picture), c) what students learn is challenging and engaging enough that it doesn’t feel like a dumb exercise to the student (e.g. a lab that can be looked up on Google that thousands of people have already done won’t fit this definition of valuable); and d) the process of learning creates confidence in the student and the process cultivates lifeworthy skills.\nNot all learning will involve all 4 aspects of value, but the more the better!","tags":["value","self-motivation","natural-feedback","context","depth of knowledge"],"title":"Value: Motivation and Knowledge with a Context","type":"post_edu"},{"authors":["Bill Tihen"],"categories":["Education","EDgile","Practice","Classroom"],"content":"As mentioned in the Transparency article, there is an important interaction between having the “big picture” (having a goal and some expectations along the way) and knowing “what to do next” (a feeling of workability and progress). This article explores how to establish both by creating an effective self-guided learning strategy for students.\nIn EDgility we encourage student self-determination. Student choice and understanding the big picture are critical components to cultivate self-determination. They need to understand the big picture in order to exercise real choice. To support them, I like to offer students projects with broad goals. The big general goal starts the process of smallifying, because they will have to smallify in order to make progress. The students first explore the field just enough to find ideas that interest them, to pick their own specific goal, and to find a purpose or context for that goal. It is important at this stage that the student’s goals already include a complication / design compromise consistent with the overall goal. For example, students may choose to build a cargo boat that saves energy, but it must also be stable in waves. Commercially, their boat is only better if it is effective at the overall goal (staying afloat) and good at a new specific goal (saving energy). Students must think broadly and understand the context of their project in actual use.\nThis first step generally creates a lot of enthusiasm (and ideas) as the students create a storyline, a new identity, and an organization to support their mission. The story line and organization need to be attractive to them and others, both to support their motivation and to make for a good sales pitch at the end of the unit.\nTwo classes that started with big goals that required smallifying into many workable steps were the “Boat Design” and “Robot Gardeners” classes. I’ve written about those elsewhere, see e.g. boat design in ECIS Global Insights and Robot Gardeners in Spotlight.\nThe next step in smallifying is for the students to figure out the most important aspects needed to accomplish the big goals. I call this distilling the essence of the topic in relation to their goal. For example, in the boat design class, all boat designs must understand buoyancy (flotation), and depending on the boat specialty and safety features, two or three other concepts will be important, i.e., students who choose to build a speedboat will need excellent fluid efficiency and perhaps also stability while turning. Learning to discover the important aspects of a large complex field and to find the critical aspects relating to one’s goals is an important life skill in almost all aspects of life. It is, in fact, a skill that transcends the specific content of the class - and therefore lifeworthy.\nI give the students only a short amount of time to do these first two steps (perhaps one or two classes total). This prevents analysis paralysis. Besides, not having time to fully understand a field before starting gives the students permission to adjust as they explore their topic. Learning to manage and adjust projects as you learn and progress is known as agile management - another useful life-skill in our quickly evolving world.\nAt this point the students start the iterative smallification of concrete actionable steps to learn and progress toward the goal. These small steps are exploratory and safe. Safe means that the step is small enough that it isn’t upsetting if it doesn\u0026rsquo;t work on the first try and safe means that the teacher is neutral about successful and unsuccessful steps. Exploring and learning is what is celebrated. Under no condition can mistakes be punished or made a point of shame. Without feeling safe about errors and unknowns, smallifying and creative learning is almost impossible. It will take time for most students to trust this environment, thus initially, expect students to be reluctant to smallify in order to explore all the unknowns inherent in big messy goals.\nFiguring out the next workable step happens as the student progresses - students are not working from a large, clear plan that maps out each step at the beginning of the project. I do give students who have never worked this way a few introductory steps to get them started. Once underway, students gain confidence and generally have enough experience to find the next workable step - as they progress. Here’s a concrete example of smallifying, based on building a racing catamaran that is stable while turning at speed might be:\n configure your computer with the software to print on a 3-D printer; design and print a box (or any simple shape); print the above shape, but make it hollow (learn to subtract a shape); print the above hollowed shape joined with a second shape; if the first shape is a box, add a cone, sphere, pyramid, etc (this requires addition and translation); etc. (now the students have enough basics to keep learning and progressing).  As Bill Rankin said in several keynote addresses, you learn to cook by cooking. In fact, you learn almost anything by doing it. You have to jump in and start, or “get cooking.”\nOf course, a student who chooses to build a rescue boat will have a different set of small steps, but common to both boats is learning to work incrementally and building on the next workable small step toward the goal. This is a powerful learning technique that builds confidence in students\u0026rsquo; ability to learn and be successful.\nOnce the students get the hang of this process of moving from the big picture, identifying a few critical aspects, and smallifiying their project into small workable steps, they have effectively learned how to learn and self-correct as they move toward a large complex goal. This meta-aspect of the learning process and its deliberate practice may in the long run be a lifeworthy skill that goes far beyond the specific content of a single class. Engineering classes such as the Boat Design class example here work well. So, too, do classes in art and other areas.\nCaution: Smallification happens in small chunks (one or two steps at a time maximum). In the tech world we call this planning at the last responsible moment, but fundamentally, it is about figuring out the next workable thing when the students have enough information to see that next step. This prevents the feeling that the big goal is just too overwhelming. Students who have never worked this way will need some smallifying guidance. For example, in the Boat Design class, I gave students a few steps to get started and I give the details of the final assessment. (I like a public demonstration and company pitch.) As a teacher you may want to step through a project to be more confident in the timing, practice the smallifying, etc, but be careful not to give away more than needed and avoid at all costs big and detailed plans! The fun and exploration is a central feature of a motivating and educational experience for the students.\nFundamentally, creating a learning environment where having the big picture and exploring the details along the way can create an uplifting educational journey.\n","date":1595592338,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1595592338,"objectID":"d61e8ea7d7e5dee4e6fb4fc95d740789","permalink":"https://btihen.me/post_edu/edgility_btihen_smallify/","publishdate":"2020-07-24T14:05:38+02:00","relpermalink":"/post_edu/edgility_btihen_smallify/","section":"post_edu","summary":"Get the big picture: students set goals (outcomes), deconstruct (find the most important (3-5) aspects / skills related to the goal), and then smallify (learn to find the next small step that builds on what’s already done), and finally, learn through deliberate practice (self-correcting as they progress).","tags":["value","exploration","exploration","uplift","self-motivation","student choice"],"title":"Smallify to Learn Effectively","type":"post_edu"},{"authors":["Bill Tihen"],"categories":[],"content":"Configure devise (for multiple types of accounts) install the devise engine:\nbin/rails generate devise:install  now follow the basic setup config \u0026ndash; add to config/environments/development.rb\nconfig.action_mailer.default_url_options = { host: 'localhost', port: 3000 }  add notifications to the layout for devise in app/views/layouts/application.html.erb just above \u0026lt;%= yeild %\u0026gt;\n\u0026lt;p class=\u0026quot;notice\u0026quot;\u0026gt;\u0026lt;%= notice %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026quot;alert\u0026quot;\u0026gt;\u0026lt;%= alert %\u0026gt;\u0026lt;/p\u0026gt;  now create one or more models for devise:\nrails g devise:views rails generate devise user  update the routes to put the login in separate routes in config/routes.rb - make the routes look like:\ndevise_for :users, path: 'users' # http://localhost:3000/users/sign_in devise_for :admins, path: 'admins' # http://localhost:3000/admins/sign_in  turn on scoped views (since login forms can be different) in config/initializers/devise.rb\nconfig.scoped_views = true  Create the scoped views: (instead of: rails g devise:views) do:\nrails g devise:views users/devise rails g devise:views admins/devise  now we should open these migrations and uncomment any added fields we use - I generally like to use most of the fields:\n# frozen_string_literal: true class DeviseCreateAdmins \u0026lt; ActiveRecord::Migration[6.0] def change create_table :admins do |t| ## Database authenticatable t.string :email, null: false, default: \u0026quot;\u0026quot; t.string :encrypted_password, null: false, default: \u0026quot;\u0026quot; ## Recoverable t.string :reset_password_token t.datetime :reset_password_sent_at ## Rememberable t.datetime :remember_created_at ## Trackable t.integer :sign_in_count, default: 0, null: false t.datetime :current_sign_in_at t.datetime :last_sign_in_at t.inet :current_sign_in_ip t.inet :last_sign_in_ip ## Confirmable t.string :confirmation_token t.datetime :confirmed_at t.datetime :confirmation_sent_at t.string :unconfirmed_email # Only if using reconfirmable ## Lockable t.integer :failed_attempts, default: 0, null: false # Only if lock strategy is :failed_attempts t.string :unlock_token # Only if unlock strategy is :email or :both t.datetime :locked_at t.timestamps null: false end add_index :admins, :email, unique: true add_index :admins, :reset_password_token, unique: true add_index :admins, :confirmation_token, unique: true add_index :admins, :unlock_token, unique: true end end  and adjust the user and admin models too and turn on the features we want or need. We will go into detail later, for now I will just add trackable to the models:\nclass User \u0026lt; ApplicationRecord # Include default devise modules. Others available are: # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable devise :database_authenticatable, :registerable, :trackable, :recoverable, :rememberable, :validatable end  and of course migrate too.\nbin/rails db:migrate  Create custome controllers for each sessions - this also allows the users to have different fields and features:\nrails generate devise:controllers users/devise rails generate devise:controllers admins/devise  configure the routes to point to these new controllers:\n# http://localhost:3000/users/sign_in devise_for :users, path: 'users', controllers: { sessions: 'users/devise/sessions', passwords: 'users/devise/passwords', registrations: 'users/devise/registrations' } # http://localhost:3000/admins/sign_in devise_for :admins, path: 'admins', controllers: { sessions: 'admins/devise/sessions', passwords: 'admins/devise/passwords', registrations: 'admins/devise/registrations' }  now the routes should look like:\n$ bin/rails routes Prefix Verb URI Pattern Controller#Action new_user_session GET /users/sign_in(.:format) users/sessions#new user_session POST /users/sign_in(.:format) users/sessions#create destroy_user_session DELETE /users/sign_out(.:format) users/sessions#destroy new_user_password GET /users/password/new(.:format) users/passwords#new edit_user_password GET /users/password/edit(.:format) users/passwords#edit user_password PATCH /users/password(.:format) users/passwords#update PUT /users/password(.:format) users/passwords#update POST /users/password(.:format) users/passwords#create cancel_user_registration GET /users/cancel(.:format) user/registrations#cancel new_user_registration GET /users/sign_up(.:format) user/registrations#new edit_user_registration GET /users/edit(.:format) user/registrations#edit user_registration PATCH /users(.:format) user/registrations#update PUT /users(.:format) user/registrations#update DELETE /users(.:format) user/registrations#destroy POST /users(.:format) user/registrations#create new_admin_session GET /admins/sign_in(.:format) admin/sessions#new admin_session POST /admins/sign_in(.:format) admin/sessions#create destroy_admin_session DELETE /admins/sign_out(.:format) admin/sessions#destroy new_admin_password GET /admins/password/new(.:format) admin/passwords#new edit_admin_password GET /admins/password/edit(.:format) admin/passwords#edit admin_password PATCH /admins/password(.:format) admin/passwords#update PUT /admins/password(.:format) admin/passwords#update POST /admins/password(.:format) admin/passwords#create cancel_admin_registration GET /admins/cancel(.:format) admin/registrations#cancel new_admin_registration GET /admins/sign_up(.:format) admin/registrations#new edit_admin_registration GET /admins/edit(.:format) admin/registrations#edit admin_registration PATCH /admins(.:format) admin/registrations#update PUT /admins(.:format) admin/registrations#update DELETE /admins(.:format) admin/registrations#destroy POST /admins(.:format) admin/registrations#create  lets make logged in home pages (for the user and admin)\nrails g controller users/home index --no-helper --no-assets --no-controller-specs --no-view-specs rails g controller admins/home index --no-helper --no-assets --no-controller-specs --no-view-specs  now lets update our routes to ponit to these pages if the user is logged in add the following belos the deivse_for commands\nRails.application.routes.draw do # http://localhost:3000/admins/sign_in devise_for :admins, path: 'admins', controllers: { sessions: 'admins/devise/sessions', passwords: 'admins/devise/passwords', registrations: 'admins/devise/registrations' } # http://localhost:3000/umdzes/sign_in devise_for :umdzes, path: 'umdzes', controllers: { sessions: 'umdzes/devise/sessions', passwords: 'umdzes/devise/passwords', registrations: 'umdzes/devise/registrations' } # http://localhost:3000/patrons/sign_in devise_for :patrons, path: 'patrons', controllers: { sessions: 'patrons/devise/sessions', passwords: 'patrons/devise/passwords', registrations: 'patrons/devise/registrations' } authenticated :patron do root 'patrons/home#index', as: :auth_patron_root end authenticated :umdze do root 'umdzes/home#index', as: :auth_umdze_root end authenticated :admin do root 'admins/home#index', as: :auth_admin_root end namespace :admins do get 'home/index' # resource :home_page, only: [:index] end get '/admins', to: 'admins/home#index', as: :admins namespace :umdzes do get 'home/index' # resource :home_page, only: [:index] end get '/umdzes', to: 'umdzes/home#index', as: :umdzes namespace :patrons do get 'home/index' # resource :home_page, only: [:index] end get '/patrons', to: 'patrons/home#index', as: :patrons get '/landing', to: 'landing#index', as: :landing get 'landing/index' root to: \u0026quot;landing#index\u0026quot; end  now lets make ApplicationControllers for each namespace \u0026amp; enforce authentication touch app/controllers/admins/application_controller.rb cat \u0026lt;\u0026lt; EOF \u0026gt; app/controllers/admins/application_controller.rb class Admins::ApplicationController \u0026lt; ApplicationController before_action :authenticate_admin! private def this_user current_admin end end EOF touch app/controllers/umdzes/application_controller.rb cat \u0026lt;\u0026lt; EOF \u0026gt; app/controllers/umdzes/application_controller.rb class Umdzes::ApplicationController \u0026lt; ApplicationController before_action :authenticate_umdze!, unless: :allowed_access private def allowed_access current_admin end def this_user current_umdze || current_admin end end EOF touch app/controllers/patrons/application_controller.rb cat \u0026lt;\u0026lt; EOF \u0026gt; app/controllers/patrons/application_controller.rb class Patrons::ApplicationController \u0026lt; ApplicationController before_action :authenticate_patron!, unless: :allowed_access private def allowed_access current_umdze || current_admin end def this_user current_patron || current_umdze || current_admin end end EOF  now we will inhert from these new controllers and enforce limits now lets require these pages to have authenticated the correct user type:\n# app/controllers/admins/home_controller.rb class Admins::HomeController \u0026lt; Admins::ApplicationController def index end end # app/controllers/umdzes/home_controller.rb class Umdzes::HomeController \u0026lt; Umdzes::ApplicationController def index end end # app/controllers/patrons/home_controller.rb class Patrons::HomeController \u0026lt; Patrons::ApplicationController def index end end  Now prevent student and admin accounts from cross visits (during testing, or whatever) create this new file:\ntouch app/controllers/concerns/accessible.rb cat \u0026lt;\u0026lt; EOF \u0026gt; app/controllers/concerns/accessible.rb module Accessible extend ActiveSupport::Concern included do before_action :check_user end protected def check_user if current_admin flash.clear # The authenticated admin root path can be defined in your routes.rb in: devise_scope :admin do... redirect_to(auth_admin_root_path) and return elsif current_umdze flash.clear # The authenticated admin root path can be defined in your routes.rb in: devise_scope :admin do... redirect_to(auth_umdze_root_path) and return elsif current_patron flash.clear # The authenticated user root path can be defined in your routes.rb in: devise_scope :user do... redirect_to(auth_partron_root_path) and return end end end EOF  use this accessible concern Now add include Accessible in the appropriate controllers:\nNote: You must skip_before_action for the destroy action in each SessionsController to prevent the redirect to happen before the sign out occurs.\n# eg. ../controllers/admins/sessions_controller.rb class Admins::SessionsController \u0026lt; Devise::SessionsController include Accessible skip_before_action :check_user, only: :destroy # ... end # eg. ../controllers/admins/registrations_controller.rb You must also skip_before_action for the edit, update, destroy, and cancel actions in each RegistrationsController to allow current users to edit and cancel their own accounts. Otherwise they will be redirected before they can reach these pages. class Admins::RegistrationsController \u0026lt; Devise::RegistrationsController include Accessible skip_before_action :check_user, except: [:new, :create] # ... end # eg. ../controllers/umdzes/sessions_controller.rb class Umdzes::SessionsController \u0026lt; Devise::SessionsController include Accessible skip_before_action :check_user, only: :destroy # ... end # eg. ../controllers/umdzes/registrations_controller.rb class Umdzes::RegistrationsController \u0026lt; Devise::RegistrationsController include Accessible skip_before_action :check_user, except: [:new, :create] # ... end # eg. ../controllers/patrons/sessions_controller.rb class Patrons::SessionsController \u0026lt; Devise::SessionsController include Accessible skip_before_action :check_user, only: :destroy # ... end # eg. ../controllers/patrons/registrations_controller.rb class Patrons::RegistrationsController \u0026lt; Devise::RegistrationsController include Accessible skip_before_action :check_user, except: [:new, :create] # ... end  now lets give the patron account a usernames  https://github.com/heartcombo/devise/wiki/How-To%3A-Allow-users-to-sign-in-with-something-other-than-their-email-address\nrails generate migration add_username_to_patrons username:string:uniq rails generate migration add_umdzes_name_to_umdzes fullname:string rails generate migration add_admins_name_to_admins fullname:string # now update the new migration to look like: class AddUsernamToPatrons \u0026lt; ActiveRecord::Migration[6.0] def change # username is key not email - in fact we don't want an email rename_column :patrons, :email, :username end end class AddFullnameToUmdzes \u0026lt; ActiveRecord::Migration[6.0] def change add_column :umdzes, :umdzes_name, :string, null: false end end class AddFullnameToAdmins \u0026lt; ActiveRecord::Migration[6.0] def change add_column :admins, :admins_name, :string, null: false end end  update the models now we need to go to the models and make the following updates:\n# app/models/admin.rb class Admin \u0026lt; ApplicationRecord # Include default devise modules. Others available are: # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable devise :database_authenticatable, :trackable, # :registerable, :rememberable, :validatable #, :recoverable validates :email, uniqueness: true validates :admins_name, presence: true end # app/models/umdze.rb class Umdze \u0026lt; ApplicationRecord # Include default devise modules. Others available are: # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable devise :database_authenticatable, :trackable, # :registerable, :rememberable, :validatable #, :recoverable validates :email, uniqueness: true validates :umdzes_name, presence: true end # app/models/patrons.rb class Patron \u0026lt; ApplicationRecord # Include default devise modules. Others available are: # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable devise :database_authenticatable, :trackable, # :registerable, :rememberable, :validatable, # :recoverable :authentication_keys =\u0026gt; [:username] validates :username, uniqueness: true # make the email field optional # validates :email, uniqueness: true def email_required? false end def email_changed? false end # use this instead of email_changed? for Rails = 5.1.x def will_save_change_to_email? false end end  now we can safely migrate bundle exec rails db:migrate\nlets test our logins lets create some common feature test code:\n https://forum.upcase.com/t/rspec-support-vs-helpers/4986 https://thoughtbot.com/blog/rspec-integration-tests-with-capybara\n# spec/support/features/session_helpers.rb module Features module SessionHelpers # def patron_sign_up(username:, password:) # visit new_patron_registration_path # expect(page).to have_button('Sign up') # fill_in 'Username', with: username # fill_in 'Password', with: password # click_button 'Sign up' # end def patron_log_in(patron = nil) patron = FactoryBot.create :patron if patron.nil? visit new_patron_session_path expect(page).to have_button('Log in') fill_in 'Username', with: patron.username fill_in 'Password', with: patron.password click_on 'Log in' end # def umdze_sign_up(email:, password:) # visit new_umdze_registration_path # expect(page).to have_button('Sign up') # fill_in 'Email', with: email # fill_in 'Password', with: password # click_button 'Sign up' # end def umdze_log_in(umdze = nil) umdze = FactoryBot.create :umdze if umdze.nil? visit new_admin_session_path expect(page).to have_button('Log in') fill_in 'Email', with: admin.email fill_in 'Password', with: admin.password click_on 'Log in' end # def admin_sign_up(email:, password:) # visit new_admin_registration_path # expect(page).to have_button('Sign up') # fill_in 'Email', with: email # fill_in 'Password', with: password # click_button 'Sign up' # end def admin_log_in(admin = nil) admin = FactoryBot.create :admin if admin.nil? visit new_admin_session_path expect(page).to have_button('Log in') fill_in 'Email', with: admin.email fill_in 'Password', with: admin.password click_on 'Log in' end end end  We are not allowing registrations, so that code is commented out. However, we see we must configure our factories for this code to work.\nLets tell rspec how to access this code in feature tests:\n# spec/support/features.rb RSpec.configure do |config| config.include Features::SessionHelpers, type: :feature end  Lets create test for our devise model factories: # spec/models/patron_spec.rb require 'rails_helper' RSpec.describe User, type: :model do describe \u0026quot;factory functions\u0026quot; do it \u0026quot;generates a valid user\u0026quot; do model = FactoryBot.build :user expect(model.valid?).to be true end it \u0026quot;saves a valid user\u0026quot; do model = FactoryBot.build :user expect(model.save).to be_truthy end end describe \u0026quot;DB settings\u0026quot; do it { have_db_index(:email) } it { is_expected.to have_db_column(:encrypted_password) } end end # spec/models/admin_spec.rb require 'rails_helper' RSpec.describe Admin, type: :model do describe \u0026quot;factory functions\u0026quot; do it \u0026quot;generates a valid admin\u0026quot; do model = FactoryBot.build :admin expect(model.valid?).to be true end it \u0026quot;saves a valid admin\u0026quot; do model = FactoryBot.build :admin expect(model.save).to be_truthy end end describe \u0026quot;DB settings\u0026quot; do it { have_db_index(:email) } it { is_expected.to have_db_column(:encrypted_password) } end end  be sure these fail - run:\nrspec spec/models/  Now we need to configure the factories so all is working:\n# spec/factories/patrons.rb FactoryBot.define do factory :user do sequence(:email) { |n| \u0026quot;#{Faker::Internet.email}\u0026quot;.split('@').join(\u0026quot;#{n}@\u0026quot;) } password { 'LetM3-InNow' } password_confirmation { 'LetM3-InNow' } # enable this if using confirmable # confirmed_at { Date.today } end end # spec/factories/umdzes.rb FactoryBot.define do factory :umdze do sequence(:email) { |n| \u0026quot;#{Faker::Internet.email}\u0026quot;.split('@').join(\u0026quot;#{n}@\u0026quot;) } password { 'LetM3-InNow!' } password_confirmation { 'LetM3-InNow!' } umdzes_name { \u0026quot;#{Faker::Name.first_name} #{Faker::Name.last_name}\u0026quot; } # enable this if using confirmable # confirmed_at { Date.today } end end # spec/factories/admins.rb FactoryBot.define do factory :admin do sequence(:email) { |n| \u0026quot;#{Faker::Internet.email}\u0026quot;.split('@').join(\u0026quot;#{n}@\u0026quot;) } password { 'LetM3-InNow!' } password_confirmation { 'LetM3-InNow!' } admins_name { \u0026quot;#{Faker::Name.first_name} #{Faker::Name.last_name}\u0026quot; } # enable this if using confirmable # confirmed_at { Date.today } end end  be sure these pass now - run:\nrspec spec/models/  Now we are ready to test devise and our restricted access to the users home page:\n https://www.madetech.com/blog/feature-testing-with-rspec https://thoughtbot.com/blog/rspec-integration-tests-with-capybara https://github.com/heartcombo/devise/wiki/How-To:-Test-with-Capybara https://radavis.github.io/sign-in-out-test-helpers-for-and-devise-and-capybara/ https://www.vanderpol.net/2014/10/07/rspec-integration-tests-devise-user-registration/\n# spec/features/users/user_signup_spec.rb require 'rails_helper' RSpec.describe 'Users Home Page', type: :feature do # note user is NOT created in DB! let(:user) { FactoryBot.build :user } after :each do Warden.test_reset! end describe 'user is not signed-up' do scenario 'user signs-up on registration page' do user_sign_up(email: user.email, password: user.password) expect(current_path).to eql(users_home_path) end end end # spec/features/users/user_login_spec.rb require 'rails_helper' RSpec.describe 'Users Login', type: :feature do let(:user) { FactoryBot.create :user } after :each do Warden.test_reset! end describe 'user logs in successfully' do scenario 'and is redirected to user home page' do user_log_in(user) expect(current_path).to eql(auth_user_root_path) end end end # spec/features/users_home_page_spec.rb require 'rails_helper' RSpec.describe 'Users Home Page', type: :feature do let(:user) { FactoryBot.create :user } after :each do # force a logout (clear warden info) after each test Warden.test_reset! end describe 'user is not authenticated' do scenario 'user is redirected to user login before access to user home' do visit users_home_path expect(current_path).to eql(new_user_session_path) end end describe 'user is already authenticated' do before { user_log_in(user) } scenario 'user gets direct access to the user homepage' do visit users_home_path expect(page).to have_current_path(users_home_path) end end end  and test to be sure admin can log in too:\n# spec/features/admins/admin_login_spec.rb require 'rails_helper' RSpec.describe 'Users Login', type: :feature do after :each do Warden.test_reset! end scenario 'logs in successfully and is redirected to user home page' do admin_log_in expect(current_path).to eql(auth_admin_root_path) end end # spec/features/admins/admin_signup_spec.rb require 'rails_helper' RSpec.describe 'Admin Signup', type: :feature do # IMPORTANT is NOT created in DB! let(:admin) { FactoryBot.build :admin } after :each do Warden.test_reset! end describe 'admin is not signed-up' do scenario 'admin registers' do admin_sign_up(email: admin.email, password: admin.password) expect(page).to have_current_path(admins_home_path) end end end # spec/features/admins/admins_home_spec.rb require 'rails_helper' RSpec.describe 'Admins Home', type: :feature do let(:admin) { FactoryBot.create :admin } after :each do Warden.test_reset! end describe 'un-authenticated' do scenario 'attempts to access admins home page is redirected to user login' do visit admins_home_path expect(current_path).to eql(new_admin_session_path) end end describe 'already authenticated' do before { admin_log_in(admin) } scenario 'gets access to the user homepage' do visit admins_home_path expect(current_path).to eql(admins_home_path) end end end  before we wrap up - we need to fix our request specs - now that we added login restrictions:\n# spec/requests/users/home_request_spec.rb require 'rails_helper' RSpec.describe \u0026quot;Patron::Homes\u0026quot;, type: :request do let(:patron) { FactoryBot.create :patron } describe \u0026quot;GET /index\u0026quot; do context \u0026quot;NOT logged in\u0026quot; do after do sign_out patron end it \u0026quot;home as '/patrons' page is NOT accessible\u0026quot; do get \u0026quot;/patrons\u0026quot; expect(response).to have_http_status(:redirect) # to login end it \u0026quot;home as 'patron_home_path' page is NOT accessible\u0026quot; do get patrons_home_path expect(response).to have_http_status(:redirect) end it \u0026quot;home as 'auth_patron_root_path' page is NOT accessible\u0026quot; do get auth_patron_root_path expect(response).to have_http_status(:success) # here we need page match for different root routes end end context \u0026quot;logged in\u0026quot; do before do sign_in patron end after do sign_out patron end it \u0026quot;home as '/patrons' page is accessible\u0026quot; do get \u0026quot;/patrons\u0026quot; expect(response).to have_http_status(:success) end it \u0026quot;home as 'patrons_home_path' page is accessible\u0026quot; do get patrons_home_path expect(response).to have_http_status(:success) end it \u0026quot;home as 'auth_patron_root_path' page is accessible\u0026quot; do get auth_patron_root_path expect(response).to have_http_status(:success) end end end end # spec/requests/umdze/home_request_spec.rb require 'rails_helper' RSpec.describe \u0026quot;Umdze::Homes\u0026quot;, type: :request do let(:umdze) { FactoryBot.create :umdze } describe \u0026quot;GET /index\u0026quot; do context \u0026quot;NOT logged in\u0026quot; do after do sign_out umdze end it \u0026quot;home as '/umdzes' page is NOT accessible\u0026quot; do get \u0026quot;/umdzes\u0026quot; expect(response).to have_http_status(:redirect) # to login end it \u0026quot;home as 'umdzes_home_path' page is NOT accessible\u0026quot; do get umdzes_home_path expect(response).to have_http_status(:redirect) end it \u0026quot;home as 'auth_umdze_root_path' page is NOT accessible\u0026quot; do get auth_umdze_root_path expect(response).to have_http_status(:success) # here we need page match for different root routes end end context \u0026quot;logged in\u0026quot; do before do sign_in umdze end after do sign_out umdze end it \u0026quot;home as '/umdzes' page is accessible\u0026quot; do get \u0026quot;/umdzes\u0026quot; expect(response).to have_http_status(:success) end it \u0026quot;home as 'umdzes_home_path' page is accessible\u0026quot; do get umdzes_home_path expect(response).to have_http_status(:success) end it \u0026quot;home as 'auth_umdze_root_path' page is accessible\u0026quot; do get auth_umdze_root_path expect(response).to have_http_status(:success) end end end end # spec/requests/admins/dashboard_request_spec.rb require 'rails_helper' RSpec.describe \u0026quot;Admins::Dashboards\u0026quot;, type: :request do let(:admin) { FactoryBot.create :admin } describe \u0026quot;GET /index\u0026quot; do context \u0026quot;NOT logged in\u0026quot; do it \u0026quot;home as '/admins' page is NOT accessible\u0026quot; do get \u0026quot;/admins\u0026quot; expect(response).to have_http_status(:redirect) end it \u0026quot;home as 'admins_home_path' page is NOT accessible\u0026quot; do get admins_home_path expect(response).to have_http_status(:redirect) end it \u0026quot;home as 'auth_admin_root_path' page is NOT accessible\u0026quot; do get auth_admin_root_path expect(response).to have_http_status(:success) # here we need page match for different root routes end end context \u0026quot;logged in\u0026quot; do before do sign_in admin end after do sign_out admin end it \u0026quot;home as '/admins' page is accessible\u0026quot; do get \u0026quot;/admins\u0026quot; expect(response).to have_http_status(:success) end it \u0026quot;home as 'admins_home_path' page is accessible\u0026quot; do get admins_home_path expect(response).to have_http_status(:success) end it \u0026quot;home as 'auth_admin_root_path' page is accessible\u0026quot; do get auth_admin_root_path expect(response).to have_http_status(:success) end end end end  run the tests and be sure all is green - if so, now is a good time to make a commit!\ngit add . git commit -m \u0026quot;rspec and devise configured and tests green\u0026quot;  ","date":1594406751,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1596825951,"objectID":"b4bf9732d1837a10aab48d7d7e01da3f","permalink":"https://btihen.me/post_ruby_rails/rails_devise_users_namespaced/","publishdate":"2020-07-10T20:45:51+02:00","relpermalink":"/post_ruby_rails/rails_devise_users_namespaced/","section":"post_ruby_rails","summary":"Configure devise (for multiple types of accounts) install the devise engine:\nbin/rails generate devise:install  now follow the basic setup config \u0026ndash; add to config/environments/development.rb\nconfig.action_mailer.default_url_options = { host: 'localhost', port: 3000 }  add notifications to the layout for devise in app/views/layouts/application.","tags":["rails","devise","authentication","namespace"],"title":"Rails Devise User Model with Roles","type":"post_ruby_rails"},{"authors":["Bill Tihen"],"categories":["Code","Elixir","Phoenix"],"content":"Purpose This article builds on the existing article: https://btihen.me/post_tech/phoenix_1_5_blog_intro/ and adds nested relationships and has_many_through.\nnow lets create comments (a has many through for users) we will use mix phx.gen.context this time since we will use the posts page to add comments. We will use the context generator since we don\u0026rsquo;t need any views or templates generated. Answer Y to the question about the context already existing. We could create to API files within the Context before the one file gets too large, but we will skip that.\nmix phx.gen.context Blogs Comment comments message:text post_id:references:posts user_id:references:users  Update Relationships We need to create the relationships and update the migration to delete comments when post is deleted:\nNow lets create the relationship between posts and comments:\n# lib/feenix_intro/blogs/comment.ex efmodule FeenixIntro.Blogs.Comment do use Ecto.Schema import Ecto.Changeset alias FeenixIntro.Blogs.Post alias FeenixIntro.Accounts.User @required_fields [:user_id, :post_id, :message] schema \u0026quot;comments\u0026quot; do # remove these # field :post_id, :id # field :user_id, :id # add these: belongs_to(:user, User) belongs_to(:post, Post) field :message, :string timestamps() end @doc false def changeset(comment, attrs) do comment |\u0026gt; cast(attrs, @required_fields) |\u0026gt; validate_required(@required_fields) end  Now lets update posts relationship to comments:\n# lib/feenix_intro/blogs/post.ex # ... alias FeenixIntro.Blogs.Comment # ... schema \u0026quot;posts\u0026quot; do # ... # add this has_many(:comments, Comment) # ...  We could do the same has_many relationship with users - but its not needed. It is unlikely we would want to look-up all a user\u0026rsquo;s comments outside the context of a Blog.\nUpdate Migration to delete sub-resource when top-resource is deleted To create the rails equivalent of dependent_delete we change the migration to the following:\n# priv/repo/migrations/20200704161651_create_comments.exs # ... # replce # add :post_id, references(:posts, on_delete: :nothing) # add :user_id, references(:users, on_delete: :nothing) # with add :post_id, references(:posts, on_delete: :delete_all), null: false add :user_id, references(:users, on_delete: :delete_all), null: false # ...  Now we should be able to migrate:\nmix ecto.migrate  Testing Start simple with the seed file\nLets add a comment to our prebuild posts:\n# priv/repo/seeds.exs # ... # add the alias to keep things short alias FeenixIntro.Blogs.Comment # ... # this ensures all we have all the correct fields: Repo.insert!(%Comment{user_id: dog.id, post_id: post1.id, message: \u0026quot;woof\u0026quot; }) # this also checks the relationships post2 |\u0026gt; Ecto.build_assoc(:comments) |\u0026gt; Comment.changeset(%{user_id: dog.id, post_id: post2.id, message: \u0026quot;BARK\u0026quot; }) |\u0026gt; Repo.insert!()  Lets run the seed and see if all is working:\nmix run priv/repo/seeds.exs  Nice lets make a quick git snapshot before we work on the html aspects\ngit add . git commit -m \u0026quot;Comments added as a resource and relationship to Posts established\u0026quot;  Preload comments within get_post To show the comments within a post we will need to preload the comments \u0026ndash; this is done by adding Repo.preload(:comments) to our function: def get_post!(id) \u0026ndash; however, we will also want to display the comment\u0026rsquo;s author \u0026ndash; so we need to do a nested preload with: Repo.preload([comments: [:user]])\nSo now this function looks like:\n# lib/feenix_intro/blogs.ex def get_post!(id) do Post |\u0026gt; Repo.get!(id) |\u0026gt; Repo.preload(:user) |\u0026gt; Repo.preload([comments: [:user]]) end  This can actually be shortened to (this will be helpful later):\nlib/feenix_intro/blogs.ex def get_post!(id) do Post |\u0026gt; Repo.get!(id) |\u0026gt; Repo.preload([:user, comments: [:user]]) end  Display the comments within the Post show Now that we have updated the get_post! to preload comments we can display the comments too by adding to the end of our post\u0026rsquo;s - show template:\n# lib/feenix_intro_web/templates/post/show.html.eex # ... \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Comment Author\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Message\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;%= for comment \u0026lt;- @post.comments do %\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= comment.user.name %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= comment.message %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;span\u0026gt;\u0026lt;%= link \u0026quot;Edit\u0026quot;, to: Routes.post_path(@conn, :edit, @post) %\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;\u0026lt;%= link \u0026quot;Back\u0026quot;, to: Routes.post_path(@conn, :index) %\u0026gt;\u0026lt;/span\u0026gt;  Start the server mix phx.server and be sure this works\nAssuming it works, lets commit:\ngit add . git commit -m \u0026quot;display comments and comment author on post show page\u0026quot;  Creating Comments (as a nested resource) Since we have added comments within the Blogs context and they are associated with a post - it makes sense to create and display comments as a nested resource. To set this up lets change our routes file:\n# lib/feenix_intro_web/router.ex # ... scope \u0026quot;/\u0026quot;, FeenixIntroWeb do pipe_through :browser get \u0026quot;/\u0026quot;, PageController, :index resources \u0026quot;/users\u0026quot;, UserController # replace this line: # resources \u0026quot;/posts\u0026quot;, PostController # with: resources \u0026quot;/posts\u0026quot;, PostController do resources \u0026quot;/comments\u0026quot;, CommentController, only: [:create] end end # ...  This means we will be able to create a comment only within the context of an existing post (seems reasonable) \u0026ndash; more actions can be added later such as edit or delete possibly.\nThis also means we need to display our comments within the context of existing posts (the best place for this is the show - where all the details of the post are shown).\nLet\u0026rsquo;s create the controller we just defined - we will need to make a new file:\n# lib/feenix_intro_web/controllers/comment_controller.ex defmodule FeenixIntroWeb.CommentController do use FeenixIntroWeb, :controller alias FeenixIntro.Blogs def create(conn, %{\u0026quot;post_id\u0026quot; =\u0026gt; post_id, \u0026quot;comment\u0026quot; =\u0026gt; comment_params}) do # define the post we are nested within post = Blogs.get_post!(post_id) # create our new comment and handle (success or failure) case Blogs.create_comment(post, comment_params) do {:ok, _comment} -\u0026gt; conn |\u0026gt; put_flash(:info, \u0026quot;Comment created\u0026quot;) |\u0026gt; redirect(to: Routes.post_path(conn, :show, post)) # TODO: return to form and show errors {:error, _changeset} -\u0026gt; conn |\u0026gt; put_flash(:error, \u0026quot;Comment creation failed\u0026quot;) |\u0026gt; redirect(to: Routes.post_path(conn, :show, post)) end end end  Note: at the moment we don\u0026rsquo;t handle errors, and allow those to be fixed. We will get to that in a second step.\nWe need to update the function create_comment in order to work as a nested resource:\n# @doc \u0026quot;\u0026quot;\u0026quot; Creates a comment. ## Examples # also update our function docs # replace # iex\u0026gt; create_comment(%{field: value}) # with iex\u0026gt; create_comment(post, %{field: value}) {:ok, %Comment{}} # replace: # iex\u0026gt; create_comment(%{field: bad_value}) # with: iex\u0026gt; create_comment(post, %{field: bad_value}) {:error, %Ecto.Changeset{}} \u0026quot;\u0026quot;\u0026quot; # replace # def create_comment(attrs \\\\ %{}) do # %Comment{} # |\u0026gt; Comment.changeset(attrs) # |\u0026gt; Repo.insert() # end # with (this uses the passed in post and creates an association with the new comment) def create_comment(%Post{} = post, attrs \\\\ %{}) do post |\u0026gt; Ecto.build_assoc(:comments) |\u0026gt; Comment.changeset(attrs) |\u0026gt; Repo.insert() end  In order to create a new Comment form the show function will need to borrow from a typical new function and send and empty struct (changeset) for the form \u0026ndash; lets start by updating the PostController show function:\n# lib/feenix_intro_web/controllers/post_controller.ex # ... alias FeenixIntro.Blogs.Comment def show(conn, %{\u0026quot;id\u0026quot; =\u0026gt; id}) do post = Blogs.get_post!(id) users = Accounts.list_users() # replace: # render(conn, \u0026quot;show.html\u0026quot;, post: post, users: users) # with: This allows us to add comments on the Post show form! comment_changeset = Blogs.change_comment(%Comment{}) render(conn, \u0026quot;show.html\u0026quot;, post: post, users: users, comment_changeset: comment_changeset) end  Now that we have an empty changeset for the form - we can add the form to the show page with:\n# lib/feenix_intro_web/templates/post/show.html.eex # ... \u0026lt;h3\u0026gt;Add a Comment\u0026lt;/h3\u0026gt; \u0026lt;%= form_for @comment_changeset, Routes.post_comment_path(@conn, :create, @post), fn form -\u0026gt; %\u0026gt; \u0026lt;%= label form, \u0026quot;Author\u0026quot; %\u0026gt; \u0026lt;%= select form, :user_id, Enum.map(@users, \u0026amp;{\u0026amp;1.name, \u0026amp;1.id}) %\u0026gt; \u0026lt;%= error_tag form, :user %\u0026gt; \u0026lt;%= label form, :message %\u0026gt; \u0026lt;%= textarea form, :message %\u0026gt; \u0026lt;%= error_tag form, :message %\u0026gt; \u0026lt;div\u0026gt; \u0026lt;%= submit \u0026quot;Save\u0026quot;%\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; # ...  Let\u0026rsquo;s try this out with: mix phx.server\nassuming all works as expected let\u0026rsquo;s make another git commit:\ngit add . git commit -m \u0026quot;comment creation as a nested resource within posts\u0026quot;  Handle Input Errors Prevent empty strings:\n  https://stackoverflow.com/questions/32784008/phoenix-render-template-of-other-folder  lets add a minimum message legth to comments:\n# lib/feenix_intro/blogs/comment.ex def changeset(comment, attrs) do comment |\u0026gt; cast(attrs, @required_fields) |\u0026gt; validate_required(@required_fields) |\u0026gt; validate_length(:message, min: 3) end  Now, change the controller to prep the data just like a post show and send the changeset - with the errors. |\u0026gt; put_view(FeenixIntroWeb.PostView) is how we redirect to other external views as of Phoenix 1.5.1:\n# lib/feenix_intro_web/controllers/comment_controller.ex # add the alias alias FeenixIntro.Accounts # ... def create(conn, %{\u0026quot;post_id\u0026quot; =\u0026gt; post_id, \u0026quot;comment\u0026quot; =\u0026gt; comment_params}) do # ... # replace: # {:error, _changeset} -\u0026gt; # conn # |\u0026gt; put_flash(:error, \u0026quot;Comment creation failed, please fix the errors\u0026quot;) # |\u0026gt; redirect(to: Routes.post_path(conn, :show, post)) # with: {:error, %Ecto.Changeset{} = changeset} -\u0026gt; users = Accounts.list_users() conn |\u0026gt; put_flash(:error, \u0026quot;Comment creation failed, please fix the errors\u0026quot;) |\u0026gt; put_view(FeenixIntroWeb.PostView) # as of Phoenix 1.5.1 |\u0026gt; render(\u0026quot;show.html\u0026quot;, post: post, users: users, comment_changeset: changeset) # ...  Assuming this works make a new git commit:\ngit add . git commit -m \u0026quot;handle comment creation errors\u0026quot;  Flexible preloading You may have noticed the pre-loading is hard-coded \u0026ndash; in this case it is ok, but might not always be good. Here is a flexible alternative:\nWe can update / replace the following functions with the following:\n# lib/feenix_intro/blogs.ex def list_posts(opts \\\\ [:user]) do preloads = Keyword.get(opts, :preloads, []) Post |\u0026gt; Repo.all() |\u0026gt; Repo.preload(preloads) end def get_post!(id, opts \\\\ [:user, comments: [:user]]) do preloads = Keyword.get(opts, :preloads, []) Post |\u0026gt; Repo.get!(id) |\u0026gt; Repo.preload(preloads) end def get_comment!(id, opts \\\\ [:user]) do preloads = Keyword.get(opts, :preloads, []) Comment |\u0026gt; Repo.get!(id) |\u0026gt; Repo.preload(preloads) end  And now we can change our show post controller to look like - so that we can use this flexibility:\n# lib/feenix_intro_web/controllers/post_controller.ex # ... def index(conn, _params) do # posts = Blogs.list_posts() preloads = [:user] posts = Blogs.list_posts(preloads: preloads) render(conn, \u0026quot;index.html\u0026quot;, posts: posts) end def new(conn, _params) do users = Accounts.list_users() changeset = Blogs.change_post(%Post{}) render(conn, \u0026quot;new.html\u0026quot;, changeset: changeset, users: users) end # ... def show(conn, %{\u0026quot;id\u0026quot; =\u0026gt; id}) do # post = Blogs.get_post!(id) preloads = [:user, comments: [:user]] post = Blogs.get_post!(id, preloads: preloads) users = Accounts.list_users() # This allows us to add comments on the Post show form! comment_changeset = Blogs.change_comment(%Comment{}) render(conn, \u0026quot;show.html\u0026quot;, post: post, users: users, comment_changeset: comment_changeset) end  Now we have the flexibilty to preload or not depending on what we want to do,\n","date":1594367031,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628293431,"objectID":"96d475de459c9fb584327c37f120dee2","permalink":"https://btihen.me/post_elixir_phoenix/phoenix_1_5_blog_w_comments/","publishdate":"2020-07-10T09:43:51+02:00","relpermalink":"/post_elixir_phoenix/phoenix_1_5_blog_w_comments/","section":"post_elixir_phoenix","summary":"Exploring more nested Reources with Phoenix","tags":["Relationships","Templates","Nested Preloading","Nested Resources","Render Foriegn Views","User Error Handling"],"title":"Phoenix 1.5 Blog with Comments","type":"post_elixir_phoenix"},{"authors":["Bill Tihen"],"categories":["Code","Phoenix","Elixir"],"content":"Purpose This article creates a basic web application backed by a database and creates a few relationships. I\u0026rsquo;ll use the mix generator commands to make this process quick and easy. In step two we will add a graphql api.\nTopics Covered  create a project create a resource dropdown list of a collection pre-load/display sub-reources create a has_many relationship create a belongs_to relationship delete has_many sub-resources when top resource is deleted  Getting Started - create an app find the most recent phoenix version: https://github.com/phoenixframework/phoenix/releases\nmix archive.install hex phx_new 1.5.3 mix phx.new feenix_intro cd feenix_intro mix ecto.create  test with: mix phx.server and go to http://localhost:4000\nIdeally you see a the Phoenix Start Page.\nLet\u0026rsquo;s create a git snapshot\ngit init \u0026amp;\u0026amp; git add -A \u0026amp;\u0026amp; git commit -m \u0026quot;init\u0026quot;  Create Contexts Context helps us create areas of code isolation and creates an API for other contexts to use\nIn our case we will need a Blogs and Accounts (better would have been Authors) context\nBlogs will have the posts and comments and Accounts will have the user and login credentials and user relationships (why not)? To see the full documentation on Contexts see: https://hexdocs.pm/phoenix/contexts.html\nWe will generate two resources and Contexts (and add more later) - lets start with users who will post their blogs (users will be within the Accounts context and posts will be within the Blogs context):\nmix phx.gen.html Accounts User users name:string email:string username:string:unique mix phx.gen.html Blogs Post posts title:string body:text user_id:references:users  Notice we can generate unique fields with :unique\nAnd we can generate relationships (foriegn keys) with references\nNow that we have generated our code - we need to make a few updates:\nFirst: we need to update our routes in the scope area to look like:\n# lib/ideas_web/router.ex scope \u0026quot;/\u0026quot;, FeenixIntroWeb do pipe_through :browser get \u0026quot;/\u0026quot;, PageController, :index resources \u0026quot;/users\u0026quot;, UserController resources \u0026quot;/posts\u0026quot;, PostController end  NOTE: the API\u0026rsquo;s for our Contexts Accounts and Blogs is in lib/feenix_intro/accounts.ex and lib/feenix_intro/blogs/post.ex respectively - as we add more info into these contexts these files will get long! Ideally you will always interact with the Context API and not the Repo directly this will help create much more managable code.\nDefine the has_many relationship Before we migrate we need to define the relationships:\nso we update the users with a has_many relationship to posts\n# lib/feenix_intro/accounts/user.ex defmodule FeenixIntro.Accounts.User do use Ecto.Schema import Ecto.Changeset alias FeenixIntro.Blogs.Post @required_fields [:name, :email, :username] schema \u0026quot;users\u0026quot; do has_many(:posts, Post) field :name, :string field :email, :string field :username, :string timestamps() end @doc false def changeset(user, attrs) do user |\u0026gt; cast(attrs, @required_fields) |\u0026gt; validate_required(@required_fields) |\u0026gt; unique_constraint(:username) end end  If you skip the alias, then has_many needs to be written as: has_many(:posts, FeenixIntro.Blogs.Post)\nDefine the belongs_to relationship IMPORTANT: replace the field :user_id, :id with belongs_to(:user, User) \u0026ndash; you CAN\u0026rsquo;T have both!\n# lib/feenix_intro/blogs/post.ex defmodule FeenixIntro.Blogs.Post do use Ecto.Schema import Ecto.Changeset alias FeenixIntro.Blogs.Post alias FeenixIntro.Accounts.User @required_fields [:user_id, :title, :body] schema \u0026quot;posts\u0026quot; do belongs_to(:user, User) # field :user_id, :id field :body, :string field :title, :string timestamps() end @doc false def changeset(post, attrs) do post |\u0026gt; cast(attrs, @required_fields) |\u0026gt; validate_required(@required_fields) end end  NOTE: @required_fields [:user_id, :title, :body] isn\u0026rsquo;t required, but as things change defining a constant that can be reused can be convient.\nAuto delete sub-resources To be sure we don\u0026rsquo;t have unreferenced blogs if a user gets deleted we need to change our Blog migration to:\n# priv/repo/migrations/20200704152318_create_posts.exs defmodule FeenixIntro.Repo.Migrations.CreatePosts do use Ecto.Migration def change do create table(:posts) do add :title, :string add :body, :text # remove the default # add :user_id, references(:users, on_delete: :nothing) # add the following to auto delete posts if user is deleted! add :user_id, references(:users, on_delete: :delete_all), null: false timestamps() end create index(:posts, [:user_id]) end end  Now it should be safe to migrate using:\nmix ecto.migrate  Seed Data Let\u0026rsquo;s create seed data so that one we know how to do that and two have some data to test before we get all our views and forms working:\n# priv/repo/seeds.exs # Script for populating the database. You can run it as: # # mix run priv/repo/seeds.exs # # We recommend using the bang functions (`insert!`, `update!` # and so on) as they will fail if something goes wrong. alias FeenixIntro.Repo alias FeenixIntro.Blogs.Post alias FeenixIntro.Accounts.User # reset the datastore Repo.delete_all(User) # this should also delete all Posts # insert people me = Repo.insert!(%User{ name: \u0026quot;Bill\u0026quot;, email: \u0026quot;bill@example.com\u0026quot;, username: \u0026quot;bill\u0026quot; }) dog = Repo.insert!(%User{ name: \u0026quot;Nyima\u0026quot;, email: \u0026quot;nyima@example.com\u0026quot;, username: \u0026quot;nyima\u0026quot; }) Repo.insert!(%Post{ user_id: me.id, title: \u0026quot;Elixir\u0026quot;, body: \u0026quot;Very cool ideas\u0026quot; }) Repo.insert!(%Post{ user_id: me.id, title: \u0026quot;Phoenix\u0026quot;, body: \u0026quot;live is fascinating\u0026quot; }) Repo.insert!(%Post{ user_id: dog.id, title: \u0026quot;Walk\u0026quot;, body: \u0026quot;oh cool\u0026quot; }) Repo.insert!(%Post{ user_id: dog.id, title: \u0026quot;Dinner\u0026quot;, body: \u0026quot;YES!\u0026quot; })  now as the comments state run:\nmix run priv/repo/seeds.exs  Testing run:\nmix phx.server # or if you prefer: # iex -S mix phx.server  Test USERS:\nGo to: http://localhost:4000/users\nwhen we list users and create users - all is well\nTEST POSTS\nGo to: http://localhost:4000/posts\nwhen we do the same withe posts - we get an error creating new posts and we don\u0026rsquo;t see the author in index and show\n we can\u0026rsquo;t create a post since we required the user_id and there is not field for that we can\u0026rsquo;t list the author\u0026rsquo;s name (just the author\u0026rsquo;s ID) until we preload the author along with the post  Fix Post creation with a dropdown list of resources Normally, this would be done with session info to autoselect the authenticated author, but that is for another day. In this case, we will demonstrate how to load and pass a collection and use that to populate a dropdown entry.\nIn the controller we must load users and add the user_id to the post form: whe we look in the Accounts API we see: list_users()\n# lib/feenix_intro_web/controllers/post_controller.ex # ... # add the accounts context alias alias FeenixIntro.Accounts # ... def new(conn, _params) do changeset = Blogs.change_post(%Post{}) # replace: # render(conn, \u0026quot;new.html\u0026quot;, changeset: changeset) # with: # collection of users for post form users = Accounts.list_users() # include the collection of users to the new form render(conn, \u0026quot;new.html\u0026quot;, changeset: changeset, users: users) end # ... def edit(conn, %{\u0026quot;id\u0026quot; =\u0026gt; id}) do post = Blogs.get_post!(id) changeset = Blogs.change_post(post) # replace: render(conn, \u0026quot;edit.html\u0026quot;, post: post, changeset: changeset) # with: users = Accounts.list_users() render(conn, \u0026quot;edit.html\u0026quot;, post: post, changeset: changeset, users: users) end # ...  Now we need to adapt the form to give us a choice of users:\n# lib/feenix_intro_web/templates/post/form.html.eex \u0026lt;%= form_for @changeset, @action, fn f -\u0026gt; %\u0026gt; \u0026lt;%= if @changeset.action do %\u0026gt; \u0026lt;div class=\u0026quot;alert alert-danger\u0026quot;\u0026gt; \u0026lt;p\u0026gt;Oops, something went wrong! Please check the errors below.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;%= label f, \u0026quot;Author\u0026quot; %\u0026gt; \u0026lt;%= select f, :user_id, Enum.map(@users, \u0026amp;{\u0026amp;1.name, \u0026amp;1.id}) %\u0026gt; \u0026lt;%= error_tag f, :user %\u0026gt; # ...  Assuming you can create posts now, lets make another git snapshot:\ngit add . git commit -m \u0026quot;users and posts resources can be created\u0026quot;  Display the Author of Post (with Preloads) lets display the Blog author - that\u0026rsquo;s often interesting to others. We can do this with preloading in our Blog context:\n# lib/feenix_intro/blogs.ex # change this line: # def list_posts, do: Repo.all(Post) def list_posts do Post |\u0026gt; Repo.all() |\u0026gt; Repo.preload(:user) end  and also our get_post\n# lib/feenix_intro/blogs.ex # change: # def get_post!(id), do: Repo.get!(Post, id) # into: def get_post!(id) do Post |\u0026gt; Repo.get!(id) |\u0026gt; Repo.preload(:user) end  now we can update our index and show page to display the author\u0026rsquo;s name at the top of the page:\n# lib/feenix_intro_web/templates/post/show.html.eex \u0026lt;h1\u0026gt;Show Post\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;strong\u0026gt;Author:\u0026lt;/strong\u0026gt; \u0026lt;%= @post.user.name %\u0026gt; \u0026lt;/li\u0026gt;  and in the index too:\n# lib/feenix_intro_web/templates/post/index.html.eex # ...elixir \u0026lt;%= for post \u0026lt;- @posts do %\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= post.user.name %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= post.title %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= post.body %\u0026gt;\u0026lt;/td\u0026gt; # ...  Assuming authors and preload works properly, we can make another git snapshot:\ngit add . git commit -m \u0026quot;authors names are displayed now with preloading\u0026quot;  Source code  https://github.com/btihen/PhoenixIntro\nHelpful Resources used:   https://elixircasts.io/phoenix-contexts  https://github.com/conradwt/zero-to-graphql-using-phoenix  https://medium.com/@damonvjanis/ecto-preloads-in-phoenix-contexts-167d11e5405e  https://dev.to/joseph_lozano/setting-up-a-new-phoenix-1-5-project-with-phoenix-liveview-309n  https://medium.com/velotio-perspectives/creating-graphql-apis-using-elixir-phoenix-and-absinthe-486ff38f2549  ","date":1593860789,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628334389,"objectID":"0113a5ddc6ddb51bae65adc96da9274d","permalink":"https://btihen.me/post_elixir_phoenix/phoenix_1_5_blog_intro/","publishdate":"2020-07-04T13:06:29+02:00","relpermalink":"/post_elixir_phoenix/phoenix_1_5_blog_intro/","section":"post_elixir_phoenix","summary":"This article covers how to create a new app with contexts, relationships, preloading, etc.  The basics for most dynamic websites (excluding authentication). Comming later.","tags":["Relationships","Templates","Preloading","has_many","belongs_to","dependent delete","selection in form"],"title":"Phoenix 1.5 Blog Intro","type":"post_elixir_phoenix"},{"authors":["Bill Tihen"],"categories":["Education","Classroom","EDgile","Practice"],"content":"Good learning projects (quite possibly all interesting projects), must have the right amount of complexity and built-in imperfections due to design trade-offs and compromises. This ensures that projects aren’t google-able AND are challenging enough to encourage real learning. I like to think that “challenging enough” ensures that students experience a sense of the “hero’s journey” while working on their projects and then when they are successful they will have a sense of pride in what they learned and accomplished.\nThis level of complexity has two side effects that are common in the real world, but uncommon in education:\n how to arrive at the best solution is unknown and uncertain (by even the teacher) and will require exploration - quite possibly there is more than one workable solution; and the process of exploring to find a workable solution will involve what is commonly called the dreaded deadend or, in my field of tech, going down the rabbit hole. Unfortunately, this is often seen as a problem - not knowing and not understanding is, after all, what schools set out to correct. Allowing students to head in the wrong direction, especially since many people value efficiency (for example, discovering the fastest way to learn), can seem wrong-headed, but schools in theory should value worthwhile learning as their top priority, not speed.  Ideally, as students work, they self-assess, self-reflect, and self-correct their own work. It is, unfortunately, very common that we as teachers correct students and we as teachers tell them not only what to rework, and how to do it. This may be efficient at getting certain results - for example, completed projects. However, I question if that is valuable learning. When we judge student work, students learn to work toward the approval found in a grade, which alters learning. Additionally, when we tell students what to do, they don’t learn to self-regulate and self-motivate their own learning processes.\nOn the other hand, when students can engage in deliberate practice (where they self-assess, self-reflect, self-correct, and choose to redo until they themselves are satisfied), then students not only learn the classroom curriculum, but also lifeworthy skills, including: problem solving skills, balancing competing design needs, grit (stick-to-it-ive-ness), self-directed learning, and the joy of learning and discovery. In this way, students are much more likely to become life-long learners.\nTo ensure that students learn the process of deliberate practice, it is important to create a classroom environment where it is straightforward for students to be able to self-assess. I have found the best way to do this is to use \u0026rsquo;natural\u0026rsquo; assessments. At least in the world of code, engineering, and physics, this is pretty straightforward. Make rubrics in which the students can test themselves, e.g. in a class making boats, the rubric will ask if it floats with a payload, say a large coin. For areas where natural assessment isn’t as easy, I teach the kids how to get (and give) each other helpful feedback (described in a later article). In this way, students are helping each other, learning from each other, and in the end self-assessing what to do with the feedback. They are no longer as reliant on the teacher.\nThe beauty of letting students learn this way, when there is safety to explore (\u0026amp; make mistakes), is that the students often enjoy the learning, gain self-confidence, and possibly learn the JOY of learning. If this joy of learning becomes commonplace in education, we are very likely to have many more joyful, lifelong learners and innovators.\n","date":1593349282,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1592312482,"objectID":"c068b7a3d4c13a81938298cffeae45ac","permalink":"https://btihen.me/post_edu/edgility_btihen_rework/","publishdate":"2020-06-28T15:01:22+02:00","relpermalink":"/post_edu/edgility_btihen_rework/","section":"post_edu","summary":"Complex projects provide the opportunity to explore and learn what does and doesn’t work. Understanding what doesn’t work and adjusting (redoing) work can often lead to tremendous learning. The caveat is that teachers must create a safe environment, without judgement, which creates space for 'mistakes' and 'rework.'","tags":["deliberate practice","self-assess","self-reflect","self-Correct","joy","explore"],"title":"Rework through Deliberate Practice","type":"post_edu"},{"authors":["Bill Tihen"],"categories":["Education","EDgile","Practice","Classroom"],"content":"Fun and a sense of adventure can be crucial to classroom engagement and learning. Cultivating a sense of adventure is similar to encouraging an atmosphere of playfulness and joy of learning. This can be quite straightforward when students are allowed to create their own goals and their own context for the goals within the curriculum. Of course, any good adventure can’t be too easy. It’s the teacher’s job to make sure a project has no obvious, googleable answer.\nWe might worry that making the project hard and beyond what the students know how to do could be unfair or even unjust. This might be true. When students are used to the mindset of getting things right the first time, it is difficult for them to take an idea and ‘play’ with it until something works. This adjustment takes some time, but once they get the hang of it, students enjoy exploring and they learn quickly.\nPersonally, I most enjoy observing how students learn resilience through ‘playing’ with ideas and trying different options until they find a solution. In fact, in today’s world it may be more important to learn resilience, persistence, and finding the next small workable step in order to progress toward a goal.\nOf course creating an environment where exploration can thrive requires not doing a few things, too - such as:\n Not judging or criticizing mistakes or rework Not judging the work or its qualities, instead let the kids cultivate their own pride and ownership (the minimum quality tests need clear, objective and observable) Not celebrating the answers, but celebrating the exploratory and learning aspects. Not requiring that every student have the same depth of knowledge in each part of the project. It\u0026rsquo;s important to define baseline knowledge they all need to have - but after that they need to be free to explore more deeply what the student finds interesting.  To encourage exploration we have found that the following the guidance for a growth mindset is very helpful:\n Praise the grit and perseverance of arriving at a workable solution; Cultivate the mindset of finding the next workable thing to try, even when there is no clear path to the goal; and Encourage / expect (maybe even require) rework and changes.  On a practical note, it is important to create projects that are complex and have some built-in conflict that requires balancing and tradeoffs. This is important for several reasons:\n Without trade-offs, a problem isn’t realistic and can be too easily googled. The problem must be challenging enough or it isn’t engaging (but it needs to be workable). Having to resolve a conflict or resolve tradeoffs and still arrive at one\u0026rsquo;s goals requires students to really go into depth and learn that aspect extra well.   NOTE: In the world of engineering, it is important to have a solid generalist understanding of the field (like the basic required information tested at school), but that is rarely enough for most teams. It is important to be a specialist in at least one area of interest \u0026ndash; these are called ‘T’ shaped engineers - engineers that have gone deep into two areas are even more valuable and are called ‘π’ shaped engineers. I’m advocating for creating projects (and classroom environments) in school that cultivate the same generalist / specialist mindset that is often expected in graduate school and professional lives. Art curriculums have long taught the core skills and ideas and then expected students to explore and expand upon their interests. Imagine how engaging education could be when all aspects of schools encouraged choice and exploration.\n Teaching this way can be uncomfortable for teachers who may traditionally have felt that they need to operate as the expert who knows everything. To model the idea, however, that you don’t have to know everything, it is actually helpful not to know everything. In fact, you cannot give students a quick answer, which cuts off their chance to think through the problem, and instead you explore with the students and model how to learn and resolve difficult problems. The teacher must simply understand the basics and vocabulary of the field to help students interpret what they find. Of course the teacher must also be comfortable modeling exploring the unknown with the kids.\n","date":1591023436,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1592319436,"objectID":"b1753ec699cf1f57f6ef94213d26782a","permalink":"https://btihen.me/post_edu/edgility_btihen_exploration/","publishdate":"2020-06-01T16:57:16+02:00","relpermalink":"/post_edu/edgility_btihen_exploration/","section":"post_edu","summary":"When students are trusted to explore and know that mistakes are ok, learning becomes fun and engaging. Exploration builds on student interests so they learn the basics naturally - and even specialize on aspects of particular interest to them.","tags":["exploration","trust","adventure","joy","engagement","student choice"],"title":"Exploration in the Classroom","type":"post_edu"},{"authors":["Bill Tihen"],"categories":["Website"],"content":"step 0: buy a domain name For these instructions use the (Namecheap)[https://www.namecheap.com/] service to buy your Domain.\nstep 1: point your domain name at: username.github.io (optional) This takes quite a steps and disables https (more steps follow to renable ssl). This article got me oriented: https://dev.to/rightfrombasics/connecting-namecheap-domain-with-github-pages-3nn6\n log into Namecheap On the left is a sidebar with Dashboard and the top. Click on the Domain List Find your domain name and click the manage button on the far right. Along the top click on Advanced DNS Add your A records to the DNS config. I typed: dig btihen.github.io (of course replace with your github website name) and got:  ; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.10.6 \u0026lt;\u0026lt;\u0026gt;\u0026gt; btihen.github.io ;; global options: +cmd ;; Got answer: ;; -\u0026gt;\u0026gt;HEADER\u0026lt;\u0026lt;- opcode: QUERY, status: NOERROR, id: 28239 ;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 512 ;; QUESTION SECTION: ;btihen.github.io.\tIN\tA ;; ANSWER SECTION: btihen.github.io.\t3600\tIN\tA\t185.199.110.153 btihen.github.io.\t3600\tIN\tA\t185.199.109.153 btihen.github.io.\t3600\tIN\tA\t185.199.108.153 btihen.github.io.\t3600\tIN\tA\t185.199.111.153  So created the following A Records:\ntype Host Value TTL A Record @ 185.199.110.153 Automatic A Record @ 185.199.109.153 Automatic A Record @ 185.199.108.153 Automatic A Record @ 185.199.111.153 Automatic  Then I created a CNAME record:  type Host Value TTL CNAME Record www btihen.github.io Automatic  step 2: configure you github site to accept the domain You need to make a file called CNAME in the root of your username.github.io repo and it contents must be your new domain name.\nFor example I used:\ncd public touch CNAME echo 'btihen.me' \u0026gt;\u0026gt; CNAME git add . git commit -m 'accept the domain name: btihen.me' git push  step 3: stop and check NOW: http://your-domain-name.com should work\nstep 4: Free ssl for the domain following the advice from: https://dev.to/rightfrombasics/adding-ssl-to-your-site-free-1fa7\n create a cloudflare account. choose the dns feature allow cloudflare to scan your dns records (it should get the same results as when you do: dig username.github.io) Continue through the cloudflare process \u0026amp; cloudflare will eventually give you 2 nameservers to use. Now you can have cloudflare take over your dns \u0026ndash; log into Namecheap On the left is a sidebar with Dashboard and the top. Click on the Domain List Find your domain name and click the manage button on the far right. On the top bar choose Domain Find the Nameservers section Choose Custom DNS Add the tow servers given to you by Cloudflare and save. Go back to cloudflare and choose Full end to end encryption Choose Always Use HTTPS Save and click the Re-check now button.  Unfortunately, now you need to wait for a 1/2 hour or morefor the dns service to transfer from Namecheap to Cloudflare. Theoretically up to 48 hours (but a 1/2 hour is much more typical).\n","date":1590924168,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590924168,"objectID":"5a9643f1b22265ac240f8c4cd71f5b10","permalink":"https://btihen.me/post_tech_notes/github_website_with_custom_domain/","publishdate":"2020-05-31T13:22:48+02:00","relpermalink":"/post_tech_notes/github_website_with_custom_domain/","section":"post_tech_notes","summary":"step 0: buy a domain name For these instructions use the (Namecheap)[https://www.namecheap.com/] service to buy your Domain.\nstep 1: point your domain name at: username.github.io (optional) This takes quite a steps and disables https (more steps follow to renable ssl).","tags":["website","ssl","domain","github","cloudflare","namecheap"],"title":"Github Website with a Custom Domain \u0026 SSL","type":"post_tech_notes"},{"authors":["Bill Tihen"],"categories":["Education"],"content":"Basically a mix of having the kids build on their strengths, exploring the doing project based with and goal and within a context of the student\u0026rsquo;s choice. The project-work uses many agile processes*, one step outside their knowledge/comfort,\n Agility in this context means small-teams that work with small aspects of a bigger objective and build their knowledge / project iteratively and reflect (on demo suggestions (feedback) AND their own learning process) to inform the next iteration and enjoy the exploration of knowledge.  Teacher\u0026rsquo;s Responsibilities \u0026amp; Activities  UPLIFT BUILD SUCCESS AND CONFIDENCE \u0026ndash; I personally like to borrow from the concept of the Hero\u0026rsquo;s Journey - Help the student have a context and need to learn \u0026amp; apply knowledge to the point where they can SOLVE A COMPLEX CHALLENGE to meet the goal within the context of the learning objectives of the class (or unit). Uplifted Atmosphere - guide kids to encourage strengths   re-enforce activities that builds the student\u0026rsquo;s confidence and joy in learning re-direct distracting /destructive activities toward helpful actions exploration create an atmosphere where learning can be fun, meaningful and exploratory (like young kids) and not stressful and time-based  Natural Assessment \u0026amp; Motivation - whenever possible \u0026amp; allowed - I avoid grading, assessing and correcting students. Instead, I encourage nature assessments and motivation. For example, while building boats, have a pool and criteria for \u0026ldquo;tracking\u0026rdquo;, \u0026ldquo;load\u0026rdquo;, etc. and have the students test the boat in the pool - where everyone can see and test the qualities. To that end, I find it very helpful if the students work will be publicly viewed and seen by others - preferably with the students present to \u0026ldquo;show\u0026rdquo; their product \u0026amp; experience the pride (or embarrassment in their work). That\u0026rsquo;s often much more ownership than a grade. If a state or other external final exam like an AP test is part of the course \u0026ndash; then I suggest after covering the material in the project based way \u0026ndash; then spend the last part of the class doing practice exams until the students are comfortable with the exam aspects of the knowledge. This mixed approach has been very successful in teaching AP Computer Science (nearly all students received the top score 19 of 20 students). Teaching Activities - guide kids to learn the materials (rarely instruct)   guide students to other students who can help them help the students smallify their work to find something they can research \u0026amp; solve (the next doable step just beyond their skill-level) help the students with keywords, concepts and vocabulary to do the research for their next step help the students understand and interpret their research they found but don\u0026rsquo;t fully understand help the students apply their research they\u0026rsquo;ve understood conceptually, but unsure how to implement  Student\u0026rsquo;s Responsibilities \u0026amp; Activities  Choice - of goals and context within the context of the learning objectives of the class (or unit). For example to teach middle school students 3-D Analytical Geometry \u0026amp; Fluid Dynamics - students create companies and design a boat of their choice (and print versions of it as they refine it). Each boat will need a specialty with a specialty (stability, comfort for people, speed, tracking, efficiency, load, \u0026hellip;) and can overcome some adversity (wind, waves, currents, \u0026hellip;) Context - students need to create a context they own for their chosen goal. This means creating a story (an explanation / real or imagined) for the importance of their chosen goal. For example when teaching Earth Sciences students could choose to make an Earthquake alarm system to help people in stay safe. To that end they also have to consider the consequences of their system if people rely on it - and choose at least one failure condition they can mitigate. Natural Assessment - Students need to learn to take ownership for tracking their own knowledge, resources and quality. To that end, I avoid personally telling them what to correct, instead they need to get peer-reviews, do demos and get feedback from others and assess their work against their stated goals. To that end I almost always require a public display of their work with them present. Either a presentation or demos where people come by and they demo / explain their work. I also have them practice within the class with each other - where they can see the quality and ideas of others with enough time to adjust their own work to meet their own standards or pride and avoid a sense of embarrassment (or not). Demos \u0026amp; Constructive Feedback - ideally I have the kids have a project journal and demo notes and reflections need to be recorded   Demos are IMPORTANT - putting students in the learners driver seat. Students need to learn to get / ask for (pull) their feedback to assess and adjust the quality and progress of their work (with help from the Natural Assessment as a reality check \u0026ndash; not the teacher - \u0026lsquo;What does the water say?\u0026rsquo;) Students must learn to give \u0026amp; hear \u0026amp; accept feedback in their work. To that end there are 4 rules to make this work - with more experience these can be loosened some:  plan what and how to present the demo (\u0026amp; what the feedback might be - both likes and changes) present the demo \u0026amp; receiving feedback - listen \u0026amp; take notes (no challenges - keep it safe to give feedback, further explanations or clarifications of misunderstandings - simply note ones reaction and reflect on how to improve the demo - theres no problem with doing a second demo with another group if the first group didn\u0026rsquo;t understand). Giving Feedback - includes two aspects:   what is liked and how that matches what is understood about the group\u0026rsquo;s goals what they think would make the work even better (if something should change then is needs to be worded as - \u0026ldquo;I like this \u0026lsquo;pointy bow\u0026rsquo; and think it would be even better with a rounded bow\u0026rdquo;) - constructive and positive feedback (this takes practice \u0026ndash; kids (and teachers) are not well versed in \u0026ldquo;Pixar\u0026rsquo;s yes and \u0026hellip;\u0026rdquo; feedback process  using a suggestion each project must accept at least ONE suggestion from another group (and credit them) and explain how they made the suggestion their own and integrated it into the project. Without this - they cannot submit the project (its incomplete)!    Exploration - kids should learn to enjoy learning   DO VERY little direct instruction (if any) - have the kids explore until they get a bit stuck (but don\u0026rsquo;t make them beg for help, just be patient and help them get unstuck - DON\u0026rsquo;T TELL THEM SOLUTIONS) learning need to change (as much as possible) from an external \u0026ldquo;death march\u0026rdquo; pushed by the curriculum, but instead turned into a lean pull system by the students own needs, interests and desire to fulfill their own chosen goals within their chosen context. ideally students track what they research and learn in the project journal. Then all kids on the team have access to all the info (\u0026amp; is responsible to know what is known by others on the team - that is the homework - to know what others have done and be aware and understand it). Occasionally, I look at the journal and ask other kids in the group to explain what another has researched and if the kids doesn\u0026rsquo;t know the material then the \u0026lsquo;researcher\u0026rsquo; is responsible to ensure the others on team \u0026lsquo;catch up\u0026rsquo;  Path - The Hero\u0026rsquo;s Journey \u0026amp; Smallify - initially students are unfamilier with solving big complex problems without one clear \u0026lsquo;Googable\u0026rsquo; answer   smallify - students need to learn to find the next workable step just beyond their knowledge \u0026ndash; but doable (initially kids need help with this!) small enough - where its easy to have false starts, make lots of changes and explore and after feedback \u0026ndash; make changes without being upset at the invested time. Small enough means that it is fun to explore and make changes! Hero\u0026rsquo;s Journey - each project needs to involve complexity (that has no one right solution) but involves a complex compromise to arrive at one\u0026rsquo;s goals. This helps the students really learn the depth of the material and the compromises needed to accomplish their goals. (there have been recent studies showing that people only fully understand a topic and its related implications when they go through process of exploring complex compromises)  Reflection \u0026amp; Change   another form of reflection - done ideally daily, they asses their progress (initially I like to review their burn-down on their way out at the end of class with them and help them reflect on and verbalize what skills they are using to make progress \u0026amp; contemplate if its possible to build even more on those strengths and to reflect on whats hinder them (\u0026amp; see if they can replace that activity with something more helpful). Over time I like to encourage the kid to just update me their progress and reflections on their way out of class. students need to get regular feedback on each phase of their work (ideally at least weekly) \u0026amp; at some point each group\u0026rsquo;s project must have at least on change inspired by feedback from another group or individual outside their group - and credit that person / group. Even if \u0026amp; in-fact ideally - they take the idea and adapt it to their needs needs and goals.  ","date":1590326205,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590326205,"objectID":"912cc76cee3a14100a7070238e98e326","permalink":"https://btihen.me/post_edu/explore_uplift_reflect/","publishdate":"2020-05-24T15:16:45+02:00","relpermalink":"/post_edu/explore_uplift_reflect/","section":"post_edu","summary":"There are a few keys to engaging students while learning and enjoying their own worth as a person and learner.  While learning required materials -- within a context important to the student.","tags":["agile","explore","choice","differentiated","reflect","retrospective","uplift"],"title":"Explore, Uplift and Reflect","type":"post_edu"},{"authors":["Bill Tihen"],"categories":["code"],"content":"From the Academic Documentation  https://sourcethemes.com/academic/docs/managing-content\nCreate a User hugo new --kind authors authors/firstname_lastname  add person\u0026rsquo;s image (png or jpg)\ncp picture.jpg content/authors/firstname_lastname/avatar.jpg  Create a Blog hugo new --kind post post/blog_title  images within the article - add images to the article folder:\ncp image.jpg content/post/blog_title/article_image.jpg  and add it to the content using: ![kanban](example.jpg) within the article\nadd a display image (png or jpg)\ncp picture.jpg content/post/blog_title/featured.jpg  Add a Publication Reference hugo new --kind publication publication/publication_title  add a display image (png or jpg)\ncp picture.jpg content/publication/publication_title/featured.jpg  add a pdf (with the same name as the folder) and it will be automatically available\ncp picture.pdf content/publication/publication_title/publication_title.pdf  Create a Project hugo new --kind project project/project_name  add a display image (png or jpg)\ncp picture.jpg content/project/project_name/featured.jpg  Create a Talk hugo new --kind talk talk/my-talk-name  Talk Slides are a bit more complicated see: https://sourcethemes.com/academic/docs/managing-content/#create-slides\nCourse (Documentation) This is tricky (copy and rename an existing course and adapt it)\ncourses can be renamed and can have multiple folders (courses) within it.\nNOTE: the algebra_1 folder cannot have any sub-folders. Within an actual course all materials must be within a FLAT hierarchy.\n","date":1590223161,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590223161,"objectID":"864b5f806977e2e7169a9339e77e8e44","permalink":"https://btihen.me/post_tech_notes/hugo_academic_cheatsheet/","publishdate":"2020-05-23T10:39:21+02:00","relpermalink":"/post_tech_notes/hugo_academic_cheatsheet/","section":"post_tech_notes","summary":"A quick summary of the Hugo Academic Theme creation commands","tags":["Hugo","Static Site","git","Academic Theme","commands"],"title":"Hugo Academic Content Commands","type":"post_tech_notes"},{"authors":["Bill Tihen"],"categories":["code"],"content":"step 0: install hugo brew install hugo  step 1: create a public username_website repo I\u0026rsquo;ll assume your github account is username I think this repo needs to be publicly readable (not 100% sure)\nstep 2: clone the academic hugo locally git clone https://github.com/sourcethemes/academic-kickstart.git username_website cd academic_website git submodule update --init --recursive # without this the site won't start correctly  be sure you have many files within: themes/academic\nstep 3: Update .gitignore \u0026amp; public folder  update .gitignore remove the line with public be sure there is no public folder (yet), if there is remove it and all its contents.  step 4: point this repo to your username_website repo I have found the easiest way to overwrite the source origin repo is to do this by hand.\nCurrently your .git/config file will currently look like (notice the url referencing: git://github.com/sourcethemes/academic-kickstart.git - this is what we need to update):\n[core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true ignorecase = true precomposeunicode = true [remote \u0026quot;origin\u0026quot;] url = git://github.com/sourcethemes/academic-kickstart.git fetch = +refs/heads/*:refs/remotes/origin/* [branch \u0026quot;master\u0026quot;] remote = origin merge = refs/heads/master  change the origin url by hand or by using sed:\nsed -i.bak -e 's/https:\\/\\/github.com\\/sourcethemes\\/academic-kickstart.git/git@github.com:username\\/username_website.git/' .git/config  when your .git/config file is correct it will look like:\n[core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true ignorecase = true precomposeunicode = true [remote \u0026quot;origin\u0026quot;] url = git@github.com:username/username_website.git fetch = +refs/heads/*:refs/remotes/origin/* [branch \u0026quot;master\u0026quot;] remote = origin merge = refs/heads/master  now you can push this local repo to your github repo using:\ngit push -u origin --all # git init # git add . # git commit -m \u0026quot;Initial commit\u0026quot; # git push -u origin master  step 5: configure website basics 5A: Set your site name: in config/_default/config.toml\nfind the title attribute and set it to username (or whatever is appropriate)\n5B: Pick a themes from https://sourcethemes.com/academic/themes/\nin config/_default/config.toml\nfind the theme attribute and set it to your favorite theme color (or leave it as is)\n5C: site logo \u0026amp; favicon Put your image files into assets/images:\n logo.png (the logo on your webpage) file and icon.png (the favicon - icon in the webtab)  You can go to https://www.namecheap.com/logo-maker and make a logo\n5D: menu items in config/_default/menus.toml\nremove any items you won\u0026rsquo;t use. In my case this file now looks like:\n[[main]] name = \u0026quot;Posts\u0026quot; url = \u0026quot;#posts\u0026quot; weight = 20 [[main]] name = \u0026quot;About\u0026quot; url = \u0026quot;#about\u0026quot; weight = 50 [[main]] name = \u0026quot;Contact\u0026quot; url = \u0026quot;#contact\u0026quot; weight = 60  These will also be the sections on the home page that will be enabled and configured.\nThe larger the weight the further to the right the item will be shown.\nstep 6: configure site parameters You may want to read through all the params - but the ones listed here are enough to get started.\n site_type \u0026ndash; in the file: config/_default/params.toml: be sure to configure the site_type variable configure \u0026lsquo;contact details\u0026rsquo;  if you choose not to add an email, then be sure to set the variable email_form=0 on the content/home/contact.md file! if you choose not to enter an address and coordinates the in the [map] section set the engine=0 to avoid problems.   configure social details \u0026ndash; optional Regional Settings \u0026ndash; NOTE: The date display settings seems to have a bug \u0026ndash; so I don\u0026rsquo;t recommend adjusting that.  step 7: configure your homepage At this point I suggest starting hugo server so you can watch your edits.\nNow go into the folder content/home and we will adjust or disable the files in this folder.\n  disable with: active=false\n  enable with: active=true\n  oder with: weight=20 the bigger the number the further down on the page is show (I suggest you use the same weights used in the menu)\n  contact.md - review and see if changes are desired.\n  accomplishments.md - (and all other home page sections you decide not to display) change active=true to active=false\n  7A: about page I prefer to use the about page when it is a person\u0026rsquo;s site and the people page when the site is about a group effort. So in this case:\nhugo new --kind authors authors/author_name  content/home/about.md\n change the title to whatever you like: biography, about, etc\u0026hellip; change the variable author to match the name you used to generate you profile above, ie:  author = \u0026quot;author_name\u0026quot;  content/authors/author_name/_index.md\n Adjust the file so the information is accurate below the --- toward the end of the file, add your own free text to the about page.  content/authors/author_name/avatar.jpeg (png, jpg, etc also work)\n add an attractive image to the folder content/authors/author_name/ and name it: avatar.jpg  7B: people (or Team) page disable content/home/about.md\n Mark the active variable as false:  active=false  enable content/home/people.md\n set active=true create sub-group names:  [content] user_groups = [\u0026quot;Educators\u0026quot;, \u0026quot;Researchers\u0026quot;]  or alternatively, use an empty string to create a team without sub-teams:\n[content] user_groups = [\u0026quot;\u0026quot;]  Create the people (authors)\nhugo new --kind authors authors/person_name  content/authors/person_name/_index.md\n add one (or more) user_group to the person\u0026rsquo;s profile using the user_groups variable:  user_groups = [\u0026quot;Educators\u0026quot;]  if you used an empty string in people.md add:\nuser_groups = [\u0026quot;\u0026quot;]   Edit this file so that the information is accurate below the --- toward the end of the file, add your own free text to the about page.  content/authors/person_name/avatar.jpeg (png, jpg, etc also work)\n add an attractive image to the folder content/authors/person_name/ and name it: avatar.jpg  step 8: Test publish to username.github.io When you site is good enough to publish then its time to follow the following steps (these MUST be done in order to prevent problems!)\n8A: public folder (non-existent) The first time you do setup for publishing it is important this folder doesn\u0026rsquo;t exist yet and that public isn\u0026rsquo;t listed in the .gitignore` file\n8B: git snapshot (DO NOT YET GENERATE your website)\nCreate your git snapshot (very important at this point since the next steps are tricky)\ngit add . git commit -m \u0026quot;First draft of homepage\u0026quot; git push  8C: make second github repo username.github.io Now make a second public repo (CLICK THE BOX TO INCLUDE A README and/or a LISENCE file!) on github called username.github.io, this MUST be exactly: username.github.io for this to work!\nDouble check your repo is not empty, but has a README and/or a LISENCE file.\nNOW go to github repo settings and click on manage access and be sure you have permission to at administer (or at least write to this repo) \u0026ndash; probably not so click the invite teams or people button and add yourself as an admin (an other as needed).\n8D: clone username.github.io to public (within your Hugo project) now go back into your website code (root folder) and type:\ngit clone https://github.com/username/username.github.io.git public  if you see: warning: You appear to have cloned an empty repository. \u0026ndash; go back to the repo and create a README file!\n8E: check your permissions enter you public folder and create an index.html file and put in very simple html code: \u0026lt;h1\u0026gt;Hello username.github.io\u0026lt;/h1\u0026gt;\ncd public touch index.html echo '\u0026lt;h1\u0026gt;Hello username.github.io\u0026lt;/h1\u0026gt;' \u0026gt;\u0026gt; index.html  now check this in and push it to github.\ngit add . git commit -m \u0026quot;test webpage\u0026quot; git push  At this point you should see a bunch of message and toward the end you should see a line with:\nTo github.com:username/username.github.io.git  If instead you get the error:\nremote: Permission to peakchallenges/peakchallenges.github.io.git denied to btihen. fatal: unable to access 'https://github.com/peakchallenges/peakchallenges.github.io.git/': The requested URL returned error: 403  go back and check your site permissions.\nIf site permissions aren\u0026rsquo;t a problem do the following:\nre-create your website repo username.github.io.git outside the webcode project.\ngit clone git@github.com:username/username.github.io.git cd username.github.io echo '\u0026lt;h1\u0026gt;Hello username.github.io - v1\u0026lt;/h1\u0026gt;' \u0026gt;\u0026gt; index.html git add index.html git commit -m \u0026quot;update readme and test permissions\u0026quot; git push  assuming this works then move this repo into the hugo repo:\nrm -rf username_website/public mv username.github.io username_website/public cd username_website/public echo '\u0026lt;h1\u0026gt;Hello username.github.io - v2\u0026lt;/h1\u0026gt;' \u0026gt;\u0026gt; index.html git commit -am \u0026quot;update readme and test permissions within hugo project\u0026quot; git push  8F: check the website Wait a few minutes and go to the website https://username.github.io and be sure you see your newly published html page.\nstep 9: configure public as a submodule Now add the username.github.io repo as a submodule to your website code repo using. This allows nested projects without confusing git.\nFirst be sure you are in the hugo root and not the public folder and type:\ncd public git submodule add -b master https://github.com/username/username.github.io.git public`  now in .git/modules you might see a folder called public (with a bunch of stuff in it) if not simply edit your .git/config so that after:\n[submodule \u0026quot;themes/academic\u0026quot;] path = themes/academic url = https://github.com/gcushen/hugo-academic.git  you see:\n[submodule \u0026quot;public\u0026quot;] path = public url = https://github.com/username/username.github.io.git branch = master  You can add it by hand or with:\ncat \u0026lt;\u0026lt;\u0026quot;EOF\u0026quot; \u0026gt;\u0026gt; git/config [submodule \u0026quot;public\u0026quot;] path = public url = https://github.com/username/username.github.io.git branch = master EOF  step 10: publish your new Hugo webpage: Now to publish the Hugo site you prepared do the following:\nhugo -d public cd public git add . git commit -m \u0026quot;first webpage content\u0026quot; git push # toward the end you should see: `To github.com:username/username.github.io.git` cd ..  Follow this proceedure every time you update your site.\nNOTE: BE SURE NOT TO delete the folder public/.git/ or you will need to reconfigure your public submodule.\nnow go back to https://username.github.io and you should see your hugo site!\n(This might take a few minutes \u0026ndash; up to a half-hour \u0026ndash; to publish)\n","date":1589618361,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628293161,"objectID":"7abb282ed8e9d118c0b8cb8ad644235c","permalink":"https://btihen.me/post_tech_notes/hugo_academic_website_steps/","publishdate":"2020-05-16T10:39:21+02:00","relpermalink":"/post_tech_notes/hugo_academic_website_steps/","section":"post_tech_notes","summary":"hugo web (with the Academic Theme) and using git submodules and github to publish a free website","tags":["Hugo","Static Site","git","submodules"],"title":"Hugo Website using Github","type":"post_tech_notes"},{"authors":["Bill Tihen"],"categories":["Code"],"content":"Intro It is often helpful to be able to test email sending from an application during development or testing (or even to make testing emails on a staging server possible).\nTo do this follow these instructions for a safe convenient way to test and inspect emails sent from an application.\nSETUP First we need to get the repo (or at least the docker file)\n# get the mailcatcher repo git clone git@github.com:sj26/mailcatcher.git # go into mailcather repo cd mailcatcher # configure to use the newest `released` gem version of mailcatcher sed -i.bu1 's/FROM ruby:2.5/FROM ruby:2.6/' Dockerfile sed -i.bu2 's/ARG VERSION=0.6.5/ARG VERSION=0.7.1/' Dockerfile  The Dockerfile should now look like (which is actually all that is actually needed):\nFROM ruby:2.6 MAINTAINER Samuel Cochran \u0026lt;sj26@sj26.com\u0026gt; ARG VERSION=0.7.1 RUN gem install mailcatcher -v $VERSION EXPOSE 1025 1080 ENTRYPOINT [\u0026quot;mailcatcher\u0026quot;, \u0026quot;--foreground\u0026quot;] CMD [\u0026quot;--ip\u0026quot;, \u0026quot;0.0.0.0\u0026quot;]  BUILD IMAGE Now you can download the docker image and install the gems into it with:\n# -t adds repository:tag info -- the '.' at the end is important: docker build -t btihen/ruby/mailcatcher:ruby_2.6 . # ... # should end with something like # Successfully built 21e0de2bdd68 # now tag it as the **lasted** image with: docker build -t btihen/ruby/mailcatcher:latest .  now you can see your list of docker images (you should see the starting image/container we just created):\ndocker images REPOSITORY TAG IMAGE ID CREATED SIZE btihen/ruby/mailcatcher latest 21e0de2bdd68 8 minutes ago 870MB btihen/ruby/mailcatcher ruby_2.6 21e0de2bdd68 8 minutes ago 870MB ruby 2.6 a98425292e84 2 weeks ago 843MB  BUILD CONTAINER Now start the docker image using the build image id (-d allows it to run in the backgroud, -p 1025:1025 -p 1080:1080 opens a connection on ports 1025 \u0026amp; 1080 from localhost to the docker image):\n# build a container so we can test our image docker run -d -p 1025:1025 -p 1080:1080 --name mailcatcher btihen/ruby/mailcatcher:latest # or if you like ids better docker run -d -p 1025:1025 -p 1080:1080 --name mailcatcher 21e0de2bdd68 # if you forgot the image-id you can list the images with: docker images  TESTING (http \u0026amp; smtp) now you should be able to go to http://localhost:1080 and see the mailcatcher webpage.\nnow lets test the smtp side from the cli using these instructions: https://www.shellhacks.com/send-email-smtp-server-command-line/\n# connect to the mail server $ telnet localhost 1025 # or $ telnet 127.0.0.1 1025 220 smtp.domain.ext ESMTP Sendmail ?version-number?; ?date+time+gmtoffset? # declare yourself (IP or DNS) \u0026gt; HELO local.domain.name 250 smtp.domain.ext Hello local.domain.name [xxx.xxx.xxx.xxx], pleased to meet you # declare who the email is from: \u0026gt; MAIL FROM: test@local.domain.name 250 2.1.0 sender@adress.ext... Sender ok # declare who should get the email: \u0026gt; RCPT TO: recipient@adress.ext 250 2.1.5 recipient@adress.ext... Recipient ok # setup the DATA transmission: \u0026gt; DATA 354 Enter mail, end with \u0026quot;.\u0026quot; on a line by itself # type a subject two returns and a message ending with '.' (on its own line): SUBJECT: Test message Hello, this is a TEST message, please don't reply. Thank you. . # end the connection \u0026gt; QUIT  Now check the mail has arrived in mailcatcher at localhost:1080\nAssuming you see the email sent - you can be sure your image \u0026amp; container is setup properly.\nSTOPPING (exited) CONTAINER When we are done with mailcatcher we can stop the docker process:\ndocker ps -a docker kill mailcatcher  STARTING BUILT (but exited) CONTAINERS To restart mailcatcher at a later date simply type:\ndocker start mailcatcher\nSHARING IMAGES (once they work) # login to the Azure Container Repository docker login btihen -u username -p xxxxxxxxxxx # upload the new image docker push btihen/ruby/mailcatcher  RETRIEVING SHARED IMAGE az acr login --name username az acr repository list --name username --output table # getting the image docker pull btihen/ruby/image_name  containerize the image\n# these are the default local ports - adjust to your needs docker run -d -p 1025:1025 -p 1080:1080 --name mailcatcher btihen/ruby/mailcatcher:latest  start the container\ndocker start mailcatcher  LISTING Repo IMAGES One-time install\n# if needed install the azure cli brew update \u0026amp;\u0026amp; brew install azure-cli # the following may also be needed: brew update \u0026amp;\u0026amp; brew install python3 \u0026amp;\u0026amp; brew upgrade python3 brew link --overwrite python3  Retrieve the image list\n# login with the azure-cli az acr login --name username # list the images az acr repository list --name username --output table  REMOVING CONTAINERS when we no longer need mailcatcher we can remove it with (-a lists running and stopped containers):\ndocker ps -a docker rm mailcatcher  REMOVING IMAGES To fully clean up and remove (images \u0026ndash; after the containers are removed):\n$ docker images REPOSITORY TAG IMAGE ID CREATED SIZE btihen/ruby/mailcatcher ruby_2.5 21e0de2bdd68 25 minutes ago 870MB ruby 2.5 a98425292e84 2 weeks ago 843MB $ docker image rm 21e0de2bdd68 $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE ruby 2.5 a98425292e84 2 weeks ago 843MB  ","date":1589311149,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590261549,"objectID":"ee5ee73259d0dd7e05e44668ae36b712","permalink":"https://btihen.me/post_tech_notes/docker_intro_with_mail_catcher/","publishdate":"2020-05-12T21:19:09+02:00","relpermalink":"/post_tech_notes/docker_intro_with_mail_catcher/","section":"post_tech_notes","summary":"Learn to set-up mail catcher for safe email testing with an introduction to Docker","tags":["Docker","email","Testing"],"title":"Docker Intro using MailCatcher","type":"post_tech_notes"},{"authors":["Bill Tihen"],"categories":["Code"],"content":"I have been watching Phoenix and Elixir for a while, and the idea of writing dynamic Web Applications without needing a ton of JavaScript is very interesting. I recently saw this video by Chris McCord:\n  https://www.youtube.com/watch?v=MZvmYaFkNJI\u0026feature=youtu.be  which is very cool. I wanted to learn more and found this Phoenix 1.4 tutorial:\n  https://www.youtube.com/watch?v=2bipVjOcvdI  https://dennisbeatty.com/2019/03/19/how-to-create-a-counter-with-phoenix-live-view.html  and decided to translate that into Phoenix 1.5. This is what follows.\nNOTE: Since I am just learning the Phoenix Framework and will need to refer to this for my self to remember how to do basic things \u0026ndash; I\u0026rsquo;ve documented every little detail.\nStep 0 - setup environment Setup environment \u0026amp; newest version of elixir:\nexenv install 1.10.3 exenv global exenv local 1.10.3  Install the 1.5.1 phx_new generator:\nmix archive.install hex phx_new 1.5.1\nStep 1: Create a Phoenix Project with LiveView Create the project (notice the --live - that enables LiveView, --no-ecto - keeps the project smaller since we won\u0026rsquo;t be persisting any data):\nmix phx.new counter --no-ecto --live\nenter project and create init commit:\ncd counter git init \u0026amp;\u0026amp; git add -A \u0026amp;\u0026amp; git commit -m \u0026quot;init\u0026quot;  Step 2 - simple counter page using LiveView Make a counter_live folder \u0026amp; an index.ex file:\nmkdir lib/counter_web/live/counter_live touch lib/counter_web/live/counter_live/index.ex cat \u0026lt;\u0026lt;EOF \u0026gt; lib/counter_web/live/counter_live/index.ex # lib/counter_web/live/counter_live/index.ex defmodule CounterWeb.CounterLive.Index do use CounterWeb, :live_view # since we don't have a db to pull from we initialize on mount @impl true def mount(_params, _session, socket) do {:ok, assign(socket, :val, 0)} end def render(assigns) do ~L\u0026quot;\u0026quot;\u0026quot; \u0026lt;h1\u0026gt;Live Counter\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt; \u0026lt;b\u0026gt;Here is a great complex page\u0026lt;/b\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;The count is: \u0026lt;%= @val %\u0026gt;\u0026lt;/h2\u0026gt; \u0026lt;button phx-click=\u0026quot;dec\u0026quot;\u0026gt;-\u0026lt;/button\u0026gt; \u0026lt;button phx-click=\u0026quot;inc\u0026quot;\u0026gt;+\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;button phx-click=\u0026quot;clear\u0026quot;\u0026gt;clear\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p\u0026gt; \u0026lt;i\u0026gt;even more awesome content\u0026lt;/i\u0026gt; \u0026lt;/p\u0026gt; \u0026quot;\u0026quot;\u0026quot; end # event handler for \u0026lt;button phx-click=\u0026quot;inc\u0026quot;\u0026gt; def handle_event(\u0026quot;inc\u0026quot;, _, socket) do {:noreply, update(socket, :val, \u0026amp;(\u0026amp;1 + 1))} end # event handler for \u0026lt;button phx-click=\u0026quot;dec\u0026quot;\u0026gt; def handle_event(\u0026quot;dec\u0026quot;, _, socket) do {:noreply, update(socket, :val, \u0026amp;(\u0026amp;1 - 1))} end # event handler for \u0026lt;button phx-click=\u0026quot;clear\u0026quot;\u0026gt; def handle_event(\u0026quot;clear\u0026quot;, _, socket) do {:noreply, update(socket, :val, \u0026amp;(\u0026amp;1 - \u0026amp;1))} # {:noreply, update(socket, :val, 0)} # very slow - why? end end  Now update the routers (so we can get to the new webpage \u0026ndash; now our app should work:\nscope \u0026quot;/\u0026quot;, CounterWeb do pipe_through :browser # live \u0026quot;/\u0026quot;, PageLive, :index # remove this line live \u0026quot;/\u0026quot;, CounterLive.Index, :index # add this line end  Start pheonix:\nmix phx.server\nGo to:\nlocalhost:4000\nYou should now see the website and the counter should function\nAssuming all is good, I\u0026rsquo;ll take a git snapshot:\ngit add . git commit -m \u0026quot;counter with live update\u0026quot;  Step 3 - Running tests In order to run the tests we type:\nmix test  We see that PageLive test fails. This is because we replaced this behavior with CounterLive\nTo fix this we will create a CounterLive test and delete PageLive test.\nrm test/counter_web/live/page_live_text.exs touch test/counter_web/live/counter_live_text.exs cat \u0026lt;\u0026lt;EOF \u0026gt; test/counter_web/live/counter_live_text.exs # test/counter_web/live/counter_live_text.exs defmodule CounterWeb.CounterLiveTest do use CounterWeb.ConnCase import CounterWeb.CounterLive.Index test \u0026quot;disconnected and connected render\u0026quot;, %{conn: conn} do {:ok, page_live, disconnected_html} = live(conn, \u0026quot;/\u0026quot;) assert disconnected_html =~ \u0026quot;Live Counter\u0026quot; assert render(page_live) =~ \u0026quot;Live Counter\u0026quot; end end  Now we can test again: mix test\nNow that works, lets take another git snapshot:\ngit add . git commit -m \u0026quot;counter with live update\u0026quot;  Step 4 \u0026ndash; LiveView Templates Create a template file (helpful for complex html pages, but simple to create):\ntouch lib/counter_web/live/counter_live/index.html.leex\nNow just copy the html (from the render method into this file):\n# lib/counter_web/live/counter_live/index.html.leex \u0026lt;h1\u0026gt;Live Counter\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt; \u0026lt;b\u0026gt;Here is a great complex page\u0026lt;/b\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;The count is: \u0026lt;%= @val %\u0026gt;\u0026lt;/h2\u0026gt; \u0026lt;button phx-click=\u0026#34;dec\u0026#34;\u0026gt;-\u0026lt;/button\u0026gt; \u0026lt;button phx-click=\u0026#34;inc\u0026#34;\u0026gt;+\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;button phx-click=\u0026#34;clear\u0026#34;\u0026gt;clear\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p\u0026gt; \u0026lt;i\u0026gt;even more awesome content\u0026lt;/i\u0026gt; \u0026lt;/p\u0026gt; Now point lib/counter_web/live/counter_live/index.ex to this file by replacing render with an apply command:\n1 2 3 4 5 6 7 8 9 10   # add this new function  defp apply_action(socket, :index, _params) do  socket  end  # remove this funtion  # def render(assigns) do  # ~L\u0026#34;\u0026#34;\u0026#34;  # ...  # \u0026#34;\u0026#34;\u0026#34;  # end   NOTE: apply_action understands the rest verbs such as :new, :show etc.\nNow try the app again and it should still work!\nAssuming it still works, I\u0026rsquo;ll take another git snapshot:\ngit add . git commit -m \u0026quot;counter using a template\u0026quot;  Step 5 - Reusable Components (\u0026amp; isolation) This allows complex components to be reused within multiple templates and isolation to keep one\u0026rsquo;s mental scope minimal.\nCreate a file for the component:\ntouch lib/counter_web/live/counter_live/counter_component.ex\nMove the dynamic html and it\u0026rsquo;s associated functions into this file, it\u0026rsquo;s important to import the live_components into this file using:\nuse CounterWeb, :live_component\nIn order to encapsulate the events into the component we will also move the event handlers into the component file.\nSo this file will now look like: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  # lib/counter_web/live/counter_live/counter_component.ex defmodule CounterWeb.CounterLive.CounterComponent do  use CounterWeb, :live_component   def render(assigns) do  ~L\u0026#34;\u0026#34;\u0026#34; \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;The count is: \u0026lt;%= @val %\u0026gt;\u0026lt;/h2\u0026gt; \u0026lt;button phx-click=\u0026#34;dec\u0026#34; phx-target=\u0026#34;\u0026lt;%= @myself %\u0026gt;\u0026#34;\u0026gt;-\u0026lt;/button\u0026gt; \u0026lt;button phx-click=\u0026#34;inc\u0026#34; phx-target=\u0026#34;\u0026lt;%= @myself %\u0026gt;\u0026#34;\u0026gt;+\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;button phx-click=\u0026#34;clear\u0026#34; phx-target=\u0026#34;\u0026lt;%= @myself %\u0026gt;\u0026#34;\u0026gt;clear\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026#34;\u0026#34;\u0026#34;  end   def handle_event(\u0026#34;inc\u0026#34;, _, socket) do  {:noreply, update(socket, :val, \u0026amp;(\u0026amp;1 + 1))}  end   def handle_event(\u0026#34;dec\u0026#34;, _, socket) do  {:noreply, update(socket, :val, \u0026amp;(\u0026amp;1 - 1))}  end   def handle_event(\u0026#34;clear\u0026#34;, _, socket) do  # {:noreply, update(socket, :val, 0)} # very slow - why?  {:noreply, update(socket, :val, \u0026amp;(\u0026amp;1 - \u0026amp;1))}  end  end  \nNotice the button tags are slightly more complex\n\u0026lt;button phx-click=\u0026quot;dec\u0026quot; phx-target=\u0026quot;\u0026lt;%= @myself %\u0026gt;\u0026quot;\u0026gt;\nthe @myself basically informs the event that the handler is within the component.\nNow update the live template to point at the component using:\n\u0026lt;%= live_component @socket, CounterWeb.CounterLive.CounterComponent, id: 0, val: @val %\u0026gt;\nAlso note we need to pass the @val value into the component using:\nid: 0, val: @val\nits a little wierd, but we need to pass an id even if there is no ecto backed record.\nNow the template file looks like a normal template file again (focused on formating):\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  # lib/counter_web/live/counter_live/index.ex defmodule CounterWeb.CounterLive.Index do  use CounterWeb, :live_view   # since we don\u0026#39;t have a db to pull from we initialize on mount  @impl true  def mount(_params, _session, socket) do  {:ok, assign(socket, :val, 0)}  end   def render(assigns) do  ~L\u0026#34;\u0026#34;\u0026#34; \u0026lt;h1\u0026gt;Live Counter\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt; \u0026lt;b\u0026gt;Here is a great complex page\u0026lt;/b\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;%= live_component @socket, CounterWeb.CounterLive.CounterComponent, id: 0, val: @val %\u0026gt; \u0026lt;p\u0026gt; \u0026lt;i\u0026gt;even more awesome content\u0026lt;/i\u0026gt; \u0026lt;/p\u0026gt; \u0026#34;\u0026#34;\u0026#34;  end  end   Lets check that this still works.\nAssuming it still works, I\u0026rsquo;ll make one last git snapshot:\ngit add . git commit -m \u0026quot;live pages using isolated components - like JS does\u0026quot;  ","date":1589122913,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1596754913,"objectID":"87d3ddfc60a927f2577e0d44eed5c5b3","permalink":"https://btihen.me/post_elixir_phoenix/phoenix_1_5_live_view_basics/","publishdate":"2020-05-10T17:01:53+02:00","relpermalink":"/post_elixir_phoenix/phoenix_1_5_live_view_basics/","section":"post_elixir_phoenix","summary":"Create a simple web counter app to learn how Phoenix 1.5 LiveView works.  Phoenix LiveView allows dynamic webpages with fast update times -- without JavaScript.","tags":["Elixir","Phoenix","LiveView","PubSub","Interactive"],"title":"Phoenix 1.5 LiveView \u0026 PubSub Basics","type":"post_elixir_phoenix"},{"authors":["Bill Tihen","Elliott Hebert"],"categories":["Agile","Education"],"content":"Intro Kanban is a visual way to track your tasks and your progress. Many people find this helpful way to to show yourself, your parents and teachers what work needs to be done. Ideally, this is done on a large screen, sheet of paper, or whiteboard - so that it is obvious and easily seen as a reminder.\nStatus Tracking The simplest statuses would be: To-Do, Doing, Done\n-- Some teacher often require a draft Review before final submissions, engineers use a similar column Review or Demo. Generally, this is a good idea to check your work with peers, parents or your teacher before handing in your work \u0026ndash; so we suggest a Review column before done. So now the statuses would be:\nTo-Do, Doing, Review, Done\n-- Swim-lanes (tracking multiple classes / projects) Ideally when using this technique you keep the number of simultaneous tasks (WIP) to a minimum\n The number of simultaneous tasks is called work-in-progress or abbreviated as WIP\n Education, unfortunately, expects a lot of simultaneous tasks within a variety of classes. To address this we can use swim-lanes to track our priorities with a jumble of independent projects (classes). For example: we might have swim-lanes for: English, Mathematics, Science, \u0026hellip;\nIdeally, we will try only allow ONE task in your doing and review boxes for each swim-lane / class. (This is called a WIP Limit of 1).\nTasks Tasks Cards should have critical reminder information on them. Refrain from putting extra information on the card, the card should be clean and simple to read - it is a reminder of work to do NOT a full description of the assignment.\nHere is the critical information I include on a personal Kanban card.\n Title - Big bold text (upper left corner) Description - a very short reminder of what to do - ideally in 4 to 5 words Class - in case of confusion, I write the class / swim-lane (lower left corner) Due Date - Big bold Text (lower right corner) Start Date - use this to schedule small tasks of a large project - which can be used to slowly make progress on a large task (I call this smallifying). This is a very important skill to ensure continued progress on large projects in a timely way. I put this just above the Due Date  Here is an example of a Kanban in use with tasks:\nUsage I like to use A3 paper and small post-it notes to add tasks. Here is our recommended blank Kanban - where you can write in your classes. Put your most important classes (in the IB these would be your High Level courses) at the top. Use a timebox on long tasks that need to move forward, but are too big to do in one work session \u0026ndash; this is especially important when you have multiple tasks that need to be accomplished on a give day.\n Timebox - is a time limit that you won\u0026rsquo;t exceed for a given tasks in order to keep all tasks on schedule. We suggest 25 to 35 minute timeboxes with small 5 minute breaks between tasks. Every 4 timeboxes take a longer 15 minute break. This is called the pomodoro technique for full details.\n   To best use a Kanban board, you should follow the following ritual:\n Prioritize your work \u0026ndash; when you sit down to work, spend the first 5 minutes reviewing the Kanban board:   First assess what in the priority classes needs to be done in order meet assignment deadlines (for long tasks set a timebox so you make progress but can keep all your other tasks moving too) Second assess what needs to be started in priority classes to stay on track with larger projects. If you already have a task in that classes doing box then schedule that task to be done ASAP so that you can start the next task. This is important a common Kanban saying is:_ START FINISHING TASKS, stop starting unfinished tasks!   Do your work \u0026ndash; respect your priorities and your timeboxes!\n  UPDATE YOUR KANBAN - End five to ten minutes before your time is up (set an alarm if needed) and update your tasks to their new status boxes. If you couldn\u0026rsquo;t meet your goals for a task put a smaller colorful post-it on it - as an ALERT.\n  Address the needs of problem tasks \u0026ndash; for all tasks with an ALERT: write emails to get help, or make notes on research needed to do make progress on problem tasks.\n  REFLECT \u0026ndash; Assess what is going well and consider if doing more that will help you be more successful and assess what is hindering you and what you can do differently to get you work done with less stress. You reflections should result in actions (experiments for a week or so) to help you move more effectively toward your goals. If your experiment doesn\u0026rsquo;t help, they after the test period try a new experiment.\n   NOTE: Dead person activities are actions that even a dead person can successfully do. For example, waiting for someone else to help, not checking twitter in homework time, etc. Live person activities are action that only live people can successfully accomplish. For example, ask a peer for help, research on the Internet for ideas, go to a help session, replace random twitter checks with Pomodoro Technique (and allow twitter in the 5 minute breaks), etc.\n References Kanban   https://www.personalkanban.com/  https://moduscooperandi.com/books-and-classes  Pomodoro   https://francescocirillo.com/pages/pomodoro-technique  https://www.youtube.com/watch?v=VFW3Ld7JO0w  Helpful Books Kanban - Task Management\n Real-World Kanban: Do Less, Accomplish More with Lean Thinking, by Mattias Skarin. Kanban in Action, by Marcus Hammarberg and Joakim Sundén. Kanban: Successful Evolutionary Change for Your Technology Business, by David J. Anderson. Personal Kanban: Mapping Work - Navigating Life, by Tonianne DeMaria Barry and Jim Benson. Kanban and Scrum: Making the Most of Both, by Mattias Skarin and Henrik Kniberg.  Pomodoro - Time Management\n Pomodoro Technique Illustrated, by Staffan Noteberg. The Pomodoro Technique: Work smarter, not harder, by Francesco Cirillo.  Effective Reflections, Experiments \u0026amp; Problem Solving\n The 5 Elements of Effective Thinking, by Edward B. Burger and Michael Starbird. the shibumi strategy: a powerful way to create MEANINGFUL CHANGE, by Matthew E. May.  Effective Goal Setting \u0026amp; Changes - with small easy steps\n Little Bets: How Breakthrough Ideas Emerge from Small Discoveries, by Peter Sims. One Small Step Can Change Your Life: The Kaizen Way Paperback, by Robert Maurer Ph.D. The Spirit of Kaizen: Creating Lasting Excellence One Small Step at a Time: Creating Lasting Excellence One Small Step at a Time, by Robert Maurer Ph.D.  ","date":1588526709,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588526709,"objectID":"b9679358d2d397dad51621521db37f93","permalink":"https://btihen.me/post_edu/kanban_usage/","publishdate":"2020-05-03T19:25:09+02:00","relpermalink":"/post_edu/kanban_usage/","section":"post_edu","summary":"Intro Kanban is a visual way to track your tasks and your progress. Many people find this helpful way to to show yourself, your parents and teachers what work needs to be done.","tags":["Kanban"],"title":"Kanban Usage","type":"post_edu"},{"authors":["Tim Logan"],"categories":[],"content":"Tim Logan posted an interesting educational agility video of his ECIS Webinar and used materials developed my Paul Magnuson \u0026amp; me. He posted his slide deck on Trello.\nTim Logan\u0026rsquo;s video Intro into his Educational Agility webinar for ECIS.   In case people don\u0026rsquo;t have a linked-in account: https://www.linkedin.com/feed/update/urn%3Ali%3Aactivity%3A6659793273697120256/\nIn case people don\u0026rsquo;t have a trello account: https://trello.com/b/B5qwkjmE/webinar-agility\n","date":1587772800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587772800,"objectID":"7d468afc19ae68008c04a9cecc2c5726","permalink":"https://btihen.me/in_news/tim_logan_ecis_agility_webinar_linkedin/","publishdate":"2020-04-26T05:03:26+02:00","relpermalink":"/in_news/tim_logan_ecis_agility_webinar_linkedin/","section":"in_news","summary":"As part of the ECIS Leadership Conference - April 2020, Guide and Lead Managing Partner, Tim Logan gives an overview of the importance of agility in building schools as life-affirming 21st century organisations.","tags":["Agile","Education","21 Century","Reflections"],"title":"Webinar Agility by Tim Logan","type":"in_news"},{"authors":["Tim Logan"],"categories":[],"content":"Tim Logan posted an interesting educational agility video of his ECIS Webinar and used materials developed my Paul Magnuson \u0026amp; me. He posted his slide deck on Trello.\nTim Logan\u0026rsquo;s video Intro into his Educational Agility webinar for ECIS.   In case people don\u0026rsquo;t have a linked-in account: https://www.linkedin.com/feed/update/urn%3Ali%3Aactivity%3A6659793273697120256/\nIn case people don\u0026rsquo;t have a trello account: https://trello.com/b/B5qwkjmE/webinar-agility\n","date":1587772800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587772800,"objectID":"3963b09ee6041d850840214aa96097fb","permalink":"https://btihen.me/publication/ecis_agility_tim_logan_webinar_linkedin/","publishdate":"2020-04-26T05:03:26+02:00","relpermalink":"/publication/ecis_agility_tim_logan_webinar_linkedin/","section":"publication","summary":"As part of the ECIS Leadership Conference - April 2020, Guide and Lead Managing Partner, Tim Logan gives an overview of the importance of agility in building schools as life-affirming 21st century organisations.","tags":["Agile","Education","21 Century","Reflections"],"title":"Webinar Agility by Tim Logan","type":"publication"},{"authors":["Paul Magnuson","Bill Tihen"],"categories":["Education","Agile","Self-Regulation","Student Agency"],"content":"","date":1581984000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1581984000,"objectID":"22cd5da99c09dcadaad9cf21afda864f","permalink":"https://btihen.me/publication/tieonline_demos_and_collaborative_feedback_in_classroom/","publishdate":"2020-04-17T17:31:32+02:00","relpermalink":"/publication/tieonline_demos_and_collaborative_feedback_in_classroom/","section":"publication","summary":"Four steps for students to give and get safe and effective feedback.","tags":["agile","education","feedback","emotional safety","student choice"],"title":"Demos and Feedback in the Classroom","type":"publication"},{"authors":["Paul Magnuson","Bill Tihen"],"categories":["Education","Agile","Self-Regulation","Student Agency"],"content":"","date":1581292800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1581292800,"objectID":"0318e24196f63038c797322669991cbb","permalink":"https://btihen.me/publication/tieonline_uplift_and_explore_build_confidence/","publishdate":"2020-04-17T17:33:36+02:00","relpermalink":"/publication/tieonline_uplift_and_explore_build_confidence/","section":"publication","summary":"Uplift focuses on the creation of an atmosphere in which students build on existing strengths and grow their self-confidence. Dangerous to an atmosphere of uplift are traditional assessment practices.","tags":["agile","education","uplift","challenge","engagement","confidence","non-judgemental","natural assessment","natural consquences"],"title":"Build Confidence: Exploration and Student Choice","type":"publication"},{"authors":["Paul Magnuson","Bill Tihen"],"categories":["Education","Agile","Self-Regulation","Student Agency"],"content":"","date":1579219200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579219200,"objectID":"aed24c4536b84f8b6561601da4c747f5","permalink":"https://btihen.me/publication/tieonline_pull_vs_push/","publishdate":"2020-04-17T17:24:45+02:00","relpermalink":"/publication/tieonline_pull_vs_push/","section":"publication","summary":"Learning needs to change. Ideally schools could adopt a student-pulled curriculum (instead of a push system, which is what we overwhelmingly have), based on their own needs and interests.","tags":["agile","education","effectiveness","student choice"],"title":"Pull vs Push: Student Centric","type":"publication"},{"authors":["Paul Magnuson","Bill Tihen"],"categories":["Education","Agile","Self-Regulation","Student Agency"],"content":"","date":1577750400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577750400,"objectID":"a3e3e9f377372637db984252b8476b92","permalink":"https://btihen.me/publication/tieonline_importance_of_challenge/","publishdate":"2020-04-17T17:36:54+02:00","relpermalink":"/publication/tieonline_importance_of_challenge/","section":"publication","summary":"Importance of encouraging exploration, context, and challenge.","tags":["agile","education","challenge","engagement","meaningful context"],"title":"Importance of Challenge: Engaged, Deep Learning","type":"publication"},{"authors":["Paul Magnuson","Bill Tihen"],"categories":["Education","Agile","Self-Regulation","Student Agency"],"content":"","date":1576454400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1576454400,"objectID":"3f28baca1cebf5c500434d26efc4728d","permalink":"https://btihen.me/publication/tieonline_roots_of_agile_for_education/","publishdate":"2020-04-17T17:27:48+02:00","relpermalink":"/publication/tieonline_roots_of_agile_for_education/","section":"publication","summary":"So what’s agility? You’ll get different answers from different people, but you’ll likely pick up on a strong leitmotif of collaborative work.","tags":["agile","education","collaboration","manifesto","people focus"],"title":"Roots of Agile for Education","type":"publication"},{"authors":["Paul Magnuson","Bill Tihen"],"categories":["Education","Agile","Self-Regulation","Student Agency"],"content":"","date":1571184000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1571184000,"objectID":"bfd773abafc47e9f3c0e0f5a1b5162be","permalink":"https://btihen.me/publication/las_spotlight_patient_explanations/","publishdate":"2020-04-16T19:11:22+02:00","relpermalink":"/publication/las_spotlight_patient_explanations/","section":"publication","summary":"Reflections on educational improvements through student choice, self-regulation, and challenge.","tags":["agile","education","student choice","self-regulation","challenge"],"title":"Patient Explanations Lead to Good Things","type":"publication"},{"authors":["Paul Magnuson","Bill Tihen","Nicola Cosgrove","Daniel Patton"],"categories":["Education","Agile","Self-Regulation","Student Agency"],"content":"","date":1555430669,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555430669,"objectID":"7480c9b1295e3529315b94cdc7af4cb0","permalink":"https://btihen.me/publication/springer_getting_agile_at_school_chapter/","publishdate":"2020-04-16T18:04:29+02:00","relpermalink":"/publication/springer_getting_agile_at_school_chapter/","section":"publication","summary":"Approaches to encourage learner ownership and self-regulation using Agile principles.","tags":["agile","education","project based","self-regulation"],"title":"Getting Agile at School","type":"publication"},{"authors":null,"categories":null,"content":"btihen is not tracking any access information on this site.\n","date":1530140400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1530140400,"objectID":"18d05a63a1c8d7ed973cc51838494e41","permalink":"https://btihen.me/privacy/","publishdate":"2018-06-28T00:00:00+01:00","relpermalink":"/privacy/","section":"","summary":"btihen is not tracking any access information on this site.","tags":null,"title":"Privacy Policy","type":"page"},{"authors":null,"categories":null,"content":"The materials on this site are licensed and may be used under the Creative Commons Attribution-NonCommercial 4.0 International License \nSummary: This is a human-readable summary of the Creative Commons NonCommercial 4.0 International License (and not a substitute for) the actual license.\nYou are free to:  Share — copy and redistribute the material in any medium or format Adapt — remix, transform, and build upon the material for any purpose, even commercially.  The licensor cannot revoke these freedoms as long as you follow the license terms.\nUnder the following terms:  Attribution — You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use. NonCommercial — You may not use the material for commercial purposes.  No additional restrictions — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.\nNotices: You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation.\nNo warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material.\n","date":1530140400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1530140400,"objectID":"9b10c1f64082d3869fd4cb1f85809430","permalink":"https://btihen.me/terms/","publishdate":"2018-06-28T00:00:00+01:00","relpermalink":"/terms/","section":"","summary":"The materials on this site are licensed and may be used under the Creative Commons Attribution-NonCommercial 4.0 International License \nSummary: This is a human-readable summary of the Creative Commons NonCommercial 4.","tags":null,"title":"Terms","type":"page"},{"authors":["Paul Magnuson","Bill Tihen","Daniel Patton"],"categories":["Education","Agile","Self-Regulation","Student Agency"],"content":" -- Student boat (before 3-D printing) Student boat (with code) Student boat (with code) Student Retrospective Guide ","date":1523318400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1523318400,"objectID":"60def2620f3e16fbc96df1192c984097","permalink":"https://btihen.me/publication/ecis_designed_to_float_your_boat_article/","publishdate":"2020-04-16T19:10:29+02:00","relpermalink":"/publication/ecis_designed_to_float_your_boat_article/","section":"publication","summary":"STEAM projects provide an excellent avenue for student engagement and excellence through student choice, buy-in and challenge.","tags":["agile","education","engagement","student choice","challenge"],"title":"Designed to Float your Boat","type":"publication"},{"authors":["Bill Tihen","Paul Magnuson","Daniel Patton"],"categories":["classroom","stem"],"content":"","date":1495714213,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1495714213,"objectID":"d3319b252f271eb3474990e287feffee","permalink":"https://btihen.me/publication/las_spotlight_robot_gardener/","publishdate":"2017-05-25T14:10:13+02:00","relpermalink":"/publication/las_spotlight_robot_gardener/","section":"publication","summary":"An interview with Daniel Patton (science) and Bill Tihen (IT) who joined forces to create a course that includes both their interests—biology and electronics. The basic task for students? Build a terrarium that will support a healthy garden, but make it using simple robotics and coding so that the garden will stay alive even when you aren’t around.","tags":["biology","ecology","robotics","electronics","sensors","agile"],"title":"Robot Gardener","type":"publication"},{"authors":["Paul Magnuson","Bill Tihen"],"categories":["Education","Agile","Self-Regulation","Student Agency"],"content":"","date":1489363200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1489363200,"objectID":"23185bd72f64c163b0216a3387ea6126","permalink":"https://btihen.me/publication/las_laser_introducing_edgility_report_2017/","publishdate":"2020-04-23T21:02:49+02:00","relpermalink":"/publication/las_laser_introducing_edgility_report_2017/","section":"publication","summary":"Education can be enhanced with an Agile mindset.","tags":["agile","smallify","reflection","experiments","explore"],"title":"Introducing EDgility","type":"publication"},{"authors":["Bill Tihen","Paul Magnuson\""],"categories":[],"content":"A discussion with Scrum Alliance on the importance of bringing Agile into Educaion and a few important implementation points.\n  ","date":1484611200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1484611200,"objectID":"8756066c33b821f9fe09c885216c0140","permalink":"https://btihen.me/in_news/agile_in_education_interview_scrum_alliance/","publishdate":"2020-04-16T18:52:54+02:00","relpermalink":"/in_news/agile_in_education_interview_scrum_alliance/","section":"in_news","summary":"Principles to cultivate engaged, collaborative and self-regulated students. A video Interview by Scrum Alliance.","tags":["Agility","Education"],"title":"Agile in Education: Bill Tihen and Paul Magnuson of Leysin American School","type":"in_news"},{"authors":["Bill Tihen","Paul Magnuson\""],"categories":[],"content":"A discussion with Scrum Alliance on the importance of bringing Agile into Educaion and a few important implementation points.\n  ","date":1484611200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1484611200,"objectID":"5c5b0da217e40909f6cd0fc165531f1a","permalink":"https://btihen.me/publication/scrum_alliance_interview_agile_in_education/","publishdate":"2020-04-16T18:52:54+02:00","relpermalink":"/publication/scrum_alliance_interview_agile_in_education/","section":"publication","summary":"Principles to cultivate engaged, collaborative and self-regulated students. A video Interview by Scrum Alliance.","tags":["Agility","Education"],"title":"Agile in Education: Bill Tihen and Paul Magnuson of Leysin American School","type":"publication"},{"authors":["Bill Tihen","Paul Magnuson","Howard Sublett"],"categories":[],"content":"How would our education system be different using agile principles and values?\nIn this InDepth edition, our conversation focuses around the American School in Leysin, Switzerland, and their experiments over the past 3 yrs in Agile in Education. My guests are Paul Magnuson ( Director of Curriculum \u0026amp; Director of the Middle School) and Bill Tihen ( Director of IT, Teacher, and runs the Makers Space ) Empowering students, making learning visible, and creating life long learners are goals for Paul and Bill as they lead this movement at Leysin.\nAgile Amped · Agile in Education at Leysin American School in Switzerland ","date":1480550400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1480550400,"objectID":"e9e0f7fd031534238e5c161f4db27027","permalink":"https://btihen.me/in_news/agile_in_education_at_las_interview_agile_amped/","publishdate":"2020-04-16T19:01:41+02:00","relpermalink":"/in_news/agile_in_education_at_las_interview_agile_amped/","section":"in_news","summary":"Principles to empower students, make learning visible and to create lifelong learners. An audio interview by Howard Sublett of AgileAmped Podcast.","tags":["Agile","Education"],"title":"Agile in Education at Leysin American School","type":"in_news"},{"authors":["Bill Tihen","Paul Magnuson","Howard Sublett"],"categories":[],"content":"How would our education system be different using agile principles and values?\nIn this InDepth edition, our conversation focuses around the American School in Leysin, Switzerland, and their experiments over the past 3 yrs in Agile in Education. My guests are Paul Magnuson ( Director of Curriculum \u0026amp; Director of the Middle School) and Bill Tihen ( Director of IT, Teacher, and runs the Makers Space ) Empowering students, making learning visible, and creating life long learners are goals for Paul and Bill as they lead this movement at Leysin.\nAgile Amped · Agile in Education at Leysin American School in Switzerland ","date":1480550400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1480550400,"objectID":"2c3aa986e3a9ee2c324942319c67ca2c","permalink":"https://btihen.me/publication/agile_amped_interview_agile_in_education_at_las/","publishdate":"2020-04-16T19:01:41+02:00","relpermalink":"/publication/agile_amped_interview_agile_in_education_at_las/","section":"publication","summary":"Principles to empower students, make learning visible and to create lifelong learners. An audio interview by Howard Sublett of AgileAmped Podcast.","tags":["Agile","Education"],"title":"Agile in Education at Leysin American School","type":"publication"},{"authors":["John Miller"],"categories":[],"content":"To help incorporate Agile into their school, they [Paul Magnuson and Bill Tihen] brought in John Miller, a Certified Scrum Coach and Chief Empowerment Officer of Agile Classrooms, for two days of training. The Scrum Alliance has been a big supporter of John’s commitment to using Scrum to transform the world of education ever since he unveiled the first classroom to use Scrum at the Atlanta Scrum Gathering in 2010. When the Scrum Alliance, the largest Agile organization in the world, heard of Paul and Bill’s desire to implement Scrum for their students, they stepped up to sponsor the event. The Swiss Group of International Schools also co-sponsored the workshop.\nThe Agile Classrooms Workshop\n","date":1432598400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1432598400,"objectID":"4e5c02d005278be349af2661c6062c7f","permalink":"https://btihen.me/in_news/agile_classrooms_article_agile_classrooms/","publishdate":"2020-04-17T16:58:57+02:00","relpermalink":"/in_news/agile_classrooms_article_agile_classrooms/","section":"in_news","summary":"LAS began planning in 2014-2015 for the opening of a middle school (grades 7 and 8) in Fall 2016. Twenty-five educators attended John’s Agile Classroom Workshop.","tags":["Agile","Agile Classrooms","Middle School","John Miller","Scrum Workshop"],"title":"Agile Classrooms in the Alps","type":"in_news"},{"authors":["John Miller"],"categories":[],"content":"To help incorporate Agile into their school, they [Paul Magnuson and Bill Tihen] brought in John Miller, a Certified Scrum Coach and Chief Empowerment Officer of Agile Classrooms, for two days of training. The Scrum Alliance has been a big supporter of John’s commitment to using Scrum to transform the world of education ever since he unveiled the first classroom to use Scrum at the Atlanta Scrum Gathering in 2010. When the Scrum Alliance, the largest Agile organization in the world, heard of Paul and Bill’s desire to implement Scrum for their students, they stepped up to sponsor the event. The Swiss Group of International Schools also co-sponsored the workshop.\nThe Agile Classrooms Workshop\n","date":1432598400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1432598400,"objectID":"d0a57bbf78afc5601a7832bf3acee6e2","permalink":"https://btihen.me/publication/agile_classrooms_article_agile_classroom_workshop/","publishdate":"2020-04-17T16:58:57+02:00","relpermalink":"/publication/agile_classrooms_article_agile_classroom_workshop/","section":"publication","summary":"LAS began planning in 2014-2015 for the opening of a middle school (grades 7 and 8) in Fall 2016. Twenty-five educators attended John’s Agile Classroom Workshop.","tags":["Agile","Agile Classrooms","Middle School","John Miller","Scrum Workshop"],"title":"Agile Classrooms in the Alps","type":"publication"},{"authors":["John Harlin"],"categories":[],"content":"","date":1431561600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1431561600,"objectID":"e0ef7af0584802bbc4ad11c7d897e2d4","permalink":"https://btihen.me/in_news/climate_poles_john_harlin_lets_report/","publishdate":"2020-04-26T09:46:27+02:00","relpermalink":"/in_news/climate_poles_john_harlin_lets_report/","section":"in_news","summary":"To understand plant ecology, one needs to know the exact temperature that plants are actually growing in, rather than regional averages.  Our efforts to make this widely available to citizen scientists and espescially schools.","tags":["Education","Citizen Science","Climate","Ecology","Engineering"],"title":"Climate Sensor Poles","type":"in_news"},{"authors":["John Harlin"],"categories":[],"content":"","date":1431561600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1431561600,"objectID":"f498c6fdbe8eb6cbc484e075b6dbef57","permalink":"https://btihen.me/publication/las_laser_lets_report_john_harlin_climate_poles/","publishdate":"2020-04-26T09:46:27+02:00","relpermalink":"/publication/las_laser_lets_report_john_harlin_climate_poles/","section":"publication","summary":"To understand plant ecology, one needs to know the exact temperature that plants are actually growing in, rather than regional averages.  Our efforts to make this widely available to citizen scientists and espescially schools.","tags":["Education","Citizen Science","Climate","Ecology","Engineering"],"title":"Climate Sensor Poles","type":"publication"},{"authors":["Daniel Patton","Bill Tihen","John Harlin"],"categories":["Education","Agile","Self-Regulation","Student Agency"],"content":"","date":1431561600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1431561600,"objectID":"fea8127b0737aca037d9b3e2360ed6f3","permalink":"https://btihen.me/publication/las_laser_lets_climate_case_laser_report_2015/","publishdate":"2020-04-23T21:03:13+02:00","relpermalink":"/publication/las_laser_lets_climate_case_laser_report_2015/","section":"publication","summary":"Through efforts in citizen science, like building a ClimateCase to replicate outside conditions, LAS is teaching real science. Teachers also simulated projected changes to see if they could assess plant survivability.","tags":["transect","species","altitude","climate change","citizen science","robotics","plant science","3D printing"],"title":"LETS ClimateCase","type":"publication"}]