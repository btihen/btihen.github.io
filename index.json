[{"authors":["btihen"],"categories":null,"content":"On a quest to explore and uplift.\nDeveloper, Educator and very curious.\nI love exploring / hiking in the alps with my dog and I love learning new programming ideas.\nFeel free to checkout my exploratory repository.\n","date":1616889420,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1617641820,"objectID":"d0bce26d5158f27a6f8cf294562f4503","permalink":"https://btihen.me/authors/btihen/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/btihen/","section":"authors","summary":"On a quest to explore and uplift.\nDeveloper, Educator and very curious.\nI love exploring / hiking in the alps with my dog and I love learning new programming ideas.","tags":null,"title":"Bill Tihen","type":"authors"},{"authors":["btihen"],"categories":null,"content":"Developer, Educator, Meditator and Nature Enthusiast.\nI hold a Masters in Electrical Engineering (with a focus on Materials Science). I also have a ScrumMaster certification.\nI have worked as a robotics designer, teacher, systems administrator and software engineer. My technical work has strongly influenced how I teach: Research and Agile practices have helped me develop a keen interest in the joy of exploring or \u0026lsquo;playful experiments.\u0026rsquo; Agile presents the Plan, Do, Reflect, Adjust loop and I have found that \u0026lsquo;smallifying\u0026rsquo; large tasks is an effective way to make progress with a large overwhelming project. In fact, taking little exploratory \u0026lsquo;bets\u0026rsquo; / experiments to move forward, helps many people feel safe. When I realized these are also excellent learning methodologies, I realized in addition to content, I need to teach these skills too.\nOver time I have also realized that one of the most important aspects of a classroom (or work environment) is that it is exciting, engaging and generally an uplifting environment. Or possibly an energy gifting experience. I have found the when students can choose their learning outcomes \u0026amp; goals (within the expectations of the class curriculum) the classroom can offer students these experiences too.\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f5a32eae84903f79e7abb9a10e888737","permalink":"https://btihen.me/authors/btihen/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/btihen/","section":"authors","summary":"Developer, Educator, Meditator and Nature Enthusiast.\nI hold a Masters in Electrical Engineering (with a focus on Materials Science). I also have a ScrumMaster certification.\nI have worked as a robotics designer, teacher, systems administrator and software engineer.","tags":null,"title":"Bill Tihen","type":"authors"},{"authors":null,"categories":null,"content":"Install This feature can be used for publishing content such as:\n Online courses Project or software documentation Tutorials  The courses folder may be renamed. For example, we can rename it to docs for software/project documentation or tutorials for creating an online course.\nDelete tutorials just like that\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"42291f93b606a25d1333fab4504afbee","permalink":"https://btihen.me/explore/crystal/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/explore/crystal/","section":"explore","summary":"Learn how to use crystal","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":null,"content":"Mint is fun ","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"2630904d917324ddeb6056948a6c27e4","permalink":"https://btihen.me/explore/mint/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/explore/mint/","section":"explore","summary":"Learn how to use mint","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":null,"content":"Overview This class is based on learning:\n Bouyancing Physics Fluid Dynamics  ","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"e694eb01448caa8f95e8d7cfc07a6905","permalink":"https://btihen.me/courses/boat_design/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/boat_design/","section":"courses","summary":"3-D design and printing, 3-D Analytical Geometry, Fluid Dynamics, Physics of Boyancy \u0026 Center of Gravity","tags":null,"title":"Boat Design Intro","type":"docs"},{"authors":null,"categories":null,"content":"Flexibility This feature can be used for publishing content such as:\n Online courses Project or software documentation Tutorials  The courses folder may be renamed. For example, we can rename it to docs for software/project documentation or tutorials for creating an online course.\nDelete tutorials To remove these pages, delete the courses folder and see below to delete the associated menu link.\nUpdate site menu After renaming or deleting the courses folder, you may wish to update any [[main]] menu links to it by editing your menu configuration at config/_default/menus.toml.\nFor example, if you delete this folder, you can remove the following from your menu configuration:\n[[main]] name = \u0026quot;Courses\u0026quot; url = \u0026quot;courses/\u0026quot; weight = 50  Or, if you are creating a software documentation site, you can rename the courses folder to docs and update the associated Courses menu configuration to:\n[[main]] name = \u0026quot;Docs\u0026quot; url = \u0026quot;docs/\u0026quot; weight = 50  Update the docs menu If you use the docs layout, note that the name of the menu in the front matter should be in the form [menu.X] where X is the folder name. Hence, if you rename the courses/example/ folder, you should also rename the menu definitions in the front matter of files within courses/example/ from [menu.example] to [menu.\u0026lt;NewFolderName\u0026gt;].\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"539a070be20f4112719fce218b48a2e4","permalink":"https://btihen.me/courses/robot_gardner/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/robot_gardner/","section":"courses","summary":"Sensors, electronics, and coding","tags":null,"title":"Robot Gardner","type":"docs"},{"authors":["Paul Magnuson","Bill Tihen","Nicola Cosgrove","Dan Patton"],"categories":["Agile","Education"],"content":"EDgility focuses on Education Agility. Inspired by agiles ability to create engaged and enthusiastic learning enviornments in technology companies. We started with our top educational principles and we quietly integrated agile practices into our classrooms.\n","date":1604619287,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1604619287,"objectID":"4ce3fbfe7b931e177bf4a2f392d8bc26","permalink":"https://btihen.me/projects/edgility/","publishdate":"2020-11-06T01:34:47+02:00","relpermalink":"/projects/edgility/","section":"projects","summary":"Educational Agility for Schools","tags":["agility","education","practices","values"],"title":"EDgility","type":"projects"},{"authors":["Paul Magnuson","Bill Tihen","Elliott Hebert"],"categories":["Agile","Education"],"content":"PeakChallenges: Engaged Learning for a Changing World\nWe are inspired by learning and working in our changing world.\nAgile is is an excellent foundation for working with changes. As educators, our goal has been to merge the Agile Learning Loop with excellent classroom practices.\n","date":1604619287,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1604619287,"objectID":"b63f6cc856899444af6f55c7d3b2748c","permalink":"https://btihen.me/projects/peakchallenges/","publishdate":"2020-11-06T01:34:47+02:00","relpermalink":"/projects/peakchallenges/","section":"projects","summary":"Educational Agility Training","tags":["agility","education","practices","values"],"title":"Peak Challenges","type":"projects"},{"authors":["Bill Tihen"],"categories":["Code","Sharing"],"content":"An opensource mobile friendly simple calendar to simplify scheduling for non-profits.\n","date":1604619287,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1604619287,"objectID":"e29d27346a1918bec4718f23748f9261","permalink":"https://btihen.me/projects/mobile_calendar/","publishdate":"2020-11-06T01:34:47+02:00","relpermalink":"/projects/mobile_calendar/","section":"projects","summary":"Mobile Friendly Scheduling Software","tags":["ruby","rails","mobile","calendar"],"title":"Shared Schedule","type":"projects"},{"authors":["Paul Magnuson","Bill Tihen","Elliot Hebert"],"categories":["Education","Agile","Research"],"content":"Find schools, organizations, blogs, podcasts, and publications below. ARC consortium members contribute by documenting applications of the agile mindset in education.\n","date":1603010087,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1603010087,"objectID":"2b3187cd8fe11532b6426f95f19a12c4","permalink":"https://btihen.me/projects/arcforschools/","publishdate":"2020-10-18T10:34:47+02:00","relpermalink":"/projects/arcforschools/","section":"projects","summary":"Agile Research Consortium for Schools","tags":["faculty","sharing","education","international","professional development"],"title":"ARC for Schools","type":"projects"},{"authors":null,"categories":null,"content":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nCrystal CLI ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"785ce6507db0a207d4f74c50cf456f88","permalink":"https://btihen.me/explore/crystal/cli/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/explore/crystal/cli/","section":"explore","summary":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nCrystal CLI ","tags":null,"title":"Crystal CLI Usage","type":"docs"},{"authors":null,"categories":null,"content":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nMint CLI ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"791d2bd259bec939ffe7881dde5108a3","permalink":"https://btihen.me/explore/mint/cli/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/explore/mint/cli/","section":"explore","summary":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nMint CLI ","tags":null,"title":"Mint CLI","type":"docs"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"b4c7f25d5b7963758e82d0980c48943b","permalink":"https://btihen.me/contact/contact/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/contact/contact/","section":"contact","summary":"","tags":null,"title":"Contact","type":"contact"},{"authors":null,"categories":null,"content":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 2 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"168159c01b62537a8068c7cfdb8f4a4d","permalink":"https://btihen.me/courses/boat_design/example1/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/boat_design/example1/","section":"courses","summary":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":null,"title":"Example Page 1","type":"docs"},{"authors":null,"categories":null,"content":"Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 4 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"87fb05721f9770a0171a5301a03a6f7e","permalink":"https://btihen.me/courses/boat_design/example2/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/boat_design/example2/","section":"courses","summary":"Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":null,"title":"Example Page 2","type":"docs"},{"authors":null,"categories":null,"content":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 2 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"90760a4db7af96bc96d01a166bc36a21","permalink":"https://btihen.me/courses/robot_gardner/example1/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/robot_gardner/example1/","section":"courses","summary":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":null,"title":"Example Page 1","type":"docs"},{"authors":null,"categories":null,"content":"Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 4 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"991d142ab215f3e0b69fed5f97a84078","permalink":"https://btihen.me/courses/robot_gardner/example2/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/robot_gardner/example2/","section":"courses","summary":"Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":null,"title":"Example Page 2","type":"docs"},{"authors":["Bill Tihen"],"categories":[],"content":"Overview As was seen in Using Hotwire with Flash Messages Hotwire can easily load data - let\u0026rsquo;s do this in a lazy loaded way (after the html is loaded we add data).\nBasic Setup Start with the code at the end of: Using Hotwire in Rails\nPrepare our code Let\u0026rsquo;s remove the extra Tweet.new load in the controller\u0026rsquo;s index method:\n# app/controllers/tweets_controller.rb def index @tweets = Tweet.all.order(created_at: :desc) # @tweet = Tweet.new # no longer needed end  now if we try our code we get a null value error (for course).\nSo to fix this we need to load the data back in (and restructure our index page a bit).\nTurbo works well if you use the normal templates - so in this case we will use the new template on the home page to call the new form and get its own data:\n# app/views/tweets/index.html.erb \u0026lt;h1\u0026gt;Tweets\u0026lt;/h1\u0026gt; \u0026lt;%= turbo_stream_from \u0026quot;tweets\u0026quot; %\u0026gt; \u0026lt;h2 class=\u0026quot;mt-3 h4 text-muted\u0026quot;\u0026gt;New Tweet\u0026lt;/h2\u0026gt; \u0026lt;div class=\u0026quot;card card-body\u0026quot;\u0026gt; \u0026lt;%= turbo_frame_tag \u0026quot;new-tweet\u0026quot;, src: new_tweet_path, target: \u0026quot;_top\u0026quot; %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h2 class=\u0026quot;mt-3 h4 text-muted\u0026quot;\u0026gt;Tweet Feed\u0026lt;/h2\u0026gt; \u0026lt;%= turbo_frame_tag \u0026quot;tweets\u0026quot; do %\u0026gt; \u0026lt;%= render @tweets %\u0026gt; \u0026lt;% end %\u0026gt;  Notice the new template is using the dom_id \u0026ldquo;new-tweet\u0026rdquo; and not \u0026ldquo;new_tweet\u0026rdquo;. Also note that this tag has a src: - that is where it is getting its data source (\u0026amp; view to use) - in this case the new_tweet_path routes to tweets_controller#new and that calls the veiw template. The final thing to note is the target - this tells the turbo_tag to look / act outside the contraints of its frame (otherwise we couldn\u0026rsquo;t reach the controller).\nCurrently this won\u0026rsquo;t work yet - we need to create a matching tag \u0026ndash; including the target in the new template. So our updated new template now looks like:\n app/views/tweets/new.html.erb \u0026lt;h1\u0026gt;New Tweet\u0026lt;/h1\u0026gt; \u0026lt;%= turbo_frame_tag \u0026quot;new-tweet\u0026quot;, target: \u0026quot;_top\u0026quot; do %\u0026gt; \u0026lt;%= render 'form', tweet: @tweet %\u0026gt; \u0026lt;% end %\u0026gt;  Now we should have a new form that uses the standard rails data flow within the index - just like the display and edit of individual tweets also uses show and edit templates too.\nResources The repo where you can find this code in the branch: https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_lazy_load_data\n","date":1616889420,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1616889420,"objectID":"f1d24ca00d9815f89a92a1a3dc206f0a","permalink":"https://btihen.me/post_ruby_rails/rails_6_1_hotwire_lazy_load_data/","publishdate":"2021-03-28T01:57:00+02:00","relpermalink":"/post_ruby_rails/rails_6_1_hotwire_lazy_load_data/","section":"post_ruby_rails","summary":"A simple Single Page App using Rails and flash messages with Hotwire","tags":["Rails","Hotwire","SPA","WebSocket","realtime","lazy load data"],"title":"Rails 6.1 - Hotwire with Lazy Loading","type":"post_ruby_rails"},{"authors":["Bill Tihen"],"categories":[],"content":"Overview Now that you have the basics of using Hotwire in Rails Using Hotwire in Rails - its interesting to try using it in other contexts, inparticular modals are very useful for inputs in Single Page Apps. So in this Blog we will make the new input form a modal and leave the edit as an in-place form.\nBasic Setup Start with the code at the end of: Using Hotwire in Rails\nAdd jQuery to Bootstrap Setup First we need to ensure we have JS and JQuery (installed with Bootstrap) - so we will simply add the following to the end of our \u0026lt;body\u0026gt; in the application.html.erb file:\n# app/views/layouts/application.html.erb \u0026lt;body\u0026gt; \u0026lt;p id=\u0026quot;notice\u0026quot;\u0026gt;\u0026lt;%= notice %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;%= yield %\u0026gt; \u0026lt;script src=\u0026quot;https://code.jquery.com/jquery-3.5.1.slim.min.js\u0026quot; integrity=\u0026quot;sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\u0026quot; crossorigin=\u0026quot;anonymous\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js\u0026quot; integrity=\u0026quot;sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx\u0026quot; crossorigin=\u0026quot;anonymous\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt;  Add Modal to Index So we will start by replacing the new-form with a button that toggles the modal.\n# app/views/tweets/index.html.erb \u0026lt;h1\u0026gt;Tweets\u0026lt;/h1\u0026gt; \u0026lt;%= turbo_stream_from \u0026quot;tweets\u0026quot; %\u0026gt; \u0026lt;h2 class=\u0026quot;mt-3 h4 text-muted\u0026quot;\u0026gt;New Tweet\u0026lt;/h2\u0026gt; \u0026lt;%= render \u0026quot;tweets/modal_new\u0026quot;, tweet: @tweet %\u0026gt; \u0026lt;h2 class=\u0026quot;mt-3 h4 text-muted\u0026quot;\u0026gt;Tweet Feed\u0026lt;/h2\u0026gt; \u0026lt;%= turbo_frame_tag \u0026quot;tweets\u0026quot; do %\u0026gt; \u0026lt;%= render @tweets %\u0026gt; \u0026lt;% end %\u0026gt;  So now lets make a partial that has the modal toggle button and the associated html to enable the modal to function (this code is basically copied from the Bootstrap website):\n# app/views/tweets/_modal_new.html.erb \u0026lt;%= link_to \u0026quot;#\u0026quot;, class: 'btn btn-sm btn-outline-primary', data: { toggle: \u0026quot;modal\u0026quot;, target: \u0026quot;#tweetModal\u0026quot; } do %\u0026gt; New Tweet \u0026lt;% end %\u0026gt; \u0026lt;div class=\u0026quot;modal fade\u0026quot; id=\u0026quot;tweetModal\u0026quot; tabindex=\u0026quot;-1\u0026quot; aria-labelledby=\u0026quot;exampleModalLabel\u0026quot; aria-hidden=\u0026quot;true\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;modal-dialog\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;modal-content\u0026quot;\u0026gt; \u0026lt;%= render \u0026quot;tweets/modal_form\u0026quot;, tweet: tweet %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;  Notice we have a partial for the form still - this is because we have to point turbo at a dom_id within a partial (without doing this we can\u0026rsquo;t get validation errors back into this form). This is a mix of the Bootstrap example code placed within the rails form.\n# app/views/tweets/_modal_form.html.erb \u0026lt;%= form_with(model: tweet, id: dom_id(tweet)) do |form| %\u0026gt; \u0026lt;div class=\u0026quot;modal-header\u0026quot;\u0026gt; \u0026lt;h5 class=\u0026quot;modal-title\u0026quot;\u0026gt;New Tweet\u0026lt;/h5\u0026gt; \u0026lt;button type=\u0026quot;button\u0026quot; class=\u0026quot;close\u0026quot; data-dismiss=\u0026quot;modal\u0026quot; aria-label=\u0026quot;Close\u0026quot;\u0026gt; \u0026lt;span aria-hidden=\u0026quot;true\u0026quot;\u0026gt;\u0026amp;times;\u0026lt;/span\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;modal-body\u0026quot;\u0026gt; \u0026lt;% if tweet.errors.any? %\u0026gt; \u0026lt;div id=\u0026quot;error_explanation\u0026quot;\u0026gt; \u0026lt;h2\u0026gt;\u0026lt;%= pluralize(tweet.errors.count, \u0026quot;error\u0026quot;) %\u0026gt; prohibited this tweet from being saved:\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;% tweet.errors.each do |error| %\u0026gt; \u0026lt;li\u0026gt;\u0026lt;%= error.full_message %\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;div class=\u0026quot;field\u0026quot;\u0026gt; \u0026lt;%= form.label :body %\u0026gt; \u0026lt;%= form.text_area :body %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;modal-footer\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;actions\u0026quot;\u0026gt; \u0026lt;%= form.submit class: \u0026quot;btn btn-sm btn-outline-success\u0026quot; %\u0026gt; \u0026lt;%= link_to \u0026quot;Cancel\u0026quot;, tweet, class: \u0026quot;btn btn-sm btn-outline-danger\u0026quot; %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt;  Test  Modal Opens Modal Close Works Modal Cancel Works Create valid Tweet \u0026ndash; works and broadcasts Create invalid Tweet \u0026ndash; Errors go to wrong form (must click cancel or reload)  In fact, if you put the regular form back into the index page you will see that the validation errors show up there.\nFix validation errors We fix this like this like a normal form - we change how the controller uses turbo_stream. So instead of pointing to the partial: \u0026ldquo;tweets/form\u0026rdquo; we need to point to \u0026ldquo;tweets/modal_form\u0026rdquo; (the new partial with the form).\n# app/controllers/tweets_controller.rb def create @tweet = Tweet.new(tweet_params) respond_to do |format| if @tweet.save format.html { redirect_to tweets_url, notice: \u0026quot;Tweet was successfully created.\u0026quot; } format.json { render :show, status: :created, location: @tweet } else format.turbo_stream { # route turbo_stream validation errors render turbo_stream: turbo_stream.replace( @tweet, partial: \u0026quot;tweets/modal_form\u0026quot;, locals: { tweet: @tweet}) } format.html { render :new, status: :unprocessable_entity } format.json { render json: @tweet.errors, status: :unprocessable_entity } end end end  Now all our tests should work.\nUsing turbo templates Let\u0026rsquo;s refactor - for future flexibility. We\u0026rsquo;ll create the template. Since we are using the create method within the controller - we\u0026rsquo;ll call the file: create.turbo_stream.html.erb - notice, unsurprisingly it looks what\u0026rsquo;s in the controller.\n# app/views/tweets/create.turbo_stream.erb \u0026lt;!-- action dom_id partial with the dom_id actual data --\u0026gt; \u0026lt;%= turbo_stream.replace @tweet, partial: \u0026quot;tweets/modal_form\u0026quot;, locals: { tweet: @tweet } %\u0026gt;  Now we can make the controller look like:\n# app/controllers/tweets_controller.rb def create @tweet = Tweet.new(tweet_params) respond_to do |format| if @tweet.save format.html { redirect_to tweets_url, notice: \u0026quot;Tweet was successfully created.\u0026quot; } format.json { render :show, status: :created, location: @tweet } else format.turbo_stream # route turbo_stream validation errors format.html { render :new, status: :unprocessable_entity } format.json { render json: @tweet.errors, status: :unprocessable_entity } end end end  Using the template allows us the flexibilty to make multiple dynamic changes to the page on a create. This is demonstrated in the post describing using Flash messages with Hotwire.\nResources The repo where you can find this code in the branch: https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_modal_new_tweet\nThe important commit is: https://github.com/btihen/ruby_kafi_hotwire_tweets/commit/0c37fb6071b31d13f4cf3ce2499326893724e131\n","date":1616259420,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1616259420,"objectID":"2962f6a191160d8da8eb45fb9807a1cb","permalink":"https://btihen.me/post_ruby_rails/rails_6_1_hotwire_modal_form/","publishdate":"2021-03-20T18:57:00+02:00","relpermalink":"/post_ruby_rails/rails_6_1_hotwire_modal_form/","section":"post_ruby_rails","summary":"A simple Single Page App using Rails and Hotwire - integrated with a modal forms","tags":["Rails","Hotwire","SPA","WebSocket","realtime","modal forms"],"title":"Rails 6.1 - Hotwire with Modals","type":"post_ruby_rails"},{"authors":["Bill Tihen"],"categories":[],"content":"Overview Hotwire only updates dom_ids (usually only within a partial) - so other Frontend needs still need to be met with Javascript. Rails uses StimulusJS to augment Hotwire. I Using Hotwire with Flash Messages we created a new instance of Tweet in the turbo_template and sent that to the form. (Pretty non-standard) - we can do this even more simply by using JS to clear the form without instantiating a new object.\nBasic Setup Start with the code at the end of: Using Hotwire with Flash Messages\nStimulusJS to clear forms To enable Flash Messages our create/controller looked like - which seems a little messy - in create (happy-path) we handle all the updates via the create.turbo_stream.erb template and with validation errors we explicity (in the controller - handle the validation errors)\nSo lets start by disabling the code we no longer need in the template:\n# app/views/tweets/create.turbo_stream.erb \u0026lt;%# turbo_stream.replace \u0026quot;tweet-form\u0026quot;, partial: \u0026quot;tweets/form\u0026quot;, locals: { tweet: Tweet.new } %\u0026gt; \u0026lt;%# to send a message to the notice partial %\u0026gt; \u0026lt;%= turbo_stream.append \u0026quot;notice\u0026quot;, partial: \u0026quot;shared/notice\u0026quot;, locals: {notice: \u0026quot;Tweet was successfully created.\u0026quot;} %\u0026gt;  So we are only leaving the turbo_stream.append active.\nLet\u0026rsquo;s test here and be sure the new form doesn\u0026rsquo;t clear after making a new tweet.\nAdd a StimulusJS controller We don\u0026rsquo;t need to add / install or configure StimulusJS since Hotwire already handles this.\nSo let\u0026rsquo;s create the JS file to clear the form - its quite simple we will just use:\n// app/javascript/controllers/reset_form_controller.js import { Controller } from \u0026quot;stimulus\u0026quot; export default class extends Controller { reset() { this.element.reset() } }  In order to tie this to the form we need to go into the form and add the data: info \u0026ndash; so now our form should start with:\n# app/views/tweets/_form.html.erb \u0026lt;%= form_with(model: tweet, id: dom_id(tweet), data: {controller: \u0026quot;reset-form\u0026quot;, action: \u0026quot;turbo:submit-end-\u0026gt;reset-form#reset\u0026quot;} ) do |form| %\u0026gt;  This data tag ties the stimulus controller reset_form_controller.js with the reset-form setting \u0026ndash; notice the html uses a - when ruby uses _. On the form action submit-end then execute ('-\u0026gt;') in the controller reset-form the function ('#') reset\nFairly straight-forward, but it helps to be aware of the syntax and the differences between Ruby and Javascript.\nResources The repo where you can find this code in the branch: https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_with_stimulus\n","date":1615741020,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1617641820,"objectID":"495d100b1a6d2c41efcc3000aaf90988","permalink":"https://btihen.me/post_ruby_rails/rails_6_1_hotwire_and_stimulusjs/","publishdate":"2021-03-14T18:57:00+02:00","relpermalink":"/post_ruby_rails/rails_6_1_hotwire_and_stimulusjs/","section":"post_ruby_rails","summary":"A simple Single Page App using Rails and flash messages with Hotwire","tags":["Rails","Hotwire","SPA","WebSocket","realtime","flash message"],"title":"Rails 6.1 - Hotwire with StimulusJS","type":"post_ruby_rails"},{"authors":["Bill Tihen"],"categories":[],"content":"Overview Now that you have the basics of using Hotwire in Rails Using Hotwire in Rails - its interesting to try using it in other contexts, inparticular modals are very useful for inputs in Single Page Apps. So in this Blog we will make the new input form a modal and leave the edit as an in-place form.\nBasic Setup Start with the code at the end of: Using Hotwire in Rails\nFlash Messages in Partial Remember, turbo_streams requires a dom_id and a partial in order to know where to send / update the HTML it generates \u0026ndash; so let\u0026rsquo;s prepare application.html.erb so that flash messages use partials.\n# app/views/layouts/application.html.erb \u0026lt;body\u0026gt; \u0026lt;%= render \u0026quot;shared/notice\u0026quot;, notice: notice %\u0026gt; \u0026lt;%= yield %\u0026gt; \u0026lt;/body\u0026gt;  and of course we need a partials for notices now (we will keep it very simple):\n# app/views/shared/_notice.html.erb \u0026lt;p id=\u0026quot;notice\u0026quot;\u0026gt;\u0026lt;%= notice %\u0026gt;\u0026lt;/p\u0026gt;  now we will create a turbo template to handle the flash on create:\n# app/views/tweets/create.turbo_stream.erb \u0026lt;%# to send a message to the notice partial %\u0026gt; \u0026lt;!-- action dom_id partial with dom_id data to send in the notice --\u0026gt; \u0026lt;%= turbo_stream.append \u0026quot;notice\u0026quot;, partial: \u0026quot;shared/notice\u0026quot;, locals: {notice: \u0026quot;Tweet created.\u0026quot;} %\u0026gt;  In order for the controller and turbo_stream to handle this non-standard action we need to update the create method in the controller with the instructions format.turbo_stream on a successful create:\n# app/controllers/tweets_controller.rb def create @tweet = Tweet.new(tweet_params) respond_to do |format| if @tweet.save format.turbo_stream # enables flash message on create - via the create template format.html { redirect_to tweets_url, notice: \u0026quot;Tweet was successfully created.\u0026quot; } format.json { render :show, status: :created, location: @tweet } else format.turbo_stream { # route turbo validation errors render turbo_stream: turbo_stream.replace( @tweet, partial: \u0026quot;tweets/form\u0026quot;, locals: { tweet: @tweet}) } format.html { render :new, status: :unprocessable_entity } format.json { render json: @tweet.errors, status: :unprocessable_entity } end end end  Now when we test everything works great, except our form no longer clears. We can fix that by adding a second action to the create template (we will send a Tweet.new - there are other approaches too - covered in Hotwire and StimulusJS)\n# app/views/tweets/create.turbo_stream.erb \u0026lt;%# clear form on create - without using JavaScript - by replacing the old Tweet info with Tweet.new %\u0026gt; \u0026lt;%= turbo_stream.replace \u0026quot;tweet-form\u0026quot;, partial: \u0026quot;tweets/form\u0026quot;, locals: { tweet: Tweet.new } %\u0026gt; \u0026lt;%# to send a message to the notice partial %\u0026gt; \u0026lt;%= turbo_stream.append \u0026quot;notice\u0026quot;, partial: \u0026quot;shared/notice\u0026quot;, locals: {notice: \u0026quot;Tweet was successfully created.\u0026quot;} %\u0026gt;  Refactor You might have noticed, that we have moved most of our turbo_steam template to the template file, but not the replace for validation errors \u0026ndash; since we already have a replace command in our template - we will need to leave our specific instructions in the errors as is \u0026ndash; until we clear the form with JS.\nNOTE: now that we are consolidating our template info it might be tempting to add the following:\n\u0026lt;!-- to prepend on create - disabled to avoid double vision when broadcasting --\u0026gt; \u0026lt;%#% stream_action dom_id_target, render_partial, send_local_variables %\u0026gt; \u0026lt;%= turbo_stream.prepend \u0026quot;tweets\u0026quot;, partial: \u0026quot;tweets/tweet\u0026quot;, locals: { tweet: @tweet } %\u0026gt;  but don\u0026rsquo;t add the default happy path instructions to the template when a model already has a broadcast after hook - if you add this instruction the person creating a new tweet will see two!\nFlash after we update This is now very straight forward we simply add format.turbo_stream to our save and create an update.turbo_stream.erb template\n# app/views/tweets/update.turbo_stream.erb \u0026lt;%# to send a message to the notice partial %\u0026gt; \u0026lt;%= turbo_stream.append \u0026quot;notice\u0026quot;, partial: \u0026quot;shared/notice\u0026quot;, locals: {notice: \u0026quot;Tweet was successfully created.\u0026quot;} %\u0026gt;  And now we can tell the controller to use that:\n# app/controllers/tweets_controller.rb def update respond_to do |format| if @tweet.update(tweet_params) format.turbo_stream format.html { redirect_to @tweet, notice: \u0026quot;Tweet was successfully updated.\u0026quot; } format.json { render :show, status: :ok, location: @tweet } else format.html { render :edit, status: :unprocessable_entity } format.json { render json: @tweet.errors, status: :unprocessable_entity } end end end  We don\u0026rsquo;t have to clear the form on update since the edit template is replaced with the show template already. So we are done.\nResources The repo where you can find this code in the branch: https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_flash_messages\n","date":1615049820,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1615049820,"objectID":"f6df180a0d3c27d1476965332f9a2028","permalink":"https://btihen.me/post_ruby_rails/rails_6_1_hotwire_flash_messages/","publishdate":"2021-03-06T18:57:00+02:00","relpermalink":"/post_ruby_rails/rails_6_1_hotwire_flash_messages/","section":"post_ruby_rails","summary":"A simple Single Page App using Rails and flash messages with Hotwire","tags":["Rails","Hotwire","SPA","WebSocket","realtime","flash message"],"title":"Rails 6.1 - Hotwire with Flash Messages","type":"post_ruby_rails"},{"authors":["Bill Tihen"],"categories":[],"content":"Overview  Hotwire is planned to be integrated into Rails 7.x and is already included in the soon to be published book: Modern Front-End Development for Rails: Hotwire, Stimulus, Turbo, and React \nHotwire allows us to build Single Page Apps using Ruby and Rails with nearly NO configuration! It allow very responsive web-applications as it reloads only the parts of the page that change via a socket. Hotwire using Turbo - an evolution of TurboLinks and as such is mobile friendly and in most cases can send the replacement HTML directly from the server to the client with minimal or no client side processing over websockets so there is minimal lag time.\nIn this article we convert a seemingly \u0026lsquo;single-page\u0026rsquo; web app that reloads with every request see previous article Tweets - A Single Page Rails App (using reloads) and convert it into a proper \u0026lsquo;single-page\u0026rsquo; app that only refreshes the aspects that change. This makes web-pages with lots of data and complexity FAST and feel like native apps. This is done with Hotwire (using web-sockets).\nBasic Setup We will be starting with a basic Tweet Simulator it looks something like:\nThe starting code base can be found at: https://github.com/btihen/tweet_simulator_rails\nThe steps to re-create this code can be found at: Tweets - A Single Page Rails App (using reloads)\nThe actual Tweet Hotwire code from this article can be found at:\nInstall and configure Hotwire Install Hotwire To use hotwire - we need to install it:\nbundle add hotwire-rails bin/rails hotwire:install  The hotwire package is smart enough to install via webpack if that\u0026rsquo;s installed or in the asset pipeline if no webpacker is installed. This project uses webpack (but it shouldn\u0026rsquo;t matter).\nThis also installs Stimulus Javascript and enables redis if not already installed. Now you should see the following steps:\n Stimulus config in: application.js and setup. Turbo install and setup Removal of Turbolinks Enable Redis gem Configure Redis to work with ActionCable (Rails Websockets)  and the output should look something like:\nAppending Stimulus setup code to append app/javascript/packs/application.js Creating controllers directory create app/javascript/controllers create app/javascript/controllers/hello_controller.js create app/javascript/controllers/index.js Installing all Stimulus dependencies run yarn add stimulus from \u0026quot;.\u0026quot; ... ✨ Done in 36.58s. Install Turbo run yarn add @hotwired/turbo-rails from \u0026quot;.\u0026quot; ... ✨ Done in 7.40s. insert app/javascript/packs/application.js Remove Turbolinks gsub Gemfile run bin/bundle from \u0026quot;.\u0026quot; run bin/yarn remove turbolinks from \u0026quot;.\u0026quot; yarn remove v1.22.10 [1/2] 🗑 Removing module turbolinks... ... gsub app/javascript/packs/application.js gsub app/javascript/packs/application.js Enable redis in bundle gsub Gemfile Switch development cable to use redis gsub config/cable.yml Turbo successfully installed ⚡️  NOTE: a prerequisite is that you already have Redis (server) installed in your development environment.\nCheck Project config for Hotwire  References to turbolinks must be removed Turbo is installed Stimulus is installed  If you have problems you can experiment try adding one or more of the following:\n \u0026lt;%= yield :head %\u0026gt; \u0026lt;%= turbo_include_tags %\u0026gt; \u0026lt;%= stimulus_include_tags %\u0026gt;  In particular, I found the top two helpful - but this is a new technology - and it is still evolving. In the end the app/views/layouts/application.html.erb might need to look like:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Tweets\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width,initial-scale=1\u0026quot;\u0026gt; \u0026lt;%= csrf_meta_tags %\u0026gt; \u0026lt;%= csp_meta_tag %\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css\u0026quot; integrity=\u0026quot;sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l\u0026quot; crossorigin=\u0026quot;anonymous\u0026quot;\u0026gt; \u0026lt;%= stylesheet_link_tag 'application', media: 'all' %\u0026gt; \u0026lt;%= javascript_pack_tag 'application' %\u0026gt; \u0026lt;%= yield :head %\u0026gt; \u0026lt;%= turbo_include_tags %\u0026gt; \u0026lt;%# stimulus_include_tags %\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;%= yield %\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Check the app is still working and make a git snapshot.\ngit add . git commit -m \u0026quot;install and configure hotwire-rails\u0026quot;  Using Hotwire Avoid the page reloads and only update our changes by sending new HTML\nBroadcast New Tweets to all Clients To broadcast changes to a client we need to modify the model and add the broadcast command. A Broadcast \u0026ldquo;tweets\u0026rdquo; sends changes to the turbo_stream (websocket channel) with the same name. To add the new tweets to the top of the \u0026ldquo;tweets\u0026rdquo; page (frame) we need to use the broadcast_prepend_to instead of the broadcast_append_to (which puts new entries at the bottom)\n# app/models/tweet.rb class Tweet \u0026lt; ApplicationRecord validates :body, presence: true # broadcast \u0026quot;tweets\u0026quot; send all changes to the turbo_stream view \u0026quot;tweets\u0026quot; # broadcast_prepend_to places new information at the top instead of appending to the bottom after_create_commit { broadcast_prepend_to \u0026quot;tweets\u0026quot; } end  In order for this model broadcast to work we need to create a place to send it. We do this in the view via a stream with the command \u0026lt;%= turbo_stream_from \u0026quot;tweets\u0026quot; %\u0026gt; we also need to tell this stream where to update \u0026ndash; we do this with the turbo tag of the same name: \u0026lt;%= turbo_frame_tag \u0026quot;tweets\u0026quot; do %\u0026gt;\nSo lets update our index page :\n# app/views/tweets/index.html.erb \u0026lt;!-- connects to the backend broadcast (via a channel) --\u0026gt; \u0026lt;%= turbo_stream_from \u0026quot;tweets\u0026quot; %\u0026gt; \u0026lt;!-- frame that receives the taged data --\u0026gt; \u0026lt;%= turbo_frame_tag \u0026quot;tweets\u0026quot; do %\u0026gt; \u0026lt;%= render @tweets %\u0026gt; \u0026lt;% end %\u0026gt;  In order to see our new frames lets update our css to make them visible - lets add a border to our turbo-frames:\n# app/assets/stylesheets/tweets.scss turbo-frame { display: block; border: 1px solid green }  Let\u0026rsquo;s check that our new broadcast feature run: bin/rails s and open two browser windows point at http://localhost:3000\nYou can see in the left window we created a new tweet and it automatically appeared in the right window! HOW COOL IS THAT!\nNotice that the \u0026ldquo;blue\u0026rdquo; turbo-frame is around all the displayed tweets.\nLets also take a quick look at the logs - from this transaction:\nStarted POST \u0026quot;/tweets\u0026quot; for 127.0.0.1 at 2021-02-28 21:12:59 +0100 Processing by TweetsController#create as TURBO_STREAM Parameters: {\u0026quot;authenticity_token\u0026quot;=\u0026gt;\u0026quot;[FILTERED]\u0026quot;, \u0026quot;tweet\u0026quot;=\u0026gt;{\u0026quot;body\u0026quot;=\u0026gt;\u0026quot;Fourth Tweet\u0026quot;}, \u0026quot;commit\u0026quot;=\u0026gt;\u0026quot;Create Tweet\u0026quot;} TRANSACTION (1.6ms) BEGIN ↳ app/controllers/tweets_controller.rb:28:in `block in create' Tweet Create (60.1ms) INSERT INTO \u0026quot;tweets\u0026quot; (\u0026quot;body\u0026quot;, \u0026quot;created_at\u0026quot;, \u0026quot;updated_at\u0026quot;) VALUES ($1, $2, $3) RETURNING \u0026quot;id\u0026quot; [[\u0026quot;body\u0026quot;, \u0026quot;Fourth Tweet\u0026quot;], [\u0026quot;created_at\u0026quot;, \u0026quot;2021-02-28 20:12:59.221408\u0026quot;], [\u0026quot;updated_at\u0026quot;, \u0026quot;2021-02-28 20:12:59.221408\u0026quot;]] ↳ app/controllers/tweets_controller.rb:28:in `block in create' TRANSACTION (2.4ms) COMMIT ↳ app/controllers/tweets_controller.rb:28:in `block in create' Rendered tweets/_tweet.html.erb (Duration: 1.7ms | Allocations: 416) [ActionCable] Broadcasting to tweets: \u0026quot;\u0026lt;turbo-stream action=\\\u0026quot;prepend\\\u0026quot; target=\\\u0026quot;tweets\\\u0026quot;\u0026gt;\u0026lt;template\u0026gt;\u0026lt;div class=\\\u0026quot;card card-body\\\u0026quot;\u0026gt;\\n \u0026lt;div\u0026gt;Fourth Tweet\u0026lt;/div\u0026gt;\\n\\n \u0026lt;div class=\\\u0026quot;mt-2\\\u0026quot;\u0026gt;\\n \u0026lt;a class=\\\u0026quot;btn btn-sm btn-outline-success\\\u0026quot; rel=\\\u0026quot;nofollow\\\u0026quot; data-method=\\\u0026quot;post\\\u0026quot; href=\\\u0026quot;/tweets/7/like\\\u0026quot;\u0026gt;Like (0)\u0026lt;/a\u0026gt;\\n\\n \u0026lt;a class=\\\u0026quot;btn btn-sm btn-outline-info\\\u0026quot; rel=\\\u0026quot;nofollow\\\u0026quot; data-method=\\\u0026quot;post\\\u0026quot; href=\\\u0026quot;/tweets/7/retweet\\\u0026quot;\u0026gt;Retweet (0)\u0026lt;/a\u0026gt;\\n\\n \u0026lt;a class=\\\u0026quot;btn btn-sm btn-outline-primary\\\u0026quot; href=\\\u0026quot;/tweets/7/edit\\\u0026quot;\u0026gt;Edit\u0026lt;/a\u0026gt;\\n\\n \u0026lt;a data-confirm=\\\u0026quot;Are you sure?\\\u0026quot; class=\\\u0026quot;btn btn-sm btn-outline-danger\\\u0026quot; rel=\\\u0026quot;nofollow\\\u0026quot; data-method=\\\u0026quot;delete\\\u0026quot; href=\\\u0026quot;/tweets/7\\\u0026quot;\u0026gt;Destroy\u0026lt;/a\u0026gt;\\n \u0026lt;/div\u0026gt;\\n\u0026lt;/div\u0026gt;\\n\u0026lt;/template\u0026gt;\u0026lt;/turbo-stream\u0026gt;\u0026quot; Redirected to http://localhost:3000/tweets Completed 302 Found in 105ms (ActiveRecord: 64.1ms | Allocations: 5636) Turbo::StreamsChannel transmitting \u0026quot;\u0026lt;turbo-stream action=\\\u0026quot;prepend\\\u0026quot; target=\\\u0026quot;tweets\\\u0026quot;\u0026gt;\u0026lt;template\u0026gt;\u0026lt;div class=\\\u0026quot;card card-body\\\u0026quot;\u0026gt;\\n \u0026lt;div\u0026gt;Fourth Tweet\u0026lt;/div\u0026gt;\\n\\n \u0026lt;div class=\\\u0026quot;mt-2\\\u0026quot;\u0026gt;\\n \u0026lt;a class=\\\u0026quot;btn btn-sm btn-outline-success\\\u0026quot; rel=\\\u0026quot;nofollow\\\u0026quot; data-method=\\\u0026quot;post\\\u0026quot; href=\\\u0026quot;/tweets/7/like\\\u0026quot;\u0026gt;Like (0)\u0026lt;/a\u0026gt;\\n\\n \u0026lt;a class=\\\u0026quot;btn btn-s... (via streamed from tweets) Turbo::StreamsChannel transmitting \u0026quot;\u0026lt;turbo-stream action=\\\u0026quot;prepend\\\u0026quot; target=\\\u0026quot;tweets\\\u0026quot;\u0026gt;\u0026lt;template\u0026gt;\u0026lt;div class=\\\u0026quot;card card-body\\\u0026quot;\u0026gt;\\n \u0026lt;div\u0026gt;Fourth Tweet\u0026lt;/div\u0026gt;\\n\\n \u0026lt;div class=\\\u0026quot;mt-2\\\u0026quot;\u0026gt;\\n \u0026lt;a class=\\\u0026quot;btn btn-sm btn-outline-success\\\u0026quot; rel=\\\u0026quot;nofollow\\\u0026quot; data-method=\\\u0026quot;post\\\u0026quot; href=\\\u0026quot;/tweets/7/like\\\u0026quot;\u0026gt;Like (0)\u0026lt;/a\u0026gt;\\n\\n \u0026lt;a class=\\\u0026quot;btn btn-s... (via streamed from tweets) Started GET \u0026quot;/tweets\u0026quot; for 127.0.0.1 at 2021-02-28 21:12:59 +0100 Processing by TweetsController#index as TURBO_STREAM Rendering layout layouts/application.html.erb Rendering tweets/index.html.erb within layouts/application Rendered tweets/_form.html.erb (Duration: 2.6ms | Allocations: 501) Tweet Load (41.8ms) SELECT \u0026quot;tweets\u0026quot;.* FROM \u0026quot;tweets\u0026quot; ORDER BY \u0026quot;tweets\u0026quot;.\u0026quot;created_at\u0026quot; DESC ↳ app/views/tweets/index.html.erb:15 Rendered collection of tweets/_tweet.html.erb [3 times] (Duration: 1.3ms | Allocations: 429) Rendered tweets/index.html.erb within layouts/application (Duration: 50.7ms | Allocations: 2283) [Webpacker] Everything's up-to-date. Nothing to do Rendered layout layouts/application.html.erb (Duration: 75.7ms | Allocations: 7207) Completed 200 OK in 80ms (Views: 34.9ms | ActiveRecord: 41.8ms | Allocations: 7831)  There is a bunch of interesting information, but for now I just want to point out the only thing sent was the new html to display:\n[ActionCable] Broadcasting to tweets: \u0026quot;\u0026lt;turbo-stream action=\\\u0026quot;prepend\\\u0026quot; target=\\\u0026quot;tweets\\\u0026quot;\u0026gt;\u0026lt;template\u0026gt;\u0026lt;div class=\\\u0026quot;card card-body\\\u0026quot;\u0026gt;\\n \u0026lt;div\u0026gt;Fourth Tweet\u0026lt;/div\u0026gt;\\n\\n \u0026lt;div class=\\\u0026quot;mt-2\\\u0026quot;\u0026gt;\\n \u0026lt;a class=\\\u0026quot;btn btn-sm btn-outline-success\\\u0026quot; rel=\\\u0026quot;nofollow\\\u0026quot; data-method=\\\u0026quot;post\\\u0026quot; href=\\\u0026quot;/tweets/7/like\\\u0026quot;\u0026gt;Like (0)\u0026lt;/a\u0026gt;\\n\\n \u0026lt;a class=\\\u0026quot;btn btn-sm btn-outline-info\\\u0026quot; rel=\\\u0026quot;nofollow\\\u0026quot; data-method=\\\u0026quot;post\\\u0026quot; href=\\\u0026quot;/tweets/7/retweet\\\u0026quot;\u0026gt;Retweet (0)\u0026lt;/a\u0026gt;\\n\\n \u0026lt;a class=\\\u0026quot;btn btn-sm btn-outline-primary\\\u0026quot; href=\\\u0026quot;/tweets/7/edit\\\u0026quot;\u0026gt;Edit\u0026lt;/a\u0026gt;\\n\\n \u0026lt;a data-confirm=\\\u0026quot;Are you sure?\\\u0026quot; class=\\\u0026quot;btn btn-sm btn-outline-danger\\\u0026quot; rel=\\\u0026quot;nofollow\\\u0026quot; data-method=\\\u0026quot;delete\\\u0026quot; href=\\\u0026quot;/tweets/7\\\u0026quot;\u0026gt;Destroy\u0026lt;/a\u0026gt;\\n \u0026lt;/div\u0026gt;\\n\u0026lt;/div\u0026gt;\\n\u0026lt;/template\u0026gt;\u0026lt;/turbo-stream\u0026gt;\u0026quot; Redirected to http://localhost:3000/tweets  Using websockets to send html to the parts of the webpage that need to be updated is very efficient.\nSince the broadcast is at the model level, we can even create a new tweet on the cli and all our web-clients will update:\nbin/rails c Tweet.create(body: \u0026quot;CLI tweet appears\u0026quot;)  Lets make a snapshot:\ngit add . git commit -m \u0026quot;new tweets are broadcast to all clients\u0026quot;  Broadcast Deleted Tweets to all Clients we need to add another broadcast to the model:\n# app/models/tweet.rb class Tweet \u0026lt; ApplicationRecord validates :body, presence: true # broadcast \u0026quot;tweets\u0026quot; send all changes to the `turbo_stream` view \u0026quot;tweets\u0026quot; # `broadcast_prepend_to` places new information at the top instead of appending to the bottom after_create_commit { broadcast_prepend_to \u0026quot;tweets\u0026quot; } after_destroy_commit { broadcast_remove_to \u0026quot;tweets\u0026quot; } end  But for this to work we will need to create frames around every tweet so we can find and delete the individual tweet to do this we will at a tag to our _tweet partial.\n# app/views/tweets/_tweet.html.erb \u0026lt;!-- this tag with `tweet` instead of 'tweets' identifies an individual tweet --\u0026gt; \u0026lt;%= turbo_frame_tag tweet do %\u0026gt; \u0026lt;div class=\u0026quot;card card-body\u0026quot;\u0026gt; \u0026lt;div\u0026gt;\u0026lt;%= tweet.body %\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;mt-2\u0026quot;\u0026gt; \u0026lt;%= link_to \u0026quot;Like (#{tweet.likes})\u0026quot;, tweet_like_path(tweet), method: :post, class: \u0026quot;btn btn-sm btn-outline-success\u0026quot; %\u0026gt; \u0026lt;%= link_to \u0026quot;Retweet (#{tweet.retweets})\u0026quot;, tweet_retweet_path(tweet), method: :post, class: \u0026quot;btn btn-sm btn-outline-info\u0026quot; %\u0026gt; \u0026lt;%= link_to 'Edit', edit_tweet_path(tweet), class: \u0026quot;btn btn-sm btn-outline-primary\u0026quot; %\u0026gt; \u0026lt;%= link_to 'Destroy', tweet_path(tweet), method: :delete, data: { confirm: 'Are you sure?' }, class: \u0026quot;btn btn-sm btn-outline-danger\u0026quot; %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt;  Now when you should be able to delete a tweet in the middle of the tweets and not reload the entire page index page. You will notice also that each tweet now has the turbo-frame border.\nIn the above image you can see we are deleting the 3rd tweet - in the middle of the tweets. And of course it works in both our web-clients because of the new broadcast and tags we added.\nLooking at the logs we see that we only send the information that is changing to each client:\nTurbo::StreamsChannel transmitting \u0026quot;\u0026lt;turbo-stream action=\\\u0026quot;remove\\\u0026quot; target=\\\u0026quot;tweet_6\\\u0026quot;\u0026gt;\u0026lt;/turbo-stream\u0026gt;\u0026quot; (via streamed from tweets) Turbo::StreamsChannel transmitting \u0026quot;\u0026lt;turbo-stream action=\\\u0026quot;remove\\\u0026quot; target=\\\u0026quot;tweet_6\\\u0026quot;\u0026gt;\u0026lt;/turbo-stream\u0026gt;\u0026quot; (via streamed from tweets)  here is the full transaction:\nStarted DELETE \u0026quot;/tweets/6\u0026quot; for 127.0.0.1 at 2021-02-28 21:45:44 +0100 Processing by TweetsController#destroy as TURBO_STREAM Parameters: {\u0026quot;authenticity_token\u0026quot;=\u0026gt;\u0026quot;[FILTERED]\u0026quot;, \u0026quot;id\u0026quot;=\u0026gt;\u0026quot;6\u0026quot;} Tweet Load (5.5ms) SELECT \u0026quot;tweets\u0026quot;.* FROM \u0026quot;tweets\u0026quot; WHERE \u0026quot;tweets\u0026quot;.\u0026quot;id\u0026quot; = $1 LIMIT $2 [[\u0026quot;id\u0026quot;, 6], [\u0026quot;LIMIT\u0026quot;, 1]] ↳ app/controllers/tweets_controller.rb:63:in `set_tweet' TRANSACTION (0.8ms) BEGIN ↳ app/controllers/tweets_controller.rb:53:in `destroy' Tweet Destroy (27.4ms) DELETE FROM \u0026quot;tweets\u0026quot; WHERE \u0026quot;tweets\u0026quot;.\u0026quot;id\u0026quot; = $1 [[\u0026quot;id\u0026quot;, 6]] ↳ app/controllers/tweets_controller.rb:53:in `destroy' TRANSACTION (30.8ms) COMMIT ↳ app/controllers/tweets_controller.rb:53:in `destroy' [ActionCable] Broadcasting to tweets: \u0026quot;\u0026lt;turbo-stream action=\\\u0026quot;remove\\\u0026quot; target=\\\u0026quot;tweet_6\\\u0026quot;\u0026gt;\u0026lt;/turbo-stream\u0026gt;\u0026quot; Redirected to http://localhost:3000/tweets Completed 302 Found in 234ms (ActiveRecord: 66.0ms | Allocations: 6664) Turbo::StreamsChannel transmitting \u0026quot;\u0026lt;turbo-stream action=\\\u0026quot;remove\\\u0026quot; target=\\\u0026quot;tweet_6\\\u0026quot;\u0026gt;\u0026lt;/turbo-stream\u0026gt;\u0026quot; (via streamed from tweets) Turbo::StreamsChannel transmitting \u0026quot;\u0026lt;turbo-stream action=\\\u0026quot;remove\\\u0026quot; target=\\\u0026quot;tweet_6\\\u0026quot;\u0026gt;\u0026lt;/turbo-stream\u0026gt;\u0026quot; (via streamed from tweets) Started GET \u0026quot;/tweets\u0026quot; for 127.0.0.1 at 2021-02-28 21:45:44 +0100 Processing by TweetsController#index as TURBO_STREAM Rendering layout layouts/application.html.erb Rendering tweets/index.html.erb within layouts/application Rendered tweets/_form.html.erb (Duration: 1.9ms | Allocations: 501) Tweet Load (1.6ms) SELECT \u0026quot;tweets\u0026quot;.* FROM \u0026quot;tweets\u0026quot; ORDER BY \u0026quot;tweets\u0026quot;.\u0026quot;created_at\u0026quot; DESC ↳ app/views/tweets/index.html.erb:15 Rendered collection of tweets/_tweet.html.erb [3 times] (Duration: 1.2ms | Allocations: 528) Rendered tweets/index.html.erb within layouts/application (Duration: 10.2ms | Allocations: 2380) [Webpacker] Everything's up-to-date. Nothing to do Rendered layout layouts/application.html.erb (Duration: 27.4ms | Allocations: 7296) Completed 200 OK in 31ms (Views: 26.6ms | ActiveRecord: 1.6ms | Allocations: 7918)  Let\u0026rsquo;s take another snapshot:\ngit add . git commit -m \u0026quot;broadcast deleted tweets via hotwire\u0026quot;  Edit / Updates to all clients! Turbo unlike Turbo-Links works with Forms as well as links. This allows us to edit our posts.\nStart with the Create Form Lets start by testing the create form as is with validation errors - if we enter a blank message we should get an error.\nNow lets put this form in a turbo-frame - since we will need this in a form for edit - lets start with the easy case - new / create - where the form will always be in the same location. Ideally, the turbo_stream_from definition is before the first turbo_frame_tag. Now your index view will look something like:\n# app/views/tweets/index.html.erb \u0026lt;p id=\u0026quot;notice\u0026quot;\u0026gt;\u0026lt;%= notice %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;!-- connects to the backend broadcast (via a channel) --\u0026gt; \u0026lt;%= turbo_stream_from \u0026quot;tweets\u0026quot; %\u0026gt; \u0026lt;h1\u0026gt;Tweets\u0026lt;/h1\u0026gt; \u0026lt;h4\u0026gt;New Tweet\u0026lt;/h4\u0026gt; \u0026lt;!-- the form needs to be in a frame - otherwise we can't edit in place --\u0026gt; \u0026lt;%= turbo_frame_tag \u0026quot;tweet-form\u0026quot; do %\u0026gt; \u0026lt;%= render \u0026quot;tweets/form\u0026quot;, tweet: @tweet %\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;h4\u0026gt;Tweet Feed\u0026lt;/h4\u0026gt; \u0026lt;!-- frame that receives the taged data --\u0026gt; \u0026lt;%= turbo_frame_tag \u0026quot;tweets\u0026quot; do %\u0026gt; \u0026lt;%= render @tweets %\u0026gt; \u0026lt;% end %\u0026gt;  Log file - from the log file we see we are still reloading the page see the line: Tweet Load (83.9ms) SELECT \u0026quot;tweets\u0026quot;.* FROM \u0026quot;tweets\u0026quot; ORDER BY \u0026quot;tweets\u0026quot;.\u0026quot;created_at\u0026quot;:\nStarted POST \u0026quot;/tweets\u0026quot; for 127.0.0.1 at 2021-03-01 20:55:34 +0100 Processing by TweetsController#create as TURBO_STREAM Parameters: {\u0026quot;authenticity_token\u0026quot;=\u0026gt;\u0026quot;[FILTERED]\u0026quot;, \u0026quot;tweet\u0026quot;=\u0026gt;{\u0026quot;body\u0026quot;=\u0026gt;\u0026quot;\u0026quot;}, \u0026quot;commit\u0026quot;=\u0026gt;\u0026quot;Create Tweet\u0026quot;} Rendering layout layouts/application.html.erb Rendering tweets/index.html.erb within layouts/application Rendered tweets/_form.html.erb (Duration: 4.9ms | Allocations: 1362) Tweet Load (83.9ms) SELECT \u0026quot;tweets\u0026quot;.* FROM \u0026quot;tweets\u0026quot; ORDER BY \u0026quot;tweets\u0026quot;.\u0026quot;created_at\u0026quot; DESC ↳ app/views/tweets/index.html.erb:23 Rendered collection of tweets/_tweet.html.erb [4 times] (Duration: 2.0ms | Allocations: 700) Rendered tweets/index.html.erb within layouts/application (Duration: 94.0ms | Allocations: 3159) [Webpacker] Everything's up-to-date. Nothing to do Rendered layout layouts/application.html.erb (Duration: 119.2ms | Allocations: 8006) Completed 422 Unprocessable Entity in 125ms (Views: 35.9ms | ActiveRecord: 83.9ms | Allocations: 9244)  To fix this we will need the form to have a tag id - to do this we can update the form with \u0026lt;%= form_with(model: tweet, id: dom_id(tweet)) do |form| %\u0026gt; - also:\n\u0026lt;%= form_with(model: tweet, id: dom_id(tweet)) do |form| %\u0026gt; \u0026lt;% if tweet.errors.any? %\u0026gt; \u0026lt;div id=\u0026quot;error_explanation\u0026quot;\u0026gt; \u0026lt;h2\u0026gt;\u0026lt;%= pluralize(tweet.errors.count, \u0026quot;error\u0026quot;) %\u0026gt; prohibited this tweet from being saved:\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;% tweet.errors.each do |error| %\u0026gt; \u0026lt;li\u0026gt;\u0026lt;%= error.full_message %\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;div class=\u0026quot;field\u0026quot;\u0026gt; \u0026lt;%= form.label :body %\u0026gt; \u0026lt;%= form.text_area :body %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;actions\u0026quot;\u0026gt; \u0026lt;%= form.submit %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt;  But even still we need to the controller how to use the turbo_stream. There are several ways (with and without a template). We will start without a tempate (actually the template info is inline) using: format.turbo_stream { render turbo_stream: turbo_stream.replace(@tweet, partial: \u0026quot;tweets/form\u0026quot;, locals: { tweet: @tweet}) }. Not the create controller should look like:\n# app/controllers/tweets_controller.rb def create @tweet = Tweet.new(tweet_params) respond_to do |format| if @tweet.save format.html { redirect_to tweets_url, notice: \u0026quot;Tweet was successfully created.\u0026quot; } format.json { render :show, status: :created, location: @tweet } else format.turbo_stream { render turbo_stream: turbo_stream.replace(@tweet, partial: \u0026quot;tweets/form\u0026quot;, locals: { tweet: @tweet}) } @tweets = Tweet.all.order(created_at: :desc) format.html { render :index, status: :unprocessable_entity } format.json { render json: @tweet.errors, status: :unprocessable_entity } end end end  Now when we create an invalid message we should see (notice the turbo-frame outline): When we look at the logs we can confirm we are using the TURBO_STREAM for both directions and NOT reloading the page (no LOAD in the log):\nStarted POST \u0026quot;/tweets\u0026quot; for 127.0.0.1 at 2021-03-01 21:22:13 +0100 Processing by TweetsController#create as TURBO_STREAM Parameters: {\u0026quot;authenticity_token\u0026quot;=\u0026gt;\u0026quot;[FILTERED]\u0026quot;, \u0026quot;tweet\u0026quot;=\u0026gt;{\u0026quot;body\u0026quot;=\u0026gt;\u0026quot;\u0026quot;}, \u0026quot;commit\u0026quot;=\u0026gt;\u0026quot;Create Tweet\u0026quot;} Rendered tweets/_form.html.erb (Duration: 3.0ms | Allocations: 1373) Completed 200 OK in 7ms (Views: 0.3ms | ActiveRecord: 0.0ms | Allocations: 2641)  Now that validation errors work again - lets be sure that we can still create a new tweet.\nAssuming all works - lets take a quick snapshot:\ngit add . git commit -m \u0026quot;new tweet form is hooked into turbo-stream and validations still work\u0026quot;  ????? Turbo - is clever enough to figure out the routing in the default case and will use its own stream to update the page - however you could also define an explicit stream - something like: format.turbo_stream { render turbo_stream: turbo_stream.prepend(@tweet, locals: { tweet: @tweet}) } or with format.turbo_stream and a turbo view app/views/tweets/create.turbo_stream - containing: \u0026lt;%= %\u0026gt; ????\nIn-Place Edit In oder to do an in-place edit we will need yet another type of broadcast after_update_commit { broadcast_replace_to \u0026quot;tweets\u0026quot; } so our new model will now look like:\n# app/models/tweet.rb class Tweet \u0026lt; ApplicationRecord validates :body, presence: true # broadcast \u0026quot;tweets\u0026quot; send all changes to the `turbo_stream` view \u0026quot;tweets\u0026quot; # `broadcast_prepend_to` places new information at the top instead of appending to the bottom after_create_commit { broadcast_prepend_to \u0026quot;tweets\u0026quot; } after_destroy_commit { broadcast_remove_to \u0026quot;tweets\u0026quot; } after_update_commit { broadcast_replace_to \u0026quot;tweets\u0026quot; } end  Now would hope it would all work, but when we click on Edit, the item disappears (and re-appears on reload). Lets look at the logs:\nStarted GET \u0026quot;/tweets/11/edit\u0026quot; for 127.0.0.1 at 2021-03-03 20:10:53 +0100 Processing by TweetsController#edit as HTML Parameters: {\u0026quot;id\u0026quot;=\u0026gt;\u0026quot;11\u0026quot;} Tweet Load (0.7ms) SELECT \u0026quot;tweets\u0026quot;.* FROM \u0026quot;tweets\u0026quot; WHERE \u0026quot;tweets\u0026quot;.\u0026quot;id\u0026quot; = $1 LIMIT $2 [[\u0026quot;id\u0026quot;, 11], [\u0026quot;LIMIT\u0026quot;, 1]] ↳ app/controllers/tweets_controller.rb:68:in `set_tweet' Rendering tweets/edit.html.erb Rendered tweets/_form.html.erb (Duration: 2.3ms | Allocations: 676) Rendered tweets/edit.html.erb (Duration: 3.8ms | Allocations: 980) Completed 200 OK in 8ms (Views: 4.5ms | ActiveRecord: 0.7ms | Allocations: 2104)  We see that it loads the tweet and sends it to the edit.html.erb page (which loads the form partial), but we don\u0026rsquo;t see anything but the index page (minus the tweet we wanted to edit). Unfortunately, Hotwire, doesn\u0026rsquo;t provide an error, it just doesn\u0026rsquo;t find a location to render the edit on our index (since the edit link is within a stream tag) and just replaces our dom_id with nothing. Here is where Hotwire could provide much better feedback.\nIn any case, the fix is straightforward, we need to tell Rails what in the edit page goes into the index page so we can do that with another frame_tag: \u0026lt;%= turbo_frame_tag dom_id(@tweet) do %\u0026gt; Now the edit.html.erb page should look like:\n# app/views/tweets/edit.html.erb \u0026lt;h1\u0026gt;Editing Tweet\u0026lt;/h1\u0026gt; \u0026lt;%= turbo_frame_tag dom_id(@tweet) do %\u0026gt; \u0026lt;%= render 'form', tweet: @tweet %\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;%= link_to 'Show', @tweet %\u0026gt; | \u0026lt;%= link_to 'Back', tweets_path %\u0026gt;  NOTE: We don\u0026rsquo;t need to fix the form partial since we did that in the previous new step with by adding a dom_id tag to the form with: \u0026lt;%= form_with(model: tweet, id: dom_id(tweet)) do |form| %\u0026gt;.\nWe might notice that the edit page lacks formatting (the form is squished up against the left of our frame). This is because our tweet partial has a card div but that is lacking when replace the dom_id with the form \u0026ndash; we can easily fix this by adding the CSS to our edit page:\n# app/views/tweets/edit.html.erb \u0026lt;h1\u0026gt;Editing Tweet\u0026lt;/h1\u0026gt; \u0026lt;%= turbo_frame_tag dom_id(@tweet) do %\u0026gt; \u0026lt;div class=\u0026quot;card card-body\u0026quot;\u0026gt; \u0026lt;%= render 'form', tweet: @tweet %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;%= link_to 'Show', @tweet %\u0026gt; | \u0026lt;%= link_to 'Back', tweets_path %\u0026gt;  Now when we reload and try to edit \u0026ndash; we see what we expect: Now when we actually do an edit we see it all works as expected. From the logs we see it loads the tweet from the db, then the the edit page which loads the frame (this time it actually places it into the dom_id we provided, but unfortunately, we can\u0026rsquo;t see that from the logs)! And we can see that when we submit the edit \u0026ndash; the tweet model sends out the html patch send to both windows we have open.\nStarted GET \u0026quot;/tweets/11/edit\u0026quot; for 127.0.0.1 at 2021-03-03 20:34:56 +0100 Processing by TweetsController#edit as HTML Parameters: {\u0026quot;id\u0026quot;=\u0026gt;\u0026quot;11\u0026quot;} Tweet Load (1.0ms) SELECT \u0026quot;tweets\u0026quot;.* FROM \u0026quot;tweets\u0026quot; WHERE \u0026quot;tweets\u0026quot;.\u0026quot;id\u0026quot; = $1 LIMIT $2 [[\u0026quot;id\u0026quot;, 11], [\u0026quot;LIMIT\u0026quot;, 1]] ↳ app/controllers/tweets_controller.rb:68:in `set_tweet' Rendering tweets/edit.html.erb Rendered tweets/_form.html.erb (Duration: 2.5ms | Allocations: 649) Rendered tweets/edit.html.erb (Duration: 3.8ms | Allocations: 985) Completed 200 OK in 9ms (Views: 5.3ms | ActiveRecord: 1.0ms | Allocations: 2110) Started PATCH \u0026quot;/tweets/11\u0026quot; for 127.0.0.1 at 2021-03-03 20:35:11 +0100 Processing by TweetsController#update as TURBO_STREAM Parameters: {\u0026quot;authenticity_token\u0026quot;=\u0026gt;\u0026quot;[FILTERED]\u0026quot;, \u0026quot;tweet\u0026quot;=\u0026gt;{\u0026quot;body\u0026quot;=\u0026gt;\u0026quot;jump! how high?\u0026quot;}, \u0026quot;commit\u0026quot;=\u0026gt;\u0026quot;Update Tweet\u0026quot;, \u0026quot;id\u0026quot;=\u0026gt;\u0026quot;11\u0026quot;} Tweet Load (1.1ms) SELECT \u0026quot;tweets\u0026quot;.* FROM \u0026quot;tweets\u0026quot; WHERE \u0026quot;tweets\u0026quot;.\u0026quot;id\u0026quot; = $1 LIMIT $2 [[\u0026quot;id\u0026quot;, 11], [\u0026quot;LIMIT\u0026quot;, 1]] ↳ app/controllers/tweets_controller.rb:68:in `set_tweet' TRANSACTION (1.0ms) BEGIN ↳ app/controllers/tweets_controller.rb:45:in `block in update' Tweet Update (58.8ms) UPDATE \u0026quot;tweets\u0026quot; SET \u0026quot;body\u0026quot; = $1, \u0026quot;updated_at\u0026quot; = $2 WHERE \u0026quot;tweets\u0026quot;.\u0026quot;id\u0026quot; = $3 [[\u0026quot;body\u0026quot;, \u0026quot;jump! how high?\u0026quot;], [\u0026quot;updated_at\u0026quot;, \u0026quot;2021-03-03 19:35:11.765970\u0026quot;], [\u0026quot;id\u0026quot;, 11]] ↳ app/controllers/tweets_controller.rb:45:in `block in update' TRANSACTION (2.3ms) COMMIT ↳ app/controllers/tweets_controller.rb:45:in `block in update' Rendered tweets/_tweet.html.erb (Duration: 2.0ms | Allocations: 499) [ActionCable] Broadcasting to tweets: \u0026quot;\u0026lt;turbo-stream action=\\\u0026quot;replace\\\u0026quot; target=\\\u0026quot;tweet_11\\\u0026quot;\u0026gt;\u0026lt;template\u0026gt;\u0026lt;!-- this tag with `tweet` instead of 'tweets' identifies an individual tweet --\u0026gt;\\n\u0026lt;turbo-frame id=\\\u0026quot;tweet_11\\\u0026quot;\u0026gt;\\n\\n\u0026lt;div class=\\\u0026quot;card card-body\\\u0026quot;\u0026gt;\\n \u0026lt;div\u0026gt;jump! how high?\u0026lt;/div\u0026gt;\\n\\n \u0026lt;div class=\\\u0026quot;mt-2\\\u0026quot;\u0026gt;\\n \u0026lt;a class=\\\u0026quot;btn btn-sm btn-outline-success\\\u0026quot; rel=\\\u0026quot;nofollow\\\u0026quot; data-method=\\\u0026quot;post\\\u0026quot; href=\\\u0026quot;/tweets/11/like\\\u0026quot;\u0026gt;Like (0)\u0026lt;/a\u0026gt;\\n\\n \u0026lt;a class=\\\u0026quot;btn btn-sm btn-outline-info\\\u0026quot; rel=\\\u0026quot;nofollow\\\u0026quot; data-method=\\\u0026quot;post\\\u0026quot; href=\\\u0026quot;/tweets/11/retweet\\\u0026quot;\u0026gt;Retweet (0)\u0026lt;/a\u0026gt;\\n\\n \u0026lt;a class=\\\u0026quot;btn btn-sm btn-outline-primary\\\u0026quot; href=\\\u0026quot;/tweets/11/edit\\\u0026quot;\u0026gt;Edit\u0026lt;/a\u0026gt;\\n\\n \u0026lt;a data-confirm=\\\u0026quot;Are you sure?\\\u0026quot; class=\\\u0026quot;btn btn-sm btn-outline-danger\\\u0026quot; rel=\\\u0026quot;nofollow\\\u0026quot; data-method=\\\u0026quot;delete\\\u0026quot; href=\\\u0026quot;/tweets/11\\\u0026quot;\u0026gt;Destroy\u0026lt;/a\u0026gt;\\n \u0026lt;/div\u0026gt;\\n\u0026lt;/div\u0026gt;\\n\\n\u0026lt;/turbo-frame\u0026gt;\u0026lt;/template\u0026gt;\u0026lt;/turbo-stream\u0026gt;\u0026quot; Redirected to http://localhost:3000/tweets Completed 302 Found in 116ms (ActiveRecord: 63.1ms | Allocations: 6308) Turbo::StreamsChannel transmitting \u0026quot;\u0026lt;turbo-stream action=\\\u0026quot;replace\\\u0026quot; target=\\\u0026quot;tweet_11\\\u0026quot;\u0026gt;\u0026lt;template\u0026gt;\u0026lt;!-- this tag with `tweet` instead of 'tweets' identifies an individual tweet --\u0026gt;\\n\u0026lt;turbo-frame id=\\\u0026quot;tweet_11\\\u0026quot;\u0026gt;\\n\\n\u0026lt;div class=\\\u0026quot;card card-body\\\u0026quot;\u0026gt;\\n \u0026lt;div\u0026gt;jump! how high?\u0026lt;/div\u0026gt;\\n\\n \u0026lt;div class=\\\u0026quot;mt-2\\\u0026quot;\u0026gt;\\n \u0026lt;a class=\\\u0026quot;btn btn-sm btn... (via streamed from tweets) Turbo::StreamsChannel transmitting \u0026quot;\u0026lt;turbo-stream action=\\\u0026quot;replace\\\u0026quot; target=\\\u0026quot;tweet_11\\\u0026quot;\u0026gt;\u0026lt;template\u0026gt;\u0026lt;!-- this tag with `tweet` instead of 'tweets' identifies an individual tweet --\u0026gt;\\n\u0026lt;turbo-frame id=\\\u0026quot;tweet_11\\\u0026quot;\u0026gt;\\n\\n\u0026lt;div class=\\\u0026quot;card card-body\\\u0026quot;\u0026gt;\\n \u0026lt;div\u0026gt;jump! how high?\u0026lt;/div\u0026gt;\\n\\n \u0026lt;div class=\\\u0026quot;mt-2\\\u0026quot;\u0026gt;\\n \u0026lt;a class=\\\u0026quot;btn btn-sm btn... (via streamed from tweets)  Lets add a cancel button to the form so we don\u0026rsquo;t need to reload the page to stop editing - we can do that with a show link \u0026lt;%= link_to \u0026quot;Cancel\u0026quot;, @tweet, class: \u0026quot;btn btn-sm btn-outline-danger\u0026quot; %\u0026gt; - so our form would now look like:\n# app/views/tweets/_form.html.erb \u0026lt;%= form_with(model: tweet, id: dom_id(tweet)) do |form| %\u0026gt; \u0026lt;% if tweet.errors.any? %\u0026gt; \u0026lt;div id=\u0026quot;error_explanation\u0026quot;\u0026gt; \u0026lt;h2\u0026gt;\u0026lt;%= pluralize(tweet.errors.count, \u0026quot;error\u0026quot;) %\u0026gt; prohibited this tweet from being saved:\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;% tweet.errors.each do |error| %\u0026gt; \u0026lt;li\u0026gt;\u0026lt;%= error.full_message %\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;div class=\u0026quot;field\u0026quot;\u0026gt; \u0026lt;%= form.label :body %\u0026gt; \u0026lt;%= form.text_area :body %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;action\u0026quot;\u0026gt; \u0026lt;%= form.submit class: \u0026quot;btn btn-sm btn-outline-success\u0026quot; %\u0026gt; \u0026lt;%= link_to \u0026quot;Cancel\u0026quot;, @tweet, class: \u0026quot;btn btn-sm btn-outline-danger\u0026quot; %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt;  Unfortunately, now when we hit cancel - the tweet disappears \u0026ndash; because @tweet points to the show page and our current show page has no turbo_frame with a dom_id. We can fix this by putting our show page (formatted like the tweet partial wrapped in a frame tag with a dom_id) - like:\n# app/views/tweets/show.html.erb \u0026lt;%= turbo_frame_tag dom_id(@tweet) do %\u0026gt; \u0026lt;div class=\u0026quot;card card-body\u0026quot;\u0026gt; \u0026lt;div\u0026gt;\u0026lt;%= @tweet.body %\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;mt-2\u0026quot;\u0026gt; \u0026lt;%= link_to \u0026quot;Like (#{@tweet.likes})\u0026quot;, tweet_like_path(@tweet), method: :post, class: \u0026quot;btn btn-sm btn-outline-success\u0026quot; %\u0026gt; \u0026lt;%= link_to \u0026quot;Retweet (#{@tweet.retweets})\u0026quot;, tweet_retweet_path(@tweet), method: :post, class: \u0026quot;btn btn-sm btn-outline-info\u0026quot; %\u0026gt; \u0026lt;%= link_to 'Edit', edit_tweet_path(@tweet), class: \u0026quot;btn btn-sm btn-outline-primary\u0026quot; %\u0026gt; \u0026lt;%= link_to 'Destroy', tweet_path(@tweet), method: :delete, data: { confirm: 'Are you sure?' }, class: \u0026quot;btn btn-sm btn-outline-danger\u0026quot; %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt;  However, this is a bit silly since this is basically the same as our partial and we have two places to change if we want to adjust our tweet layout \u0026ndash; so we can fix this by using the tweet partial:\n# app/views/tweets/show.html.erb \u0026lt;%= turbo_frame_tag dom_id(@tweet) do %\u0026gt; \u0026lt;%= render @tweet %\u0026gt; \u0026lt;% end %\u0026gt;  This works, but renders a tag inside a turbo_frame with the tweet dom_id inside the same turbo_frame with the same dom_id (I only noticed this since I have the css marking all turbo_frames): This is because the tweet partial also has a dom_id - and show will process whatever it finds \u0026ndash; but only sends whatever is marked by the dom_id.\nThis was a little tricky to notice at first without the HTML inspector \u0026ndash; since in show I used the explicit dom_id: \u0026lt;%= turbo_frame_tag @tweet do %\u0026gt; and in the tweet partial I used the implicit dom_id tag: \u0026lt;%= turbo_frame_tag tweet do %\u0026gt;. Unfortunately, for now Rails Turbo provides does not yet provide warnings when you render the same dom_id twice.\nIn any case, now it may be clear that the the proper solution is that show should now read like:\n# app/views/tweets/show.html.erb \u0026lt;%= render @tweet %\u0026gt;  Now when you inspect the HTML you will only see one dom_id for each tweet and since turbo only replaces items with the correct tags and ids - it renders the tweet partial now. This is all a bit tricky to debug, hopefully, with time more errors or logging will be added - but for now, I suggest adding \u0026lt;!-- --\u0026gt; HTML comments with the name of the file inside each turbo tag to ease debugging \u0026ndash; at least until everything works as wished.\nNow let\u0026rsquo;s be sure the validation still works for edit too. Try to submit an empty edit - we should see: because the form now has a dom_id and the validation errors are sent there.\nIf some other route is happening another way to fix this would be to add format.turbo_stream { render turbo_stream: turbo_stream.replace(@tweet, partial: \u0026quot;tweets/form\u0026quot;, locals: { tweet: @tweet}) } to the controller update method:\n# app/controllers/tweets_controller.rb def update respond_to do |format| if @tweet.update(tweet_params) format.html { redirect_to tweets_url, notice: \u0026quot;Tweet was successfully updated.\u0026quot; } format.json { render :show, status: :ok, location: @tweet } else format.turbo_stream { render turbo_stream: turbo_stream.replace(@tweet, partial: \u0026quot;tweets/form\u0026quot;, locals: { tweet: @tweet}) } format.html { render :edit, status: :unprocessable_entity } format.json { render json: @tweet.errors, status: :unprocessable_entity } end end end  OK - ideally all functionality in the edit form is now working well!\nTime for another snapshot:\ngit add . git commit -m \u0026quot;turbo frame now allows in-place edit and cancel edit without reloading\u0026quot;  Likes and Retweet I was able to get these special routes / actions to update just the calling browser, but unable to get these to broadcast to all open connections.\nResources I am particularly fond of the GoRails videos.\n https://hotwire.dev/ https://turbo.hotwire.dev/ https://github.com/hotwired/hotwire-rails https://www.youtube.com/watch?v=NtTfYfWAzw0 https://www.youtube.com/watch?v=77GvSdc2Pf8 https://www.youtube.com/watch?v=NtTfYfWAzw0 https://www.youtube.com/watch?v=MRv4XGu6QkY https://gorails.com/episodes/hotwire-rails?autoplay=1 https://robrace.dev/build-a-twitter-clone-with-rails-hotwire/ https://blog.cloud66.com/taking-rails-to-the-next-level-with-hotwire/ https://betterprogramming.pub/hotwire-actiontext-and-rails-6-be025dce7d87  ","date":1614531420,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1616432220,"objectID":"3b7dea0fc1ff66d345e24a4de529c3d7","permalink":"https://btihen.me/post_ruby_rails/rails_6_1_hotwire_single_model/","publishdate":"2021-02-28T18:57:00+02:00","relpermalink":"/post_ruby_rails/rails_6_1_hotwire_single_model/","section":"post_ruby_rails","summary":"A simple Single Page App using Rails and Hotwire","tags":["Rails","Hotwire","SPA","WebSocket","realtime"],"title":"Rails 6.1 - Hotwire (Realtime SPA)","type":"post_ruby_rails"},{"authors":["Bill Tihen"],"categories":[],"content":"Overview This article is just to have a base app that stays on the index page. We will use this as a starting point for a more efficient single page app by updating this project with Hotwire in the next article Tweets - A Rails based Single Page App using Hotwire\n Hotwire allows us to build Single Page Apps using Ruby and Rails with nearly NO configuration! It allow very responsive web-applications as it reloads only the parts of the page that change via a socket. Hotwire using Turbo - an evolution of TurboLinks and as such is mobile friendly and in most cases can send the replacement HTML directly from the server to the client with minimal or no client side processing over websockets so there is minimal lag time.\nThis code can be found at: https://github.com/btihen/tweet_simulator_rails\nBasic Setup Create the project We\u0026rsquo;ll skip Turbolinks since Turbo replaces Turbolinks and also installs Stimulus\nrails new tweets -d postgresql -T --skip-turbolinks --skip-spring cd tweets git add . git commit -m \u0026quot;initial commit after creation\u0026quot;  I generally take a lot of git snapshots (and then squash them - so its easy to go back to a known good point if things don\u0026rsquo;t work out).\nCreate a Traditional Rails Tweet Clone Tweet Model We\u0026rsquo;ll scaffold the model to get all the parts we need\nbin/rails g scaffold tweet body:text likes:integer retweets:integer  We\u0026rsquo;ll update the migration to prevent blanks - make the migration file look like:\n# db/migrate/yyyymmddHHMMSS_create_tweets.rb class CreateTweets \u0026lt; ActiveRecord::Migration[6.1] def change create_table :tweets do |t| t.text :body, null: false t.integer :likes, null: false, default: 0 t.integer :retweets, null: false, default: 0 t.timestamps end end end  Now we should be able to successfully create and migrate out database\nbin/rails db:create bin/rails db:migrate  Given the Database restrictions we\u0026rsquo;ll add validations to the model. So now it should look like:\n# app/models/tweet.rb class Tweet \u0026lt; ApplicationRecord validates :body, presence: true end  Lets also point the root route at our tweets resource - so now it should look like:\n# config/routes.rb Rails.application.routes.draw do resources :tweets root to: \u0026quot;tweets#index\u0026quot; end  Lets start up rails and be sure everything works so far:\nbin/rails s  go to http://localhost:3000 and make and edit and delete some tweets.\nAssuming it works lets commit these changes.\ngit add . git commit -m \u0026quot;created tweet scaffold, validations and routes\u0026quot;  Let\u0026rsquo;s make this useable (more like a single page app) Lets start by fixing the following problems:\n the create form allows us to choose and edit likes and retweets tweets are listed in the opposite order in oldest to newest to create a new tweet we need to go to a separate new page creating and editing new tweets brings us to a show page (away from our index) message, likes, retweets, etc are all listed in one long table row (we\u0026rsquo;ll fix with some bootstrap css) likes and retweets are not usable  As mentioned users shouldn\u0026rsquo;t choose their likes and retweets: Now lets remove likes and retweets from our form:\n# app/views/tweets/_form.html.erb \u0026lt;%= form_with(model: tweet) do |form| %\u0026gt; \u0026lt;% if tweet.errors.any? %\u0026gt; \u0026lt;div id=\u0026quot;error_explanation\u0026quot;\u0026gt; \u0026lt;h2\u0026gt;\u0026lt;%= pluralize(tweet.errors.count, \u0026quot;error\u0026quot;) %\u0026gt; prohibited this tweet from being saved:\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;% tweet.errors.each do |error| %\u0026gt; \u0026lt;li\u0026gt;\u0026lt;%= error.full_message %\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;div class=\u0026quot;field\u0026quot;\u0026gt; \u0026lt;%= form.label :body %\u0026gt; \u0026lt;%= form.text_area :body %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;actions\u0026quot;\u0026gt; \u0026lt;%= form.submit %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt;  Now the form should look like: If you made several tweets you\u0026rsquo;ll notice that the tweets are in oldest to newest. We\u0026rsquo;ll fix that with the index controller sort order:\n# app/controllers/tweets_controller.rb class TweetsController \u0026lt; ApplicationController before_action :set_tweet, only: %i[ show edit update destroy ] def index @tweets = Tweet.all.order(created_at: :desc) end ... end  now tweets should be newest to oldest\nLet\u0026rsquo;s put our create tweet at the top of our index page\n# app/views/tweets/index.html.erb \u0026lt;p id=\u0026quot;notice\u0026quot;\u0026gt;\u0026lt;%= notice %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;h1\u0026gt;Tweets\u0026lt;/h1\u0026gt; \u0026lt;h4\u0026gt;New Tweet\u0026lt;/h4\u0026gt; \u0026lt;%= render \u0026quot;tweets/form\u0026quot;, tweet: @tweet %\u0026gt; \u0026lt;h4\u0026gt;Tweet Feed\u0026lt;/h4\u0026gt;  now when we check out index page again \u0026ndash; oops, we get an error: errors is null because the new instance isn\u0026rsquo;t available we need to add a new tweet to our index page from the controller:\n# app/controllers/tweets_controller.rb class TweetsController \u0026lt; ApplicationController before_action :set_tweet, only: %i[ show edit update destroy ] def index # put newest tweets at the top of the page @tweets = Tweet.all.order(created_at: :desc) @tweet = Tweet.new end  Now when we view index we should be able to create a tweet on the index page: However, after creation we still go to show page and need to navigate back to the index page - lets fix that in the create controller. We will change the line:\nformat.html { redirect_to @tweet, notice: \u0026quot;Tweet was successfully created.\u0026quot; }\nwith:\nformat.html { redirect_to tweets_url, notice: \u0026quot;Tweet was successfully created.\u0026quot; }\nWe will have the same problem with update \u0026ndash; so let\u0026rsquo;s fix them both. Now the controller should look like:\n# app/controllers/tweets_controller.rb def create @tweet = Tweet.new(tweet_params) respond_to do |format| if @tweet.save format.html { redirect_to tweets_url, notice: \u0026quot;Tweet was successfully created.\u0026quot; } format.json { render :show, status: :created, location: @tweet } else format.html { render :new, status: :unprocessable_entity } format.json { render json: @tweet.errors, status: :unprocessable_entity } end end end def update respond_to do |format| if @tweet.update(tweet_params) format.html { redirect_to tweet_url, notice: \u0026quot;Tweet was successfully updated.\u0026quot; } format.json { render :show, status: :ok, location: @tweet } else format.html { render :edit, status: :unprocessable_entity } format.json { render json: @tweet.errors, status: :unprocessable_entity } end end end  now after we create a new tweet we should \u0026lsquo;stay\u0026rsquo; (it actually reloads - which could be slow if we had many tweets on the page - we will fix this with hotwire) on the index page and see: OK we are almost there, but we still have rows of tables and not a nice tweet feed look.\nLets add Bootstrap CSS for some modest beauty (you can copy this file or use the below link to get the newest Bootstrap CSS)\n# app/views/layout/application.html.erb \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Tweets\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width,initial-scale=1\u0026quot;\u0026gt; \u0026lt;%= csrf_meta_tags %\u0026gt; \u0026lt;%= csp_meta_tag %\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css\u0026quot; integrity=\u0026quot;sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l\u0026quot; crossorigin=\u0026quot;anonymous\u0026quot;\u0026gt; \u0026lt;%= stylesheet_link_tag 'application', media: 'all' %\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;%= yield %\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  you can get the newest bootstrap link from: https://getbootstrap.com/docs/ or https://www.bootstrapcdn.com/\nNow lets make a partial reformat our feed with bootstrap:\n# app/views/tweets/_tweet.html.erb \u0026lt;div class=\u0026quot;card card-body\u0026quot;\u0026gt; \u0026lt;div\u0026gt;\u0026lt;%= tweet.body %\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;mt-2\u0026quot;\u0026gt; \u0026lt;%= \u0026quot;Like (#{tweet.likes})\u0026quot; %\u0026gt; \u0026lt;%= \u0026quot;Retweet (#{tweet.retweets})\u0026quot; %\u0026gt; \u0026lt;%= link_to 'Edit', edit_tweet_path(tweet), class: \u0026quot;btn btn-sm btn-success\u0026quot; %\u0026gt; \u0026lt;%= link_to 'Destroy', tweet_path(tweet), method: :delete, data: { confirm: 'Are you sure?' }, class: \u0026quot;btn btn-sm btn-danger\u0026quot; %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;  Now lets integrate the tweet partial into the index page:\n# app/views/tweets/index.html.erb \u0026lt;p id=\u0026quot;notice\u0026quot;\u0026gt;\u0026lt;%= notice %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;h1\u0026gt;Tweets\u0026lt;/h1\u0026gt; \u0026lt;h4\u0026gt;New Tweet\u0026lt;/h4\u0026gt; \u0026lt;%= render \u0026quot;tweets/form\u0026quot;, tweet: @tweet %\u0026gt; \u0026lt;h4\u0026gt;Tweet Feed\u0026lt;/h4\u0026gt; \u0026lt;%= render @tweets %\u0026gt;  We now have an app that basically works from the index pages (not yet Edit, but without Hotwire, that\u0026rsquo;s difficult \u0026ndash; see the next article)\nLet\u0026rsquo;s take another git snapshot of \u0026lsquo;index\u0026rsquo; reloading app.\ngit add . git commit -m \u0026quot;tweet app mostly from the index page\u0026quot;  Activate likes and retweets To finish this simple app lets activate Likes and Retweets - we will do this with new controllers since this is an independent action from our tweet itself. We will use the create since we are creating a like or a retweet.\nLet\u0026rsquo;s build the like controller - we will redirect back to the index where we want to stay:\n# app/controllers/likes_controller.rb class LikesController \u0026lt; ApplicationController before_action :set_tweet def create @tweet.increment! :likes redirect_to tweets_url end private def set_tweet @tweet = Tweet.find(params[:tweet_id]) end end  And now the retweet controller:\n# app/controllers/retweets_controller.rb class RetweetsController \u0026lt; ApplicationController before_action :set_tweet def create @tweet.increment! :retweets redirect_to tweets_url end private def set_tweet @tweet = Tweet.find(params[:tweet_id]) end end  These controllers are dependent on the tweet so they are subroutes of a tweet - so lets update our routes to be:\n# config/routes.rb Rails.application.routes.draw do resources :tweets do resource :like, only: [:create] resource :retweet, only: [:create] end root to: \u0026quot;tweets#index\u0026quot; end  Now lets add the connection to controller in our front-end with buttons. Note we need to use the method: :post for our like and retweet create because these are normally posted by the edit form. In this case we want to bypass a form and just update.\n# app/views/tweets/_tweet.html.erb \u0026lt;div class=\u0026quot;card card-body\u0026quot;\u0026gt; \u0026lt;div\u0026gt;\u0026lt;%= tweet.body %\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;mt-2\u0026quot;\u0026gt; \u0026lt;%= link_to \u0026quot;Like (#{tweet.likes})\u0026quot;, tweet_like_path(tweet), method: :post, class: \u0026quot;btn btn-sm btn-outline-success\u0026quot; %\u0026gt; \u0026lt;%= link_to \u0026quot;Retweet (#{tweet.retweets})\u0026quot;, tweet_retweet_path(tweet), method: :post, class: \u0026quot;btn btn-sm btn-outline-info\u0026quot; %\u0026gt; \u0026lt;%= link_to 'Edit', edit_tweet_path(tweet), class: \u0026quot;btn btn-sm btn-outline-primary\u0026quot; %\u0026gt; \u0026lt;%= link_to 'Destroy', tweet_path(tweet), method: :delete, data: { confirm: 'Are you sure?' }, class: \u0026quot;btn btn-sm btn-outline-danger\u0026quot; %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;  Test that everything works as expected! Assuming it works - we will take another snapshot.\ngit add . git commit -m \u0026quot;likes and retweets enabled and also 'stay' on index page\u0026quot;  ","date":1614272220,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1615136220,"objectID":"b72669ef53e1dae0bd77c5a70534bfbd","permalink":"https://btihen.me/post_ruby_rails/rails_6_1_single_page_app_simulate/","publishdate":"2021-02-25T18:57:00+02:00","relpermalink":"/post_ruby_rails/rails_6_1_single_page_app_simulate/","section":"post_ruby_rails","summary":"A simple Rails App that works off one page (a prep-project to build a Rails SPA with Hotwire)","tags":["Rails","Rails 6","Hotwire","SPA","HTML"],"title":"Tweets - A Single Page Rails App (using reloads)","type":"post_ruby_rails"},{"authors":["Bill Tihen"],"categories":["Education","EDgile","Practice","Classroom"],"content":"Stories, especially a Hero’s Journey, have a long and successful track record of creating engaging stories, movies, and, more recently, captivating ad campaigns for marketers and business executives. For several reasons, I also argue that the Hero’s Journey is very helpful in a learning context - especially if the students themselves are the authors of the story.\nFirst of all, stories allow students a variety of ways to engage with curriculum goals. I generally like to have students create a story related to the unit, giving them just enough guidelines to ensure a good challenge, while still clearly seeing if they have accomplished the goal, all without falling back on the teacher’s opinion.\nTo do this, I start with a statement For example, when creating a unit on biology and robotics, the goal was to have the students create a robot that would keep their plants alive over a two week vacation. If the robot fails, the garden dies. Or in a boat design / physics class, students were to design a boat that met at least one of three prescribed qualities and could survive at least one of three prescribed nautical challenges.\nThe second step is to have the students define a “future” or “imaginary” persona and a goal or reason that this persona is doing the project. I have them document their persona, since at the end of the project, they will present their story using that persona. Students are allowed to adjust their persona and goal as they progress.\nOnce students have chosen a persona, goal and purpose, they start the actual work on their project. At this point, most students are quite engaged since they have picked some aspect of the project that interests them and have found a way that the project and materials relate to their own world. By developing a purpose in the context of the story, they are more likely to be successful when they encounter the “challenge.”\nI am careful to design the projects so that there is no perfect solution and the projects represent a significant challenge. It is important that the students need to think through and explore several aspects of the topic to understand, in their opinion, the best way forward. Of course, it is important to make the whole endeavor doable. Like a good game, it starts off easy and gets progressively harder, building skills as the game - the story - progress. It helps to keep the students focused on the next immediate doable aspect of the project, while keeping an eye on moving toward their goal.\nAs the project gets more challenging and students are working toward the “impossible” perfection they seem to desire, it is important to be patient and supportive. When students struggle, they are learning. When they have to make difficult compromises to best arrive at their goal, or an acceptable variation of the goal, they are learning. Messy is how learning is.\nThe best way I have found to help the students, in addition to observing and guiding them during class, is to regularly review student progress with them, reflecting together on their progress. What about their work is effective? What could they try to be even more effective? What, indeed, does effective mean - to them?\nThe last step is to have the students present their purpose, personas, goal, and project. In short, their heroic journey.\nTo quickly compare the above project flow to an Agile process, including the kickoff, consider these steps:\n Kickoff meeting (define the goals and roles) Daily Standups \u0026amp; other Scrum activities External Scrum demo \u0026amp; Review of feedback Sprint Retrospective (reflecting on what can be even better)  Resources:\n  Hero’s Journey Defined Liftoff: Launching Agile Teams \u0026amp; Projects, by Diana Larsen \u0026amp; Ainsley Nies, (ISBN-13: 978-1680501636) The Agile Samurai: How Agile Masters Deliver Great Software, by Jonathan Rasmusson (ISBN-13 9781934356586)  Advice on Conduction Agile Project Kickoff Meetings, by Ben Kohen  How To Run A Project Kickoff Meeting (With Sample Agendas), by Ben Aston  Invoke/Involve Stories\nAllow students to dream a future and work with difficulties.\n  Common Structure of the Greatest Communicators - A TEDxEast talk by Nancy Duarte. Explores making the status quo unappealing and draw them forward to the future of what can be, drawing people in and using resistance to move forward.  The Clues to a Great Story - shares what he knows about storytelling \u0026ndash; starting at the end and working back to the beginning. A TED talk by Andrew Stanton, the writer behind \u0026ldquo;Toy Story\u0026rdquo; and \u0026ldquo;Wall-E\u0026rdquo; and \u0026ldquo;John Carter.\u0026rdquo; Contains graphic language.  The magical science of storytelling - a TEDxStockholm by David JP Phillips. David JP Phillips shares key neurological findings on storytelling and with the help of his own stories, induces in us the release of four neurotransmitters of his choice.  ","date":1609456580,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1609456580,"objectID":"aabb4e2ca5962157f5af9a8c255a4f50","permalink":"https://btihen.me/post_edu/edgilty_btihen_heros_journey/","publishdate":"2021-01-01T01:16:20+02:00","relpermalink":"/post_edu/edgilty_btihen_heros_journey/","section":"post_edu","summary":"Generally people remember stories and much of children’s play involves taking on a persona.  Conveniently, many courses involve multiple units, thus allowing multiple rounds of “play” and “identity” for students. The stories they make need to be thoughtful and challenging enough that students successfully complete the “Hero’s Journey,” with a healthy sense of being  uplifted by the challenges encountered on the way. This is quite doable with a thoughtful implementation of an Agile Kickoff process. One of my favorite books on this subject is in the resources below.","tags":["choice","buy-in","student-directed learning","hero’s journey","challenge","story-telling"],"title":"The Hero's Journey","type":"post_edu"},{"authors":["Bill Tihen"],"categories":["Education","EDgile","Practice","Classroom"],"content":"I do what I can to create an environment where students can learn as much as possible both independently and from each other collaboratively. This has two large impacts. First, as a teacher I am mostly removed from continually correcting students. Second, as a teacher I have time to coach and guide the students when they need help and guidance, in a manner they are asking for. Teaching is much more joyful when you aren’t continually in a position of correcting and judging what is right. The classroom atmosphere is positively impacted as well.\nTo promote independent learning I do what I can to create learning situations (and projects) where natural feedback is integral to the learning process. Natural feedback comes about in circumstances where the student work itself produces the feedback with no dependence on the teacher. For example, while learning about designing boats, if students are printing their designs on a 3D printer, the students themselves will see how their boats float and how they react to adverse conditions, for example waves and wind. If the assignment asks students to test their boats by setting up a fan to blow across the test pool, they will see if their boat can travel across the pool without hitting the side wall or foundering. Or in math and physics students can do what we call sanity checks. Are their calculations plausible? Learning the skill of creating and learning from feedback that you control yourself is a transferable, life-worthy skill, that goes beyond the particular content of an activity or course.\nTo promote collaborative learning, I help students learn how to support each other by giving feedback that is easy to digest. Instead of promoting correction, I ask students to follow the Pixar additive feedback method (see the resources at the end for further information). In short, I have the following demo or presentation rules:\nAs a feedback giver: 1) stop and think, then 2) start with what you like and 3) say what you would like to see more of. There is no corrective feedback or discussions of what you dislike. Students (and the teacher) just offer what they would like to see more of. It’s ok, of course, if that feedback excludes some of what’s there!\nAs a demo presenter: 1) listen and 2) do not comment or or mount a defense to what you are hearing, but clarification questions are allowed and encouraged. After the demo, (3) stop and think; then (4) decide what suggestions to act upon and what not to act upon.\nStudents (and many teachers) are not very practiced at Pixar’s additive feedback, so practice is practice is essential. In fact, initially I guide all demos to ensure they learn the practices to feel safe while demoing, giving and getting additive feedback. After demos I do a quick reflection with the group to help them think through what ideas to use and what to disregard. Over time, the students get good at this and I no longer guide the demos.\nWhen \u0026lsquo;natural\u0026rsquo; feedback isn\u0026rsquo;t easy or when working with technical topics where there are multiple ways to solve a problem and when judgement is important. Then instead of emphasizing \u0026lsquo;additive\u0026rsquo; feedback, I turn to Dr. Michaela Greiler (Doctor McKayla) code review guidelines in her video Respectful, Constructive Code-Review Feedback. She developed these guidelines while working at Microsoft\u0026rsquo;s Research and Development Department while studying the effects of code reviews and feedback on team performance.\nI avoid the phrase \u0026ldquo;constructive feedback,\u0026rdquo; since that phrase is too often code for stating what you personally think is correct. When the teacher does that, from the position of power granted to teachers by way of assigning grades, for example, constructive feedback becomes another way to tell students what is right (according to the teacher) and what students should do. Encouraging additive feedback puts the focus on what the student is learning, not what the teacher is thinking.\nTo ensure that collaborative feedback is practiced I require every project to include at least one adjustment that students must credit to another student’s feedback when they hand-in or present their project.\nResources Technology companies focus on communication and feedback to create an environment of enthusiastic, engaged learners. Fundamentally, they are moving away from an \u0026lsquo;authoritative\u0026rsquo;, \u0026lsquo;telling\u0026rsquo; and \u0026lsquo;corrective\u0026rsquo; approach and instead toward an \u0026lsquo;amplifying\u0026rsquo;, \u0026lsquo;curious\u0026rsquo; and \u0026lsquo;collaborative\u0026rsquo; approach.\nPixar\u0026rsquo;s Plussing\nAmplifying feedback over silencing feedback.\n  Pixar\u0026rsquo;s \u0026ldquo;Plussing\u0026rdquo; - Feedback Tool - In this short video he describes how to use Pixar\u0026rsquo;s Plussing in the the classroom to improve learning and collaboration. David Lee is the Tech \u0026amp; Innovation Specialist at Singapore American School. He is also the author of Design Thinking in the Classroom.  Pixar’s Secret to giving Feedback - a short, clear article describing the differences between silencing and amplifying (\u0026lsquo;plussing\u0026rsquo; or \u0026lsquo;additive\u0026rsquo;) feedback.  How Pixar Fosters Collective Creativity, by Ed Catmull. A Harvard Business Review article that describes the misconception about creativity. The focus of the article is summarize with this quote: \u0026ldquo;The view that good ideas are rarer and more valuable than good people is rooted in a misconception of creativity.\u0026rdquo; Ed Catmull is the author of  Creativity, Inc.: Overcoming the Unseen Forces That Stand in the Way of True Inspiration, ISBN-13: 978-0593070109, by Ed Catmull (co-founder of Pixar) and Amy Wallace. This is the book that sparked a lot of interest in \u0026lsquo;additive\u0026rsquo; or \u0026lsquo;plussing\u0026rsquo; feedback.  Five ways Pixar makes Better Decisions - a Harvard Business Review article that describes how organizations with good judgment have a number of typical attributes. One is that they involve a number of different people in making important decisions. Their senior executives keep in mind that they don’t have a monopoly on knowledge and judgment and therefore involve multiple people in decision processes. Thomas H. Davenport is the President’s Distinguished Professor in Management and Information Technology at Babson College, a research fellow at the MIT Initiative on the Digital Economy, and a senior adviser at Deloitte Analytics. He is the author of over a dozen management books, most recently Only Humans Need Apply: Winners and Losers in the Age of Smart Machines and The AI Advantage.  Effective Feedback\nSharing perspective instead of authoritatively telling.\n  The secret to giving great feedback: The Way We Work, a TED series, by cognitive psychologist LeeAnn Renniger. She shares a scientifically proven method for giving effective feedback. Visit https://go.ted.com/thewaywework for more! She also has a book: Surprise: Embrace the Unpredictable and Engineer the Unexpected, ISBN-13 : 978-0399169823, by Tania Luna and LeeAnn Renninger PhD.  How to Give Respectful and Constructive Code Review Feedback - a short video by Dr. Michaela Greiler (Doctor McKayla) explaining 10 ways to respectfully collaborate and improve.  Technical Feedback (without being the sage on the stage)\n Dr. Michaela Greiler has a full length talk How To Phrase Respectful Code Review Feedback. She is also working on a Code Review Book.  What to Look for in a Code Review, by Trisha Gee of Jet Brains. She also has a talk Code Review Best Practices.  Agile Communication and Management Approaches (classroom management)\n  Become an Effective Software Engineering Manager: How to Be the Leader Your Development Team Needs, ISBN: 9781680507249, by James Stanier. This book is a reflection about how to go beyond agile and what has worked well at Spotify.  Teachers on Communication and Inspiration\n  Teaching Methods for Inspiring the Students of the Future - A TEDxLafayette talk by Joe Ruhl on working with students: Choice, Collaboration, Communication, Critical Thinking, Creativity and Caring.  What makes a good teacher great? - A TEDxSantoDomingo talk by Azul Terronez on connecting and listing to students and developing rapor.  ","date":1607123780,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607123780,"objectID":"a5968106974c9319866929c2a92f368d","permalink":"https://btihen.me/post_edu/explore_uplift_feedback/","publishdate":"2020-12-05T01:16:20+02:00","relpermalink":"/post_edu/explore_uplift_feedback/","section":"post_edu","summary":"Helpful feedback has little to do with what the teacher thinks, for example the pre-supposition the teacher makes about the outcomes of student projects, and is much more about developing an openness to what actually works and what others like, without an absolute truth either stated or implied by the curriculum. Let the students decide what to do by emphasizing these two types of feedback: - Natural feedback - Collaborative feedback ","tags":["feedback","collaboration","natural feedback","self-regulation"],"title":"Feedback: It's Not what You Think","type":"post_edu"},{"authors":["Bill Tihen"],"categories":["Code Editor"],"content":"Need to point Codium to MS extions? Do the following:\nLike Codium but need a MS Code Plugin? https://stackoverflow.com/questions/37143536/no-extensions-found-when-running-visual-studio-code-from-source\nopen:\nvim /Applications/VSCodium.app/Contents/Resources/app/product.json\nThis can be fixed by adding following to product.json:\n\u0026quot;extensionsGallery\u0026quot;: { \u0026quot;serviceUrl\u0026quot;: \u0026quot;https://marketplace.visualstudio.com/_apis/public/gallery\u0026quot;, \u0026quot;cacheUrl\u0026quot;: \u0026quot;https://vscode.blob.core.windows.net/gallery/index\u0026quot;, \u0026quot;itemUrl\u0026quot;: \u0026quot;https://marketplace.visualstudio.com/items\u0026quot; }  ","date":1604359149,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1605223149,"objectID":"48987dda700e8e21d61f5477a22ee3db","permalink":"https://btihen.me/post_tech_notes/codium_plugins/","publishdate":"2020-11-03T01:19:09+02:00","relpermalink":"/post_tech_notes/codium_plugins/","section":"post_tech_notes","summary":"Learn to set-up mail catcher for safe email testing with an introduction to Docker","tags":["Codium","Editor","Plugin","Tooling"],"title":"Docker Intro using MailCatcher","type":"post_tech_notes"},{"authors":["Bill Tihen"],"categories":["Design","OpenSource"],"content":"Logos  https://logomakr.com/ https://www.freelogodesign.org/ https://www.namecheap.com/logo-maker/app/ https://hatchful.shopify.com/onboarding/pick-space  Images and Icons I\u0026rsquo;m often looking for a way to make websites more interesting here are a few resources I use:\nDrawings https://themeisle.com/blog/free-illustrations/\n  Undraw \u0026ndash; free to use drawings in SVG  manypixels - colors are adjustable!  stubborn.fun - new  drawkit  stories.freepick - with attribution  illlustrations  iradesign - can change the colors!  absurd - funky stuff  icons8 - images, drawings, photos, Icons!  humaaans - all about people and lots of adjustments  grapbox - images, drawings, photos, Icons!  uistore - mix of stuff  Photos   Unsplash - photos free to use for everyone  Icons   IonIcons  HeroIcons  FeatherIcons  themifyIcons - good variety and brands too  FontAwesome - Icons; many are completely free  FontAwesome6  Noun Project - Icons and photos for all to use (with attribution)  Octicons - free icons on github  Glyphicons - Icons in Bootstrap see also: https://getbootstrap.com/docs/3.3/components/  SimpleIcons  devicon  SVG Text Logos Sometimes I find it hard to come up with a good logo, but not a shortname.\nWide larger Logo (for Desktop views)\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;svg viewBox=\u0026quot;0 0 240 45\u0026quot; xmlns=\u0026quot;http://www.w3.org/2000/svg\u0026quot;\u0026gt; \u0026lt;style\u0026gt; .heavy { font: bold 30px sans-serif; fill: blue;} .small { font: italic 25px sans-serif; fill: green; } \u0026lt;/style\u0026gt; \u0026lt;text x=\u0026quot;0\u0026quot; y=\u0026quot;35\u0026quot; class=\u0026quot;heavy\u0026quot; fill=\u0026quot;blue\u0026quot;\u0026gt;ED\u0026lt;/text\u0026gt; \u0026lt;text x=\u0026quot;41\u0026quot; y=\u0026quot;35\u0026quot; class=\u0026quot;small\u0026quot; fill=\u0026quot;green\u0026quot;\u0026gt;gility\u0026lt;/text\u0026gt; \u0026lt;/svg\u0026gt;  Small stacked logo (for mobile views)\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;svg viewBox=\u0026quot;0 0 45 45\u0026quot; xmlns=\u0026quot;http://www.w3.org/2000/svg\u0026quot;\u0026gt; \u0026lt;style\u0026gt; .heavy { font: bold 28px sans-serif; fill: blue;} .small { font: italic 18px sans-serif; fill: green; } \u0026lt;/style\u0026gt; \u0026lt;text x=\u0026quot;0\u0026quot; y=\u0026quot;22\u0026quot; class=\u0026quot;heavy\u0026quot; fill=\u0026quot;blue\u0026quot;\u0026gt;ED\u0026lt;/text\u0026gt; \u0026lt;text x=\u0026quot;0\u0026quot; y=\u0026quot;40\u0026quot; class=\u0026quot;small\u0026quot; fill=\u0026quot;green\u0026quot;\u0026gt;gility\u0026lt;/text\u0026gt; \u0026lt;/svg\u0026gt;  ","date":1604188636,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1604188636,"objectID":"20b43838fd93900abb66c471f1b04a8b","permalink":"https://btihen.me/post_tech_notes/web_design_resources/","publishdate":"2020-11-01T01:57:16+02:00","relpermalink":"/post_tech_notes/web_design_resources/","section":"post_tech_notes","summary":"Looking for images, drawings, photos and icons -- here are a few helpful resources","tags":["icons","images","pictures","design"],"title":"Web Design Resources","type":"post_tech_notes"},{"authors":["Bill Tihen"],"categories":["Education","EDgile","Practice","Classroom"],"content":"Adaptability is the key or maybe even the definition of agility, as discussed in Paul’s article Adaptability article. In this article I’ll discuss how I try to instill adaptability as a classroom process for student learning. These practices are borrowed from tech companies and business consultants, but I am confident they can be applied in many contexts, including education, when properly adapted.\nWhen I first taught, I only led reflections at the end of a learning unit or project and I encouraged the students to think deeply and go into detail. However, I realized that students have little practice with reflecting on their learning process, making a deep retrospective impractical. Additionally, I encourage an exploratory approach in class, where the student goal purposely doesn’t align with easy-to-google solutions, so students need to learn and adapt as they go. It turns out students generally have little practice adapting as they go, perhaps because the learning path is too easy, or too clean. Thus even project work doesn’t usually involve deep thinking, thoughtful decisions, and compromises to accomplish their goals.\nMy solution was to introduce mini-reflections at the end of each class and then ask what, if anything, students would do differently in the next class. I ask one or two questions, usually from this list:\n What\u0026rsquo;s your goal? What\u0026rsquo;s your goal next class? What/who is allowing you to progress? What/who could help you progress with the next goal? What’s slowing you down? What obstacles are blocking your progress? What can you adjust, change or do more of to enjoy progress?  These mini-retrospectives last about a minute or so and happen on the way out of the class. Teachers will recognize the format as “exit tickets” or “pro-formas.” Because I taught engineering topics and students work in small groups of three to four, the process only takes about vie minutes and is integrated into the cleanup process. (Students are very good about getting started and being engaged - but cleanup seems to be easier to forget somehow. Those who are quicker to catch on do their mini-retrospective first). When the students have to return materials and clear their bench, I look at their work (their lab book and project) as they describe it and we jointly update their burn-down chart (an Agile progress tracking-tool \u0026amp; future blog-post) Importantly, I always ask what went well and how they can maintain and enjoy their progress. If needed, I might also ask what they test to get unstuck, to catch up, etc. Finally, I ask what they have in mind for the next class.\nThese are very quick and neutral discussions that give the students practice reflecting and being asked how they will adjust in a very low-stakes environment. This seems to be exactly the practice many students need. It also turns out that many students enjoy showing off their work at the end of each class. These are not corrective or judgmental teacher lead meetings, but rather quick coaching and check-ins - with the goal of guiding students to self-reflect and self-regulate. This approach can be uplifting and cultivate student confidence and appreciation for learning.\nThere’s research that shows positive interactions lead to positive outcomes - perhaps unsurprisingly - and plenty of reasons to build a sense of uplift into the teaching and learning environment. Uplift is also a practice of EDgility.\nOnce every week or so I meet with each student group during class and do a five-minute reflection (still short, but more in-depth than the one-minute check-ins) and we review more questions. This more in-depth reflection also seems to be important and is where students really start to cultivate confidence in their self-regulation.\nThese many small reflections encourage adaptability. With time students get good at reflection and self-regulation. At this point the students are ready to guide their reflections and self-regulation.\nOnce students have gotten to the point where they are self-reflecting and self-correcting, the students are well on their way with an Agile-Mindset and as self-regulated learners! In my mind, this is a very life-worthy skill.\nNote: Be prepared to be flexible and work with each group differently to meet their needs, different students and groups take longer or shorter to self-reflect and self-regulate. Creating a safe environment where exploration, success and progress are called out and celebrated - is critical, the students have plenty of other classes where correction and short-comings as seen by others (usually the teacher) is called out.\n","date":1601680588,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1601680588,"objectID":"e3867997eefa781511fdcdb015f40219","permalink":"https://btihen.me/post_edu/edgility_btihen_reflection/","publishdate":"2020-10-03T01:16:28+02:00","relpermalink":"/post_edu/edgility_btihen_reflection/","section":"post_edu","summary":"Frequent, even daily, mini-reflections lead to adaptable students and curriculums. Ideally, guide the students to where they are comfortable to self-reflect with you. This of course means guiding the kids to where they have the confidence and insight to self-reflect and self-correct instead of relying (or even fearing) external assessment and correction.","tags":["reflection","adaptability","retrospective","self-regulation","uplift"],"title":"Reflection: The Key to Adaptability","type":"post_edu"},{"authors":["Bill Tihen"],"categories":["Rails"],"content":"Intro TailwindCSS is a very flexible CSS framework and makes it easy to customize unique web pages and animations.\nUnfortunately, with Rails its a bit tricky to install and configure with Rails Standards.\n TailwindCSS 2.0 expects PostCSS 8 and Rails Webpacker uses PostCSS 7 (for now) TailwindCSS 2.0 expects AlpineJS, React or Vue \u0026ndash; by default Rails uses StimulusJS (although you can additionally install AlpineJS)  Rails Setup I am assuming you have followed the Rails setup described at: \nIn the end, I feel like its easier / better to use tailwindcss with AlpineJS since that is how it evolved and lots of Internet resources are available for that.\nInstall Tailwind CSS 2.0 Tailwind CSS 2.0 Install https://tailwindcss.com/docs\nStart by installing the tailwindcss compatible with postcss7 (necessary until rails-webpacker updates to postcss8) \u0026ndash; with or without upgrading webpacker the following should work:\nyarn add tailwindcss@latest postcss@latest autoprefixer@latest # if you get this error: Error: PostCSS plugin tailwindcss requires PostCSS 8. use: # yarn add tailwindcss@npm:@tailwindcss/postcss7-compat postcss@^7 autoprefixer@^9  now install AlpineJS (its easier to use AlpineJS with tailwind but Stimulus works too - just need to do it all yourself - alpine and stimulus playwell together in Rails). Add alpine turbo drive adapter so that the AlpineJS effects work even AFTER clicking on a link!\nyarn add alpinejs yarn add alpine-turbo-drive-adapter  Now create the tailwind config file\nnpx tailwindcss init  now config tailwind:\n# tailwind.config.js module.exports = { purge: [ './app/**/*/*.html.erb', './app/helpers/**/*/*.rb', './app/javascript/**/*/*.js', './app/javascript/**/*/*.vue', './app/javascript/**/*/*.react' ], darkMode: false, // or 'media' or 'class' theme: { extend: {}, }, variants: { extend: {}, }, plugins: [ // not needed here ? // require('@tailwindcss/forms'), ], }  tell postcss.config.js about tailwind:\n/* postcss.config.js */ module.exports = { plugins: [ require(\u0026quot;tailwindcss\u0026quot;)(\u0026quot;./tailwind.config.js\u0026quot;), require(\u0026quot;postcss-import\u0026quot;), require(\u0026quot;postcss-flexbugs-fixes\u0026quot;), require(\u0026quot;postcss-preset-env\u0026quot;)({ autoprefixer: { flexbox: \u0026quot;no-2009\u0026quot;, }, stage: 3, }), ], }  create application.scss\nmkdir app/javascript/stylesheets touch app/javascript/stylesheets/application.scss cat \u0026lt;\u0026lt;EOF \u0026gt;app/javascript/stylesheets/application.scss /* app/javascript/stylesheets/application.scss */ @import \u0026quot;tailwindcss/base\u0026quot;; @import \u0026quot;tailwindcss/components\u0026quot;; @import \u0026quot;tailwindcss/utilities\u0026quot;; /* Add custom CSS here */ EOF  import tailwind into application.js\n/* app/javascript/packs/application.js */ import Rails from \u0026quot;@rails/ujs\u0026quot; import \u0026quot;@hotwired/turbo-rails\u0026quot; import * as ActiveStorage from \u0026quot;@rails/activestorage\u0026quot; import \u0026quot;channels\u0026quot; // import alpinejs and its necessary rails adaptation import 'alpine-turbo-drive-adapter' require(\u0026quot;alpinejs\u0026quot;) // import tailwind into javascript import \u0026quot;../stylesheets/application.scss\u0026quot; Rails.start() ActiveStorage.start() import \u0026quot;controllers\u0026quot; require(\u0026quot;trix\u0026quot;) require(\u0026quot;@rails/actiontext\u0026quot;)  It\u0026rsquo;s great to get samples from https://tailwindui.com (\u0026amp; other places) - USE THE INSPECTOR to copy the HTML (this will copy the AlpineJS settings too) - the standard copy HTML button requires you to add the JS on your own.\ncreate a navbar:\ntouch app/views/layouts/_navbar.html.erb cat \u0026lt;\u0026lt;EOF \u0026gt;app/views/layouts/_navbar.html.erb \u0026lt;nav x-data=\u0026quot;{ open: false }\u0026quot; class=\u0026quot;bg-gray-800\u0026quot;\u0026gt; \u0026lt;!-- NavBar here --\u0026gt; \u0026lt;/nav\u0026gt; EOF  Create a footer:\n\u0026lt;!-- app/views/layouts/_footer.html.erb --\u0026gt; \u0026lt;footer class=\u0026quot;bg-gray-50\u0026quot; aria-labelledby=\u0026quot;footerHeading\u0026quot;\u0026gt; \u0026lt;h2 id=\u0026quot;footerHeading\u0026quot; class=\u0026quot;sr-only\u0026quot;\u0026gt;Company\u0026lt;/h2\u0026gt; \u0026lt;div class=\u0026quot;max-w-md mx-auto pt-12 px-4 sm:max-w-7xl sm:px-6 lg:pt-16 lg:px-8\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;xl:grid xl:grid-cols-3 xl:gap-8\u0026quot;\u0026gt; Some Footer Info \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;mt-12 border-t border-gray-200 py-8\u0026quot;\u0026gt; \u0026lt;p class=\u0026quot;text-base text-gray-400 xl:text-center\u0026quot;\u0026gt; \u0026amp;copy; 2020 Company, Inc. All rights reserved. \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt;  Update the landing page:\n\u0026lt;!-- app/views/landing/index.html.erb --\u0026gt; \u0026lt;!-- landing page here --\u0026gt;  application.html.erb needs to import the javascript stylesheet and the navbar\n\u0026lt;!-- app/views/layouts/application.html.erb --\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Vivers\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width,initial-scale=1\u0026quot;\u0026gt; \u0026lt;%= csrf_meta_tags %\u0026gt; \u0026lt;%= csp_meta_tag %\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://rsms.me/inter/inter.css\u0026quot;\u0026gt; \u0026lt;%= stylesheet_link_tag 'application', media: 'all' %\u0026gt; \u0026lt;%= stylesheet_pack_tag 'application', media: 'all' %\u0026gt; \u0026lt;%= javascript_pack_tag 'application' %\u0026gt; \u0026lt;%= yield :head %\u0026gt; \u0026lt;%= turbo_include_tags %\u0026gt; \u0026lt;%# stimulus_include_tags %\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;div class=\u0026quot;pb-32\u0026quot;\u0026gt; \u0026lt;%= render 'layouts/navbar' %\u0026gt; \u0026lt;header class=\u0026quot;py-10\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;max-w-9xl mx-auto px-4 sm:px-6 lg:px-8\u0026quot;\u0026gt; \u0026lt;p class=\u0026quot;notice\u0026quot;\u0026gt;\u0026lt;%= notice %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026quot;alert\u0026quot;\u0026gt;\u0026lt;%= alert %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;h1 class=\u0026quot;text-3xl font-bold\u0026quot;\u0026gt; Dashboard \u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;main class=\u0026quot;-mt-32\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;max-w-9xl mx-auto pb-12 px-4 sm:px-6 lg:px-8\u0026quot;\u0026gt; \u0026lt;%= yield %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;%= render 'layouts/footer' %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  You may need to want rails with both (to increase reload speed after changes \u0026ndash; but bin/rails s is enough):\nbin/rails s # runnding the following in a separate window tends to speed CSS / JS recompilation ./bin/webpack-dev-server  Install Tailwind SVG Icons You can embed the Icon directly into the View - downloading from:\nhttps://heroicons.dev/ https://heroicons.com/\nHowever, you can also use a gem and add flexibility:\nhttps://github.com/bharget/heroicon\nIn gemfile\ngem \u0026quot;heroicon\u0026quot;  From CLI:\nbundle rails g heroicon:install  Usage:\n\u0026lt;%= heroicon \u0026quot;search\u0026quot; %\u0026gt; \u0026lt;%= heroicon \u0026quot;search\u0026quot;, variant: :outline %\u0026gt; \u0026lt;%= heroicon \u0026quot;search\u0026quot;, options: { class: \u0026quot;text-primary-500\u0026quot; } %\u0026gt;  or https://github.com/andrewjmead/rails_heroicons/\nGemfile\ngem 'rails_heroicons', '~\u0026gt; 1.0.1'  CLI\nbundle gem install rails_heroicons  Usage:\n\u0026lt;%= heroicon('user') %\u0026gt; \u0026lt;%= heroicon('user', class_name: 'icon icon-large') %\u0026gt; \u0026lt;%= heroicon('user', style: :outline, class_name: 'icon icon-large') %\u0026gt;  The classes magically update the SVG embedded using:\nUSE SVG Images / Icons in Rails \u0026ndash; HeroIcons or ZondIcons Downloaded SVG images in Rails: https://heroicons.com/ https://heroicons.dev/ http://www.zondicons.com/icons.html\nOR download the Icons and use the gem: https://github.com/jamesmartin/inline_svg\nGemfile:\ngem 'inline_svg'  CLI:\nbundle gem install inline_svg  USAGE:\n# Sprockets inline_svg_tag(file_name, options={}) # Webpacker inline_svg_pack_tag(file_name, options={})  OR without gem:\nyou can embed the SVG directly into rails using: https://dev.to/hslzr/using-inline-svgs-with-rails-3khb\nReference Articles https://davidteren.medium.com/tailwindcss-2-0-with-rails-6-1-postcss-8-0-9645e235892d https://web-crunch.com/posts/how-to-install-tailwind-css-2-using-ruby-on-rails\n","date":1599698767,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1615247167,"objectID":"010a9060dac2e0d03b65380c8b9f50d0","permalink":"https://btihen.me/post_ruby_rails/rails_6_1_tailwind_2_0_alpinejs/","publishdate":"2020-09-10T02:46:07+02:00","relpermalink":"/post_ruby_rails/rails_6_1_tailwind_2_0_alpinejs/","section":"post_ruby_rails","summary":"Intro TailwindCSS is a very flexible CSS framework and makes it easy to customize unique web pages and animations.\nUnfortunately, with Rails its a bit tricky to install and configure with Rails Standards.","tags":["rails 6","configure","install","tailwindcss","alpinejs"],"title":"Rails 6.1 with TailwindCSS 2.0 and AlpineJS","type":"post_ruby_rails"},{"authors":["Bill Tihen"],"categories":["Rails"],"content":"Intro To document is mostly for me \u0026ndash; at least until I automate my setup defaults. However, I am glad to share and get ideas from others too. I will build a little calendar app I use with friends (it\u0026rsquo;s focused on being mobile friendly and easy to use \u0026ndash; not a full featured calendar).\nRails Setup Taken from:\n https://gist.github.com/alxndr/7569551 https://www.codewithjason.com/rails-integration-tests-rspec-capybara/ https://hackernoon.com/how-to-build-awesome-integration-tests-with-capybara-j9333y68  create the project: # -T - skips tests; I like rspec # -d postgresql; I like postgresql best for the db # --skip-spring --skip-listen; Spring caches and doesn't notice all changes (even after rails restart) # I have lost several hours not realizing Spring wasn't seeing my changes rails new calendar -T -d postgresql --webpack=stimulus --skip-turbolinks --skip-spring cd calendar # in some cases you may have serveral bundlers or need to create binstubs # gem install bundler:2.1.4 # rails app:update:bin  update the README and initialize Git git add . git commit -m \u0026quot;initial commit\u0026quot; git remote add origin git@gitlab.com:btihen/calendar.git git push -u origin master  Add extra Gems for this project add rspec, devise, factory_bot and stimulus_reflex\nExecute the following command (or add to the Gemfile)\ncat \u0026lt;\u0026lt;EOF \u0026gt;\u0026gt; Gemfile # Project Gems ############## # FRONT END ########### gem \u0026quot;hotwire-rails\u0026quot; # probably not needed as of Rails 7.x # gem \u0026quot;stimulus_reflex\u0026quot;, \u0026quot;~\u0026gt; 3.3\u0026quot; # probably superseeded by hotwire-rails # BACK END ########## gem 'devise' # DEV / TESTS ############# group :development, :test do gem 'awesome_print' # formats pry (\u0026amp; irb outputs into readable formats) gem 'pry-rails' gem 'pry-byebug' # Adds byebug's step debugging and stack navigation # gem 'pry-debugger' # adds step, continue, etc (alternative to pry-byebug) gem 'pry-stack_explorer' # easy stack traces when debugging # more pry gems if needed at: https://spin.atomicobject.com/2012/08/06/live-and-let-pry/ gem 'factory_bot_rails' gem 'faker' # gem 'rspec-rails' gem 'capybara' gem 'rspec-rails', '~\u0026gt; 4.0.0' # lets spring work with rspec gem 'spring-commands-rspec' end group :test do # easier tests (inside rspec) gem 'shoulda-matchers' # cucumber can test emails (rspec too?) # gem 'email_spec' # code coverage gem 'simplecov' gem 'simplecov-console' end EOF  Now uncomment a few Gems in the Original Gemfile Uncomment the following to ensure ActionText and Stimulus Refelx (work properly).\ngem 'image_processing', '~\u0026gt; 1.2'\nis needed by Active Storage (ActionText needs Active Storage)\nand\ngem 'redis', '~\u0026gt; 4.0'\nis needed by Stimulus Reflex (which uses Action Channels) to manage WebSockets\nInstall and configure base gems now run:\nbundle install\nto install all the new gems and create a Gemfile.lock\nInstall ActiveStorage and ActionText run the following commands:\n# bundle exec rails webpacker:install # bundle exec rails webpacker:install:stimulus bundle exec rails active_storage:install bundle exec rails action_text:install bin/rails hotwire:install bin/rails g devise:install bin/rails g rspec:install  Rspec: Config Files Create needed folders for our config mkdir spec/features # a place to put test helper code mkdir spec/support mkdir spec/support/features  Rspec Config file spec/rails_helper.rb  To enable integration tests with rspec add: require 'capybara/rspec' below require 'rspec/rails' To load Test helper code add: Dir[Rails.root.join(\u0026quot;spec/support/**/*.rb\u0026quot;)].each { |file| require file } below require 'capybara/rspec' just after the ActiveRecord config and before RSpec.configure block add:  Capybara.register_driver :selenium_chrome do |app| Capybara::Selenium::Driver.new(app, browser: :chrome) end Capybara.javascript_driver = :selenium_chrome  Add the FactoryBot config in the section with:  RSpec.configure do |config| # ... # support for Factory Bot config.include FactoryBot::Syntax::Methods # setup devise login helpers in Rspec config.include Devise::Test::IntegrationHelpers, type: :request # allows us for force session logouts (im feature tests) config.include Warden::Test::Helpers end  finally at the end of the file add support for shoulda matchers with:  Shoulda::Matchers.configure do |config| config.integrate do |with| with.test_framework :rspec with.library :rails end end  NOW spec/rails_helper.rb should look like (its long, sometimes the full context is clearer):\n# This file is copied to spec/ when you run 'rails generate rspec:install' require 'spec_helper' ENV['RAILS_ENV'] ||= 'test' require File.expand_path('../config/environment', __dir__) # Prevent database truncation if the environment is production abort(\u0026quot;The Rails environment is running in production mode!\u0026quot;) if Rails.env.production? require 'rspec/rails' # Add additional requires below this line. Rails is not loaded until this point! # enables integration/feature tests using rspec require 'capybara/rspec' # loads custom helper test code Dir[Rails.root.join(\u0026quot;spec/support/**/*.rb\u0026quot;)].each { |file| require file } # or you could use: # Dir[Rails.root.join('spec', 'support', '**', '*.rb')].sort.each { |f| require f } # Checks for pending migrations and applies them before tests are run. # If you are not using ActiveRecord, you can remove these lines. begin ActiveRecord::Migration.maintain_test_schema! rescue ActiveRecord::PendingMigrationError =\u0026gt; e puts e.to_s.strip exit 1 end # configure capybara integration tests Capybara.register_driver :selenium_chrome do |app| Capybara::Selenium::Driver.new(app, browser: :chrome) end Capybara.javascript_driver = :selenium_chrome RSpec.configure do |config| # Remove this line if you're not using ActiveRecord or ActiveRecord fixtures config.fixture_path = \u0026quot;#{::Rails.root}/spec/fixtures\u0026quot; # If you're not using ActiveRecord, or you'd prefer not to run each of your # examples within a transaction, remove the following line or assign false # instead of true. config.use_transactional_fixtures = true # You can uncomment this line to turn off ActiveRecord support entirely. # config.use_active_record = false # RSpec Rails can automatically mix in different behaviours to your tests # based on their file location, for example enabling you to call `get` and # `post` in specs under `spec/controllers`. # # You can disable this behaviour by removing the line below, and instead # explicitly tag your specs with their type, e.g.: # # RSpec.describe UsersController, type: :controller do # # ... # end # # The different available types are documented in the features, such as in # https://relishapp.com/rspec/rspec-rails/docs config.infer_spec_type_from_file_location! # Filter lines from Rails gems in backtraces. config.filter_rails_from_backtrace! # arbitrary gems may also be filtered via: # config.filter_gems_from_backtrace(\u0026quot;gem name\u0026quot;) # support for Factory Bot config.include FactoryBot::Syntax::Methods # setup devise login helpers in Rspec (login helpers) config.include Devise::Test::IntegrationHelpers, type: :request # allows us for force session logouts (im feature tests) config.include Warden::Test::Helpers end Shoulda::Matchers.configure do |config| config.integrate do |with| with.test_framework :rspec with.library :rails end end  Create / Test a landing page A simple config test before we setup devise (authentication).\n Generate a page \u0026ndash; I don\u0026rsquo;t (generally) use helpers nor contoller or view specs - so I\u0026rsquo;ll create the landing page using the following generator:  rails g controller Landing index --no-helper --no-assets --no-controller-specs --no-view-specs  Update Routes config/routes.rb with:   get 'landing/index' root to: \u0026quot;landing#index\u0026quot;  Add Hidden Test Content to simplify testing add:  \u0026lt;p hidden id='landing_index'\u0026gt;Landing Index\u0026lt;/p\u0026gt;  Request test:  # spec/requests/landing_request_spec.rb require 'rails_helper' RSpec.describe \u0026quot;Landings\u0026quot;, type: :request do describe \u0026quot;GET /index\u0026quot; do it \u0026quot;returns http success\u0026quot; do get \u0026quot;/landing/index\u0026quot; expect(response).to have_http_status(:success) expect(response.body).to include(\u0026quot;\u0026lt;p hidden id='landing_index'\u0026gt;Landing Index\u0026lt;/p\u0026gt;\u0026quot;) end end end  Feature Test (to be sure they are working too)  # spec/features/landing_page_spec.rb require 'rails_helper' RSpec.describe 'Landing Page Works without a login', type: :feature do scenario 'Visit landing Page' do visit root_path page_tag = find('p#landing_index', text: 'Landing Index', visible: false) expect(page_tag).to be_truthy end end  Test and commit\nrake db:migrate bundle exec rspec git add . git commit -m \u0026quot;rspec: unit and feature tests configured and landing page works\u0026quot; git push  Config Hotwire Ensure the In the end the app/views/layouts/application.html.erb looks like:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Tweets\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width,initial-scale=1\u0026quot;\u0026gt; \u0026lt;%= csrf_meta_tags %\u0026gt; \u0026lt;%= csp_meta_tag %\u0026gt; \u0026lt;!-- Bootstrap 4 if interested \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css\u0026quot; integrity=\u0026quot;sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l\u0026quot; crossorigin=\u0026quot;anonymous\u0026quot;\u0026gt; --\u0026gt; \u0026lt;%= stylesheet_link_tag 'application', media: 'all' %\u0026gt; \u0026lt;%= javascript_pack_tag 'application' %\u0026gt; \u0026lt;%= yield :head %\u0026gt; \u0026lt;%= turbo_include_tags %\u0026gt; \u0026lt;%# stimulus_include_tags %\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p class=\u0026quot;notice\u0026quot;\u0026gt;\u0026lt;%= notice %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026quot;alert\u0026quot;\u0026gt;\u0026lt;%= alert %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;%= yield %\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Devise / User Config Configure dev email for devise:\n# config/environments/development.rb: config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }  Create the user and migration\nrails g devise user # if you will make a custom login (probably needed to look nice) # rails g devise:views  Adjust the migration:\nclass DeviseCreateUsers \u0026lt; ActiveRecord::Migration[6.1] def change create_table :users do |t| ## Database authenticatable t.string :email, null: false, default: \u0026quot;\u0026quot; t.string :encrypted_password, null: false, default: \u0026quot;\u0026quot; ## Recoverable t.string :reset_password_token t.datetime :reset_password_sent_at ## Rememberable t.datetime :remember_created_at ## Trackable t.integer :sign_in_count, default: 0, null: false t.datetime :current_sign_in_at t.datetime :last_sign_in_at t.string :current_sign_in_ip t.string :last_sign_in_ip ## Confirmable # t.string :confirmation_token # t.datetime :confirmed_at # t.datetime :confirmation_sent_at # t.string :unconfirmed_email # Only if using reconfirmable ## Lockable # t.integer :failed_attempts, default: 0, null: false # Only if lock strategy is :failed_attempts # t.string :unlock_token # Only if unlock strategy is :email or :both # t.datetime :locked_at t.timestamps null: false end add_index :users, :email, unique: true add_index :users, :reset_password_token, unique: true # add_index :users, :confirmation_token, unique: true # add_index :users, :unlock_token, unique: true end end  Route file should now look like:\nRails.application.routes.draw do devise_for :users get 'landing/index' root to: \u0026quot;landing#index\u0026quot; end  We will update the user model with password complexity validation:\nclass User \u0026lt; ApplicationRecord # Include default devise modules. Others available are: # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable devise :database_authenticatable, :registerable, :recoverable, :rememberable, :validatable validate :password_complexity def password_complexity # Regexp extracted from https://stackoverflow.com/questions/19605150/regex-for-password-must-contain-at-least-eight-characters-at-least-one-number-a return if password.blank? || password =~ /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^\u0026amp;*-]).{10,70}$/ errors.add :password, 'Complexity requirement not met. Length should be 10-70 characters and include: 1 uppercase, 1 lowercase, 1 digit and 1 special character' end end  Create the user Factory (which also uses Faker):\n# spec/factories/users.rb FactoryBot.define do factory :user do email { Faker::Internet.safe_email } # probably need to add index for uniqueness password { Faker::Internet.password(min_length: 10, max_length: 50, mix_case: true, special_characters: true) } end trait :invalid do email { Faker::Internet.username } password { \u0026quot;hoi\u0026quot; } end end  Create the user spec (uses FactoryBot \u0026amp; Shoulda):\n# spec/models/user_spec.rb require 'rails_helper' RSpec.describe User, type: :model do describe \u0026quot;Factory with\u0026quot; do context \u0026quot;default parameters\u0026quot; do it \u0026quot;creates a valid model\u0026quot; do user = FactoryBot.build :user expect(user.valid?).to be_truthy end end context \u0026quot;invalid parameters\u0026quot; do it \u0026quot;fails model validation\u0026quot; do user = FactoryBot.build :user, :invalid expect(user.valid?).to be_falsey end end end context \u0026quot;ActiveRecord / DB Tests\u0026quot; do it { should have_db_column(:email) } it { should have_db_index(:email).unique } end context \u0026quot;ActiveModel / Validations\u0026quot; do it \u0026quot;detects a bad email\u0026quot; do user = FactoryBot.build :user, email: \u0026quot;bill\u0026quot; expect(user.valid?).to be_falsey expect(user.errors.messages[:email]).to match_array [\u0026quot;is invalid\u0026quot;] end it \u0026quot;detects a non-compliant password\u0026quot; do user = FactoryBot.build :user, password: \u0026quot;hoi\u0026quot; expect(user.valid?).to be_falsey expect(user.errors.messages[:password]).to match_array [\u0026quot;is too short (minimum is 6 characters)\u0026quot;, \u0026quot;Complexity requirement not met. Length should be 10-70 characters and include: 1 uppercase, 1 lowercase, 1 digit and 1 special character\u0026quot;] end end end  Test setup and commit when green: rake db:migrate bundle exec rspec git add . git commit -m \u0026quot;devise configured, FactoryBot, Faker and Shoulda working\u0026quot; git push  create user landing / profile page (autoredirect) Test restricted logins a basic login feature test might look like:\nrequire 'rails_helper' RSpec.describe 'Users Login', type: :feature do let(:user) { FactoryBot.create :user } after :each do Warden.test_reset! end describe 'user logs in successfully' do scenario 'and is redirected to user home page' do user_log_in(user) expect(current_path).to eql(auth_user_root_path) end end end  Install Fonts / Icons Fontawesome (Good with Bulma) https://kelishrestha.medium.com/how-to-install-font-awesome-with-yarn-in-rails-6-0-c2506543c13d\nyarn add @fortawesome/fontawesome-free  update application.scss\n$fa-font-path: '@fortawesome/fontawesome-free/webfonts'; @import '@fortawesome/fontawesome-free/scss/fontawesome'; @import '@fortawesome/fontawesome-free/scss/solid'; @import '@fortawesome/fontawesome-free/scss/regular'; @import '@fortawesome/fontawesome-free/scss/brands'; @import '@fortawesome/fontawesome-free/scss/v4-shims';  update application.js\nimport \u0026quot;@fortawesome/fontawesome-free/js/all\u0026quot;;  or via cdn: vhttps://fontawesome.com/how-to-use/customizing-wordpress/snippets/setup-cdn-webfont add to application.html.erb ()\n\u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width, initial-scale=1\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://pro.fontawesome.com/releases/v5.10.0/css/all.css\u0026quot; integrity=\u0026quot;sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p\u0026quot; crossorigin=\u0026quot;anonymous\u0026quot;/\u0026gt;  Install BULMA: a CSS Framework (if desired) Bulma is a relatively new CSS framework. It feels like a light, streamlined alternative to Bootstrap. Bulma doesn’t include any JavaScript at all. This means some stuff just won’t work out of the box. For example, the burger menu won’t toggle without a little JavaScript help. We’ll get to that later.\nyarn add bulma  Open app/javascript/packs/application.js and add the following to the top:\nimport '../styles'  Create app/javascript/styles.scss:\n@import '~bulma/bulma';  customize bulma by adding to the top of styles.scss file: https://stackoverflow.com/questions/48809328/bulma-navbar-breakpoint\n@import \u0026quot;~bulma/sass/utilities/initial-variables.sass\u0026quot;; $navbar-breakpoint: $tablet; @import \u0026quot;~bulma/bulma.sass\u0026quot;; @import '~bulma/bulma';  choices are: $desktop (default 960px), $tablet (769px), $widescreen (1152px), $fullhd (1344px) variable defaults: https://bulma.io/documentation/customize/variables/ variables that can be set: https://bulma-customizer.bstash.io\nA sample Bulma navbar Open app/views/layouts/application.html.erb and add the following just above the yield line:\n\u0026lt;%= render 'layouts/navbar' %\u0026gt;  Create app/views/layouts/_navbar.html.erb:\n\u0026lt;div class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;nav class=\u0026quot;navbar\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;navbar-brand\u0026quot;\u0026gt; \u0026lt;a class=\u0026quot;navbar-item\u0026quot; href=\u0026quot;#\u0026quot;\u0026gt; \u0026lt;img src=\u0026quot;https://bulma.io/images/bulma-logo.png\u0026quot; width=\u0026quot;112\u0026quot; height=\u0026quot;28\u0026quot;\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;div class=\u0026quot;navbar-burger burger\u0026quot; data-target=\u0026quot;main-nav\u0026quot;\u0026gt; \u0026lt;span\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026quot;main-nav\u0026quot; class=\u0026quot;navbar-menu\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;navbar-start\u0026quot;\u0026gt; \u0026lt;%= link_to root_url, class: 'navbar-item' do %\u0026gt; \u0026lt;span class=\u0026quot;icon\u0026quot;\u0026gt; \u0026lt;i class=\u0026quot;far fa-gem\u0026quot;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;Home\u0026lt;/span\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;%= link_to home_about_url, class: 'navbar-item' do %\u0026gt; \u0026lt;span class=\u0026quot;icon\u0026quot;\u0026gt; \u0026lt;i class=\u0026quot;far fa-star\u0026quot;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;About\u0026lt;/span\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;/div\u0026gt;  This is basically copied from the Bulma examples. It is a basic nav bar with two menu items; Home and About.\nWe now have all the pieces in place and can start wiring up our Stimulus controllers.\nCreate a Stimulus controller To keep this example simple, we’re going to create a single controller which we’ll attach to the body tag in the main layout. This controller will be responsible for rendering the Font Awesome icons (as described in a previous post) as well as handling our Bulma burger menu.\nCreate app/javascript/controllers/main_controller.js:\nimport fontawesome from '@fortawesome/fontawesome' import icons from '@fortawesome/fontawesome-free-regular' import { Controller } from 'stimulus' export default class extends Controller { initialize() { fontawesome.library.add(icons) } connect() { fontawesome.dom.i2svg() // Get all \u0026quot;navbar-burger\u0026quot; elements var $navbarBurgers = Array.prototype.slice.call(document.querySelectorAll('.navbar-burger'), 0); // Check if there are any navbar burgers if ($navbarBurgers.length \u0026gt; 0) { // Add a click event on each of them $navbarBurgers.forEach(function ($el) { $el.addEventListener('click', function () { // Get the target from the \u0026quot;data-target\u0026quot; attribute var target = $el.dataset.target; var $target = document.getElementById(target); // Toggle the class on both the \u0026quot;navbar-burger\u0026quot; and the \u0026quot;navbar-menu\u0026quot; $el.classList.toggle('is-active'); $target.classList.toggle('is-active'); }); }); } } }  This controller imports the icons from Font Awesome when initialize is called. Every time connect is called it renders the icons and then searches for navbar burgers to attach the appropriate click events on.\nConnect the controller Now we want to connect the body tag to our controller using an HTML5 data attribute.\nOpen app/views/layouts/application.html.erb and add the following attribute to the \u0026lt;body\u0026gt; tag.\n\u0026lt;body data-controller=\u0026quot;main\u0026quot;\u0026gt;  Now it should look like:\n# app/views/layouts/application.html.erb \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Tweets\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width,initial-scale=1\u0026quot;\u0026gt; \u0026lt;%= csrf_meta_tags %\u0026gt; \u0026lt;%= csp_meta_tag %\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css\u0026quot; integrity=\u0026quot;sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l\u0026quot; crossorigin=\u0026quot;anonymous\u0026quot;\u0026gt; \u0026lt;%= stylesheet_link_tag 'application', media: 'all' %\u0026gt; \u0026lt;%= javascript_pack_tag 'application' %\u0026gt; \u0026lt;%= yield :head %\u0026gt; \u0026lt;%= turbo_include_tags %\u0026gt; \u0026lt;%# stimulus_include_tags %\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body data-controller=\u0026quot;main\u0026quot;\u0026gt; \u0026lt;%= render 'layouts/navbar' %\u0026gt; \u0026lt;p class=\u0026quot;notice\u0026quot;\u0026gt;\u0026lt;%= notice %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026quot;alert\u0026quot;\u0026gt;\u0026lt;%= alert %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;%= yield %\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  https://blackninjadojo.com/css/bulma/2019/02/27/how-to-create-a-layout-for-your-rails-application-using-bulma.html\nDiscourgaged - no longer necessary: If you plan to user database_cleaner \u0026ndash; then also see this article to finish your config:\nhttps://medium.com/@amliving/my-rails-rspec-set-up-6451269847f9\n","date":1599695167,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1616283967,"objectID":"aa8b84747652c197ec3c57e4d97b3d6b","permalink":"https://btihen.me/post_ruby_rails/rails_6_install_n_configure/","publishdate":"2020-09-10T01:46:07+02:00","relpermalink":"/post_ruby_rails/rails_6_install_n_configure/","section":"post_ruby_rails","summary":"Intro To document is mostly for me \u0026ndash; at least until I automate my setup defaults. However, I am glad to share and get ideas from others too. I will build a little calendar app I use with friends (it\u0026rsquo;s focused on being mobile friendly and easy to use \u0026ndash; not a full featured calendar).","tags":["rails","configure","install","durable","testing"],"title":"Install and Configure Rails","type":"post_ruby_rails"},{"authors":["Bill Tihen"],"categories":["Education","Classroom","EDgile","Practice"],"content":"I like to find ways to make the topic of study valuable - not to me, but to the students. I actually usually find that value requires a context or integration. If an engineer builds a more efficient transport boat, but the boat regularly sinks when sailing in wind, then the boat has little value despite its newly engineered efficiency. Similarly, student learning proceeds with value.\nGenerally, I have found students will cultivate their own value when they have a choice in how they approach and apply the learning associated with a subject. In particular, students will find value when they can define their own goal consistent with the class agenda and ideally within a context that is valuable or interesting to others.\nTo that end, I encourage students to pick their own learning goals within the open guidelines of the class. I generally ask them to choose their own backstory and context for each subject. For many teachers - and possibly for you, the readers - this may sound silly or like a waste of time. However, creating a backstory and context has many beneficial side effects: a) students have a goal that they chose themselves; b) students have their own context - many teenagers seem to enjoy creating a new experimental identity); and c) students research the broad aspects of a topic and to figure out what is most important in the areas that they find attractive. At this point, assuming the students have the feeling that they will be supported and can accomplish their goal, they have acquired their own value and context for the material and the project.\nThis startup process includes the students learning some background about what they are learning without violating the principle of “cooking from day one.” Teenagers, if not overwhelmed by the idea, enjoy picking their own goals and exercising their indepence. As teachers, it is important to be flexible enough to allow goals that might be outside our teacher expectations, especially if the outcomes are valuable and still fit, perhaps more widely interpreted, with the learning goals of the course.\nHowever, startup with choice is not quite enough. It’s not the whole story.\nStudents must go deep enough in a subject so that they discover viable, but competing, answers to the problems they are working on, so that they can explain why their solutions are defendable within their chosen context. For example, while collaborating with a biology teacher, we decided to combine biology and robotics and have the students build their own mini-robot gardeners to care for their plants over a three week holiday. A few students chose what they believed was the best watering strategy, but they didn’t anticipate that the cleaning staff would move their equipment during the break. The ensuing jiggling dislodged a few sensors, and some plants were flooded with water and drowned. Upon return they learned that “best” is only best if it includes planning for failures. We could have explained planning for failure to the students, but the natural consequences of a flood was a much better teacher and the real world consequences much more memorable.\nBasically, it is important to help ensure that students learn within a context with enough complexity so they learn to choose between multiple possible answers that will each have different strengths and weaknesses.\nMany students are not yet accustomed to the expectation of learning enough about a topic so that they understand its complexity and the context for when it is valuable and when it is not. Therefore, initially, it is usually helpful to have them work through small challenges in a supportive, low risk situation where mistakes and exploration is safe and expected. This creates an uplifting environment where learning is enjoyable and self-motivating. Without uplift, the engagement of value and self-motivation is challenging and the need for judgement increases (and starts a vicious cycle). See the Uplift blog for a further discussion.\nThe depth of knowledge gained when students choose between viable alternatives they have discovered themselves seems surprisingly under-emphasized in schools, since in the professional world this is a basic expectation. We expect our bridges and buildings to do well in earthquakes, high winds, and high water while they also serve our daily needs well. We expect doctors to advise us or pick the best medication, based on our age, sickness, our expectation of quality of life during treatment. We can perhaps leverage value to expect more of our students, too.\nLearning value within a context is a very important life skill - not just an important academic skill.\n","date":1598097918,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598097918,"objectID":"1b0492e840f5c876776dee13b110ceda","permalink":"https://btihen.me/post_edu/edgility_btihen_value/","publishdate":"2020-08-22T14:05:18+02:00","relpermalink":"/post_edu/edgility_btihen_value/","section":"post_edu","summary":"Value is quite straightforward in my mind. It has several parts: a) students see value or a reason to learn the material without being told they must learn or get punished with poor grades; b) students learn to think about the what they learn and know in the context of how it affects others (or fits into a bigger picture), c) what students learn is challenging and engaging enough that it doesn’t feel like a dumb exercise to the student (e.g. a lab that can be looked up on Google that thousands of people have already done won’t fit this definition of valuable); and d) the process of learning creates confidence in the student and the process cultivates lifeworthy skills.\nNot all learning will involve all 4 aspects of value, but the more the better!","tags":["value","self-motivation","natural-feedback","context","depth of knowledge"],"title":"Value: Motivation and Knowledge with a Context","type":"post_edu"},{"authors":["Bill Tihen"],"categories":["Education","EDgile","Practice","Classroom"],"content":"As mentioned in the Transparency article, there is an important interaction between having the “big picture” (having a goal and some expectations along the way) and knowing “what to do next” (a feeling of workability and progress). This article explores how to establish both by creating an effective self-guided learning strategy for students.\nIn EDgility we encourage student self-determination. Student choice and understanding the big picture are critical components to cultivate self-determination. They need to understand the big picture in order to exercise real choice. To support them, I like to offer students projects with broad goals. The big general goal starts the process of smallifying, because they will have to smallify in order to make progress. The students first explore the field just enough to find ideas that interest them, to pick their own specific goal, and to find a purpose or context for that goal. It is important at this stage that the student’s goals already include a complication / design compromise consistent with the overall goal. For example, students may choose to build a cargo boat that saves energy, but it must also be stable in waves. Commercially, their boat is only better if it is effective at the overall goal (staying afloat) and good at a new specific goal (saving energy). Students must think broadly and understand the context of their project in actual use.\nThis first step generally creates a lot of enthusiasm (and ideas) as the students create a storyline, a new identity, and an organization to support their mission. The story line and organization need to be attractive to them and others, both to support their motivation and to make for a good sales pitch at the end of the unit.\nTwo classes that started with big goals that required smallifying into many workable steps were the “Boat Design” and “Robot Gardeners” classes. I’ve written about those elsewhere, see e.g. boat design in ECIS Global Insights and Robot Gardeners in Spotlight.\nThe next step in smallifying is for the students to figure out the most important aspects needed to accomplish the big goals. I call this distilling the essence of the topic in relation to their goal. For example, in the boat design class, all boat designs must understand buoyancy (flotation), and depending on the boat specialty and safety features, two or three other concepts will be important, i.e., students who choose to build a speedboat will need excellent fluid efficiency and perhaps also stability while turning. Learning to discover the important aspects of a large complex field and to find the critical aspects relating to one’s goals is an important life skill in almost all aspects of life. It is, in fact, a skill that transcends the specific content of the class - and therefore lifeworthy.\nI give the students only a short amount of time to do these first two steps (perhaps one or two classes total). This prevents analysis paralysis. Besides, not having time to fully understand a field before starting gives the students permission to adjust as they explore their topic. Learning to manage and adjust projects as you learn and progress is known as agile management - another useful life-skill in our quickly evolving world.\nAt this point the students start the iterative smallification of concrete actionable steps to learn and progress toward the goal. These small steps are exploratory and safe. Safe means that the step is small enough that it isn’t upsetting if it doesn\u0026rsquo;t work on the first try and safe means that the teacher is neutral about successful and unsuccessful steps. Exploring and learning is what is celebrated. Under no condition can mistakes be punished or made a point of shame. Without feeling safe about errors and unknowns, smallifying and creative learning is almost impossible. It will take time for most students to trust this environment, thus initially, expect students to be reluctant to smallify in order to explore all the unknowns inherent in big messy goals.\nFiguring out the next workable step happens as the student progresses - students are not working from a large, clear plan that maps out each step at the beginning of the project. I do give students who have never worked this way a few introductory steps to get them started. Once underway, students gain confidence and generally have enough experience to find the next workable step - as they progress. Here’s a concrete example of smallifying, based on building a racing catamaran that is stable while turning at speed might be:\n configure your computer with the software to print on a 3-D printer; design and print a box (or any simple shape); print the above shape, but make it hollow (learn to subtract a shape); print the above hollowed shape joined with a second shape; if the first shape is a box, add a cone, sphere, pyramid, etc (this requires addition and translation); etc. (now the students have enough basics to keep learning and progressing).  As Bill Rankin said in several keynote addresses, you learn to cook by cooking. In fact, you learn almost anything by doing it. You have to jump in and start, or “get cooking.”\nOf course, a student who chooses to build a rescue boat will have a different set of small steps, but common to both boats is learning to work incrementally and building on the next workable small step toward the goal. This is a powerful learning technique that builds confidence in students' ability to learn and be successful.\nOnce the students get the hang of this process of moving from the big picture, identifying a few critical aspects, and smallifiying their project into small workable steps, they have effectively learned how to learn and self-correct as they move toward a large complex goal. This meta-aspect of the learning process and its deliberate practice may in the long run be a lifeworthy skill that goes far beyond the specific content of a single class. Engineering classes such as the Boat Design class example here work well. So, too, do classes in art and other areas.\nCaution: Smallification happens in small chunks (one or two steps at a time maximum). In the tech world we call this planning at the last responsible moment, but fundamentally, it is about figuring out the next workable thing when the students have enough information to see that next step. This prevents the feeling that the big goal is just too overwhelming. Students who have never worked this way will need some smallifying guidance. For example, in the Boat Design class, I gave students a few steps to get started and I give the details of the final assessment. (I like a public demonstration and company pitch.) As a teacher you may want to step through a project to be more confident in the timing, practice the smallifying, etc, but be careful not to give away more than needed and avoid at all costs big and detailed plans! The fun and exploration is a central feature of a motivating and educational experience for the students.\nFundamentally, creating a learning environment where having the big picture and exploring the details along the way can create an uplifting educational journey.\n","date":1595592338,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1595592338,"objectID":"d61e8ea7d7e5dee4e6fb4fc95d740789","permalink":"https://btihen.me/post_edu/edgility_btihen_smallify/","publishdate":"2020-07-24T14:05:38+02:00","relpermalink":"/post_edu/edgility_btihen_smallify/","section":"post_edu","summary":"Get the big picture: students set goals (outcomes), deconstruct (find the most important (3-5) aspects / skills related to the goal), and then smallify (learn to find the next small step that builds on what’s already done), and finally, learn through deliberate practice (self-correcting as they progress).","tags":["value","exploration","exploration","uplift","self-motivation","student choice"],"title":"Smallify to Learn Effectively","type":"post_edu"},{"authors":["Bill Tihen"],"categories":[],"content":"Configure devise (for multiple types of accounts) install the devise engine:\nbin/rails generate devise:install  now follow the basic setup config \u0026ndash; add to config/environments/development.rb\nconfig.action_mailer.default_url_options = { host: 'localhost', port: 3000 }  add notifications to the layout for devise in app/views/layouts/application.html.erb just above \u0026lt;%= yeild %\u0026gt;\n\u0026lt;p class=\u0026quot;notice\u0026quot;\u0026gt;\u0026lt;%= notice %\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026quot;alert\u0026quot;\u0026gt;\u0026lt;%= alert %\u0026gt;\u0026lt;/p\u0026gt;  now create one or more models for devise:\nrails g devise:views rails generate devise user  update the routes to put the login in separate routes in config/routes.rb - make the routes look like:\n devise_for :users, path: 'users' # http://localhost:3000/users/sign_in devise_for :admins, path: 'admins' # http://localhost:3000/admins/sign_in  turn on scoped views (since login forms can be different) in config/initializers/devise.rb\nconfig.scoped_views = true  Create the scoped views: (instead of: rails g devise:views) do:\nrails g devise:views users/devise rails g devise:views admins/devise  now we should open these migrations and uncomment any added fields we use - I generally like to use most of the fields:\n# frozen_string_literal: true class DeviseCreateAdmins \u0026lt; ActiveRecord::Migration[6.0] def change create_table :admins do |t| ## Database authenticatable t.string :email, null: false, default: \u0026quot;\u0026quot; t.string :encrypted_password, null: false, default: \u0026quot;\u0026quot; ## Recoverable t.string :reset_password_token t.datetime :reset_password_sent_at ## Rememberable t.datetime :remember_created_at ## Trackable t.integer :sign_in_count, default: 0, null: false t.datetime :current_sign_in_at t.datetime :last_sign_in_at t.inet :current_sign_in_ip t.inet :last_sign_in_ip ## Confirmable t.string :confirmation_token t.datetime :confirmed_at t.datetime :confirmation_sent_at t.string :unconfirmed_email # Only if using reconfirmable ## Lockable t.integer :failed_attempts, default: 0, null: false # Only if lock strategy is :failed_attempts t.string :unlock_token # Only if unlock strategy is :email or :both t.datetime :locked_at t.timestamps null: false end add_index :admins, :email, unique: true add_index :admins, :reset_password_token, unique: true add_index :admins, :confirmation_token, unique: true add_index :admins, :unlock_token, unique: true end end  and adjust the user and admin models too and turn on the features we want or need. We will go into detail later, for now I will just add trackable to the models:\nclass User \u0026lt; ApplicationRecord # Include default devise modules. Others available are: # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable devise :database_authenticatable, :registerable, :trackable, :recoverable, :rememberable, :validatable end  and of course migrate too.\nbin/rails db:migrate  Create custome controllers for each sessions - this also allows the users to have different fields and features:\nrails generate devise:controllers users/devise rails generate devise:controllers admins/devise  configure the routes to point to these new controllers:\n # http://localhost:3000/users/sign_in devise_for :users, path: 'users', controllers: { sessions: 'users/devise/sessions', passwords: 'users/devise/passwords', registrations: 'users/devise/registrations' } # http://localhost:3000/admins/sign_in devise_for :admins, path: 'admins', controllers: { sessions: 'admins/devise/sessions', passwords: 'admins/devise/passwords', registrations: 'admins/devise/registrations' }  now the routes should look like:\n$ bin/rails routes Prefix Verb URI Pattern Controller#Action new_user_session GET /users/sign_in(.:format) users/sessions#new user_session POST /users/sign_in(.:format) users/sessions#create destroy_user_session DELETE /users/sign_out(.:format) users/sessions#destroy new_user_password GET /users/password/new(.:format) users/passwords#new edit_user_password GET /users/password/edit(.:format) users/passwords#edit user_password PATCH /users/password(.:format) users/passwords#update PUT /users/password(.:format) users/passwords#update POST /users/password(.:format) users/passwords#create cancel_user_registration GET /users/cancel(.:format) user/registrations#cancel new_user_registration GET /users/sign_up(.:format) user/registrations#new edit_user_registration GET /users/edit(.:format) user/registrations#edit user_registration PATCH /users(.:format) user/registrations#update PUT /users(.:format) user/registrations#update DELETE /users(.:format) user/registrations#destroy POST /users(.:format) user/registrations#create new_admin_session GET /admins/sign_in(.:format) admin/sessions#new admin_session POST /admins/sign_in(.:format) admin/sessions#create destroy_admin_session DELETE /admins/sign_out(.:format) admin/sessions#destroy new_admin_password GET /admins/password/new(.:format) admin/passwords#new edit_admin_password GET /admins/password/edit(.:format) admin/passwords#edit admin_password PATCH /admins/password(.:format) admin/passwords#update PUT /admins/password(.:format) admin/passwords#update POST /admins/password(.:format) admin/passwords#create cancel_admin_registration GET /admins/cancel(.:format) admin/registrations#cancel new_admin_registration GET /admins/sign_up(.:format) admin/registrations#new edit_admin_registration GET /admins/edit(.:format) admin/registrations#edit admin_registration PATCH /admins(.:format) admin/registrations#update PUT /admins(.:format) admin/registrations#update DELETE /admins(.:format) admin/registrations#destroy POST /admins(.:format) admin/registrations#create  lets make logged in home pages (for the user and admin)\nrails g controller users/home index --no-helper --no-assets --no-controller-specs --no-view-specs rails g controller admins/home index --no-helper --no-assets --no-controller-specs --no-view-specs  now lets update our routes to ponit to these pages if the user is logged in add the following belos the deivse_for commands\nRails.application.routes.draw do # http://localhost:3000/admins/sign_in devise_for :admins, path: 'admins', controllers: { sessions: 'admins/devise/sessions', passwords: 'admins/devise/passwords', registrations: 'admins/devise/registrations' } # http://localhost:3000/umdzes/sign_in devise_for :umdzes, path: 'umdzes', controllers: { sessions: 'umdzes/devise/sessions', passwords: 'umdzes/devise/passwords', registrations: 'umdzes/devise/registrations' } # http://localhost:3000/patrons/sign_in devise_for :patrons, path: 'patrons', controllers: { sessions: 'patrons/devise/sessions', passwords: 'patrons/devise/passwords', registrations: 'patrons/devise/registrations' } authenticated :patron do root 'patrons/home#index', as: :auth_patron_root end authenticated :umdze do root 'umdzes/home#index', as: :auth_umdze_root end authenticated :admin do root 'admins/home#index', as: :auth_admin_root end namespace :admins do get 'home/index' # resource :home_page, only: [:index] end get '/admins', to: 'admins/home#index', as: :admins namespace :umdzes do get 'home/index' # resource :home_page, only: [:index] end get '/umdzes', to: 'umdzes/home#index', as: :umdzes namespace :patrons do get 'home/index' # resource :home_page, only: [:index] end get '/patrons', to: 'patrons/home#index', as: :patrons get '/landing', to: 'landing#index', as: :landing get 'landing/index' root to: \u0026quot;landing#index\u0026quot; end  now lets make ApplicationControllers for each namespace \u0026amp; enforce authentication touch app/controllers/admins/application_controller.rb cat \u0026lt;\u0026lt; EOF \u0026gt; app/controllers/admins/application_controller.rb class Admins::ApplicationController \u0026lt; ApplicationController before_action :authenticate_admin! private def this_user current_admin end end EOF touch app/controllers/umdzes/application_controller.rb cat \u0026lt;\u0026lt; EOF \u0026gt; app/controllers/umdzes/application_controller.rb class Umdzes::ApplicationController \u0026lt; ApplicationController before_action :authenticate_umdze!, unless: :allowed_access private def allowed_access current_admin end def this_user current_umdze || current_admin end end EOF touch app/controllers/patrons/application_controller.rb cat \u0026lt;\u0026lt; EOF \u0026gt; app/controllers/patrons/application_controller.rb class Patrons::ApplicationController \u0026lt; ApplicationController before_action :authenticate_patron!, unless: :allowed_access private def allowed_access current_umdze || current_admin end def this_user current_patron || current_umdze || current_admin end end EOF  now we will inhert from these new controllers and enforce limits now lets require these pages to have authenticated the correct user type:\n# app/controllers/admins/home_controller.rb class Admins::HomeController \u0026lt; Admins::ApplicationController def index end end # app/controllers/umdzes/home_controller.rb class Umdzes::HomeController \u0026lt; Umdzes::ApplicationController def index end end # app/controllers/patrons/home_controller.rb class Patrons::HomeController \u0026lt; Patrons::ApplicationController def index end end  Now prevent student and admin accounts from cross visits (during testing, or whatever) create this new file:\ntouch app/controllers/concerns/accessible.rb cat \u0026lt;\u0026lt; EOF \u0026gt; app/controllers/concerns/accessible.rb module Accessible extend ActiveSupport::Concern included do before_action :check_user end protected def check_user if current_admin flash.clear # The authenticated admin root path can be defined in your routes.rb in: devise_scope :admin do... redirect_to(auth_admin_root_path) and return elsif current_umdze flash.clear # The authenticated admin root path can be defined in your routes.rb in: devise_scope :admin do... redirect_to(auth_umdze_root_path) and return elsif current_patron flash.clear # The authenticated user root path can be defined in your routes.rb in: devise_scope :user do... redirect_to(auth_partron_root_path) and return end end end EOF  use this accessible concern Now add include Accessible in the appropriate controllers:\nNote: You must skip_before_action for the destroy action in each SessionsController to prevent the redirect to happen before the sign out occurs.\n# eg. ../controllers/admins/sessions_controller.rb class Admins::SessionsController \u0026lt; Devise::SessionsController include Accessible skip_before_action :check_user, only: :destroy # ... end # eg. ../controllers/admins/registrations_controller.rb You must also skip_before_action for the edit, update, destroy, and cancel actions in each RegistrationsController to allow current users to edit and cancel their own accounts. Otherwise they will be redirected before they can reach these pages. class Admins::RegistrationsController \u0026lt; Devise::RegistrationsController include Accessible skip_before_action :check_user, except: [:new, :create] # ... end # eg. ../controllers/umdzes/sessions_controller.rb class Umdzes::SessionsController \u0026lt; Devise::SessionsController include Accessible skip_before_action :check_user, only: :destroy # ... end # eg. ../controllers/umdzes/registrations_controller.rb class Umdzes::RegistrationsController \u0026lt; Devise::RegistrationsController include Accessible skip_before_action :check_user, except: [:new, :create] # ... end # eg. ../controllers/patrons/sessions_controller.rb class Patrons::SessionsController \u0026lt; Devise::SessionsController include Accessible skip_before_action :check_user, only: :destroy # ... end # eg. ../controllers/patrons/registrations_controller.rb class Patrons::RegistrationsController \u0026lt; Devise::RegistrationsController include Accessible skip_before_action :check_user, except: [:new, :create] # ... end  now lets give the patron account a usernames https://github.com/heartcombo/devise/wiki/How-To%3A-Allow-users-to-sign-in-with-something-other-than-their-email-address\nrails generate migration add_username_to_patrons username:string:uniq rails generate migration add_umdzes_name_to_umdzes fullname:string rails generate migration add_admins_name_to_admins fullname:string # now update the new migration to look like: class AddUsernamToPatrons \u0026lt; ActiveRecord::Migration[6.0] def change # username is key not email - in fact we don't want an email rename_column :patrons, :email, :username end end class AddFullnameToUmdzes \u0026lt; ActiveRecord::Migration[6.0] def change add_column :umdzes, :umdzes_name, :string, null: false end end class AddFullnameToAdmins \u0026lt; ActiveRecord::Migration[6.0] def change add_column :admins, :admins_name, :string, null: false end end  update the models now we need to go to the models and make the following updates:\n# app/models/admin.rb class Admin \u0026lt; ApplicationRecord # Include default devise modules. Others available are: # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable devise :database_authenticatable, :trackable, # :registerable, :rememberable, :validatable #, :recoverable validates :email, uniqueness: true validates :admins_name, presence: true end # app/models/umdze.rb class Umdze \u0026lt; ApplicationRecord # Include default devise modules. Others available are: # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable devise :database_authenticatable, :trackable, # :registerable, :rememberable, :validatable #, :recoverable validates :email, uniqueness: true validates :umdzes_name, presence: true end # app/models/patrons.rb class Patron \u0026lt; ApplicationRecord # Include default devise modules. Others available are: # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable devise :database_authenticatable, :trackable, # :registerable, :rememberable, :validatable, # :recoverable :authentication_keys =\u0026gt; [:username] validates :username, uniqueness: true # make the email field optional # validates :email, uniqueness: true def email_required? false end def email_changed? false end # use this instead of email_changed? for Rails = 5.1.x def will_save_change_to_email? false end end  now we can safely migrate bundle exec rails db:migrate\nlets test our logins lets create some common feature test code:\nhttps://forum.upcase.com/t/rspec-support-vs-helpers/4986 https://thoughtbot.com/blog/rspec-integration-tests-with-capybara\n# spec/support/features/session_helpers.rb module Features module SessionHelpers # def patron_sign_up(username:, password:) # visit new_patron_registration_path # expect(page).to have_button('Sign up') # fill_in 'Username', with: username # fill_in 'Password', with: password # click_button 'Sign up' # end def patron_log_in(patron = nil) patron = FactoryBot.create :patron if patron.nil? visit new_patron_session_path expect(page).to have_button('Log in') fill_in 'Username', with: patron.username fill_in 'Password', with: patron.password click_on 'Log in' end # def umdze_sign_up(email:, password:) # visit new_umdze_registration_path # expect(page).to have_button('Sign up') # fill_in 'Email', with: email # fill_in 'Password', with: password # click_button 'Sign up' # end def umdze_log_in(umdze = nil) umdze = FactoryBot.create :umdze if umdze.nil? visit new_admin_session_path expect(page).to have_button('Log in') fill_in 'Email', with: admin.email fill_in 'Password', with: admin.password click_on 'Log in' end # def admin_sign_up(email:, password:) # visit new_admin_registration_path # expect(page).to have_button('Sign up') # fill_in 'Email', with: email # fill_in 'Password', with: password # click_button 'Sign up' # end def admin_log_in(admin = nil) admin = FactoryBot.create :admin if admin.nil? visit new_admin_session_path expect(page).to have_button('Log in') fill_in 'Email', with: admin.email fill_in 'Password', with: admin.password click_on 'Log in' end end end  We are not allowing registrations, so that code is commented out. However, we see we must configure our factories for this code to work.\nLets tell rspec how to access this code in feature tests:\n# spec/support/features.rb RSpec.configure do |config| config.include Features::SessionHelpers, type: :feature end  Lets create test for our devise model factories: # spec/models/patron_spec.rb require 'rails_helper' RSpec.describe User, type: :model do describe \u0026quot;factory functions\u0026quot; do it \u0026quot;generates a valid user\u0026quot; do model = FactoryBot.build :user expect(model.valid?).to be true end it \u0026quot;saves a valid user\u0026quot; do model = FactoryBot.build :user expect(model.save).to be_truthy end end describe \u0026quot;DB settings\u0026quot; do it { have_db_index(:email) } it { is_expected.to have_db_column(:encrypted_password) } end end # spec/models/admin_spec.rb require 'rails_helper' RSpec.describe Admin, type: :model do describe \u0026quot;factory functions\u0026quot; do it \u0026quot;generates a valid admin\u0026quot; do model = FactoryBot.build :admin expect(model.valid?).to be true end it \u0026quot;saves a valid admin\u0026quot; do model = FactoryBot.build :admin expect(model.save).to be_truthy end end describe \u0026quot;DB settings\u0026quot; do it { have_db_index(:email) } it { is_expected.to have_db_column(:encrypted_password) } end end  be sure these fail - run:\nrspec spec/models/  Now we need to configure the factories so all is working:\n# spec/factories/patrons.rb FactoryBot.define do factory :user do sequence(:email) { |n| \u0026quot;#{Faker::Internet.email}\u0026quot;.split('@').join(\u0026quot;#{n}@\u0026quot;) } password { 'LetM3-InNow' } password_confirmation { 'LetM3-InNow' } # enable this if using confirmable # confirmed_at { Date.today } end end # spec/factories/umdzes.rb FactoryBot.define do factory :umdze do sequence(:email) { |n| \u0026quot;#{Faker::Internet.email}\u0026quot;.split('@').join(\u0026quot;#{n}@\u0026quot;) } password { 'LetM3-InNow!' } password_confirmation { 'LetM3-InNow!' } umdzes_name { \u0026quot;#{Faker::Name.first_name} #{Faker::Name.last_name}\u0026quot; } # enable this if using confirmable # confirmed_at { Date.today } end end # spec/factories/admins.rb FactoryBot.define do factory :admin do sequence(:email) { |n| \u0026quot;#{Faker::Internet.email}\u0026quot;.split('@').join(\u0026quot;#{n}@\u0026quot;) } password { 'LetM3-InNow!' } password_confirmation { 'LetM3-InNow!' } admins_name { \u0026quot;#{Faker::Name.first_name} #{Faker::Name.last_name}\u0026quot; } # enable this if using confirmable # confirmed_at { Date.today } end end  be sure these pass now - run:\nrspec spec/models/  Now we are ready to test devise and our restricted access to the users home page:\nhttps://www.madetech.com/blog/feature-testing-with-rspec https://thoughtbot.com/blog/rspec-integration-tests-with-capybara https://github.com/heartcombo/devise/wiki/How-To:-Test-with-Capybara https://radavis.github.io/sign-in-out-test-helpers-for-and-devise-and-capybara/ https://www.vanderpol.net/2014/10/07/rspec-integration-tests-devise-user-registration/\n# spec/features/users/user_signup_spec.rb require 'rails_helper' RSpec.describe 'Users Home Page', type: :feature do # note user is NOT created in DB! let(:user) { FactoryBot.build :user } after :each do Warden.test_reset! end describe 'user is not signed-up' do scenario 'user signs-up on registration page' do user_sign_up(email: user.email, password: user.password) expect(current_path).to eql(users_home_path) end end end # spec/features/users/user_login_spec.rb require 'rails_helper' RSpec.describe 'Users Login', type: :feature do let(:user) { FactoryBot.create :user } after :each do Warden.test_reset! end describe 'user logs in successfully' do scenario 'and is redirected to user home page' do user_log_in(user) expect(current_path).to eql(auth_user_root_path) end end end # spec/features/users_home_page_spec.rb require 'rails_helper' RSpec.describe 'Users Home Page', type: :feature do let(:user) { FactoryBot.create :user } after :each do # force a logout (clear warden info) after each test Warden.test_reset! end describe 'user is not authenticated' do scenario 'user is redirected to user login before access to user home' do visit users_home_path expect(current_path).to eql(new_user_session_path) end end describe 'user is already authenticated' do before { user_log_in(user) } scenario 'user gets direct access to the user homepage' do visit users_home_path expect(page).to have_current_path(users_home_path) end end end  and test to be sure admin can log in too:\n# spec/features/admins/admin_login_spec.rb require 'rails_helper' RSpec.describe 'Users Login', type: :feature do after :each do Warden.test_reset! end scenario 'logs in successfully and is redirected to user home page' do admin_log_in expect(current_path).to eql(auth_admin_root_path) end end # spec/features/admins/admin_signup_spec.rb require 'rails_helper' RSpec.describe 'Admin Signup', type: :feature do # IMPORTANT is NOT created in DB! let(:admin) { FactoryBot.build :admin } after :each do Warden.test_reset! end describe 'admin is not signed-up' do scenario 'admin registers' do admin_sign_up(email: admin.email, password: admin.password) expect(page).to have_current_path(admins_home_path) end end end # spec/features/admins/admins_home_spec.rb require 'rails_helper' RSpec.describe 'Admins Home', type: :feature do let(:admin) { FactoryBot.create :admin } after :each do Warden.test_reset! end describe 'un-authenticated' do scenario 'attempts to access admins home page is redirected to user login' do visit admins_home_path expect(current_path).to eql(new_admin_session_path) end end describe 'already authenticated' do before { admin_log_in(admin) } scenario 'gets access to the user homepage' do visit admins_home_path expect(current_path).to eql(admins_home_path) end end end  before we wrap up - we need to fix our request specs - now that we added login restrictions:\n# spec/requests/users/home_request_spec.rb require 'rails_helper' RSpec.describe \u0026quot;Patron::Homes\u0026quot;, type: :request do let(:patron) { FactoryBot.create :patron } describe \u0026quot;GET /index\u0026quot; do context \u0026quot;NOT logged in\u0026quot; do after do sign_out patron end it \u0026quot;home as '/patrons' page is NOT accessible\u0026quot; do get \u0026quot;/patrons\u0026quot; expect(response).to have_http_status(:redirect) # to login end it \u0026quot;home as 'patron_home_path' page is NOT accessible\u0026quot; do get patrons_home_path expect(response).to have_http_status(:redirect) end it \u0026quot;home as 'auth_patron_root_path' page is NOT accessible\u0026quot; do get auth_patron_root_path expect(response).to have_http_status(:success) # here we need page match for different root routes end end context \u0026quot;logged in\u0026quot; do before do sign_in patron end after do sign_out patron end it \u0026quot;home as '/patrons' page is accessible\u0026quot; do get \u0026quot;/patrons\u0026quot; expect(response).to have_http_status(:success) end it \u0026quot;home as 'patrons_home_path' page is accessible\u0026quot; do get patrons_home_path expect(response).to have_http_status(:success) end it \u0026quot;home as 'auth_patron_root_path' page is accessible\u0026quot; do get auth_patron_root_path expect(response).to have_http_status(:success) end end end end # spec/requests/umdze/home_request_spec.rb require 'rails_helper' RSpec.describe \u0026quot;Umdze::Homes\u0026quot;, type: :request do let(:umdze) { FactoryBot.create :umdze } describe \u0026quot;GET /index\u0026quot; do context \u0026quot;NOT logged in\u0026quot; do after do sign_out umdze end it \u0026quot;home as '/umdzes' page is NOT accessible\u0026quot; do get \u0026quot;/umdzes\u0026quot; expect(response).to have_http_status(:redirect) # to login end it \u0026quot;home as 'umdzes_home_path' page is NOT accessible\u0026quot; do get umdzes_home_path expect(response).to have_http_status(:redirect) end it \u0026quot;home as 'auth_umdze_root_path' page is NOT accessible\u0026quot; do get auth_umdze_root_path expect(response).to have_http_status(:success) # here we need page match for different root routes end end context \u0026quot;logged in\u0026quot; do before do sign_in umdze end after do sign_out umdze end it \u0026quot;home as '/umdzes' page is accessible\u0026quot; do get \u0026quot;/umdzes\u0026quot; expect(response).to have_http_status(:success) end it \u0026quot;home as 'umdzes_home_path' page is accessible\u0026quot; do get umdzes_home_path expect(response).to have_http_status(:success) end it \u0026quot;home as 'auth_umdze_root_path' page is accessible\u0026quot; do get auth_umdze_root_path expect(response).to have_http_status(:success) end end end end # spec/requests/admins/dashboard_request_spec.rb require 'rails_helper' RSpec.describe \u0026quot;Admins::Dashboards\u0026quot;, type: :request do let(:admin) { FactoryBot.create :admin } describe \u0026quot;GET /index\u0026quot; do context \u0026quot;NOT logged in\u0026quot; do it \u0026quot;home as '/admins' page is NOT accessible\u0026quot; do get \u0026quot;/admins\u0026quot; expect(response).to have_http_status(:redirect) end it \u0026quot;home as 'admins_home_path' page is NOT accessible\u0026quot; do get admins_home_path expect(response).to have_http_status(:redirect) end it \u0026quot;home as 'auth_admin_root_path' page is NOT accessible\u0026quot; do get auth_admin_root_path expect(response).to have_http_status(:success) # here we need page match for different root routes end end context \u0026quot;logged in\u0026quot; do before do sign_in admin end after do sign_out admin end it \u0026quot;home as '/admins' page is accessible\u0026quot; do get \u0026quot;/admins\u0026quot; expect(response).to have_http_status(:success) end it \u0026quot;home as 'admins_home_path' page is accessible\u0026quot; do get admins_home_path expect(response).to have_http_status(:success) end it \u0026quot;home as 'auth_admin_root_path' page is accessible\u0026quot; do get auth_admin_root_path expect(response).to have_http_status(:success) end end end end  run the tests and be sure all is green - if so, now is a good time to make a commit!\ngit add . git commit -m \u0026quot;rspec and devise configured and tests green\u0026quot;  ","date":1594406751,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594406751,"objectID":"b4bf9732d1837a10aab48d7d7e01da3f","permalink":"https://btihen.me/post_ruby_rails/rails_devise_users_namespaced/","publishdate":"2020-07-10T20:45:51+02:00","relpermalink":"/post_ruby_rails/rails_devise_users_namespaced/","section":"post_ruby_rails","summary":"Configure devise (for multiple types of accounts) install the devise engine:\nbin/rails generate devise:install  now follow the basic setup config \u0026ndash; add to config/environments/development.rb\nconfig.action_mailer.default_url_options = { host: 'localhost', port: 3000 }  add notifications to the layout for devise in app/views/layouts/application.","tags":["rails","devise","authentication","namespace"],"title":"Rails Devise User Model with Roles","type":"post_ruby_rails"},{"authors":["Bill Tihen"],"categories":["Code","Elixir","Phoenix"],"content":"Purpose This article builds on the existing article: https://btihen.me/post_tech/phoenix_1_5_blog_intro/ and adds nested relationships and has_many_through.\nnow lets create comments (a has many through for users) we will use mix phx.gen.context this time since we will use the posts page to add comments. We will use the context generator since we don\u0026rsquo;t need any views or templates generated. Answer Y to the question about the context already existing. We could create to API files within the Context before the one file gets too large, but we will skip that.\nmix phx.gen.context Blogs Comment comments message:text post_id:references:posts user_id:references:users  Update Relationships We need to create the relationships and update the migration to delete comments when post is deleted:\nNow lets create the relationship between posts and comments:\n# lib/feenix_intro/blogs/comment.ex efmodule FeenixIntro.Blogs.Comment do use Ecto.Schema import Ecto.Changeset alias FeenixIntro.Blogs.Post alias FeenixIntro.Accounts.User @required_fields [:user_id, :post_id, :message] schema \u0026quot;comments\u0026quot; do # remove these # field :post_id, :id # field :user_id, :id # add these: belongs_to(:user, User) belongs_to(:post, Post) field :message, :string timestamps() end @doc false def changeset(comment, attrs) do comment |\u0026gt; cast(attrs, @required_fields) |\u0026gt; validate_required(@required_fields) end  Now lets update posts relationship to comments:\n# lib/feenix_intro/blogs/post.ex # ... alias FeenixIntro.Blogs.Comment # ... schema \u0026quot;posts\u0026quot; do # ... # add this has_many(:comments, Comment) # ...  We could do the same has_many relationship with users - but its not needed. It is unlikely we would want to look-up all a user\u0026rsquo;s comments outside the context of a Blog.\nUpdate Migration to delete sub-resource when top-resource is deleted To create the rails equivalent of dependent_delete we change the migration to the following:\n# priv/repo/migrations/20200704161651_create_comments.exs # ... # replce # add :post_id, references(:posts, on_delete: :nothing) # add :user_id, references(:users, on_delete: :nothing) # with add :post_id, references(:posts, on_delete: :delete_all), null: false add :user_id, references(:users, on_delete: :delete_all), null: false # ...  Now we should be able to migrate:\nmix ecto.migrate  Testing Start simple with the seed file\nLets add a comment to our prebuild posts:\n# priv/repo/seeds.exs # ... # add the alias to keep things short alias FeenixIntro.Blogs.Comment # ... # this ensures all we have all the correct fields: Repo.insert!(%Comment{user_id: dog.id, post_id: post1.id, message: \u0026quot;woof\u0026quot; }) # this also checks the relationships post2 |\u0026gt; Ecto.build_assoc(:comments) |\u0026gt; Comment.changeset(%{user_id: dog.id, post_id: post2.id, message: \u0026quot;BARK\u0026quot; }) |\u0026gt; Repo.insert!()  Lets run the seed and see if all is working:\nmix run priv/repo/seeds.exs  Nice lets make a quick git snapshot before we work on the html aspects\ngit add . git commit -m \u0026quot;Comments added as a resource and relationship to Posts established\u0026quot;  Preload comments within get_post To show the comments within a post we will need to preload the comments \u0026ndash; this is done by adding Repo.preload(:comments) to our function: def get_post!(id) \u0026ndash; however, we will also want to display the comment\u0026rsquo;s author \u0026ndash; so we need to do a nested preload with: Repo.preload([comments: [:user]])\nSo now this function looks like:\n# lib/feenix_intro/blogs.ex def get_post!(id) do Post |\u0026gt; Repo.get!(id) |\u0026gt; Repo.preload(:user) |\u0026gt; Repo.preload([comments: [:user]]) end  This can actually be shortened to (this will be helpful later):\nlib/feenix_intro/blogs.ex def get_post!(id) do Post |\u0026gt; Repo.get!(id) |\u0026gt; Repo.preload([:user, comments: [:user]]) end  Display the comments within the Post show Now that we have updated the get_post! to preload comments we can display the comments too by adding to the end of our post\u0026rsquo;s - show template:\n# lib/feenix_intro_web/templates/post/show.html.eex # ... \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Comment Author\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Message\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;%= for comment \u0026lt;- @post.comments do %\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= comment.user.name %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= comment.message %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;span\u0026gt;\u0026lt;%= link \u0026quot;Edit\u0026quot;, to: Routes.post_path(@conn, :edit, @post) %\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;\u0026lt;%= link \u0026quot;Back\u0026quot;, to: Routes.post_path(@conn, :index) %\u0026gt;\u0026lt;/span\u0026gt;  Start the server mix phx.server and be sure this works\nAssuming it works, lets commit:\ngit add . git commit -m \u0026quot;display comments and comment author on post show page\u0026quot;  Creating Comments (as a nested resource) Since we have added comments within the Blogs context and they are associated with a post - it makes sense to create and display comments as a nested resource. To set this up lets change our routes file:\n# lib/feenix_intro_web/router.ex # ... scope \u0026quot;/\u0026quot;, FeenixIntroWeb do pipe_through :browser get \u0026quot;/\u0026quot;, PageController, :index resources \u0026quot;/users\u0026quot;, UserController # replace this line: # resources \u0026quot;/posts\u0026quot;, PostController # with: resources \u0026quot;/posts\u0026quot;, PostController do resources \u0026quot;/comments\u0026quot;, CommentController, only: [:create] end end # ...  This means we will be able to create a comment only within the context of an existing post (seems reasonable) \u0026ndash; more actions can be added later such as edit or delete possibly.\nThis also means we need to display our comments within the context of existing posts (the best place for this is the show - where all the details of the post are shown).\nLet\u0026rsquo;s create the controller we just defined - we will need to make a new file:\n# lib/feenix_intro_web/controllers/comment_controller.ex defmodule FeenixIntroWeb.CommentController do use FeenixIntroWeb, :controller alias FeenixIntro.Blogs def create(conn, %{\u0026quot;post_id\u0026quot; =\u0026gt; post_id, \u0026quot;comment\u0026quot; =\u0026gt; comment_params}) do # define the post we are nested within post = Blogs.get_post!(post_id) # create our new comment and handle (success or failure) case Blogs.create_comment(post, comment_params) do {:ok, _comment} -\u0026gt; conn |\u0026gt; put_flash(:info, \u0026quot;Comment created\u0026quot;) |\u0026gt; redirect(to: Routes.post_path(conn, :show, post)) # TODO: return to form and show errors {:error, _changeset} -\u0026gt; conn |\u0026gt; put_flash(:error, \u0026quot;Comment creation failed\u0026quot;) |\u0026gt; redirect(to: Routes.post_path(conn, :show, post)) end end end  Note: at the moment we don\u0026rsquo;t handle errors, and allow those to be fixed. We will get to that in a second step.\nWe need to update the function create_comment in order to work as a nested resource:\n# @doc \u0026quot;\u0026quot;\u0026quot; Creates a comment. ## Examples # also update our function docs # replace # iex\u0026gt; create_comment(%{field: value}) # with iex\u0026gt; create_comment(post, %{field: value}) {:ok, %Comment{}} # replace: # iex\u0026gt; create_comment(%{field: bad_value}) # with: iex\u0026gt; create_comment(post, %{field: bad_value}) {:error, %Ecto.Changeset{}} \u0026quot;\u0026quot;\u0026quot; # replace # def create_comment(attrs \\\\ %{}) do # %Comment{} # |\u0026gt; Comment.changeset(attrs) # |\u0026gt; Repo.insert() # end # with (this uses the passed in post and creates an association with the new comment) def create_comment(%Post{} = post, attrs \\\\ %{}) do post |\u0026gt; Ecto.build_assoc(:comments) |\u0026gt; Comment.changeset(attrs) |\u0026gt; Repo.insert() end  In order to create a new Comment form the show function will need to borrow from a typical new function and send and empty struct (changeset) for the form \u0026ndash; lets start by updating the PostController show function:\n# lib/feenix_intro_web/controllers/post_controller.ex # ... alias FeenixIntro.Blogs.Comment def show(conn, %{\u0026quot;id\u0026quot; =\u0026gt; id}) do post = Blogs.get_post!(id) users = Accounts.list_users() # replace: # render(conn, \u0026quot;show.html\u0026quot;, post: post, users: users) # with: This allows us to add comments on the Post show form! comment_changeset = Blogs.change_comment(%Comment{}) render(conn, \u0026quot;show.html\u0026quot;, post: post, users: users, comment_changeset: comment_changeset) end  Now that we have an empty changeset for the form - we can add the form to the show page with:\n# lib/feenix_intro_web/templates/post/show.html.eex # ... \u0026lt;h3\u0026gt;Add a Comment\u0026lt;/h3\u0026gt; \u0026lt;%= form_for @comment_changeset, Routes.post_comment_path(@conn, :create, @post), fn form -\u0026gt; %\u0026gt; \u0026lt;%= label form, \u0026quot;Author\u0026quot; %\u0026gt; \u0026lt;%= select form, :user_id, Enum.map(@users, \u0026amp;{\u0026amp;1.name, \u0026amp;1.id}) %\u0026gt; \u0026lt;%= error_tag form, :user %\u0026gt; \u0026lt;%= label form, :message %\u0026gt; \u0026lt;%= textarea form, :message %\u0026gt; \u0026lt;%= error_tag form, :message %\u0026gt; \u0026lt;div\u0026gt; \u0026lt;%= submit \u0026quot;Save\u0026quot;%\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; # ...  Let\u0026rsquo;s try this out with: mix phx.server\nassuming all works as expected let\u0026rsquo;s make another git commit:\ngit add . git commit -m \u0026quot;comment creation as a nested resource within posts\u0026quot;  Handle Input Errors Prevent empty strings:\n https://stackoverflow.com/questions/32784008/phoenix-render-template-of-other-folder  lets add a minimum message legth to comments:\n# lib/feenix_intro/blogs/comment.ex def changeset(comment, attrs) do comment |\u0026gt; cast(attrs, @required_fields) |\u0026gt; validate_required(@required_fields) |\u0026gt; validate_length(:message, min: 3) end  Now, change the controller to prep the data just like a post show and send the changeset - with the errors. |\u0026gt; put_view(FeenixIntroWeb.PostView) is how we redirect to other external views as of Phoenix 1.5.1:\n# lib/feenix_intro_web/controllers/comment_controller.ex # add the alias alias FeenixIntro.Accounts # ... def create(conn, %{\u0026quot;post_id\u0026quot; =\u0026gt; post_id, \u0026quot;comment\u0026quot; =\u0026gt; comment_params}) do # ... # replace: # {:error, _changeset} -\u0026gt; # conn # |\u0026gt; put_flash(:error, \u0026quot;Comment creation failed, please fix the errors\u0026quot;) # |\u0026gt; redirect(to: Routes.post_path(conn, :show, post)) # with: {:error, %Ecto.Changeset{} = changeset} -\u0026gt; users = Accounts.list_users() conn |\u0026gt; put_flash(:error, \u0026quot;Comment creation failed, please fix the errors\u0026quot;) |\u0026gt; put_view(FeenixIntroWeb.PostView) # as of Phoenix 1.5.1 |\u0026gt; render(\u0026quot;show.html\u0026quot;, post: post, users: users, comment_changeset: changeset) # ...  Assuming this works make a new git commit:\ngit add . git commit -m \u0026quot;handle comment creation errors\u0026quot;  Flexible preloading You may have noticed the pre-loading is hard-coded \u0026ndash; in this case it is ok, but might not always be good. Here is a flexible alternative:\nWe can update / replace the following functions with the following:\n# lib/feenix_intro/blogs.ex def list_posts(opts \\\\ [:user]) do preloads = Keyword.get(opts, :preloads, []) Post |\u0026gt; Repo.all() |\u0026gt; Repo.preload(preloads) end def get_post!(id, opts \\\\ [:user, comments: [:user]]) do preloads = Keyword.get(opts, :preloads, []) Post |\u0026gt; Repo.get!(id) |\u0026gt; Repo.preload(preloads) end def get_comment!(id, opts \\\\ [:user]) do preloads = Keyword.get(opts, :preloads, []) Comment |\u0026gt; Repo.get!(id) |\u0026gt; Repo.preload(preloads) end  And now we can change our show post controller to look like - so that we can use this flexibility:\n# lib/feenix_intro_web/controllers/post_controller.ex # ... def index(conn, _params) do # posts = Blogs.list_posts() preloads = [:user] posts = Blogs.list_posts(preloads: preloads) render(conn, \u0026quot;index.html\u0026quot;, posts: posts) end def new(conn, _params) do users = Accounts.list_users() changeset = Blogs.change_post(%Post{}) render(conn, \u0026quot;new.html\u0026quot;, changeset: changeset, users: users) end # ... def show(conn, %{\u0026quot;id\u0026quot; =\u0026gt; id}) do # post = Blogs.get_post!(id) preloads = [:user, comments: [:user]] post = Blogs.get_post!(id, preloads: preloads) users = Accounts.list_users() # This allows us to add comments on the Post show form! comment_changeset = Blogs.change_comment(%Comment{}) render(conn, \u0026quot;show.html\u0026quot;, post: post, users: users, comment_changeset: comment_changeset) end  Now we have the flexibilty to preload or not depending on what we want to do,\n","date":1594367031,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594367031,"objectID":"96d475de459c9fb584327c37f120dee2","permalink":"https://btihen.me/post_elixir_phoenix/phoenix_1_5_blog_w_comments/","publishdate":"2020-07-10T09:43:51+02:00","relpermalink":"/post_elixir_phoenix/phoenix_1_5_blog_w_comments/","section":"post_elixir_phoenix","summary":"Exploring more nested Reources with Phoenix","tags":["Relationships","Templates","Nested Preloading","Nested Resources","Render Foriegn Views","User Error Handling"],"title":"Phoenix 1.5 Blog with Comments","type":"post_elixir_phoenix"},{"authors":["Bill Tihen"],"categories":["Code","Phoenix","Elixir"],"content":"Purpose This article creates a basic web application backed by a database and creates a few relationships. I\u0026rsquo;ll use the mix generator commands to make this process quick and easy. In step two we will add a graphql api.\nTopics Covered  create a project create a resource dropdown list of a collection pre-load/display sub-reources create a has_many relationship create a belongs_to relationship delete has_many sub-resources when top resource is deleted  Getting Started - create an app find the most recent phoenix version: https://github.com/phoenixframework/phoenix/releases\nmix archive.install hex phx_new 1.5.3 mix phx.new feenix_intro cd feenix_intro mix ecto.create  test with: mix phx.server and go to http://localhost:4000\nIdeally you see a the Phoenix Start Page.\nLet\u0026rsquo;s create a git snapshot\ngit init \u0026amp;\u0026amp; git add -A \u0026amp;\u0026amp; git commit -m \u0026quot;init\u0026quot;  Create Contexts Context helps us create areas of code isolation and creates an API for other contexts to use\nIn our case we will need a Blogs and Accounts (better would have been Authors) context\nBlogs will have the posts and comments and Accounts will have the user and login credentials and user relationships (why not)? To see the full documentation on Contexts see: https://hexdocs.pm/phoenix/contexts.html\nWe will generate two resources and Contexts (and add more later) - lets start with users who will post their blogs (users will be within the Accounts context and posts will be within the Blogs context):\nmix phx.gen.html Accounts User users name:string email:string username:string:unique mix phx.gen.html Blogs Post posts title:string body:text user_id:references:users  Notice we can generate unique fields with :unique\nAnd we can generate relationships (foriegn keys) with references\nNow that we have generated our code - we need to make a few updates:\nFirst: we need to update our routes in the scope area to look like:\n# lib/ideas_web/router.ex scope \u0026quot;/\u0026quot;, FeenixIntroWeb do pipe_through :browser get \u0026quot;/\u0026quot;, PageController, :index resources \u0026quot;/users\u0026quot;, UserController resources \u0026quot;/posts\u0026quot;, PostController end  NOTE: the API\u0026rsquo;s for our Contexts Accounts and Blogs is in lib/feenix_intro/accounts.ex and lib/feenix_intro/blogs/post.ex respectively - as we add more info into these contexts these files will get long! Ideally you will always interact with the Context API and not the Repo directly this will help create much more managable code.\nDefine the has_many relationship Before we migrate we need to define the relationships:\nso we update the users with a has_many relationship to posts\n# lib/feenix_intro/accounts/user.ex defmodule FeenixIntro.Accounts.User do use Ecto.Schema import Ecto.Changeset alias FeenixIntro.Blogs.Post @required_fields [:name, :email, :username] schema \u0026quot;users\u0026quot; do has_many(:posts, Post) field :name, :string field :email, :string field :username, :string timestamps() end @doc false def changeset(user, attrs) do user |\u0026gt; cast(attrs, @required_fields) |\u0026gt; validate_required(@required_fields) |\u0026gt; unique_constraint(:username) end end  If you skip the alias, then has_many needs to be written as: has_many(:posts, FeenixIntro.Blogs.Post)\nDefine the belongs_to relationship IMPORTANT: replace the field :user_id, :id with belongs_to(:user, User) \u0026ndash; you CAN\u0026rsquo;T have both!\n# lib/feenix_intro/blogs/post.ex defmodule FeenixIntro.Blogs.Post do use Ecto.Schema import Ecto.Changeset alias FeenixIntro.Blogs.Post alias FeenixIntro.Accounts.User @required_fields [:user_id, :title, :body] schema \u0026quot;posts\u0026quot; do belongs_to(:user, User) # field :user_id, :id field :body, :string field :title, :string timestamps() end @doc false def changeset(post, attrs) do post |\u0026gt; cast(attrs, @required_fields) |\u0026gt; validate_required(@required_fields) end end  NOTE: @required_fields [:user_id, :title, :body] isn\u0026rsquo;t required, but as things change defining a constant that can be reused can be convient.\nAuto delete sub-resources To be sure we don\u0026rsquo;t have unreferenced blogs if a user gets deleted we need to change our Blog migration to:\n# priv/repo/migrations/20200704152318_create_posts.exs defmodule FeenixIntro.Repo.Migrations.CreatePosts do use Ecto.Migration def change do create table(:posts) do add :title, :string add :body, :text # remove the default # add :user_id, references(:users, on_delete: :nothing) # add the following to auto delete posts if user is deleted! add :user_id, references(:users, on_delete: :delete_all), null: false timestamps() end create index(:posts, [:user_id]) end end  Now it should be safe to migrate using:\nmix ecto.migrate  Seed Data Let\u0026rsquo;s create seed data so that one we know how to do that and two have some data to test before we get all our views and forms working:\n# priv/repo/seeds.exs # Script for populating the database. You can run it as: # # mix run priv/repo/seeds.exs # # We recommend using the bang functions (`insert!`, `update!` # and so on) as they will fail if something goes wrong. alias FeenixIntro.Repo alias FeenixIntro.Blogs.Post alias FeenixIntro.Accounts.User # reset the datastore Repo.delete_all(User) # this should also delete all Posts # insert people me = Repo.insert!(%User{ name: \u0026quot;Bill\u0026quot;, email: \u0026quot;bill@example.com\u0026quot;, username: \u0026quot;bill\u0026quot; }) dog = Repo.insert!(%User{ name: \u0026quot;Nyima\u0026quot;, email: \u0026quot;nyima@example.com\u0026quot;, username: \u0026quot;nyima\u0026quot; }) Repo.insert!(%Post{ user_id: me.id, title: \u0026quot;Elixir\u0026quot;, body: \u0026quot;Very cool ideas\u0026quot; }) Repo.insert!(%Post{ user_id: me.id, title: \u0026quot;Phoenix\u0026quot;, body: \u0026quot;live is fascinating\u0026quot; }) Repo.insert!(%Post{ user_id: dog.id, title: \u0026quot;Walk\u0026quot;, body: \u0026quot;oh cool\u0026quot; }) Repo.insert!(%Post{ user_id: dog.id, title: \u0026quot;Dinner\u0026quot;, body: \u0026quot;YES!\u0026quot; })  now as the comments state run:\nmix run priv/repo/seeds.exs  Testing run:\nmix phx.server # or if you prefer: # iex -S mix phx.server  Test USERS:\nGo to: http://localhost:4000/users\nwhen we list users and create users - all is well\nTEST POSTS\nGo to: http://localhost:4000/posts\nwhen we do the same withe posts - we get an error creating new posts and we don\u0026rsquo;t see the author in index and show\n we can\u0026rsquo;t create a post since we required the user_id and there is not field for that we can\u0026rsquo;t list the author\u0026rsquo;s name (just the author\u0026rsquo;s ID) until we preload the author along with the post  Fix Post creation with a dropdown list of resources Normally, this would be done with session info to autoselect the authenticated author, but that is for another day. In this case, we will demonstrate how to load and pass a collection and use that to populate a dropdown entry.\nIn the controller we must load users and add the user_id to the post form: whe we look in the Accounts API we see: list_users()\n# lib/feenix_intro_web/controllers/post_controller.ex # ... # add the accounts context alias alias FeenixIntro.Accounts # ... def new(conn, _params) do changeset = Blogs.change_post(%Post{}) # replace: # render(conn, \u0026quot;new.html\u0026quot;, changeset: changeset) # with: # collection of users for post form users = Accounts.list_users() # include the collection of users to the new form render(conn, \u0026quot;new.html\u0026quot;, changeset: changeset, users: users) end # ... def edit(conn, %{\u0026quot;id\u0026quot; =\u0026gt; id}) do post = Blogs.get_post!(id) changeset = Blogs.change_post(post) # replace: render(conn, \u0026quot;edit.html\u0026quot;, post: post, changeset: changeset) # with: users = Accounts.list_users() render(conn, \u0026quot;edit.html\u0026quot;, post: post, changeset: changeset, users: users) end # ...  Now we need to adapt the form to give us a choice of users:\n# lib/feenix_intro_web/templates/post/form.html.eex \u0026lt;%= form_for @changeset, @action, fn f -\u0026gt; %\u0026gt; \u0026lt;%= if @changeset.action do %\u0026gt; \u0026lt;div class=\u0026quot;alert alert-danger\u0026quot;\u0026gt; \u0026lt;p\u0026gt;Oops, something went wrong! Please check the errors below.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% end %\u0026gt; \u0026lt;%= label f, \u0026quot;Author\u0026quot; %\u0026gt; \u0026lt;%= select f, :user_id, Enum.map(@users, \u0026amp;{\u0026amp;1.name, \u0026amp;1.id}) %\u0026gt; \u0026lt;%= error_tag f, :user %\u0026gt; # ...  Assuming you can create posts now, lets make another git snapshot:\ngit add . git commit -m \u0026quot;users and posts resources can be created\u0026quot;  Display the Author of Post (with Preloads) lets display the Blog author - that\u0026rsquo;s often interesting to others. We can do this with preloading in our Blog context:\n# lib/feenix_intro/blogs.ex # change this line: # def list_posts, do: Repo.all(Post) def list_posts do Post |\u0026gt; Repo.all() |\u0026gt; Repo.preload(:user) end  and also our get_post\n# lib/feenix_intro/blogs.ex # change: # def get_post!(id), do: Repo.get!(Post, id) # into: def get_post!(id) do Post |\u0026gt; Repo.get!(id) |\u0026gt; Repo.preload(:user) end  now we can update our index and show page to display the author\u0026rsquo;s name at the top of the page:\n# lib/feenix_intro_web/templates/post/show.html.eex \u0026lt;h1\u0026gt;Show Post\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;strong\u0026gt;Author:\u0026lt;/strong\u0026gt; \u0026lt;%= @post.user.name %\u0026gt; \u0026lt;/li\u0026gt;  and in the index too:\n# lib/feenix_intro_web/templates/post/index.html.eex # ... \u0026lt;%= for post \u0026lt;- @posts do %\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= post.user.name %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= post.title %\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%= post.body %\u0026gt;\u0026lt;/td\u0026gt; # ...  Assuming authors and preload works properly, we can make another git snapshot:\ngit add . git commit -m \u0026quot;authors names are displayed now with preloading\u0026quot;  Source code https://github.com/btihen/PhoenixIntro\nHelpful Resources used:  https://elixircasts.io/phoenix-contexts https://github.com/conradwt/zero-to-graphql-using-phoenix https://medium.com/@damonvjanis/ecto-preloads-in-phoenix-contexts-167d11e5405e https://dev.to/joseph_lozano/setting-up-a-new-phoenix-1-5-project-with-phoenix-liveview-309n https://medium.com/velotio-perspectives/creating-graphql-apis-using-elixir-phoenix-and-absinthe-486ff38f2549  ","date":1593860789,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594033589,"objectID":"0113a5ddc6ddb51bae65adc96da9274d","permalink":"https://btihen.me/post_elixir_phoenix/phoenix_1_5_blog_intro/","publishdate":"2020-07-04T13:06:29+02:00","relpermalink":"/post_elixir_phoenix/phoenix_1_5_blog_intro/","section":"post_elixir_phoenix","summary":"This article covers how to create a new app with contexts, relationships, preloading, etc.  The basics for most dynamic websites (excluding authentication). Comming later.","tags":["Relationships","Templates","Preloading","has_many","belongs_to","dependent delete","selection in form"],"title":"Phoenix 1.5 Blog Intro","type":"post_elixir_phoenix"},{"authors":["Bill Tihen"],"categories":["Education","Classroom","EDgile","Practice"],"content":"Good learning projects (quite possibly all interesting projects), must have the right amount of complexity and built-in imperfections due to design trade-offs and compromises. This ensures that projects aren’t google-able AND are challenging enough to encourage real learning. I like to think that “challenging enough” ensures that students experience a sense of the “hero’s journey” while working on their projects and then when they are successful they will have a sense of pride in what they learned and accomplished.\nThis level of complexity has two side effects that are common in the real world, but uncommon in education:\n how to arrive at the best solution is unknown and uncertain (by even the teacher) and will require exploration - quite possibly there is more than one workable solution; and the process of exploring to find a workable solution will involve what is commonly called the dreaded deadend or, in my field of tech, going down the rabbit hole. Unfortunately, this is often seen as a problem - not knowing and not understanding is, after all, what schools set out to correct. Allowing students to head in the wrong direction, especially since many people value efficiency (for example, discovering the fastest way to learn), can seem wrong-headed, but schools in theory should value worthwhile learning as their top priority, not speed.  Ideally, as students work, they self-assess, self-reflect, and self-correct their own work. It is, unfortunately, very common that we as teachers correct students and we as teachers tell them not only what to rework, and how to do it. This may be efficient at getting certain results - for example, completed projects. However, I question if that is valuable learning. When we judge student work, students learn to work toward the approval found in a grade, which alters learning. Additionally, when we tell students what to do, they don’t learn to self-regulate and self-motivate their own learning processes.\nOn the other hand, when students can engage in deliberate practice (where they self-assess, self-reflect, self-correct, and choose to redo until they themselves are satisfied), then students not only learn the classroom curriculum, but also lifeworthy skills, including: problem solving skills, balancing competing design needs, grit (stick-to-it-ive-ness), self-directed learning, and the joy of learning and discovery. In this way, students are much more likely to become life-long learners.\nTo ensure that students learn the process of deliberate practice, it is important to create a classroom environment where it is straightforward for students to be able to self-assess. I have found the best way to do this is to use \u0026lsquo;natural\u0026rsquo; assessments. At least in the world of code, engineering, and physics, this is pretty straightforward. Make rubrics in which the students can test themselves, e.g. in a class making boats, the rubric will ask if it floats with a payload, say a large coin. For areas where natural assessment isn’t as easy, I teach the kids how to get (and give) each other helpful feedback (described in a later article). In this way, students are helping each other, learning from each other, and in the end self-assessing what to do with the feedback. They are no longer as reliant on the teacher.\nThe beauty of letting students learn this way, when there is safety to explore (\u0026amp; make mistakes), is that the students often enjoy the learning, gain self-confidence, and possibly learn the JOY of learning. If this joy of learning becomes commonplace in education, we are very likely to have many more joyful, lifelong learners and innovators.\n","date":1593349282,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1592312482,"objectID":"c068b7a3d4c13a81938298cffeae45ac","permalink":"https://btihen.me/post_edu/edgility_btihen_rework/","publishdate":"2020-06-28T15:01:22+02:00","relpermalink":"/post_edu/edgility_btihen_rework/","section":"post_edu","summary":"Complex projects provide the opportunity to explore and learn what does and doesn’t work. Understanding what doesn’t work and adjusting (redoing) work can often lead to tremendous learning. The caveat is that teachers must create a safe environment, without judgement, which creates space for 'mistakes' and 'rework.'","tags":["deliberate practice","self-assess","self-reflect","self-Correct","joy","explore"],"title":"Rework through Deliberate Practice","type":"post_edu"},{"authors":["Bill Tihen"],"categories":["Education","EDgile","Practice","Classroom"],"content":"Fun and a sense of adventure can be crucial to classroom engagement and learning. Cultivating a sense of adventure is similar to encouraging an atmosphere of playfulness and joy of learning. This can be quite straightforward when students are allowed to create their own goals and their own context for the goals within the curriculum. Of course, any good adventure can’t be too easy. It’s the teacher’s job to make sure a project has no obvious, googleable answer.\nWe might worry that making the project hard and beyond what the students know how to do could be unfair or even unjust. This might be true. When students are used to the mindset of getting things right the first time, it is difficult for them to take an idea and ‘play’ with it until something works. This adjustment takes some time, but once they get the hang of it, students enjoy exploring and they learn quickly.\nPersonally, I most enjoy observing how students learn resilience through ‘playing’ with ideas and trying different options until they find a solution. In fact, in today’s world it may be more important to learn resilience, persistence, and finding the next small workable step in order to progress toward a goal.\nOf course creating an environment where exploration can thrive requires not doing a few things, too - such as:\n Not judging or criticizing mistakes or rework Not judging the work or its qualities, instead let the kids cultivate their own pride and ownership (the minimum quality tests need clear, objective and observable) Not celebrating the answers, but celebrating the exploratory and learning aspects. Not requiring that every student have the same depth of knowledge in each part of the project. It\u0026rsquo;s important to define baseline knowledge they all need to have - but after that they need to be free to explore more deeply what the student finds interesting.  To encourage exploration we have found that the following the guidance for a growth mindset is very helpful:\n Praise the grit and perseverance of arriving at a workable solution; Cultivate the mindset of finding the next workable thing to try, even when there is no clear path to the goal; and Encourage / expect (maybe even require) rework and changes.  On a practical note, it is important to create projects that are complex and have some built-in conflict that requires balancing and tradeoffs. This is important for several reasons:\n Without trade-offs, a problem isn’t realistic and can be too easily googled. The problem must be challenging enough or it isn’t engaging (but it needs to be workable). Having to resolve a conflict or resolve tradeoffs and still arrive at one\u0026rsquo;s goals requires students to really go into depth and learn that aspect extra well.   NOTE: In the world of engineering, it is important to have a solid generalist understanding of the field (like the basic required information tested at school), but that is rarely enough for most teams. It is important to be a specialist in at least one area of interest \u0026ndash; these are called ‘T’ shaped engineers - engineers that have gone deep into two areas are even more valuable and are called ‘π’ shaped engineers. I’m advocating for creating projects (and classroom environments) in school that cultivate the same generalist / specialist mindset that is often expected in graduate school and professional lives. Art curriculums have long taught the core skills and ideas and then expected students to explore and expand upon their interests. Imagine how engaging education could be when all aspects of schools encouraged choice and exploration.\n Teaching this way can be uncomfortable for teachers who may traditionally have felt that they need to operate as the expert who knows everything. To model the idea, however, that you don’t have to know everything, it is actually helpful not to know everything. In fact, you cannot give students a quick answer, which cuts off their chance to think through the problem, and instead you explore with the students and model how to learn and resolve difficult problems. The teacher must simply understand the basics and vocabulary of the field to help students interpret what they find. Of course the teacher must also be comfortable modeling exploring the unknown with the kids.\n","date":1591023436,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1592319436,"objectID":"b1753ec699cf1f57f6ef94213d26782a","permalink":"https://btihen.me/post_edu/edgility_btihen_exploration/","publishdate":"2020-06-01T16:57:16+02:00","relpermalink":"/post_edu/edgility_btihen_exploration/","section":"post_edu","summary":"When students are trusted to explore and know that mistakes are ok, learning becomes fun and engaging. Exploration builds on student interests so they learn the basics naturally - and even specialize on aspects of particular interest to them.","tags":["exploration","trust","adventure","joy","engagement","student choice"],"title":"Exploration in the Classroom","type":"post_edu"},{"authors":["Bill Tihen"],"categories":["Website"],"content":"step 0: buy a domain name For these instructions use the (Namecheap)[https://www.namecheap.com/] service to buy your Domain.\nstep 1: point your domain name at: username.github.io (optional) This takes quite a steps and disables https (more steps follow to renable ssl). This article got me oriented: https://dev.to/rightfrombasics/connecting-namecheap-domain-with-github-pages-3nn6\n log into Namecheap On the left is a sidebar with Dashboard and the top. Click on the Domain List Find your domain name and click the manage button on the far right. Along the top click on Advanced DNS Add your A records to the DNS config. I typed: dig btihen.github.io (of course replace with your github website name) and got:  ; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.10.6 \u0026lt;\u0026lt;\u0026gt;\u0026gt; btihen.github.io ;; global options: +cmd ;; Got answer: ;; -\u0026gt;\u0026gt;HEADER\u0026lt;\u0026lt;- opcode: QUERY, status: NOERROR, id: 28239 ;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 512 ;; QUESTION SECTION: ;btihen.github.io.\tIN\tA ;; ANSWER SECTION: btihen.github.io.\t3600\tIN\tA\t185.199.110.153 btihen.github.io.\t3600\tIN\tA\t185.199.109.153 btihen.github.io.\t3600\tIN\tA\t185.199.108.153 btihen.github.io.\t3600\tIN\tA\t185.199.111.153  So created the following A Records:\ntype Host Value TTL A Record @ 185.199.110.153 Automatic A Record @ 185.199.109.153 Automatic A Record @ 185.199.108.153 Automatic A Record @ 185.199.111.153 Automatic  Then I created a CNAME record:  type Host Value TTL CNAME Record www btihen.github.io Automatic  step 2: configure you github site to accept the domain You need to make a file called CNAME in the root of your username.github.io repo and it contents must be your new domain name.\nFor example I used:\ncd public touch CNAME echo 'btihen.me' \u0026gt;\u0026gt; CNAME git add . git commit -m 'accept the domain name: btihen.me' git push  step 3: stop and check NOW: http://your-domain-name.com should work\nstep 4: Free ssl for the domain following the advice from: https://dev.to/rightfrombasics/adding-ssl-to-your-site-free-1fa7\n create a cloudflare account. choose the dns feature allow cloudflare to scan your dns records (it should get the same results as when you do: dig username.github.io) Continue through the cloudflare process \u0026amp; cloudflare will eventually give you 2 nameservers to use. Now you can have cloudflare take over your dns \u0026ndash; log into Namecheap On the left is a sidebar with Dashboard and the top. Click on the Domain List Find your domain name and click the manage button on the far right. On the top bar choose Domain Find the Nameservers section Choose Custom DNS Add the tow servers given to you by Cloudflare and save. Go back to cloudflare and choose Full end to end encryption Choose Always Use HTTPS Save and click the Re-check now button.  Unfortunately, now you need to wait for a 1/2 hour or morefor the dns service to transfer from Namecheap to Cloudflare. Theoretically up to 48 hours (but a 1/2 hour is much more typical).\n","date":1590924168,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590924168,"objectID":"5a9643f1b22265ac240f8c4cd71f5b10","permalink":"https://btihen.me/post_tech_notes/github_website_with_custom_domain/","publishdate":"2020-05-31T13:22:48+02:00","relpermalink":"/post_tech_notes/github_website_with_custom_domain/","section":"post_tech_notes","summary":"step 0: buy a domain name For these instructions use the (Namecheap)[https://www.namecheap.com/] service to buy your Domain.\nstep 1: point your domain name at: username.github.io (optional) This takes quite a steps and disables https (more steps follow to renable ssl).","tags":["website","ssl","domain","github","cloudflare","namecheap"],"title":"Github Website with a Custom Domain \u0026 SSL","type":"post_tech_notes"},{"authors":["Bill Tihen"],"categories":["Education"],"content":"Basically a mix of having the kids build on their strengths, exploring the doing project based with and goal and within a context of the student\u0026rsquo;s choice. The project-work uses many agile processes*, one step outside their knowledge/comfort,\n Agility in this context means small-teams that work with small aspects of a bigger objective and build their knowledge / project iteratively and reflect (on demo suggestions (feedback) AND their own learning process) to inform the next iteration and enjoy the exploration of knowledge.  Teacher\u0026rsquo;s Responsibilities \u0026amp; Activities  UPLIFT BUILD SUCCESS AND CONFIDENCE \u0026ndash; I personally like to borrow from the concept of the Hero\u0026rsquo;s Journey - Help the student have a context and need to learn \u0026amp; apply knowledge to the point where they can SOLVE A COMPLEX CHALLENGE to meet the goal within the context of the learning objectives of the class (or unit). Uplifted Atmosphere - guide kids to encourage strengths   re-enforce activities that builds the student\u0026rsquo;s confidence and joy in learning re-direct distracting /destructive activities toward helpful actions exploration create an atmosphere where learning can be fun, meaningful and exploratory (like young kids) and not stressful and time-based  Natural Assessment \u0026amp; Motivation - whenever possible \u0026amp; allowed - I avoid grading, assessing and correcting students. Instead, I encourage nature assessments and motivation. For example, while building boats, have a pool and criteria for \u0026ldquo;tracking\u0026rdquo;, \u0026ldquo;load\u0026rdquo;, etc. and have the students test the boat in the pool - where everyone can see and test the qualities. To that end, I find it very helpful if the students work will be publicly viewed and seen by others - preferably with the students present to \u0026ldquo;show\u0026rdquo; their product \u0026amp; experience the pride (or embarrassment in their work). That\u0026rsquo;s often much more ownership than a grade. If a state or other external final exam like an AP test is part of the course \u0026ndash; then I suggest after covering the material in the project based way \u0026ndash; then spend the last part of the class doing practice exams until the students are comfortable with the exam aspects of the knowledge. This mixed approach has been very successful in teaching AP Computer Science (nearly all students received the top score 19 of 20 students). Teaching Activities - guide kids to learn the materials (rarely instruct)   guide students to other students who can help them help the students smallify their work to find something they can research \u0026amp; solve (the next doable step just beyond their skill-level) help the students with keywords, concepts and vocabulary to do the research for their next step help the students understand and interpret their research they found but don\u0026rsquo;t fully understand help the students apply their research they\u0026rsquo;ve understood conceptually, but unsure how to implement  Student\u0026rsquo;s Responsibilities \u0026amp; Activities  Choice - of goals and context within the context of the learning objectives of the class (or unit). For example to teach middle school students 3-D Analytical Geometry \u0026amp; Fluid Dynamics - students create companies and design a boat of their choice (and print versions of it as they refine it). Each boat will need a specialty with a specialty (stability, comfort for people, speed, tracking, efficiency, load, \u0026hellip;) and can overcome some adversity (wind, waves, currents, \u0026hellip;) Context - students need to create a context they own for their chosen goal. This means creating a story (an explanation / real or imagined) for the importance of their chosen goal. For example when teaching Earth Sciences students could choose to make an Earthquake alarm system to help people in stay safe. To that end they also have to consider the consequences of their system if people rely on it - and choose at least one failure condition they can mitigate. Natural Assessment - Students need to learn to take ownership for tracking their own knowledge, resources and quality. To that end, I avoid personally telling them what to correct, instead they need to get peer-reviews, do demos and get feedback from others and assess their work against their stated goals. To that end I almost always require a public display of their work with them present. Either a presentation or demos where people come by and they demo / explain their work. I also have them practice within the class with each other - where they can see the quality and ideas of others with enough time to adjust their own work to meet their own standards or pride and avoid a sense of embarrassment (or not). Demos \u0026amp; Constructive Feedback - ideally I have the kids have a project journal and demo notes and reflections need to be recorded   Demos are IMPORTANT - putting students in the learners driver seat. Students need to learn to get / ask for (pull) their feedback to assess and adjust the quality and progress of their work (with help from the Natural Assessment as a reality check \u0026ndash; not the teacher - \u0026lsquo;What does the water say?') Students must learn to give \u0026amp; hear \u0026amp; accept feedback in their work. To that end there are 4 rules to make this work - with more experience these can be loosened some:  plan what and how to present the demo (\u0026amp; what the feedback might be - both likes and changes) present the demo \u0026amp; receiving feedback - listen \u0026amp; take notes (no challenges - keep it safe to give feedback, further explanations or clarifications of misunderstandings - simply note ones reaction and reflect on how to improve the demo - theres no problem with doing a second demo with another group if the first group didn\u0026rsquo;t understand). Giving Feedback - includes two aspects:   what is liked and how that matches what is understood about the group\u0026rsquo;s goals what they think would make the work even better (if something should change then is needs to be worded as - \u0026ldquo;I like this \u0026lsquo;pointy bow\u0026rsquo; and think it would be even better with a rounded bow\u0026rdquo;) - constructive and positive feedback (this takes practice \u0026ndash; kids (and teachers) are not well versed in \u0026ldquo;Pixar\u0026rsquo;s yes and \u0026hellip;\u0026quot; feedback process  using a suggestion each project must accept at least ONE suggestion from another group (and credit them) and explain how they made the suggestion their own and integrated it into the project. Without this - they cannot submit the project (its incomplete)!    Exploration - kids should learn to enjoy learning   DO VERY little direct instruction (if any) - have the kids explore until they get a bit stuck (but don\u0026rsquo;t make them beg for help, just be patient and help them get unstuck - DON\u0026rsquo;T TELL THEM SOLUTIONS) learning need to change (as much as possible) from an external \u0026ldquo;death march\u0026rdquo; pushed by the curriculum, but instead turned into a lean pull system by the students own needs, interests and desire to fulfill their own chosen goals within their chosen context. ideally students track what they research and learn in the project journal. Then all kids on the team have access to all the info (\u0026amp; is responsible to know what is known by others on the team - that is the homework - to know what others have done and be aware and understand it). Occasionally, I look at the journal and ask other kids in the group to explain what another has researched and if the kids doesn\u0026rsquo;t know the material then the \u0026lsquo;researcher\u0026rsquo; is responsible to ensure the others on team \u0026lsquo;catch up\u0026rsquo;  Path - The Hero\u0026rsquo;s Journey \u0026amp; Smallify - initially students are unfamilier with solving big complex problems without one clear \u0026lsquo;Googable\u0026rsquo; answer   smallify - students need to learn to find the next workable step just beyond their knowledge \u0026ndash; but doable (initially kids need help with this!) small enough - where its easy to have false starts, make lots of changes and explore and after feedback \u0026ndash; make changes without being upset at the invested time. Small enough means that it is fun to explore and make changes! Hero\u0026rsquo;s Journey - each project needs to involve complexity (that has no one right solution) but involves a complex compromise to arrive at one\u0026rsquo;s goals. This helps the students really learn the depth of the material and the compromises needed to accomplish their goals. (there have been recent studies showing that people only fully understand a topic and its related implications when they go through process of exploring complex compromises)  Reflection \u0026amp; Change   another form of reflection - done ideally daily, they asses their progress (initially I like to review their burn-down on their way out at the end of class with them and help them reflect on and verbalize what skills they are using to make progress \u0026amp; contemplate if its possible to build even more on those strengths and to reflect on whats hinder them (\u0026amp; see if they can replace that activity with something more helpful). Over time I like to encourage the kid to just update me their progress and reflections on their way out of class. students need to get regular feedback on each phase of their work (ideally at least weekly) \u0026amp; at some point each group\u0026rsquo;s project must have at least on change inspired by feedback from another group or individual outside their group - and credit that person / group. Even if \u0026amp; in-fact ideally - they take the idea and adapt it to their needs needs and goals.  ","date":1590326205,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590326205,"objectID":"912cc76cee3a14100a7070238e98e326","permalink":"https://btihen.me/post_edu/explore_uplift_reflect/","publishdate":"2020-05-24T15:16:45+02:00","relpermalink":"/post_edu/explore_uplift_reflect/","section":"post_edu","summary":"There are a few keys to engaging students while learning and enjoying their own worth as a person and learner.  While learning required materials -- within a context important to the student.","tags":["agile","explore","choice","differentiated","reflect","retrospective","uplift"],"title":"Explore, Uplift and Reflect","type":"post_edu"},{"authors":["Bill Tihen"],"categories":["code"],"content":"From the Academic Documentation https://sourcethemes.com/academic/docs/managing-content\nCreate a User hugo new --kind authors authors/firstname_lastname  add person\u0026rsquo;s image (png or jpg)\ncp picture.jpg content/authors/firstname_lastname/avatar.jpg  Create a Blog hugo new --kind post post/blog_title  images within the article - add images to the article folder:\ncp image.jpg content/post/blog_title/article_image.jpg  and add it to the content using: ![kanban](example.jpg) within the article\nadd a display image (png or jpg)\ncp picture.jpg content/post/blog_title/featured.jpg  Add a Publication Reference hugo new --kind publication publication/publication_title  add a display image (png or jpg)\ncp picture.jpg content/publication/publication_title/featured.jpg  add a pdf (with the same name as the folder) and it will be automatically available\ncp picture.pdf content/publication/publication_title/publication_title.pdf  Create a Project hugo new --kind project project/project_name  add a display image (png or jpg)\ncp picture.jpg content/project/project_name/featured.jpg  Create a Talk hugo new --kind talk talk/my-talk-name  Talk Slides are a bit more complicated see: https://sourcethemes.com/academic/docs/managing-content/#create-slides\nCourse (Documentation) This is tricky (copy and rename an existing course and adapt it)\ncourses can be renamed and can have multiple folders (courses) within it.\nNOTE: the algebra_1 folder cannot have any sub-folders. Within an actual course all materials must be within a FLAT hierarchy.\n","date":1590223161,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590223161,"objectID":"864b5f806977e2e7169a9339e77e8e44","permalink":"https://btihen.me/post_tech_notes/hugo_academic_cheatsheet/","publishdate":"2020-05-23T10:39:21+02:00","relpermalink":"/post_tech_notes/hugo_academic_cheatsheet/","section":"post_tech_notes","summary":"A quick summary of the Hugo Academic Theme creation commands","tags":["Hugo","Static Site","git","Academic Theme","commands"],"title":"Hugo Academic Content Commands","type":"post_tech_notes"},{"authors":["Bill Tihen"],"categories":["code"],"content":"step 0: install hugo brew install hugo  step 1: create a public username_website repo I\u0026rsquo;ll assume your github account is username I think this repo needs to be publicly readable (not 100% sure)\nstep 2: clone the academic hugo locally git clone https://github.com/sourcethemes/academic-kickstart.git username_website cd academic_website git submodule update --init --recursive # without this the site won't start correctly  be sure you have many files within: themes/academic\nstep 3: Update .gitignore \u0026amp; public folder  update .gitignore remove the line with public be sure there is no public folder (yet), if there is remove it and all its contents.  step 4: point this repo to your username_website repo I have found the easiest way to overwrite the source origin repo is to do this by hand.\nCurrently your .git/config file will currently look like (notice the url referencing: git://github.com/sourcethemes/academic-kickstart.git - this is what we need to update):\n[core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true ignorecase = true precomposeunicode = true [remote \u0026quot;origin\u0026quot;] url = git://github.com/sourcethemes/academic-kickstart.git fetch = +refs/heads/*:refs/remotes/origin/* [branch \u0026quot;master\u0026quot;] remote = origin merge = refs/heads/master  change the origin url by hand or by using sed:\nsed -i.bak -e 's/https:\\/\\/github.com\\/sourcethemes\\/academic-kickstart.git/git@github.com:username\\/username_website.git/' .git/config  when your .git/config file is correct it will look like:\n[core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true ignorecase = true precomposeunicode = true [remote \u0026quot;origin\u0026quot;] url = git@github.com:username/username_website.git fetch = +refs/heads/*:refs/remotes/origin/* [branch \u0026quot;master\u0026quot;] remote = origin merge = refs/heads/master  now you can push this local repo to your github repo using:\ngit push -u origin --all # git init # git add . # git commit -m \u0026quot;Initial commit\u0026quot; # git push -u origin master  step 5: configure website basics 5A: Set your site name: in config/_default/config.toml\nfind the title attribute and set it to username (or whatever is appropriate)\n5B: Pick a themes from https://sourcethemes.com/academic/themes/\nin config/_default/config.toml\nfind the theme attribute and set it to your favorite theme color (or leave it as is)\n5C: site logo \u0026amp; favicon Put your image files into assets/images:\n logo.png (the logo on your webpage) file and icon.png (the favicon - icon in the webtab)  You can go to https://www.namecheap.com/logo-maker and make a logo\n5D: menu items in config/_default/menus.toml\nremove any items you won\u0026rsquo;t use. In my case this file now looks like:\n[[main]] name = \u0026quot;Posts\u0026quot; url = \u0026quot;#posts\u0026quot; weight = 20 [[main]] name = \u0026quot;About\u0026quot; url = \u0026quot;#about\u0026quot; weight = 50 [[main]] name = \u0026quot;Contact\u0026quot; url = \u0026quot;#contact\u0026quot; weight = 60  These will also be the sections on the home page that will be enabled and configured.\nThe larger the weight the further to the right the item will be shown.\nstep 6: configure site parameters You may want to read through all the params - but the ones listed here are enough to get started.\n site_type \u0026ndash; in the file: config/_default/params.toml: be sure to configure the site_type variable configure \u0026lsquo;contact details\u0026rsquo;  if you choose not to add an email, then be sure to set the variable email_form=0 on the content/home/contact.md file! if you choose not to enter an address and coordinates the in the [map] section set the engine=0 to avoid problems.   configure social details \u0026ndash; optional Regional Settings \u0026ndash; NOTE: The date display settings seems to have a bug \u0026ndash; so I don\u0026rsquo;t recommend adjusting that.  step 7: configure your homepage At this point I suggest starting hugo server so you can watch your edits.\nNow go into the folder content/home and we will adjust or disable the files in this folder.\n  disable with: active=false\n  enable with: active=true\n  oder with: weight=20 the bigger the number the further down on the page is show (I suggest you use the same weights used in the menu)\n  contact.md - review and see if changes are desired.\n  accomplishments.md - (and all other home page sections you decide not to display) change active=true to active=false\n  7A: about page I prefer to use the about page when it is a person\u0026rsquo;s site and the people page when the site is about a group effort. So in this case:\nhugo new --kind authors authors/author_name  content/home/about.md\n change the title to whatever you like: biography, about, etc\u0026hellip; change the variable author to match the name you used to generate you profile above, ie:  author = \u0026quot;author_name\u0026quot;  content/authors/author_name/_index.md\n Adjust the file so the information is accurate below the --- toward the end of the file, add your own free text to the about page.  content/authors/author_name/avatar.jpeg (png, jpg, etc also work)\n add an attractive image to the folder content/authors/author_name/ and name it: avatar.jpg  7B: people (or Team) page disable content/home/about.md\n Mark the active variable as false:  active=false  enable content/home/people.md\n set active=true create sub-group names:  [content] user_groups = [\u0026quot;Educators\u0026quot;, \u0026quot;Researchers\u0026quot;]  or alternatively, use an empty string to create a team without sub-teams:\n[content] user_groups = [\u0026quot;\u0026quot;]  Create the people (authors)\nhugo new --kind authors authors/person_name  content/authors/person_name/_index.md\n add one (or more) user_group to the person\u0026rsquo;s profile using the user_groups variable:  user_groups = [\u0026quot;Educators\u0026quot;]  if you used an empty string in people.md add:\nuser_groups = [\u0026quot;\u0026quot;]   Edit this file so that the information is accurate below the --- toward the end of the file, add your own free text to the about page.  content/authors/person_name/avatar.jpeg (png, jpg, etc also work)\n add an attractive image to the folder content/authors/person_name/ and name it: avatar.jpg  step 8: Test publish to username.github.io When you site is good enough to publish then its time to follow the following steps (these MUST be done in order to prevent problems!)\n8A: public folder (non-existent) The first time you do setup for publishing it is important this folder doesn\u0026rsquo;t exist yet and that public isn\u0026rsquo;t listed in the .gitignore` file\n8B: git snapshot (DO NOT YET GENERATE your website)\nCreate your git snapshot (very important at this point since the next steps are tricky)\ngit add . git commit -m \u0026quot;First draft of homepage\u0026quot; git push  8C: make second github repo username.github.io Now make a second public repo (CLICK THE BOX TO INCLUDE A README and/or a LISENCE file!) on github called username.github.io, this MUST be exactly: username.github.io for this to work!\nDouble check your repo is not empty, but has a README and/or a LISENCE file.\nNOW go to github repo settings and click on manage access and be sure you have permission to at administer (or at least write to this repo) \u0026ndash; probably not so click the invite teams or people button and add yourself as an admin (an other as needed).\n8D: clone username.github.io to public (within your Hugo project) now go back into your website code (root folder) and type:\ngit clone https://github.com/username/username.github.io.git public  if you see: warning: You appear to have cloned an empty repository. \u0026ndash; go back to the repo and create a README file!\n8E: check your permissions enter you public folder and create an index.html file and put in very simple html code: \u0026lt;h1\u0026gt;Hello username.github.io\u0026lt;/h1\u0026gt;\ncd public touch index.html echo '\u0026lt;h1\u0026gt;Hello username.github.io\u0026lt;/h1\u0026gt;' \u0026gt;\u0026gt; index.html  now check this in and push it to github.\ngit add . git commit -m \u0026quot;test webpage\u0026quot; git push  At this point you should see a bunch of message and toward the end you should see a line with:\nTo github.com:username/username.github.io.git  If instead you get the error:\nremote: Permission to peakchallenges/peakchallenges.github.io.git denied to btihen. fatal: unable to access 'https://github.com/peakchallenges/peakchallenges.github.io.git/': The requested URL returned error: 403  go back and check your site permissions.\nIf site permissions aren\u0026rsquo;t a problem do the following:\nre-create your website repo username.github.io.git outside the webcode project.\ngit clone git@github.com:username/username.github.io.git cd username.github.io echo '\u0026lt;h1\u0026gt;Hello username.github.io - v1\u0026lt;/h1\u0026gt;' \u0026gt;\u0026gt; index.html git add index.html git commit -m \u0026quot;update readme and test permissions\u0026quot; git push  assuming this works then move this repo into the hugo repo:\nrm -rf username_website/public mv username.github.io username_website/public cd username_website/public echo '\u0026lt;h1\u0026gt;Hello username.github.io - v2\u0026lt;/h1\u0026gt;' \u0026gt;\u0026gt; index.html git commit -am \u0026quot;update readme and test permissions within hugo project\u0026quot; git push  8F: check the website Wait a few minutes and go to the website https://username.github.io and be sure you see your newly published html page.\nstep 9: configure public as a submodule Now add the username.github.io repo as a submodule to your website code repo using. This allows nested projects without confusing git.\nFirst be sure you are in the hugo root and not the public folder and type:\ncd public git submodule add -b master https://github.com/username/username.github.io.git public`  now in .git/modules you might see a folder called public (with a bunch of stuff in it) if not simply edit your .git/config so that after:\n[submodule \u0026quot;themes/academic\u0026quot;] path = themes/academic url = https://github.com/gcushen/hugo-academic.git  you see:\n[submodule \u0026quot;public\u0026quot;] path = public url = https://github.com/username/username.github.io.git branch = master  You can add it by hand or with:\ncat \u0026lt;\u0026lt;\u0026quot;EOF\u0026quot; \u0026gt;\u0026gt; git/config [submodule \u0026quot;public\u0026quot;] path = public url = https://github.com/username/username.github.io.git branch = master EOF  step 10: publish your new Hugo webpage: Now to publish the Hugo site you prepared do the following:\nhugo -d public cd public git add . git commit -m \u0026quot;first webpage content\u0026quot; git push # toward the end you should see: `To github.com:username/username.github.io.git` cd ..  Follow this proceedure every time you update your site.\nNOTE: BE SURE NOT TO delete the folder public/.git/ or you will need to reconfigure your public submodule.\nnow go back to https://username.github.io and you should see your hugo site!\n(This might take a few minutes \u0026ndash; up to a half-hour \u0026ndash; to publish)\n","date":1589618361,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590223161,"objectID":"7abb282ed8e9d118c0b8cb8ad644235c","permalink":"https://btihen.me/post_tech_notes/hugo_academic_website_steps/","publishdate":"2020-05-16T10:39:21+02:00","relpermalink":"/post_tech_notes/hugo_academic_website_steps/","section":"post_tech_notes","summary":"hugo web (with the Academic Theme) and using git submodules and github to publish a free website","tags":["Hugo","Static Site","git","submodules"],"title":"Hugo Website using Github","type":"post_tech_notes"},{"authors":["Bill Tihen"],"categories":["Code"],"content":"Intro It is often helpful to be able to test email sending from an application during development or testing (or even to make testing emails on a staging server possible).\nTo do this follow these instructions for a safe convenient way to test and inspect emails sent from an application.\nSETUP First we need to get the repo (or at least the docker file)\n# get the mailcatcher repo git clone git@github.com:sj26/mailcatcher.git # go into mailcather repo cd mailcatcher # configure to use the newest `released` gem version of mailcatcher sed -i.bu1 's/FROM ruby:2.5/FROM ruby:2.6/' Dockerfile sed -i.bu2 's/ARG VERSION=0.6.5/ARG VERSION=0.7.1/' Dockerfile  The Dockerfile should now look like (which is actually all that is actually needed):\nFROM ruby:2.6 MAINTAINER Samuel Cochran \u0026lt;sj26@sj26.com\u0026gt; ARG VERSION=0.7.1 RUN gem install mailcatcher -v $VERSION EXPOSE 1025 1080 ENTRYPOINT [\u0026quot;mailcatcher\u0026quot;, \u0026quot;--foreground\u0026quot;] CMD [\u0026quot;--ip\u0026quot;, \u0026quot;0.0.0.0\u0026quot;]  BUILD IMAGE Now you can download the docker image and install the gems into it with:\n# -t adds repository:tag info -- the '.' at the end is important: docker build -t btihen/ruby/mailcatcher:ruby_2.6 . # ... # should end with something like # Successfully built 21e0de2bdd68 # now tag it as the **lasted** image with: docker build -t btihen/ruby/mailcatcher:latest .  now you can see your list of docker images (you should see the starting image/container we just created):\ndocker images REPOSITORY TAG IMAGE ID CREATED SIZE btihen/ruby/mailcatcher latest 21e0de2bdd68 8 minutes ago 870MB btihen/ruby/mailcatcher ruby_2.6 21e0de2bdd68 8 minutes ago 870MB ruby 2.6 a98425292e84 2 weeks ago 843MB  BUILD CONTAINER Now start the docker image using the build image id (-d allows it to run in the backgroud, -p 1025:1025 -p 1080:1080 opens a connection on ports 1025 \u0026amp; 1080 from localhost to the docker image):\n# build a container so we can test our image docker run -d -p 1025:1025 -p 1080:1080 --name mailcatcher btihen/ruby/mailcatcher:latest # or if you like ids better docker run -d -p 1025:1025 -p 1080:1080 --name mailcatcher 21e0de2bdd68 # if you forgot the image-id you can list the images with: docker images  TESTING (http \u0026amp; smtp) now you should be able to go to http://localhost:1080 and see the mailcatcher webpage.\nnow lets test the smtp side from the cli using these instructions: https://www.shellhacks.com/send-email-smtp-server-command-line/\n# connect to the mail server $ telnet localhost 1025 # or $ telnet 127.0.0.1 1025 220 smtp.domain.ext ESMTP Sendmail ?version-number?; ?date+time+gmtoffset? # declare yourself (IP or DNS) \u0026gt; HELO local.domain.name 250 smtp.domain.ext Hello local.domain.name [xxx.xxx.xxx.xxx], pleased to meet you # declare who the email is from: \u0026gt; MAIL FROM: test@local.domain.name 250 2.1.0 sender@adress.ext... Sender ok # declare who should get the email: \u0026gt; RCPT TO: recipient@adress.ext 250 2.1.5 recipient@adress.ext... Recipient ok # setup the DATA transmission: \u0026gt; DATA 354 Enter mail, end with \u0026quot;.\u0026quot; on a line by itself # type a subject two returns and a message ending with '.' (on its own line): SUBJECT: Test message Hello, this is a TEST message, please don't reply. Thank you. . # end the connection \u0026gt; QUIT  Now check the mail has arrived in mailcatcher at localhost:1080\nAssuming you see the email sent - you can be sure your image \u0026amp; container is setup properly.\nSTOPPING (exited) CONTAINER When we are done with mailcatcher we can stop the docker process:\ndocker ps -a docker kill mailcatcher  STARTING BUILT (but exited) CONTAINERS To restart mailcatcher at a later date simply type:\ndocker start mailcatcher\nSHARING IMAGES (once they work) # login to the Azure Container Repository docker login btihen -u username -p xxxxxxxxxxx # upload the new image docker push btihen/ruby/mailcatcher  RETRIEVING SHARED IMAGE az acr login --name username az acr repository list --name username --output table # getting the image docker pull btihen/ruby/image_name  containerize the image\n# these are the default local ports - adjust to your needs docker run -d -p 1025:1025 -p 1080:1080 --name mailcatcher btihen/ruby/mailcatcher:latest  start the container\ndocker start mailcatcher  LISTING Repo IMAGES One-time install\n# if needed install the azure cli brew update \u0026amp;\u0026amp; brew install azure-cli # the following may also be needed: brew update \u0026amp;\u0026amp; brew install python3 \u0026amp;\u0026amp; brew upgrade python3 brew link --overwrite python3  Retrieve the image list\n# login with the azure-cli az acr login --name username # list the images az acr repository list --name username --output table  REMOVING CONTAINERS when we no longer need mailcatcher we can remove it with (-a lists running and stopped containers):\ndocker ps -a docker rm mailcatcher  REMOVING IMAGES To fully clean up and remove (images \u0026ndash; after the containers are removed):\n$ docker images REPOSITORY TAG IMAGE ID CREATED SIZE btihen/ruby/mailcatcher ruby_2.5 21e0de2bdd68 25 minutes ago 870MB ruby 2.5 a98425292e84 2 weeks ago 843MB $ docker image rm 21e0de2bdd68 $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE ruby 2.5 a98425292e84 2 weeks ago 843MB  ","date":1589311149,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590261549,"objectID":"ee5ee73259d0dd7e05e44668ae36b712","permalink":"https://btihen.me/post_tech_notes/docker_intro_with_mail_catcher/","publishdate":"2020-05-12T21:19:09+02:00","relpermalink":"/post_tech_notes/docker_intro_with_mail_catcher/","section":"post_tech_notes","summary":"Learn to set-up mail catcher for safe email testing with an introduction to Docker","tags":["Docker","email","Testing"],"title":"Docker Intro using MailCatcher","type":"post_tech_notes"},{"authors":["Bill Tihen"],"categories":["Code"],"content":"I have been watching Phoenix and Elixir for a while, and the idea of writing dynamic Web Applications without needing a ton of JavaScript is very interesting. I recently saw this video by Chris McCord:\n https://www.youtube.com/watch?v=MZvmYaFkNJI\u0026amp;feature=youtu.be  which is very cool. I wanted to learn more and found this Phoenix 1.4 tutorial:\n https://www.youtube.com/watch?v=2bipVjOcvdI https://dennisbeatty.com/2019/03/19/how-to-create-a-counter-with-phoenix-live-view.html  and decided to translate that into Phoenix 1.5. This is what follows.\nNOTE: Since I am just learning the Phoenix Framework and will need to refer to this for my self to remember how to do basic things \u0026ndash; I\u0026rsquo;ve documented every little detail.\nStep 0 - setup environment Setup environment \u0026amp; newest version of elixir:\nexenv install 1.10.3 exenv global exenv local 1.10.3  Install the 1.5.1 phx_new generator:\nmix archive.install hex phx_new 1.5.1\nStep 1: Create a Phoenix Project with LiveView Create the project (notice the --live - that enables LiveView, --no-ecto - keeps the project smaller since we won\u0026rsquo;t be persisting any data):\nmix phx.new counter --no-ecto --live\nenter project and create init commit:\ncd counter git init \u0026amp;\u0026amp; git add -A \u0026amp;\u0026amp; git commit -m \u0026quot;init\u0026quot;  Step 2 - simple counter page using LiveView Make a counter_live folder \u0026amp; an index.ex file:\nmkdir lib/counter_web/live/counter_live touch lib/counter_web/live/counter_live/index.ex  Add the following contents: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49  # lib/counter_web/live/counter_live/index.ex defmodule CounterWeb.CounterLive.Index do use CounterWeb, :live_view # since we don\u0026#39;t have a db to pull from we initialize on mount @impl true def mount(_params, _session, socket) do {:ok, assign(socket, :val, 0)} end def render(assigns) do ~L\u0026#34;\u0026#34;\u0026#34; \u0026lt;h1\u0026gt;Live Counter\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt; \u0026lt;b\u0026gt;Here is a great complex page\u0026lt;/b\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;The count is: \u0026lt;%= @val %\u0026gt;\u0026lt;/h2\u0026gt; \u0026lt;button phx-click=\u0026#34;dec\u0026#34;\u0026gt;-\u0026lt;/button\u0026gt; \u0026lt;button phx-click=\u0026#34;inc\u0026#34;\u0026gt;+\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;button phx-click=\u0026#34;clear\u0026#34;\u0026gt;clear\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p\u0026gt; \u0026lt;i\u0026gt;even more awesome content\u0026lt;/i\u0026gt; \u0026lt;/p\u0026gt; \u0026#34;\u0026#34;\u0026#34; end # event handler for \u0026lt;button phx-click=\u0026#34;inc\u0026#34;\u0026gt; def handle_event(\u0026#34;inc\u0026#34;, _, socket) do {:noreply, update(socket, :val, \u0026amp;(\u0026amp;1 + 1))} end # event handler for \u0026lt;button phx-click=\u0026#34;dec\u0026#34;\u0026gt; def handle_event(\u0026#34;dec\u0026#34;, _, socket) do {:noreply, update(socket, :val, \u0026amp;(\u0026amp;1 - 1))} end # event handler for \u0026lt;button phx-click=\u0026#34;clear\u0026#34;\u0026gt; def handle_event(\u0026#34;clear\u0026#34;, _, socket) do {:noreply, update(socket, :val, \u0026amp;(\u0026amp;1 - \u0026amp;1))} # {:noreply, update(socket, :val, 0)} # very slow - why? end end  \nNow update the routers (so we can get to the new webpage \u0026ndash; now our app should work: 1 2 3 4 5 6  scope \u0026#34;/\u0026#34;, CounterWeb do pipe_through :browser # live \u0026#34;/\u0026#34;, PageLive, :index # remove this line live \u0026#34;/\u0026#34;, CounterLive.Index, :index # add this line end  \nStart pheonix:\nmix phx.server\nGo to:\nlocalhost:4000\nYou should now see the website and the counter should function\nAssuming all is good, I\u0026rsquo;ll take a git snapshot:\ngit add . git commit -m \u0026quot;counter with live update\u0026quot;  Step 3 - Running tests In order to run the tests we type:\nmix test  We see that PageLive test fails. This is because we replaced this behavior with CounterLive\nTo fix this we will create a CounterLive test and delete PageLive test.\nrm test/counter_web/live/page_live_text.exs touch test/counter_web/live/counter_live_text.exs  Here is the code for our new test: it basically just checks to be sure our Title is on the page: 1 2 3 4 5 6 7 8 9 10 11 12 13  # test/counter_web/live/counter_live_text.exs defmodule CounterWeb.CounterLiveTest do use CounterWeb.ConnCase import CounterWeb.CounterLive.Index test \u0026#34;disconnected and connected render\u0026#34;, %{conn: conn} do {:ok, page_live, disconnected_html} = live(conn, \u0026#34;/\u0026#34;) assert disconnected_html =~ \u0026#34;Live Counter\u0026#34; assert render(page_live) =~ \u0026#34;Live Counter\u0026#34; end end  \nNow we can test again: mix test\nNow that works, lets take another git snapshot:\ngit add . git commit -m \u0026quot;counter with live update\u0026quot;  Step 4 \u0026ndash; LiveView Templates Create a template file (helpful for complex html pages, but simple to create):\ntouch lib/counter_web/live/counter_live/index.html.leex\nNow just copy the html (from the render method into this file):\n# lib/counter_web/live/counter_live/index.html.leex \u0026lt;h1\u0026gt;Live Counter\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt; \u0026lt;b\u0026gt;Here is a great complex page\u0026lt;/b\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;The count is: \u0026lt;%= @val %\u0026gt;\u0026lt;/h2\u0026gt; \u0026lt;button phx-click=\u0026#34;dec\u0026#34;\u0026gt;-\u0026lt;/button\u0026gt; \u0026lt;button phx-click=\u0026#34;inc\u0026#34;\u0026gt;+\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;button phx-click=\u0026#34;clear\u0026#34;\u0026gt;clear\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p\u0026gt; \u0026lt;i\u0026gt;even more awesome content\u0026lt;/i\u0026gt; \u0026lt;/p\u0026gt; Now point lib/counter_web/live/counter_live/index.ex to this file by replacing render with an apply command:\n1 2 3 4 5 6 7 8 9 10  # add this new function defp apply_action(socket, :index, _params) do socket end # remove this funtion # def render(assigns) do # ~L\u0026#34;\u0026#34;\u0026#34; # ... # \u0026#34;\u0026#34;\u0026#34; # end   NOTE: apply_action understands the rest verbs such as :new, :show etc.\nNow try the app again and it should still work!\nAssuming it still works, I\u0026rsquo;ll take another git snapshot:\ngit add . git commit -m \u0026quot;counter using a template\u0026quot;  Step 5 - Reusable Components (\u0026amp; isolation) This allows complex components to be reused within multiple templates and isolation to keep one\u0026rsquo;s mental scope minimal.\nCreate a file for the component:\ntouch lib/counter_web/live/counter_live/counter_component.ex\nMove the dynamic html and it\u0026rsquo;s associated functions into this file, it\u0026rsquo;s important to import the live_components into this file using:\nuse CounterWeb, :live_component\nIn order to encapsulate the events into the component we will also move the event handlers into the component file.\nSo this file will now look like: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  # lib/counter_web/live/counter_live/counter_component.ex defmodule CounterWeb.CounterLive.CounterComponent do use CounterWeb, :live_component def render(assigns) do ~L\u0026#34;\u0026#34;\u0026#34; \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;The count is: \u0026lt;%= @val %\u0026gt;\u0026lt;/h2\u0026gt; \u0026lt;button phx-click=\u0026#34;dec\u0026#34; phx-target=\u0026#34;\u0026lt;%= @myself %\u0026gt;\u0026#34;\u0026gt;-\u0026lt;/button\u0026gt; \u0026lt;button phx-click=\u0026#34;inc\u0026#34; phx-target=\u0026#34;\u0026lt;%= @myself %\u0026gt;\u0026#34;\u0026gt;+\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;button phx-click=\u0026#34;clear\u0026#34; phx-target=\u0026#34;\u0026lt;%= @myself %\u0026gt;\u0026#34;\u0026gt;clear\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026#34;\u0026#34;\u0026#34; end def handle_event(\u0026#34;inc\u0026#34;, _, socket) do {:noreply, update(socket, :val, \u0026amp;(\u0026amp;1 + 1))} end def handle_event(\u0026#34;dec\u0026#34;, _, socket) do {:noreply, update(socket, :val, \u0026amp;(\u0026amp;1 - 1))} end def handle_event(\u0026#34;clear\u0026#34;, _, socket) do # {:noreply, update(socket, :val, 0)} # very slow - why? {:noreply, update(socket, :val, \u0026amp;(\u0026amp;1 - \u0026amp;1))} end end  \nNotice the button tags are slightly more complex\n\u0026lt;button phx-click=\u0026quot;dec\u0026quot; phx-target=\u0026quot;\u0026lt;%= @myself %\u0026gt;\u0026quot;\u0026gt;\nthe @myself basically informs the event that the handler is within the component.\nNow update the live template to point at the component using:\n\u0026lt;%= live_component @socket, CounterWeb.CounterLive.CounterComponent, id: 0, val: @val %\u0026gt;\nAlso note we need to pass the @val value into the component using:\nid: 0, val: @val\nits a little wierd, but we need to pass an id even if there is no ecto backed record.\nNow the template file looks like a normal template file again (focused on formating):\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  # lib/counter_web/live/counter_live/index.ex defmodule CounterWeb.CounterLive.Index do use CounterWeb, :live_view # since we don\u0026#39;t have a db to pull from we initialize on mount @impl true def mount(_params, _session, socket) do {:ok, assign(socket, :val, 0)} end def render(assigns) do ~L\u0026#34;\u0026#34;\u0026#34; \u0026lt;h1\u0026gt;Live Counter\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt; \u0026lt;b\u0026gt;Here is a great complex page\u0026lt;/b\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;%= live_component @socket, CounterWeb.CounterLive.CounterComponent, id: 0, val: @val %\u0026gt; \u0026lt;p\u0026gt; \u0026lt;i\u0026gt;even more awesome content\u0026lt;/i\u0026gt; \u0026lt;/p\u0026gt; \u0026#34;\u0026#34;\u0026#34; end end   Lets check that this still works.\nAssuming it still works, I\u0026rsquo;ll make one last git snapshot:\ngit add . git commit -m \u0026quot;live pages using isolated components - like JS does\u0026quot;  ","date":1589122913,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589122913,"objectID":"87d3ddfc60a927f2577e0d44eed5c5b3","permalink":"https://btihen.me/post_elixir_phoenix/phoenix_1_5_live_view_basics/","publishdate":"2020-05-10T17:01:53+02:00","relpermalink":"/post_elixir_phoenix/phoenix_1_5_live_view_basics/","section":"post_elixir_phoenix","summary":"Create a simple web counter app to learn how Phoenix 1.5 LiveView works.  Phoenix LiveView allows dynamic webpages with fast update times -- without JavaScript.","tags":["Elixir","Phoenix","LiveView","PubSub","Interactive"],"title":"Phoenix 1.5 LiveView \u0026 PubSub Basics","type":"post_elixir_phoenix"},{"authors":["Bill Tihen","Elliott Hebert"],"categories":["Agile","Education"],"content":"Intro Kanban is a visual way to track your tasks and your progress. Many people find this helpful way to to show yourself, your parents and teachers what work needs to be done. Ideally, this is done on a large screen, sheet of paper, or whiteboard - so that it is obvious and easily seen as a reminder.\nStatus Tracking The simplest statuses would be: To-Do, Doing, Done\n-- Some teacher often require a draft Review before final submissions, engineers use a similar column Review or Demo. Generally, this is a good idea to check your work with peers, parents or your teacher before handing in your work \u0026ndash; so we suggest a Review column before done. So now the statuses would be:\nTo-Do, Doing, Review, Done\n-- Swim-lanes (tracking multiple classes / projects) Ideally when using this technique you keep the number of simultaneous tasks (WIP) to a minimum\n The number of simultaneous tasks is called work-in-progress or abbreviated as WIP\n Education, unfortunately, expects a lot of simultaneous tasks within a variety of classes. To address this we can use swim-lanes to track our priorities with a jumble of independent projects (classes). For example: we might have swim-lanes for: English, Mathematics, Science, \u0026hellip;\nIdeally, we will try only allow ONE task in your doing and review boxes for each swim-lane / class. (This is called a WIP Limit of 1).\nTasks Tasks Cards should have critical reminder information on them. Refrain from putting extra information on the card, the card should be clean and simple to read - it is a reminder of work to do NOT a full description of the assignment.\nHere is the critical information I include on a personal Kanban card.\n Title - Big bold text (upper left corner) Description - a very short reminder of what to do - ideally in 4 to 5 words Class - in case of confusion, I write the class / swim-lane (lower left corner) Due Date - Big bold Text (lower right corner) Start Date - use this to schedule small tasks of a large project - which can be used to slowly make progress on a large task (I call this smallifying). This is a very important skill to ensure continued progress on large projects in a timely way. I put this just above the Due Date  Here is an example of a Kanban in use with tasks:\nUsage I like to use A3 paper and small post-it notes to add tasks. Here is our recommended blank Kanban - where you can write in your classes. Put your most important classes (in the IB these would be your High Level courses) at the top. Use a timebox on long tasks that need to move forward, but are too big to do in one work session \u0026ndash; this is especially important when you have multiple tasks that need to be accomplished on a give day.\n Timebox - is a time limit that you won\u0026rsquo;t exceed for a given tasks in order to keep all tasks on schedule. We suggest 25 to 35 minute timeboxes with small 5 minute breaks between tasks. Every 4 timeboxes take a longer 15 minute break. This is called the pomodoro technique for full details.\n   To best use a Kanban board, you should follow the following ritual:\n Prioritize your work \u0026ndash; when you sit down to work, spend the first 5 minutes reviewing the Kanban board:   First assess what in the priority classes needs to be done in order meet assignment deadlines (for long tasks set a timebox so you make progress but can keep all your other tasks moving too) Second assess what needs to be started in priority classes to stay on track with larger projects. If you already have a task in that classes doing box then schedule that task to be done ASAP so that you can start the next task. This is important a common Kanban saying is:_ **START FINISHING TASKS, stop starting unfinished tasks!**   Do your work \u0026ndash; respect your priorities and your timeboxes!\n  UPDATE YOUR KANBAN - End five to ten minutes before your time is up (set an alarm if needed) and update your tasks to their new status boxes. If you couldn\u0026rsquo;t meet your goals for a task put a smaller colorful post-it on it - as an ALERT.\n  Address the needs of problem tasks \u0026ndash; for all tasks with an ALERT: write emails to get help, or make notes on research needed to do make progress on problem tasks.\n  REFLECT \u0026ndash; Assess what is going well and consider if doing more that will help you be more successful and assess what is hindering you and what you can do differently to get you work done with less stress. You reflections should result in actions (experiments for a week or so) to help you move more effectively toward your goals. If your experiment doesn\u0026rsquo;t help, they after the test period try a new experiment.\n   NOTE: Dead person activities are actions that even a dead person can successfully do. For example, waiting for someone else to help, not checking twitter in homework time, etc. Live person activities are action that only live people can successfully accomplish. For example, ask a peer for help, research on the Internet for ideas, go to a help session, replace random twitter checks with Pomodoro Technique (and allow twitter in the 5 minute breaks), etc.\n References Kanban  https://www.personalkanban.com/ https://moduscooperandi.com/books-and-classes  Pomodoro  https://francescocirillo.com/pages/pomodoro-technique https://www.youtube.com/watch?v=VFW3Ld7JO0w  Helpful Books Kanban - Task Management\n Real-World Kanban: Do Less, Accomplish More with Lean Thinking, by Mattias Skarin. Kanban in Action, by Marcus Hammarberg and Joakim Sundén. Kanban: Successful Evolutionary Change for Your Technology Business, by David J. Anderson. Personal Kanban: Mapping Work - Navigating Life, by Tonianne DeMaria Barry and Jim Benson. Kanban and Scrum: Making the Most of Both, by Mattias Skarin and Henrik Kniberg.  Pomodoro - Time Management\n Pomodoro Technique Illustrated, by Staffan Noteberg. The Pomodoro Technique: Work smarter, not harder, by Francesco Cirillo.  Effective Reflections, Experiments \u0026amp; Problem Solving\n The 5 Elements of Effective Thinking, by Edward B. Burger and Michael Starbird. the shibumi strategy: a powerful way to create MEANINGFUL CHANGE, by Matthew E. May.  Effective Goal Setting \u0026amp; Changes - with small easy steps\n Little Bets: How Breakthrough Ideas Emerge from Small Discoveries, by Peter Sims. One Small Step Can Change Your Life: The Kaizen Way Paperback, by Robert Maurer Ph.D. The Spirit of Kaizen: Creating Lasting Excellence One Small Step at a Time: Creating Lasting Excellence One Small Step at a Time, by Robert Maurer Ph.D.  ","date":1588526709,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588526709,"objectID":"b9679358d2d397dad51621521db37f93","permalink":"https://btihen.me/post_edu/kanban_usage/","publishdate":"2020-05-03T19:25:09+02:00","relpermalink":"/post_edu/kanban_usage/","section":"post_edu","summary":"Intro Kanban is a visual way to track your tasks and your progress. Many people find this helpful way to to show yourself, your parents and teachers what work needs to be done.","tags":["Kanban"],"title":"Kanban Usage","type":"post_edu"},{"authors":["Tim Logan"],"categories":[],"content":"Tim Logan posted an interesting educational agility video of his ECIS Webinar and used materials developed my Paul Magnuson \u0026amp; me. He posted his slide deck on Trello.\nTim Logan\u0026rsquo;s video Intro into his Educational Agility webinar for ECIS.   In case people don\u0026rsquo;t have a linked-in account: https://www.linkedin.com/feed/update/urn%3Ali%3Aactivity%3A6659793273697120256/\nIn case people don\u0026rsquo;t have a trello account: https://trello.com/b/B5qwkjmE/webinar-agility\n","date":1587772800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587772800,"objectID":"7d468afc19ae68008c04a9cecc2c5726","permalink":"https://btihen.me/in_news/tim_logan_ecis_agility_webinar_linkedin/","publishdate":"2020-04-26T05:03:26+02:00","relpermalink":"/in_news/tim_logan_ecis_agility_webinar_linkedin/","section":"in_news","summary":"As part of the ECIS Leadership Conference - April 2020, Guide and Lead Managing Partner, Tim Logan gives an overview of the importance of agility in building schools as life-affirming 21st century organisations.","tags":["Agile","Education","21 Century","Reflections"],"title":"Webinar Agility by Tim Logan","type":"in_news"},{"authors":["Paul Magnuson","Bill Tihen"],"categories":["Education","Agile","Self-Regulation","Student Agency"],"content":"","date":1581984000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1581984000,"objectID":"22cd5da99c09dcadaad9cf21afda864f","permalink":"https://btihen.me/publication/tieonline_demos_and_collaborative_feedback_in_classroom/","publishdate":"2020-04-17T17:31:32+02:00","relpermalink":"/publication/tieonline_demos_and_collaborative_feedback_in_classroom/","section":"publication","summary":"Four steps for students to give and get safe and effective feedback.","tags":["agile","education","feedback","emotional safety","student choice"],"title":"Demos and Feedback in the Classroom","type":"publication"},{"authors":["Paul Magnuson","Bill Tihen"],"categories":["Education","Agile","Self-Regulation","Student Agency"],"content":"","date":1581292800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1581292800,"objectID":"0318e24196f63038c797322669991cbb","permalink":"https://btihen.me/publication/tieonline_uplift_and_explore_build_confidence/","publishdate":"2020-04-17T17:33:36+02:00","relpermalink":"/publication/tieonline_uplift_and_explore_build_confidence/","section":"publication","summary":"Uplift focuses on the creation of an atmosphere in which students build on existing strengths and grow their self-confidence. Dangerous to an atmosphere of uplift are traditional assessment practices.","tags":["agile","education","uplift","challenge","engagement","confidence","non-judgemental","natural assessment","natural consquences"],"title":"Build Confidence: Exploration and Student Choice","type":"publication"},{"authors":["Paul Magnuson","Bill Tihen"],"categories":["Education","Agile","Self-Regulation","Student Agency"],"content":"","date":1579219200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579219200,"objectID":"aed24c4536b84f8b6561601da4c747f5","permalink":"https://btihen.me/publication/tieonline_pull_vs_push/","publishdate":"2020-04-17T17:24:45+02:00","relpermalink":"/publication/tieonline_pull_vs_push/","section":"publication","summary":"Learning needs to change. Ideally schools could adopt a student-pulled curriculum (instead of a push system, which is what we overwhelmingly have), based on their own needs and interests.","tags":["agile","education","effectiveness","student choice"],"title":"Pull vs Push: Student Centric","type":"publication"},{"authors":["Paul Magnuson","Bill Tihen"],"categories":["Education","Agile","Self-Regulation","Student Agency"],"content":"","date":1577750400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577750400,"objectID":"a3e3e9f377372637db984252b8476b92","permalink":"https://btihen.me/publication/tieonline_importance_of_challenge/","publishdate":"2020-04-17T17:36:54+02:00","relpermalink":"/publication/tieonline_importance_of_challenge/","section":"publication","summary":"Importance of encouraging exploration, context, and challenge.","tags":["agile","education","challenge","engagement","meaningful context"],"title":"Importance of Challenge: Engaged, Deep Learning","type":"publication"},{"authors":["Paul Magnuson","Bill Tihen"],"categories":["Education","Agile","Self-Regulation","Student Agency"],"content":"","date":1576454400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1576454400,"objectID":"3f28baca1cebf5c500434d26efc4728d","permalink":"https://btihen.me/publication/tieonline_roots_of_agile_for_education/","publishdate":"2020-04-17T17:27:48+02:00","relpermalink":"/publication/tieonline_roots_of_agile_for_education/","section":"publication","summary":"So what’s agility? You’ll get different answers from different people, but you’ll likely pick up on a strong leitmotif of collaborative work.","tags":["agile","education","collaboration","manifesto","people focus"],"title":"Roots of Agile for Education","type":"publication"},{"authors":["Paul Magnuson","Bill Tihen"],"categories":["Education","Agile","Self-Regulation","Student Agency"],"content":"","date":1571184000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1571184000,"objectID":"bfd773abafc47e9f3c0e0f5a1b5162be","permalink":"https://btihen.me/publication/las_spotlight_patient_explanations/","publishdate":"2020-04-16T19:11:22+02:00","relpermalink":"/publication/las_spotlight_patient_explanations/","section":"publication","summary":"Reflections on educational improvements through student choice, self-regulation, and challenge.","tags":["agile","education","student choice","self-regulation","challenge"],"title":"Patient Explanations Lead to Good Things","type":"publication"},{"authors":["Paul Magnuson","Bill Tihen","Nicola Cosgrove","Daniel Patton"],"categories":["Education","Agile","Self-Regulation","Student Agency"],"content":"","date":1555430669,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555430669,"objectID":"7480c9b1295e3529315b94cdc7af4cb0","permalink":"https://btihen.me/publication/springer_getting_agile_at_school_chapter/","publishdate":"2020-04-16T18:04:29+02:00","relpermalink":"/publication/springer_getting_agile_at_school_chapter/","section":"publication","summary":"Approaches to encourage learner ownership and self-regulation using Agile principles.","tags":["agile","education","project based","self-regulation"],"title":"Getting Agile at School","type":"publication"},{"authors":null,"categories":null,"content":"btihen is not tracking any access information on this site.\n","date":1530140400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1530140400,"objectID":"18d05a63a1c8d7ed973cc51838494e41","permalink":"https://btihen.me/privacy/","publishdate":"2018-06-28T00:00:00+01:00","relpermalink":"/privacy/","section":"","summary":"btihen is not tracking any access information on this site.","tags":null,"title":"Privacy Policy","type":"page"},{"authors":null,"categories":null,"content":"The materials on this site are licensed and may be used under the Creative Commons Attribution-NonCommercial 4.0 International License \nSummary: This is a human-readable summary of the Creative Commons NonCommercial 4.0 International License (and not a substitute for) the actual license.\nYou are free to:  Share — copy and redistribute the material in any medium or format Adapt — remix, transform, and build upon the material for any purpose, even commercially.  The licensor cannot revoke these freedoms as long as you follow the license terms.\nUnder the following terms:  Attribution — You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use. NonCommercial — You may not use the material for commercial purposes.  No additional restrictions — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.\nNotices: You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation.\nNo warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material.\n","date":1530140400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1530140400,"objectID":"9b10c1f64082d3869fd4cb1f85809430","permalink":"https://btihen.me/terms/","publishdate":"2018-06-28T00:00:00+01:00","relpermalink":"/terms/","section":"","summary":"The materials on this site are licensed and may be used under the Creative Commons Attribution-NonCommercial 4.0 International License \nSummary: This is a human-readable summary of the Creative Commons NonCommercial 4.","tags":null,"title":"Terms","type":"page"},{"authors":["Paul Magnuson","Bill Tihen","Daniel Patton"],"categories":["Education","Agile","Self-Regulation","Student Agency"],"content":" Student boat (before 3-D printing) Student boat (with code) Student boat (with code) Student Retrospective Guide ","date":1523318400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1523318400,"objectID":"60def2620f3e16fbc96df1192c984097","permalink":"https://btihen.me/publication/ecis_designed_to_float_your_boat_article/","publishdate":"2020-04-16T19:10:29+02:00","relpermalink":"/publication/ecis_designed_to_float_your_boat_article/","section":"publication","summary":"STEAM projects provide an excellent avenue for student engagement and excellence through student choice, buy-in and challenge.","tags":["agile","education","engagement","student choice","challenge"],"title":"Designed to Float your Boat","type":"publication"},{"authors":["Bill Tihen","Paul Magnuson","Daniel Patton"],"categories":["classroom","stem"],"content":"","date":1495714213,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1495714213,"objectID":"d3319b252f271eb3474990e287feffee","permalink":"https://btihen.me/publication/las_spotlight_robot_gardener/","publishdate":"2017-05-25T14:10:13+02:00","relpermalink":"/publication/las_spotlight_robot_gardener/","section":"publication","summary":"An interview with Daniel Patton (science) and Bill Tihen (IT) who joined forces to create a course that includes both their interests—biology and electronics. The basic task for students? Build a terrarium that will support a healthy garden, but make it using simple robotics and coding so that the garden will stay alive even when you aren’t around.","tags":["biology","ecology","robotics","electronics","sensors","agile"],"title":"Robot Gardener","type":"publication"},{"authors":["Paul Magnuson","Bill Tihen"],"categories":["Education","Agile","Self-Regulation","Student Agency"],"content":"","date":1489363200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1489363200,"objectID":"23185bd72f64c163b0216a3387ea6126","permalink":"https://btihen.me/publication/las_laser_introducing_edgility_report_2017/","publishdate":"2020-04-23T21:02:49+02:00","relpermalink":"/publication/las_laser_introducing_edgility_report_2017/","section":"publication","summary":"Education can be enhanced with an Agile mindset.","tags":["agile","smallify","reflection","experiments","explore"],"title":"Introducing EDgility","type":"publication"},{"authors":["Bill Tihen","Paul Magnuson\""],"categories":[],"content":"A discussion with Scrum Alliance on the importance of bringing Agile into Educaion and a few important implementation points.\n  ","date":1484611200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1484611200,"objectID":"8756066c33b821f9fe09c885216c0140","permalink":"https://btihen.me/in_news/agile_in_education_interview_scrum_alliance/","publishdate":"2020-04-16T18:52:54+02:00","relpermalink":"/in_news/agile_in_education_interview_scrum_alliance/","section":"in_news","summary":"Principles to cultivate engaged, collaborative and self-regulated students. A video Interview by Scrum Alliance.","tags":["Agility","Education"],"title":"Agile in Education: Bill Tihen and Paul Magnuson of Leysin American School","type":"in_news"},{"authors":["Bill Tihen","Paul Magnuson","Howard Sublett"],"categories":[],"content":"How would our education system be different using agile principles and values?\nIn this InDepth edition, our conversation focuses around the American School in Leysin, Switzerland, and their experiments over the past 3 yrs in Agile in Education. My guests are Paul Magnuson ( Director of Curriculum \u0026amp; Director of the Middle School) and Bill Tihen ( Director of IT, Teacher, and runs the Makers Space ) Empowering students, making learning visible, and creating life long learners are goals for Paul and Bill as they lead this movement at Leysin.\nAgile Amped · Agile in Education at Leysin American School in Switzerland ","date":1480550400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1480550400,"objectID":"e9e0f7fd031534238e5c161f4db27027","permalink":"https://btihen.me/in_news/agile_in_education_at_las_interview_agile_amped/","publishdate":"2020-04-16T19:01:41+02:00","relpermalink":"/in_news/agile_in_education_at_las_interview_agile_amped/","section":"in_news","summary":"Principles to empower students, make learning visible and to create lifelong learners. An audio interview by Howard Sublett of AgileAmped Podcast.","tags":["Agile","Education"],"title":"Agile in Education at Leysin American School","type":"in_news"},{"authors":["John Miller"],"categories":[],"content":"To help incorporate Agile into their school, they [Paul Magnuson and Bill Tihen] brought in John Miller, a Certified Scrum Coach and Chief Empowerment Officer of Agile Classrooms, for two days of training. The Scrum Alliance has been a big supporter of John’s commitment to using Scrum to transform the world of education ever since he unveiled the first classroom to use Scrum at the Atlanta Scrum Gathering in 2010. When the Scrum Alliance, the largest Agile organization in the world, heard of Paul and Bill’s desire to implement Scrum for their students, they stepped up to sponsor the event. The Swiss Group of International Schools also co-sponsored the workshop.\nThe Agile Classrooms Workshop\n","date":1432598400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1432598400,"objectID":"4e5c02d005278be349af2661c6062c7f","permalink":"https://btihen.me/in_news/agile_classrooms_article_agile_classrooms/","publishdate":"2020-04-17T16:58:57+02:00","relpermalink":"/in_news/agile_classrooms_article_agile_classrooms/","section":"in_news","summary":"LAS began planning in 2014-2015 for the opening of a middle school (grades 7 and 8) in Fall 2016. Twenty-five educators attended John’s Agile Classroom Workshop.","tags":["Agile","Agile Classrooms","Middle School","John Miller","Scrum Workshop"],"title":"Agile Classrooms in the Alps","type":"in_news"},{"authors":["John Harlin"],"categories":[],"content":"","date":1431561600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1431561600,"objectID":"e0ef7af0584802bbc4ad11c7d897e2d4","permalink":"https://btihen.me/in_news/climate_poles_john_harlin_lets_report/","publishdate":"2020-04-26T09:46:27+02:00","relpermalink":"/in_news/climate_poles_john_harlin_lets_report/","section":"in_news","summary":"To understand plant ecology, one needs to know the exact temperature that plants are actually growing in, rather than regional averages.  Our efforts to make this widely available to citizen scientists and espescially schools.","tags":["Education","Citizen Science","Climate","Ecology","Engineering"],"title":"Climate Sensor Poles","type":"in_news"},{"authors":["Daniel Patton","Bill Tihen","John Harlin"],"categories":["Education","Agile","Self-Regulation","Student Agency"],"content":"","date":1431561600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1431561600,"objectID":"fea8127b0737aca037d9b3e2360ed6f3","permalink":"https://btihen.me/publication/las_laser_lets_climate_case_laser_report_2015/","publishdate":"2020-04-23T21:03:13+02:00","relpermalink":"/publication/las_laser_lets_climate_case_laser_report_2015/","section":"publication","summary":"Through efforts in citizen science, like building a ClimateCase to replicate outside conditions, LAS is teaching real science. Teachers also simulated projected changes to see if they could assess plant survivability.","tags":["transect","species","altitude","climate change","citizen science","robotics","plant science","3D printing"],"title":"LETS ClimateCase","type":"publication"}]