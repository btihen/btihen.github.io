<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>btihen</title>
    <link>https://btihen.me/</link>
      <atom:link href="https://btihen.me/index.xml" rel="self" type="application/rss+xml" />
    <description>btihen</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2021</copyright><lastBuildDate>Sat, 29 May 2021 01:57:00 +0200</lastBuildDate>
    <image>
      <url>https://btihen.me/img/btihen_landing_page.png</url>
      <title>btihen</title>
      <link>https://btihen.me/</link>
    </image>
    
    <item>
      <title>EDgility</title>
      <link>https://btihen.me/projects/edgility/</link>
      <pubDate>Fri, 06 Nov 2020 01:34:47 +0200</pubDate>
      <guid>https://btihen.me/projects/edgility/</guid>
      <description>&lt;p&gt;EDgility focuses on Education Agility.  Inspired by agiles ability to create engaged and enthusiastic learning enviornments in technology companies.  We started with our top educational principles and we quietly integrated agile practices into our classrooms.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Peak Challenges</title>
      <link>https://btihen.me/projects/peakchallenges/</link>
      <pubDate>Fri, 06 Nov 2020 01:34:47 +0200</pubDate>
      <guid>https://btihen.me/projects/peakchallenges/</guid>
      <description>&lt;p&gt;PeakChallenges: Engaged Learning for a Changing World&lt;/p&gt;
&lt;p&gt;We are inspired by learning and working in our changing world.&lt;/p&gt;
&lt;p&gt;Agile is is an excellent foundation for working with changes. As educators, our goal has been to merge the Agile Learning Loop with excellent classroom practices.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shared Schedule</title>
      <link>https://btihen.me/projects/mobile_calendar/</link>
      <pubDate>Fri, 06 Nov 2020 01:34:47 +0200</pubDate>
      <guid>https://btihen.me/projects/mobile_calendar/</guid>
      <description>&lt;p&gt;An opensource mobile friendly simple calendar to simplify scheduling for non-profits.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ARC for Schools</title>
      <link>https://btihen.me/projects/arcforschools/</link>
      <pubDate>Sun, 18 Oct 2020 10:34:47 +0200</pubDate>
      <guid>https://btihen.me/projects/arcforschools/</guid>
      <description>&lt;p&gt;Find schools, organizations, blogs, podcasts, and publications below.
ARC consortium members contribute by documenting applications of the agile mindset in education.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Crystal CLI Usage</title>
      <link>https://btihen.me/explore/crystal/cli/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://btihen.me/explore/crystal/cli/</guid>
      <description>&lt;p&gt;In this tutorial, I&amp;rsquo;ll share my top 10 tips for getting started with Academic:&lt;/p&gt;
&lt;h2 id=&#34;crystal-cli&#34;&gt;Crystal CLI&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Mint CLI</title>
      <link>https://btihen.me/explore/mint/cli/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://btihen.me/explore/mint/cli/</guid>
      <description>&lt;p&gt;In this tutorial, I&amp;rsquo;ll share my top 10 tips for getting started with Academic:&lt;/p&gt;
&lt;h2 id=&#34;mint-cli&#34;&gt;Mint CLI&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://btihen.me/contact/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://btihen.me/contact/contact/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Example Page 1</title>
      <link>https://btihen.me/courses/boat_design/example1/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://btihen.me/courses/boat_design/example1/</guid>
      <description>&lt;p&gt;In this tutorial, I&amp;rsquo;ll share my top 10 tips for getting started with Academic:&lt;/p&gt;
&lt;h2 id=&#34;tip-1&#34;&gt;Tip 1&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
&lt;h2 id=&#34;tip-2&#34;&gt;Tip 2&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Example Page 2</title>
      <link>https://btihen.me/courses/boat_design/example2/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://btihen.me/courses/boat_design/example2/</guid>
      <description>&lt;p&gt;Here are some more tips for getting started with Academic:&lt;/p&gt;
&lt;h2 id=&#34;tip-3&#34;&gt;Tip 3&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
&lt;h2 id=&#34;tip-4&#34;&gt;Tip 4&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Example Page 1</title>
      <link>https://btihen.me/courses/robot_gardner/example1/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://btihen.me/courses/robot_gardner/example1/</guid>
      <description>&lt;p&gt;In this tutorial, I&amp;rsquo;ll share my top 10 tips for getting started with Academic:&lt;/p&gt;
&lt;h2 id=&#34;tip-1&#34;&gt;Tip 1&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
&lt;h2 id=&#34;tip-2&#34;&gt;Tip 2&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Example Page 2</title>
      <link>https://btihen.me/courses/robot_gardner/example2/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://btihen.me/courses/robot_gardner/example2/</guid>
      <description>&lt;p&gt;Here are some more tips for getting started with Academic:&lt;/p&gt;
&lt;h2 id=&#34;tip-3&#34;&gt;Tip 3&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
&lt;h2 id=&#34;tip-4&#34;&gt;Tip 4&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rails 6.x - Framework Agnostic Associations - part 2</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_x_agnostic_associations_2/</link>
      <pubDate>Sat, 29 May 2021 01:57:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_x_agnostic_associations_2/</guid>
      <description>&lt;h2 id=&#34;purpose&#34;&gt;Purpose&lt;/h2&gt;
&lt;p&gt;In the interest of coding Rails in a way to work well with other code bases, I looking at ways to do complex database relations in a framework agnostic way.  In particular, this article will primarily explore Polymorphic Relationships.&lt;/p&gt;
&lt;p&gt;This is the second article in the series.  This article builds on (part 1)[post_ruby_rails/rails_6_x_agnostic_associations_1/]&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;In this case, I want to model a contact list of businesses and people.  Some people will be associated with a company.  Additionally, we will track transactions with each person and business.&lt;/p&gt;
&lt;p&gt;The basic model will then look something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;          âââââââââââââ                         âââââââââââââ
          â           ââ²                       â±â           â
          â  Contact  âââââââââââââââââââââââââââUserContactâ
          â           ââ±                       â²â           â
          âââââââââââââ                         âââââââââââââ
                â¼                                    â²ââ±
                â                                     â
  âââââââââââââââ´ââââââââââââ                         â
  â                         â                         â
 â±ââ²                       â±ââ²                       â±ââ²
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;âââââââââââââ             âââââââââââââ             âââââââââââââ
â           ââ²            â           â             â           â
â Business  ââââââââââââââ¼â  Person   â             â   User    â
â           ââ±            â           â             â           â
âââââââââââââ             âââââââââââââ             âââââââââââââ
â¼                         â¼                         â¼
â                         â                         â
ââââââââââââââ¬âââââââââââââ                         â
â                                      â
â±ââ²                                     â
âââââââââââââ                                â
â           ââ²                               â
â  Remark   ââââââââââââââââââââââââââââââââââ
â           ââ±
âââââââââââââ&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                    Created with Monodraw

              *virtual attribute

             Created with Monodraw
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;rails-app-and-first-models&#34;&gt;Rails app and first Models&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;ââââââââââââââ             âââââââââââââ
â            ââ²          1 â           â
â  Business  ââââââââââââââ¼â  Person   â
â-legal_name ââ±0..*        â-full_name â
ââââââââââââââ             âââââââââââââ
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We discussed / explained in (part 1)[post_ruby_rails/rails_6_x_agnostic_associations_1/]&lt;/p&gt;
&lt;h2 id=&#34;polymorphic-sti---sometime-called-inverse-polymorphic&#34;&gt;Polymorphic (STI) - sometime called inverse polymorphic&lt;/h2&gt;
&lt;p&gt;In this article we will build this structure (a replacement for Rails STI).  Many frameworks will only use columns that can be identified as foreign keys to ensure DB integrity - therefore, we will build this using DB structures that are supported by Rails, Lucky and Phoenix and probably most frameworks.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;               âââââââââââââââ
               â   Contact   â
               â  relations* â
               â+display_nameâ
               âââââââââââââââ
                      â¼
                      â
      âââââââââââââââââ´âââââââââââââ
      â                            â
     â±ââ²                          â±ââ²
âââââââââââââââ             âââââââââââââââ
â  Business   ââ²            â    Person   â
â -legal_name ââââââââââââââ¼â -full_name  â
â+display_nameââ±            â+display_nameâ
âââââââââââââââ             âââââââââââââââ
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;array: supplier, reseller, customer, sales-rep&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;virtual attribute (public method)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A contact could be either a person or a business - but must be one or the other.&lt;/p&gt;
&lt;h3 id=&#34;migration-and-relationships&#34;&gt;Migration and Relationships&lt;/h3&gt;
&lt;p&gt;Rails doesn&amp;rsquo;t have a built-in array migration, so we use string and then we change the migration:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails g scaffold Contact functions:string business:references person:references
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now update the migration to ensure we have a functions as an array &amp;amp; relations as Foreign keys (but optional). Since there we only want/need one of the two foreign_keys at a time they must be nullable and we need to change roles to an array - so now:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/migrate/20210519205042_create_contacts.rb
class CreateContacts &amp;lt; ActiveRecord::Migration[6.1]
  def change
    create_table :contacts do |t|
      t.string :functions, array: true, null: false, default: []
      t.references :business, foreign_key: true
      t.references :person, foreign_key: true

      t.timestamps
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the Contact model with the validations &amp;amp; flexible relations - we also want to be able to refer to the sub-model by one name we will call that &lt;code&gt;contactable&lt;/code&gt; - so now the model will look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/contact.rb
class Contact &amp;lt; ApplicationRecord
  belongs_to :business, optional: true
  belongs_to :person, optional: true

  VALID_FUNCTIONS_LIST = %w(supplier reseller customer sales-rep)

  validate :validate_relationship_functions
  validate :validate_belongs_to_one_and_only_one_foreign_key

  def contactable
    business || person
  end

  private

  # be sure we have the variable, it is an Array &amp;amp; all elements are in the valid list
  def validate_relationship_functions
    return if functions.present? &amp;amp;&amp;amp; functions.is_a?(Array)
              functions.all? { |role| VALID_FUNCTIONS_LIST.include?(role.to_s) }

    errors.add :functions, &amp;quot;must be ONE or MORE of the following options: #{VALID_FUNCTIONS_LIST.join(&#39;,&#39;)}&amp;quot;
  end

  # exclusive or (XOR) is true if one or the other is true, but not when both are true
  # we could get a model (or possibly an id)
  def validate_belongs_to_one_and_only_one_foreign_key
    return if business.present? ^ person.present? ^ business_id.present? ^ person_id.present?

    # add to base since, the error could be either field.
    errors.add :base, &#39;must belong to ONE business or person, but not both&#39;
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the Person model and relations and enforce every person is a member of the contact list - with a contact role:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/person.rb
class Person &amp;lt; ApplicationRecord
  has_one :contact
  belongs_to :business, optional: true

  validates :contact, presence: true
  validates :full_name, presence: true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the business model and relations and enforce every business is a member of the contact list - with a contact role:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# # app/models/business.rb
class Business &amp;lt; ApplicationRecord
  has_one :contact
  has_many :people

  validates :contact, presence: true
  validates :legal_name, presence: true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets check the seed with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we go to a person or business we can no longer make changes - they need to have an associated Contact.
We&amp;rsquo;ll start by rolling back the last migration and fixing it with (we can use the logic in the seeds to guide us in the Business/Person creation controller):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:rollback
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we need to fix the old relations in the migration (or simply drop the database and reseed it) - but given this is to article is find cross-framework &amp;ndash; &amp;lsquo;real-world&amp;rsquo; techniques - let&amp;rsquo;s be sure the existing records stay useful.  We will assume a business is a supplier, a person associated with a business is a sales-rep, and unassociated people are customers.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/migrate/20210519205042_create_contacts.rb
class CreateContacts &amp;lt; ActiveRecord::Migration[6.1]
  def change
    create_table :contacts do |t|
      t.string :functions, array: true, null: false, default: []
      t.references :business, foreign_key: true
      t.references :person, foreign_key: true

      t.timestamps
    end

    # add a contact for each existing company
    businesses = Business.joins(:people)
                         .group(&#39;businesses.id&#39;)
                         .select(&#39;businesses.*, count(people.id) as people_count&#39;)
    businesses.each do |business|
      functions = if business.people_count &amp;lt; 10
                    [&#39;supplier&#39;]
                  elsif business.people_count &amp;lt; 20
                    [&#39;reseller&#39;]
                  elsif business.people_count &amp;lt; 30
                    [&#39;supplier&#39;, &#39;reseller&#39;]
                  end
      Contact.create!(functions: functions, business: business)
    end

    # add a contact for each existing person
    Person.all.each do |person|
      functions = if person.business
                    [&#39;sales_rep&#39;]
                  else
                    [&#39;customer&#39;]
                  end
      Contact.create!(functions: functions, person: person)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets the existing models now:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OK - we are in business lets update our seed file too:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/seed.rb
# create small business w/o employees
20.times do |num|
  business = Business.create(legal_name: &amp;quot;Business #{num}&amp;quot;,
                             contact: Contact.new(functions: [&#39;supplier&#39;]))
end

# create individuals
20.times do |num|
  person = Person.create(full_name: &amp;quot;Individual #{num}&amp;quot;,
                            contact: Contact.new(functions: [&#39;customer&#39;]))
end

# create big companies with employees
20.times do |bus_num|
  functions = if bus_num &amp;lt; 3
                [&#39;supplier&#39;]
              elsif bus_num&amp;lt; 5
                [&#39;reseller&#39;]
              elsif bus_num &amp;lt; 8
                [&#39;supplier&#39;, &#39;reseller&#39;]
              else
                %w[supplier reseller customer]
              end
  company  = Business.create(legal_name: &amp;quot;Company #{bus_num}&amp;quot;,
                             contact: Contact.new(functions: functions))

  bus_num.times do |emp_num|
    Person.create(full_name: &amp;quot;Employee #{bus_num}-#{emp_num}&amp;quot;,
                  business: company,
                  contact: Contact.new(functions: [&#39;sales-rep&#39;]))
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets check the seed with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:seed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great all works!&lt;/p&gt;
&lt;h3 id=&#34;lets-make-the-index-page-more-useful&#34;&gt;Lets make the index page more useful&lt;/h3&gt;
&lt;p&gt;When we visit the contacts page we would like more than the ids - but we need a unified way to present that info so let&amp;rsquo;s add a display_name so we can show the name of the primary model, if a person we would like to know the associated business if present and if a company we would like the employee_count so we will delegate these to the sub-models.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s update contact first by adding:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  # this references our existing contactable
  delegate :display_name, :associated_business_name, :employee_count,
           to: :contactable

  def contactable
    business || person
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now the contact model will look like (with validations)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/contact.rb
class Contact &amp;lt; ApplicationRecord
  belongs_to :business, optional: true
  belongs_to :person, optional: true

  VALID_FUNCTIONS_LIST = %w(supplier reseller customer sales-rep)

  validate :validate_relationship_functions
  validate :validate_belongs_to_one_and_only_one_foreign_key

  delegate :display_name, :associated_business_name, :employee_count,
           to: :contactable

  def contactable
    business || person
    # would memoize be valuable here?
    # @contactable ||= (business || person)
  end

  private

  # be sure we have the variable, it is an Array &amp;amp; all elements are in the valid list
  def validate_relationship_functions
    return if functions.present? &amp;amp;&amp;amp; functions.is_a?(Array)
              functions.all? { |role| VALID_FUNCTIONS_LIST.include?(role.to_s) }

    errors.add :functions, &amp;quot;must be ONE or MORE of the following options: #{VALID_FUNCTIONS_LIST.join(&#39;,&#39;)}&amp;quot;
  end

  # exclusive or (XOR) is true if one or the other is true, but not when both are true
  # we could get a model (or possibly an id)
  def validate_belongs_to_one_and_only_one_foreign_key
    return if business.present? ^ person.present? ^ business_id.present? ^ person_id.present?

    # add to base since, some forms may not have the person/business fields
    errors.add :base, &#39;must belong to ONE business or person, but not both&#39;
    # errors.add :contactable, &#39;must belong to a business or a person&#39;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets update the models to provide the needed info&lt;/p&gt;
&lt;p&gt;Business now will look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/business.rb
class Business &amp;lt; ApplicationRecord
  has_one :contact
  has_many :people

  validates :contact, presence: true
  validates :legal_name, presence: true

  def display_name
    legal_name
  end

  def employee_count
    people.count
  end

  def associated_business_name
    &amp;quot;&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And person will look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/person.rb
class Person &amp;lt; ApplicationRecord
  has_one :contact
  belongs_to :business, optional: true

  validates :contact, presence: true
  validates :full_name, presence: true

  def display_name
    full_name
  end

  def employee_count
    nil  # person count has no meaning under person
  end

  def associated_business_name
    business&amp;amp;.display_name
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets update the index view to show our new info:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;h1&amp;gt;Contacts&amp;lt;/h1&amp;gt;

&amp;lt;table&amp;gt;
  &amp;lt;thead&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th&amp;gt;Person/Business&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Employee Count&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Contact Name&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Business Name&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Relationships&amp;lt;/th&amp;gt;
      &amp;lt;th colspan=&amp;quot;3&amp;quot;&amp;gt;&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/thead&amp;gt;

  &amp;lt;tbody&amp;gt;
    &amp;lt;% @contacts.each do |contact| %&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= contact.contactable.class.name %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= contact.employee_count %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= contact.display_name %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= contact.associated_business_name %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= contact.functions %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Show&#39;, contact %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Edit&#39;, edit_contact_path(contact) %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Destroy&#39;, contact, method: :delete, data: { confirm: &#39;Are you sure?&#39; } %&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we see another n+1 query - we will fix the main part - but not the employee count this time:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ContactsController &amp;lt; ApplicationController
  def index
    # @contacts = Contact.all
    @contacts = Contact.includes(:business).includes(:person).all
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool now the page is usable (a bit long but we will ignore that)&lt;/p&gt;
&lt;h3 id=&#34;lets-be-sure-we-can-create-new-contacts&#34;&gt;Lets be sure we can create new contacts&lt;/h3&gt;
&lt;p&gt;I usually use an input model (for more flexibility), but for now I will use nested_params.
A few articles on nested params and nested fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=PYYwjTlcoa4&#34;&gt;https://www.youtube.com/watch?v=PYYwjTlcoa4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pluralsight.com/guides/ruby-on-rails-nested-attributes&#34;&gt;https://www.pluralsight.com/guides/ruby-on-rails-nested-attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://levelup.gitconnected.com/rails-nested-forms-in-three-steps-5580f0ad0e&#34;&gt;https://levelup.gitconnected.com/rails-nested-forms-in-three-steps-5580f0ad0e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://levelup.gitconnected.com/handling-nested-attributes-with-a-has-many-through-association-with-rails-api-f91729547ea5&#34;&gt;https://levelup.gitconnected.com/handling-nested-attributes-with-a-has-many-through-association-with-rails-api-f91729547ea5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To start we will tell the contacts model that it can create nested models with do by adding:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  accepts_nested_attributes_for :business
  accepts_nested_attributes_for :person
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;so now now the contact model looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/contact.rb
class Contact &amp;lt; ApplicationRecord
  belongs_to :business, optional: true
  belongs_to :person, optional: true

  accepts_nested_attributes_for :business
  accepts_nested_attributes_for :person

  VALID_FUNCTIONS_LIST = %w(supplier reseller customer sales-rep)

  validate :validate_relationship_functions
  validate :validate_belongs_to_one_and_only_one_foreign_key

  delegate :display_name, :associated_business_name, :employee_count,
           to: :contactable

  def contactable
    business || person
    # would memoize be valuable here?
    # @contactable ||= (business || person)
  end

  private

  # be sure we have the variable, it is an Array &amp;amp; all elements are in the valid list
  def validate_relationship_functions
    return if functions.present? &amp;amp;&amp;amp; functions.is_a?(Array)
              functions.all? { |role| VALID_FUNCTIONS_LIST.include?(role.to_s) }

    errors.add :functions, &amp;quot;must be ONE or MORE of the following options: #{VALID_FUNCTIONS_LIST.join(&#39;,&#39;)}&amp;quot;
  end

  # exclusive or (XOR) is true if one or the other is true, but not when both are true
  # we could get a model (or possibly an id)
  def validate_belongs_to_one_and_only_one_foreign_key
    return if business.present? ^ person.present? ^ business_id.present? ^ person_id.present?

    # add to base since, some forms may not have the person/business fields
    errors.add :base, &#39;must belong to ONE business or person, but not both&#39;
    # errors.add :contactable, &#39;must belong to a business or a person&#39;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the controller we need to create models as part of @contact to allow nested-fields - which feed the nested attributes. to allow the new information in via strong params:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/contacts_controller.rb
  def new
    @contact = Contact.new
    # add empty sub-models for our form
    @contact.person = Person.new
    @contact.business = Business.new
  end

  # update strong params to accept the sub-model attributes
  # sub-models from nested-forms feeding nested_atttributes in the model
  # take the form &amp;lt;model_name&amp;gt;_attributes
  # `functions` is an empty array since it is taking a list of values
  # person_attributes &amp;amp; business_attributes - need to include the list of attributes to accept!
  # so in our case:
  def contact_params
    contact_attribs = params.require(:contact)
                            .permit(functions: [],  # is empty - takes a list of values
                                    person_attributes: [:full_name],  # needs to include the list of attributes to accept
                                    business_attributes: [:legal_name])
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the contact form to tie this all together by adding our nested forms:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  &amp;lt;div class=&amp;quot;field-group&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;Create your Contact: a Person or a Business&amp;lt;/h2&amp;gt;

    &amp;lt;h3&amp;gt;Business&amp;lt;/h3&amp;gt;
    &amp;lt;%= form.fields_for :business, Business.new do |f| %&amp;gt;
      &amp;lt;%= f.label :legal_name %&amp;gt;
      &amp;lt;%= f.text_field :legal_name %&amp;gt;
    &amp;lt;% end %&amp;gt;

    &amp;lt;h3&amp;gt;Person&amp;lt;/h3&amp;gt;
    &amp;lt;%= form.fields_for :person, Person.new do |f| %&amp;gt;
      &amp;lt;%= f.label :full_name %&amp;gt;
      &amp;lt;%= f.text_field :full_name %&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will also need to make the list of possible relationship functions a multi-select - I always forget the format &amp;ndash; so remember BOTH {} are required when using multi-select!!  The first one is for normal drop-down select options &amp;ndash; like include_blank, the second one is where the multi-select must go!&lt;/p&gt;
&lt;p&gt;This looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  &amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
    &amp;lt;%= form.label :functions %&amp;gt;
    &amp;lt;%= form.select :functions,
                    options_for_select(Contact::VALID_FUNCTIONS_LIST,
                                      selected: Contact::VALID_FUNCTIONS_LIST.second),
                                      {}, #{:include_blank =&amp;gt; &#39;None&#39;},
                                      {:multiple =&amp;gt; true, size: 3} %&amp;gt;
  &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;so now the template looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/contacts/_form.html.erb
&amp;lt;%= form_with(model: contact) do |form| %&amp;gt;
  &amp;lt;% if contact.errors.any? %&amp;gt;
  &amp;lt;div id=&amp;quot;error_explanation&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;&amp;lt;%= pluralize(contact.errors.count, &amp;quot;error&amp;quot;) %&amp;gt; prohibited this contact from being saved:&amp;lt;/h2&amp;gt;

    &amp;lt;ul&amp;gt;
      &amp;lt;% contact.errors.each do |error| %&amp;gt;
      &amp;lt;li&amp;gt;&amp;lt;%= error.full_message %&amp;gt;&amp;lt;/li&amp;gt;
      &amp;lt;% end %&amp;gt;
    &amp;lt;/ul&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;% end %&amp;gt;

  &amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
    &amp;lt;%= form.label :functions %&amp;gt;
    &amp;lt;%= form.select :functions,
                    options_for_select(Contact::VALID_FUNCTIONS_LIST,
                                      selected: Contact::VALID_FUNCTIONS_LIST.second),
                                      {}, #{:include_blank =&amp;gt; &#39;None&#39;},
                                      {:multiple =&amp;gt; true, size: 3} %&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;field-group&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;Create your Contact: a Person or a Business&amp;lt;/h2&amp;gt;

    &amp;lt;h3&amp;gt;Business&amp;lt;/h3&amp;gt;
    &amp;lt;%= form.fields_for :business, Business.new do |f| %&amp;gt;
      &amp;lt;%= f.label :legal_name %&amp;gt;
      &amp;lt;%= f.text_field :legal_name %&amp;gt;
    &amp;lt;% end %&amp;gt;

    &amp;lt;h3&amp;gt;Person&amp;lt;/h3&amp;gt;
    &amp;lt;%= form.fields_for :person, Person.new do |f| %&amp;gt;
      &amp;lt;%= f.label :full_name %&amp;gt;
      &amp;lt;%= f.text_field :full_name %&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;actions&amp;quot;&amp;gt;
    &amp;lt;%= form.submit %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when we try &lt;code&gt;/contacts&lt;/code&gt; we notice one more problem - it is always invalid - rails automatically add a leading &amp;quot;&amp;quot; in an array input list :( - so we will have to clean this up in the strong params.  In this case we are working with param objects not a hash so we will do an in-place update (removal of &amp;ldquo;&amp;quot;) using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  contact_attribs[&amp;quot;functions&amp;quot;].reject! {|f| f.blank? }
  contact_attribs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we also need to be sure in our case we only send the params of the business or the person, but not both - since we are only creating one.  So we will remove whichever one is empty - also with an in-place update - using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    # find and set to nil the model without params
    if contact_attribs[&amp;quot;person_attributes&amp;quot;]
      # since we only have one param we can do
      contact_attribs[&amp;quot;person_attributes&amp;quot;] = nil if contact_attribs[&amp;quot;person_attributes&amp;quot;][&amp;quot;full_name&amp;quot;].blank?
    end

    if contact_attribs[&amp;quot;business_attributes&amp;quot;]
      # assuming we had multiple params the test is easier with:
      contact_attribs[&amp;quot;business_attributes&amp;quot;] = nil if contact_attribs[&amp;quot;business_attributes&amp;quot;].to_h.all? {|key,value| value.blank?}
    end

    # remove the nested attributes set to nil so contact will only create the desired associated model
    contact_attribs.reject! {|key, value| value.blank? }
    contact_attribs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now the full controller looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ContactsController &amp;lt; ApplicationController
  before_action :set_contact, only: %i[ show edit update destroy ]

  def index
    # @contacts = Contact.all
    @contacts = Contact.includes(:business).includes(:person).all
  end

  def show
  end

  def new
    @contact = Contact.new
    @contact.person = Person.new
    @contact.business = Business.new
  end

  def edit
  end

  def create
    @contact = Contact.new(contact_params)

    respond_to do |format|
      if @contact.save
        format.html { redirect_to @contact, notice: &amp;quot;Contact was successfully created.&amp;quot; }
        format.json { render :show, status: :created, location: @contact }
      else
        format.html { render :new, status: :unprocessable_entity }
        format.json { render json: @contact.errors, status: :unprocessable_entity }
      end
    end
  end

  def update
    respond_to do |format|
      if @contact.update(contact_params)
        format.html { redirect_to @contact, notice: &amp;quot;Contact was successfully updated.&amp;quot; }
        format.json { render :show, status: :ok, location: @contact }
      else
        format.html { render :edit, status: :unprocessable_entity }
        format.json { render json: @contact.errors, status: :unprocessable_entity }
      end
    end
  end

  def destroy
    @contact.destroy
    respond_to do |format|
      format.html { redirect_to contacts_url, notice: &amp;quot;Contact was successfully destroyed.&amp;quot; }
      format.json { head :no_content }
    end
  end

  private

  # Use callbacks to share common setup or constraints between actions.
  def set_contact
    @contact = Contact.find(params[:id])
  end

  # Only allow a list of trusted parameters through.
  def contact_params
    # update strong params to accept the sub-model attributes
    # sub-models from nested-forms feeding nested_atttributes in the model
    # take the form &amp;lt;model_name&amp;gt;_attributes
    # `functions` is an empty array since it is taking a list of values
    # person_attributes &amp;amp; business_attributes - need to include the list of attributes to accept!
    # so in our case:
    contact_attribs = params.require(:contact)
                            .permit(functions: [],
                                    person_attributes: [:full_name],
                                    business_attributes: [:legal_name])
    # cleanup array - always delivers with [&#39;&#39;] - :(
    # https://stackoverflow.com/questions/51341912/empty-array-value-being-input-with-simple-form-entries

    # easiest way in in-place replacement (given that params is now objects and not a hash), but that always makes me a bit nervous
    # https://stackoverflow.com/questions/20164354/rails-strong-parameters-with-empty-arrays
    # reject and replace in place
    contact_attribs[&amp;quot;functions&amp;quot;].reject! {|f| f.blank? }

    # remove empty model attributes
    # contact_attribs[&amp;quot;person_attributes&amp;quot;].reject {|key,value| value.blank?}
    if contact_attribs[&amp;quot;person_attributes&amp;quot;]
      contact_attribs[&amp;quot;person_attributes&amp;quot;] = nil if contact_attribs[&amp;quot;person_attributes&amp;quot;][&amp;quot;full_name&amp;quot;].blank?
    end

    if contact_attribs[&amp;quot;business_attributes&amp;quot;]
      contact_attribs[&amp;quot;business_attributes&amp;quot;] = nil if contact_attribs[&amp;quot;business_attributes&amp;quot;].to_h.all? {|key,value| value.blank?}
    end

    # have to remove nil attributes for models so nested attributes works correctly
    contact_attribs.reject! {|key, value| value.blank? }

    # return the attributes with the tidied array
    contact_attribs
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now when we try again:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails s
open localhost:3000/contacts/new
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool - it works.  We could now do the same for the &lt;code&gt;/business/new&lt;/code&gt; and &lt;code&gt;/people/new&lt;/code&gt;, but we won&amp;rsquo;t do that here in the article. Lets snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;created person possibly related to the model&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;polymorphic&#34;&gt;Polymorphic&lt;/h2&gt;
&lt;p&gt;In the next article we will explore the following in (part 3)[post_ruby_rails/rails_6_x_agnostic_associations_3/]&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;âââââââââââââ             âââââââââââââ
â           ââ²            â           â
â Business  ââââââââââââââ¼â  Person   â
â           ââ±            â           â
âââââââââââââ             âââââââââââââ
      â¼                         â¼
      â                         â
      ââââââââââââââ¬âââââââââââââ
                   â
                  â±ââ²
             âââââââââââââ
             â           â
             â  Remark   â
             â           â
             âââââââââââââ
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Rails 6.x - Framework Agnostic Associations - part 2</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_x_agnostic_associations_3/</link>
      <pubDate>Sat, 29 May 2021 01:57:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_x_agnostic_associations_3/</guid>
      <description>&lt;h2 id=&#34;purpose&#34;&gt;Purpose&lt;/h2&gt;
&lt;p&gt;In the interest of coding Rails in a way to work well with other code bases, I looking at ways to do complex database relations in a framework agnostic way.  In particular, this article will primarily explore Polymorphic Relationships.&lt;/p&gt;
&lt;p&gt;This is the second article in the series.  This article builds on (part 1)[post_ruby_rails/rails_6_x_agnostic_associations_1/]&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;In this case, I want to model a contact list of businesses and people.  Some people will be associated with a company.  Additionally, we will track transactions with each person and business.&lt;/p&gt;
&lt;p&gt;The basic model will then look something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;          âââââââââââââ                         âââââââââââââ
          â           ââ²                       â±â           â
          â  Contact  âââââââââââââââââââââââââââUserContactâ
          â           ââ±                       â²â           â
          âââââââââââââ                         âââââââââââââ
                â¼                                    â²ââ±
                â                                     â
  âââââââââââââââ´ââââââââââââ                         â
  â                         â                         â
 â±ââ²                       â±ââ²                       â±ââ²
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;âââââââââââââ             âââââââââââââ             âââââââââââââ
â           ââ²            â           â             â           â
â Business  ââââââââââââââ¼â  Person   â             â   User    â
â           ââ±            â           â             â           â
âââââââââââââ             âââââââââââââ             âââââââââââââ
â¼                         â¼                         â¼
â                         â                         â
ââââââââââââââ¬âââââââââââââ                         â
â                                      â
â±ââ²                                     â
âââââââââââââ                                â
â           ââ²                               â
â  Remark   ââââââââââââââââââââââââââââââââââ
â           ââ±
âââââââââââââ&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                    Created with Monodraw

              *virtual attribute

             Created with Monodraw
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;rails-app-and-first-models&#34;&gt;Rails app and first Models&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;ââââââââââââââ             âââââââââââââ
â            ââ²          1 â           â
â  Business  ââââââââââââââ¼â  Person   â
â-legal_name ââ±0..*        â-full_name â
ââââââââââââââ             âââââââââââââ
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We discussed/explained in (part 1)[post_ruby_rails/rails_6_x_agnostic_associations_1/]&lt;/p&gt;
&lt;h2 id=&#34;polymorphic-sti---sometime-called-inverse-polymorphic&#34;&gt;Polymorphic (STI) - sometime called inverse polymorphic&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;               âââââââââââââââ
               â   Contact   â
               â  relations* â
               â+display_nameâ
               âââââââââââââââ
                      â¼
                      â
      âââââââââââââââââ´âââââââââââââ
      â                            â
     â±ââ²                          â±ââ²
âââââââââââââââ             âââââââââââââââ
â  Business   ââ²            â    Person   â
â -legal_name ââââââââââââââ¼â -full_name  â
â+display_nameââ±            â+display_nameâ
âââââââââââââââ             âââââââââââââââ
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;array: supplier, reseller, customer, sales-rep&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;virtual attribute (public method)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We disucssed/explained this in (part 2)[post_ruby_rails/rails_6_x_agnostic_associations_2/]&lt;/p&gt;
&lt;h2 id=&#34;polymorphic&#34;&gt;Polymorphic&lt;/h2&gt;
&lt;p&gt;Coming soon&lt;/p&gt;
&lt;p&gt;a model associated with several different models - serving a similar purpose in both cases&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ââââââââââââââ          âââââââââââââ
  â            ââ²       1 â           â
  â  Business  â â â â â â¼â  Person   â
  â            ââ± 0..*    â           â
  ââââââââââââââ          âââââââââââââ
        â²ââ± *                * â²ââ±
         âââââââââââââ¬âââââââââââ
                     â¼ 1
             ââââââââââââââââ
             â              â
             â  Transaction â
             â              â
             ââââââââââââââââ
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A contact could be either a person or a business - but must be one or the other.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails g Contact roles:array business:references person:references
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the migration to ensure we have a role provided &amp;amp; relations:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;#
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the Contact model with the validations &amp;amp; flexible relations:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# contact.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the Person model and relations:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# person.rb

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the Business model and relations:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# business.rb

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;lets use seed a couple of people too - so it now looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/seed.rb
business = Business.create(legal_name: &amp;quot;Business&amp;quot;)
company = Business.create(legal_name: &amp;quot;Company&amp;quot;)

company.build_person(full_name: &amp;quot;Company Man&amp;quot;)
company.save

person = Person.create(full_name: &amp;quot;Own Person&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets check the seed with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:seed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming this works, let&amp;rsquo;s see the &amp;ldquo;/people&amp;rdquo; page:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails s
open localhost:3000/businesses/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great - lets snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;created person possibly related to the model&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Rails 6.x - Framework Agnostic Associations - part 1</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_x_agnostic_associations_1/</link>
      <pubDate>Wed, 19 May 2021 01:57:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_x_agnostic_associations_1/</guid>
      <description>&lt;h2 id=&#34;purpose&#34;&gt;Purpose&lt;/h2&gt;
&lt;p&gt;In the interest of coding Rails in a way to work well with other code bases, I looking at ways to do complex database relations in a framework agnostic way.  In particular, this article will primarily explore Polymorphic Relationships.&lt;/p&gt;
&lt;p&gt;This is the second article in the series.  This article is followed up with (part 2)[post_ruby_rails/rails_6_x_agnostic_associations_2/]&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;In this case, I want to model a contact list of businesses and people.  Some people will be associated with a company.  Additionally, we will track transactions with each person and business.&lt;/p&gt;
&lt;p&gt;The basic model will then look something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;          âââââââââââââ                         âââââââââââââ
          â           ââ²                       â±â           â
          â  Contact  âââââââââââââââââââââââââââUserContactâ
          â           ââ±                       â²â           â
          âââââââââââââ                         âââââââââââââ
                â¼                                    â²ââ±
                â                                     â
  âââââââââââââââ´ââââââââââââ                         â
  â                         â                         â
 â±ââ²                       â±ââ²                       â±ââ²
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;âââââââââââââ             âââââââââââââ             âââââââââââââ
â           ââ²            â           â             â           â
â Business  ââââââââââââââ¼â  Person   â             â   User    â
â           ââ±            â           â             â           â
âââââââââââââ             âââââââââââââ             âââââââââââââ
â¼                         â¼                         â¼
â                         â                         â
ââââââââââââââ¬âââââââââââââ                         â
â                                      â
â±ââ²                                     â
âââââââââââââ                                â
â           ââ²                               â
â  Remark   ââââââââââââââââââââââââââââââââââ
â           ââ±
âââââââââââââ&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                    Created with Monodraw
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-default-rails-app&#34;&gt;Create a default Rails app&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails new rails_poly
cd rails_poly
bin/rails db:create
bin/rails db:migrate
git add .
git commit -m &amp;quot;initial commit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;starting-simple---optional-relations&#34;&gt;Starting Simple - optional relations&lt;/h2&gt;
&lt;h3 id=&#34;build-businesses&#34;&gt;Build Businesses&lt;/h3&gt;
&lt;p&gt;Lets start with the simple relationship between businesses and people:&lt;/p&gt;
&lt;p&gt;ââââââââââââââ             âââââââââââââ
â            ââ²          1 â           â
â  Business  ââââââââââââââ¼â  Person   â
â-legal_name ââ±0..*        â-full_name â
ââââââââââââââ             âââââââââââââ&lt;/p&gt;
&lt;p&gt;For expedience, I&amp;rsquo;ll use scaffolds:&lt;/p&gt;
&lt;p&gt;Generating a simple business model.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails g scaffold Business legal_name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets adjust the migration to require the business&#39; legal name, by adding &lt;code&gt;null: false&lt;/code&gt; to the name:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/migrate/20210516080420_create_businesses.rb
class CreateBusinesses &amp;lt; ActiveRecord::Migration[6.1]
  def change
    create_table :businesses do |t|
      t.string :legal_name, null: false

      t.timestamps
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we will validate the business&#39; name in the model:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/business.rb
class Business &amp;lt; ApplicationRecord
  validates :legal_name, presence: true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets be sure we can migrate:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;lets use seed to quickly check our models and relations (&amp;amp; get an idea of how to use them):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/seeds.rb
business = Business.create(legal_name: &amp;quot;Business&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets check the seed with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:seed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming this works, let&amp;rsquo;s see the &amp;ldquo;/businesses&amp;rdquo; page:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails s
open localhost:3000/businesses/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great - lets snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;created business model&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;build-people&#34;&gt;Build People&lt;/h3&gt;
&lt;p&gt;Now let&amp;rsquo;s build the person model and its relations to businesses.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails g scaffold Person full_name business:references
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case we want the person to optionally be a member of a business, so lets update the both the models and the migration.  Starting with the migration, we need to remove &lt;code&gt;null: false&lt;/code&gt; in the foreign key, and add that to the name - so it should now look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/migrate/20210516080414_create_people.rb
class CreatePeople &amp;lt; ActiveRecord::Migration[6.1]
  def change
    create_table :people do |t|
      t.string :full_name, null: false
      t.references :company, foreign_key: true

      t.timestamps
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets adjust the person model - we&amp;rsquo;ll make the relation optional with &lt;code&gt;optional: true&lt;/code&gt; and require the name with the validation &lt;code&gt;validates :full_name, presence: true&lt;/code&gt;, so it should now look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/person.rb
class Person &amp;lt; ApplicationRecord
  belongs_to :company, optional: true

  validates :full_name, presence: true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And lets let the Business know it can have lots of people with &lt;code&gt;has_many :people&lt;/code&gt; - now the model will look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/business.rb
class Business &amp;lt; ApplicationRecord
  has_many :people

  validates :legal_name, presence: true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets check the migrations work:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;lets use seed a couple of people too - so it now looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/seed.rb
business = Business.create(legal_name: &amp;quot;Business&amp;quot;)
company = Business.create(legal_name: &amp;quot;Company&amp;quot;)

company.build_person(full_name: &amp;quot;Company Man&amp;quot;)
company.save

person = Person.create(full_name: &amp;quot;Own Person&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets check the seed with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:seed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets check our pages again:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails s
open localhost:3000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets check the index pages&lt;/p&gt;
&lt;p&gt;On the business page it would be nice to see how many employees - so we can update the model with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/business.rb
class Business &amp;lt; ApplicationRecord
  has_many :people

  validates :legal_name, presence: true

  def people_count
    people.count
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now &lt;code&gt;people_count&lt;/code&gt; is added as a virtual attribute (as well as all other business fields because of &lt;code&gt;&#39;businesses.*&lt;/code&gt;) - now we can use in our view using = &lt;code&gt;&amp;lt;td&amp;gt;&amp;lt;%= business.people_count %&amp;gt;&amp;lt;/td&amp;gt;&lt;/code&gt; so now it would look something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/businesses/index.html.erb
&amp;lt;h1&amp;gt;Businesses&amp;lt;/h1&amp;gt;

&amp;lt;table&amp;gt;
  &amp;lt;thead&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th&amp;gt;Legal name&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Employee Count&amp;lt;/th&amp;gt;
      &amp;lt;th colspan=&amp;quot;3&amp;quot;&amp;gt;&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/thead&amp;gt;

  &amp;lt;tbody&amp;gt;
    &amp;lt;% @businesses.each do |business| %&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= business.legal_name %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= business.people_count %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Show&#39;, business %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Edit&#39;, edit_business_path(business) %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Destroy&#39;, business, method: :delete, data: { confirm: &#39;Are you sure?&#39; } %&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and on the &amp;lsquo;/people&amp;rsquo; page it would be nice to see there business name instead of id.&lt;/p&gt;
&lt;p&gt;so in the model:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/model/person.rb
class Person &amp;lt; ApplicationRecord
  belongs_to :business, optional: true

  validates :full_name, presence: true

  def associated_business_name
    business&amp;amp;.legal_name
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and in the index view:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/people/index.html.erb
&amp;lt;table&amp;gt;
  &amp;lt;thead&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th&amp;gt;Full name&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Business&amp;lt;/th&amp;gt;
      &amp;lt;th colspan=&amp;quot;3&amp;quot;&amp;gt;&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/thead&amp;gt;

  &amp;lt;tbody&amp;gt;
    &amp;lt;% @people.each do |person| %&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= person.full_name %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= person.associated_business_name %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Show&#39;, person %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Edit&#39;, edit_person_path(person) %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Destroy&#39;, person, method: :delete, data: { confirm: &#39;Are you sure?&#39; } %&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to show all employees on the business show page we can do:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/businesses/show.html.erb
&amp;lt;p&amp;gt;
  &amp;lt;strong&amp;gt;Legal name:&amp;lt;/strong&amp;gt;
  &amp;lt;%= @business.legal_name %&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;table&amp;gt;
  &amp;lt;thead&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th&amp;gt;Employee&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/thead&amp;gt;
  &amp;lt;tbody&amp;gt;
    &amp;lt;% @business.people.each do |person| %&amp;gt;
    &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;person.full_name&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;/tbody&amp;gt;

&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now lets look for n+1 queries - to do that we will create many records in the seeds file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/seeds.rb
business = Business.create(legal_name: &amp;quot;Business&amp;quot;)
company  = Business.create(legal_name: &amp;quot;Company&amp;quot;)
boss_man = Person.create(full_name: &amp;quot;Company Man&amp;quot;, business: company)
person = Person.create(full_name: &amp;quot;Own Person&amp;quot;)

# larger numbers (look for n+1 lookups)
50.times do |business_number|
  company  = Business.create(legal_name: &amp;quot;Company #{business_number}&amp;quot;)
  business_number.times do |employee_number|
    Person.create(full_name: &amp;quot;Employee #{employee_number}&amp;quot;,
                  business: company)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when we visit &amp;lsquo;/people&amp;rsquo; we see an n+1 (to look up the business to get the business name) - this is an easy fix with a pre-load in the controller - just add &lt;code&gt;.include(:business)&lt;/code&gt; to the query - now the index method will look like&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/people_controller.rb
class PeopleController &amp;lt; ApplicationController

  def index
    @people = Person.include(:business).all
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fix n+1 lookups - for the business employee count is a bit trickier - to avoid lots of look ups we need the db to do the count and add the count as a virtual attribute - this is done with the following query:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/people_controller.rb
class BusinessController &amp;lt; ApplicationController

  def index
    # businesses = Business.all  # (N+1 when using referring to people)
    # select must go last or it gets lost / overwritten
    @businesses = Business.joins(:people)
                          .group(&#39;businesses.id&#39;)
                          .select(&#39;businesses.*, count(people.id) as people_count&#39;)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to avoid confusion - lets rename the method in the class to &lt;code&gt;employee_count&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/business.rb
class Business &amp;lt; ApplicationRecord
  has_many :people

  validates :legal_name, presence: true

  def employee_count
    people.count
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;lets run the seeds again:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:seed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;cool now when we look at the log we just have one query instead of many!&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s make the people form to associate a business by name instead of the id!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/people/_form.html.erb
&amp;lt;%= form_with(model: person) do |form| %&amp;gt;
  &amp;lt;% if person.errors.any? %&amp;gt;
    &amp;lt;div id=&amp;quot;error_explanation&amp;quot;&amp;gt;
      &amp;lt;h2&amp;gt;&amp;lt;%= pluralize(person.errors.count, &amp;quot;error&amp;quot;) %&amp;gt; prohibited this person from being saved:&amp;lt;/h2&amp;gt;

      &amp;lt;ul&amp;gt;
        &amp;lt;% person.errors.each do |error| %&amp;gt;
          &amp;lt;li&amp;gt;&amp;lt;%= error.full_message %&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;% end %&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;% end %&amp;gt;

  &amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
    &amp;lt;%= form.label :full_name %&amp;gt;
    &amp;lt;%= form.text_field :full_name %&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
    &amp;lt;%= form.label :business %&amp;gt;
    &amp;lt;%= form.select :business_id,
                    Business.all.collect { |b| [ b.legal_name, b.id ] },
                    prompt: &amp;quot;Select One&amp;quot;, include_blank: true %&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;actions&amp;quot;&amp;gt;
    &amp;lt;%= form.submit %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great - lets snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;created person related to businesses - w/o n+1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;polymorphic-sti---sometime-called-inverse-polymorphic&#34;&gt;Polymorphic (STI) - sometime called inverse polymorphic&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;          âââââââââââââââââ
          â    Contact    â
          â  (functions)+ â + supplier, reseller, customer, sales-rep
          â(display_name)*â * virtual attribute
          âââââââââââââââââ
                  â¼ 1
     ââââââââââââââ´ââââââââââââââ
    â±ââ² *                    * â±ââ²
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;âââââââââââââââââ          âââââââââââââââââ
â    Business   ââ²       1 â    Person     â
â  (legal_name) â â â â â â¼â  (full_name)  â
â(display_name)&lt;em&gt;ââ± 0..&lt;/em&gt;    â(display_name)*â
âââââââââââââââââ          âââââââââââââââââ&lt;/p&gt;
&lt;p&gt;A contact could be either a person or a business - but must be one or the other.&lt;/p&gt;
&lt;p&gt;This is implemented in (part 2)[post_ruby_rails/rails_6_x_agnostic_associations_2/]&lt;/p&gt;
&lt;h2 id=&#34;polymorphic&#34;&gt;Polymorphic&lt;/h2&gt;
&lt;p&gt;a model associated with several different models - serving a similar purpose in both cases&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ââââââââââââââ          âââââââââââââ
  â            ââ²       1 â           â
  â  Business  â â â â â â¼â  Person   â
  â            ââ± 0..*    â           â
  ââââââââââââââ          âââââââââââââ
        â²ââ± *                * â²ââ±
         âââââââââââââ¬âââââââââââ
                     â¼ 1
             ââââââââââââââââ
             â              â
             â  Transaction â
             â              â
             ââââââââââââââââ
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A contact could be either a person or a business - but must be one or the other.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails g Contact roles:array business:references person:references
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the migration to ensure we have a role provided &amp;amp; relations:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;#
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the Contact model with the validations &amp;amp; flexible relations:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# contact.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the Person model and relations:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# person.rb

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the Business model and relations:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# business.rb

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;lets use seed a couple of people too - so it now looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/seed.rb
business = Business.create(legal_name: &amp;quot;Business&amp;quot;)
company = Business.create(legal_name: &amp;quot;Company&amp;quot;)

company.build_person(full_name: &amp;quot;Company Man&amp;quot;)
company.save

person = Person.create(full_name: &amp;quot;Own Person&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets check the seed with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:seed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming this works, let&amp;rsquo;s see the &amp;ldquo;/people&amp;rdquo; page:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails s
open localhost:3000/businesses/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great - lets snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;created person possibly related to the model&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Lucky Framework with Crystal Language</title>
      <link>https://btihen.me/post_crystal/lucky_0_27_project_basics/</link>
      <pubDate>Sun, 02 May 2021 01:01:53 +0200</pubDate>
      <guid>https://btihen.me/post_crystal/lucky_0_27_project_basics/</guid>
      <description>&lt;h2 id=&#34;purpose&#34;&gt;Purpose&lt;/h2&gt;
&lt;p&gt;My goal is to have a simple tutorial to understand and use basic Lucky framework features.  I recommend this as a great platform if you work in English and publish in English.&lt;/p&gt;
&lt;p&gt;If internationalization and or other languages and language flexibility are important to you and your work, then I recommend Rails or Phoenix.  If/when internationalization and language flexibility become easier - I&amp;rsquo;ll probably switch to Lucky.&lt;/p&gt;
&lt;h2 id=&#34;why-lucky&#34;&gt;Why Lucky&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Lucky offers all the features I use in Rails - but is type safe and faster than rails.&lt;/li&gt;
&lt;li&gt;Lucky&amp;rsquo;s focus is on run-time stability (its not the fastest Crystal Framework, but it faster than rails).&lt;/li&gt;
&lt;li&gt;The code / structure is well organized.&lt;/li&gt;
&lt;li&gt;The Lucky Discord community is extremely helpful!&lt;/li&gt;
&lt;li&gt;The Docs are generally good when you are investigating a specific component &amp;amp; when that is missing - the codebase can be searched (and the code is clear)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;See: &lt;a href=&#34;https://luckyframework.org/guides/getting-started/why-lucky&#34;&gt;https://luckyframework.org/guides/getting-started/why-lucky&lt;/a&gt; for a full list of what Lucky aims to improve.&lt;/p&gt;
&lt;p&gt;PS - I didn&amp;rsquo;t try out more advanced features such as file uploads, remote file storage, sending emails, etc.  These are all common in the apps I write.&lt;/p&gt;
&lt;h2 id=&#34;why-not-lucky-027&#34;&gt;Why Not Lucky (0.27)&lt;/h2&gt;
&lt;p&gt;I am hoping that Lucky 1.0 will address much of the following.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I found I had to read a lot of docs (scattered over many locations) &amp;amp; experiment to grock the basic design/mindset what do for common simple things: (like making a field optional and how to adapt a shared / component form)&lt;/li&gt;
&lt;li&gt;There aren&amp;rsquo;t many Stack Overflow or Blogs describing basic usage.&lt;/li&gt;
&lt;li&gt;The docs in some cases are incomplete, misleading or have missing information and are not oriented to getting doing the things a framework beginner needs to know.&lt;/li&gt;
&lt;li&gt;The helper scripts don&amp;rsquo;t help with Relationships - that must be done by hand&lt;/li&gt;
&lt;li&gt;Language support is very hard to accomplish - I was never able to reliably use the inflector.&lt;/li&gt;
&lt;li&gt;Setting up internationalization is time consuming and manual and as far as I can tell possibly not easy to integrate with the inflector.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The language support is a BIGGIE for me - living in a country where we regularly work with multiple language (Rails and/or Phoenix have much better i18n support)!&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t see the lack of Stack Overflow articles as such a big problem since the Lucky Discord group is so helpful.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;This article is a collection of making sense of the following resources&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://luckycasts.com/&#34;&gt;https://luckycasts.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://luckyframework.org/guides&#34;&gt;https://luckyframework.org/guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://onchain.io/blog/lucky_tutorial&#34;&gt;https://onchain.io/blog/lucky_tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/andrewmcodes/awesome-lucky&#34;&gt;https://github.com/andrewmcodes/awesome-lucky&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/stephendolan/lucky_jumpstart&#34;&gt;https://github.com/stephendolan/lucky_jumpstart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&#34;&gt;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;installing-lucky&#34;&gt;Installing Lucky&lt;/h2&gt;
&lt;p&gt;For more information see: &lt;a href=&#34;https://luckyframework.org/guides/getting-started/installing&#34;&gt;https://luckyframework.org/guides/getting-started/installing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;brew install&lt;/code&gt; of lucky (on a MacOS) is bit broken, but the Linux install technique works well on MacOS!&lt;/p&gt;
&lt;p&gt;First be sure openssl and postgresql are installed and findable:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install openssl postgresql

# and depending on your shell either (if you don&#39;t know which it is safe to do both):
echo &#39;export PKG_CONFIG_PATH=/usr/local/opt/openssl/lib/pkgconfig&#39; &amp;gt;&amp;gt;~/.zshrc
echo &#39;export PKG_CONFIG_PATH=/usr/local/opt/openssl/lib/pkgconfig&#39; &amp;gt;&amp;gt;~/.bash_profile

# IMPORTANT - OPEN a new terminal

# or if you know what shell you are using you can reload it with source!
source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now install (or be sure ASDF is installed). &lt;a href=&#34;https://asdf-vm.com/#/core-manage-asdf-vm&#34;&gt;https://asdf-vm.com/#/core-manage-asdf-vm&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install asdf
# assuming bash
echo -e &amp;quot;\n. $(brew --prefix asdf)/asdf.sh&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile
echo -e &amp;quot;\n. $(brew --prefix asdf)/etc/bash_completion.d/asdf.bash&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile

# or zsh
echo -e &amp;quot;\n. $(brew --prefix asdf)/asdf.sh&amp;quot; &amp;gt;&amp;gt; ${ZDOTDIR:-~}/.zshrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we add asdf plugin for crystal:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;asdf plugin-add crystal https://github.com/asdf-community/asdf-crystal.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For both Ruby and Crystal the following is also helpful:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &amp;quot;legacy_version_file = yes&amp;quot; &amp;gt;&amp;gt;~/.asdfrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lucky 0.27 needs Crystal 0.36.1 (not Crystal 1.0.0) - so we install it with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;asdf install crystal 0.36.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I like to the local folder to crystal 0.36.1 (&amp;amp; the node version too) - this will allow use to install and run the lucky-cli tool&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &amp;quot;cyrstal 0.36.1&amp;quot; &amp;gt;&amp;gt; .tool-versions
echo &amp;quot;node 14.16.0&amp;quot; &amp;gt;&amp;gt; .tool-versions
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(but you can also just use: &lt;code&gt;asdf global crystal 0.36.1&lt;/code&gt; - so you don&amp;rsquo;t have to set the crystal version in every file you work in)!&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s install lucky_cli &amp;amp; also lucky&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/luckyframework/lucky_cli
cd lucky_cli
git checkout v0.27.0
shards install

# if this following step fails (you probably forgot to reload your shell after the openssl lib path update)
crystal build src/lucky.cr

# make your compiled lucky_cli available everywhere
mv lucky /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if you check your settings you should get:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky -v
# This should return 0.27.0

node -v
# should be 12.x or greater

yarn -v
# should be 1.x or greater

psql --version
# should be 10.x or greater
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;start-a-lucky-project&#34;&gt;Start a Lucky Project&lt;/h2&gt;
&lt;p&gt;Create your new Lucky project with the wizzard (just answer questions) - other options are at: &lt;a href=&#34;https://luckyframework.org/guides/getting-started/starting-project&#34;&gt;https://luckyframework.org/guides/getting-started/starting-project&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky init
cd {project_name}

# update the db settings in: `config/database.cr`

# if this step fails you may have forgotten to reload the shell after updating the openssl path
script/setup

# run lucky with:
lucky dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok lets do an initial commit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;initial commit after create&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;quick-lucky-test-tip&#34;&gt;Quick Lucky Test Tip&lt;/h2&gt;
&lt;p&gt;Lets quickly test our new config wiht &lt;code&gt;lucky exec&lt;/code&gt; - type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky exec
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This gives you an edit in your cli and you can type a small amount of code and it will be compiles and print you the results - ie:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky exec
# then when vim or nano opens you can enter something like:

require &amp;quot;../../src/app.cr&amp;quot;

include Lucky::TextHelpers

pp pluralize(2, &amp;quot;human&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and hopefuly you get &lt;code&gt;2 humans&lt;/code&gt; - cool - it works lets snapshot our changes.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;language inflection updates and customization&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;scaffold-a-simple-resource&#34;&gt;Scaffold a Simple Resource&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://luckyframework.org/guides/command-line-tasks/built-in&#34;&gt;https://luckyframework.org/guides/command-line-tasks/built-in&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now if we try again (we are free to use human again):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky gen.resource.browser Human name:String
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets run the migration:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky db.migrate

# oops I haven&#39;t create the DB yet
lucky db.create

# now migrate
lucky db.migrate

# start lucky &amp;amp; test
lucky dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now log_in and create humans at the &lt;code&gt;/humans&lt;/code&gt; url&lt;/p&gt;
&lt;p&gt;Cool - lets snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;First simple &#39;Human&#39; resource with scaffold&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-related-model&#34;&gt;Create a Related Model&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luckyframework.org/guides/database/models#belongs-to&#34;&gt;https://www.luckyframework.org/guides/database/models#belongs-to&lt;/a&gt;
&lt;a href=&#34;https://www.luckyframework.org/guides/database/models#has-many-one-to-many&#34;&gt;https://www.luckyframework.org/guides/database/models#has-many-one-to-many&lt;/a&gt;
&lt;a href=&#34;https://luckyframework.org/guides/database/migrations#associations&#34;&gt;https://luckyframework.org/guides/database/migrations#associations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, the Lucky generators don&amp;rsquo;t understand &lt;code&gt;belongs_to&lt;/code&gt; so we will need to do a few extra tweeks &amp;ndash; since we can&amp;rsquo;t do something like human:belongs_to or human:references like with Rails.&lt;/p&gt;
&lt;p&gt;So if we want to scaffold &amp;ldquo;pets&amp;rdquo; now and have them belong to humans (and humans can have many pets) - we first do:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky gen.resource.browser Pet name:String breed:String species:String age:Int32 house_trained:Bool
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;rsquo;s setup the relationships:&lt;/p&gt;
&lt;p&gt;First we need to update the migration with the human foreign_key using: &lt;code&gt;add_belongs_to&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So we need to update our pets migration to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# db/migrations/yyyymmddxxxxxx_create_pets.cr
class CreatePets::V20210502100912 &amp;lt; Avram::Migrator::Migration::V1
  def migrate
    create table_for(Pet) do
      primary_key id : Int64
      add_timestamps
      add name : String
      add breed : String
      add species : String
      add age : Int32
      add house_trained : Bool

      # When the associated human is deleted, their pets are also deleted
      # because we set on_delete: :cascade
      add_belongs_to human : Human, on_delete: :cascade    # relationship - newly added
    end
  end

  def rollback
    drop table_for(Pet)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that the pets database table will is correct - lets update the pet model too.
This is straight-forward we just need to add &lt;code&gt;belongs_to human : Human&lt;/code&gt; in the model file so it changes to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# src/models/pet.cr
class Pet &amp;lt; BaseModel
  table do
    column name : String
    column breed : String     # column breed : String? - makes this field optional
    column species : String
    column age : Int32
    column house_trained : Bool

    belongs_to human : Human  # relationship - newly added
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now we need to add &lt;code&gt;has_many&lt;/code&gt; to the &lt;code&gt;Human&lt;/code&gt; model.  So we change it to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# src/models/human.cr
class Human &amp;lt; BaseModel
  table do
    column name : String

    has_many pets : Pet    # relationship - newly added
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can migrate:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky db.migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;lucky-html-and-rootpage-routing&#34;&gt;Lucky HTML and RootPage Routing&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://luckycasts.com/videos/lucky-html-in-crystal&#34;&gt;https://luckycasts.com/videos/lucky-html-in-crystal&lt;/a&gt;
&lt;a href=&#34;https://www.luckyframework.org/guides/http-and-routing/routing-and-params#root-page&#34;&gt;https://www.luckyframework.org/guides/http-and-routing/routing-and-params#root-page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If we look in &lt;code&gt;src/actions/home/index.cr&lt;/code&gt; we see:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# src/actions/home/index.cr
class Home::Index &amp;lt; BrowserAction
  include Auth::AllowGuests

  get &amp;quot;/&amp;quot; do
    if current_user?
      redirect Me::Show
    else
      # html Landing::IndexPage
      html Lucky::WelcomePage
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we can see - when we are not logged in &amp;ldquo;/&amp;rdquo; points to &lt;code&gt;Lucky::WelcomePage&lt;/code&gt; or whatever new landing page we make and when logged in we are pointed to the &lt;code&gt;Me::Show&lt;/code&gt; page.&lt;/p&gt;
&lt;p&gt;Let practice adding some &lt;code&gt;html&lt;/code&gt; and add links to our expected resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lsquo;/humans&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;/pets&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So lets change this too and practice lucky html&lt;/p&gt;
&lt;p&gt;We will add our list of resources - &amp;lsquo;pets&amp;rsquo; and &amp;lsquo;humans&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;So from looking at the existing html in &lt;code&gt;src/pages/me/show_page.cr&lt;/code&gt; it&amp;rsquo;s like a combo of haml and JS to create executable blocks with &lt;code&gt;{}&lt;/code&gt; so I created the method: &lt;code&gt;private def resource_links&lt;/code&gt; and tried out two methods of linking - not bad, but I figure it will take a bit of practice with this new format.  I don&amp;rsquo;t know the reason behind this, since almost all web resources will need to be reformatted - but I assume it is pre-compiled and thus fast!&lt;/p&gt;
&lt;p&gt;In the end I created this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# src/pages/me/show_page.cr
class Me::ShowPage &amp;lt; MainLayout
  def content
    h1 &amp;quot;This is your profile:&amp;quot;
    h2 &amp;quot;Email:  #{@current_user.email}&amp;quot;
    resource_links
    helpful_tips
  end

  private def resource_links
    h2 &amp;quot;Available Resources&amp;quot;
    ul do
      li { a &amp;quot;Pet Owners&amp;quot;, href: &amp;quot;/humans&amp;quot; }
      li { link_to_pets }
    end
  end

  private def helpful_tips
    h3 &amp;quot;Next, you may want to:&amp;quot;
    ul do
      li { link_to_authentication_guides }
      li &amp;quot;Modify this page: src/pages/me/show_page.cr&amp;quot;
      li &amp;quot;Change where you go after sign in: src/actions/home/index.cr&amp;quot;
    end
  end

  private def link_to_pets
    a &amp;quot;Pets&amp;quot;, href: &amp;quot;/pets&amp;quot;
  end

  private def link_to_authentication_guides
    a &amp;quot;Check out the authentication guides&amp;quot;,
      href: &amp;quot;https://luckyframework.org/guides/authentication&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;lets test it out:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;cool - good enough for now.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;added html links to user_home_page &#39;me&#39;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;seed-files&#34;&gt;Seed Files&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&#34;&gt;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&lt;/a&gt;
&lt;a href=&#34;https://luckyframework.org/guides/database/database-setup#seeding-data&#34;&gt;https://luckyframework.org/guides/database/database-setup#seeding-data&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now we can create seed files and be sure our basic relations work:&lt;/p&gt;
&lt;p&gt;Lets test our building a model and the Lucky mechanisms before we get fancy with relationships and in particular polymorphism.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://luckyframework.org/guides/tutorial/new-resource&#34;&gt;https://luckyframework.org/guides/tutorial/new-resource&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So we will generate an animal resource - using a full stack generator:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky gen.resource.browser Animal nick_name:String species:String
lucky db.migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;rsquo;s create some sample data in &lt;code&gt;tasks/db/seed/sample_data.cr&lt;/code&gt; - via the seed task - from these instructions: &lt;a href=&#34;https://luckyframework.org/guides/database/database-setup#seeding-data&#34;&gt;https://luckyframework.org/guides/database/database-setup#seeding-data&lt;/a&gt; as our base.&lt;/p&gt;
&lt;p&gt;We will start by using what&amp;rsquo;s used to save when we create new records with incomming data. &lt;code&gt;SaveAnimal.create!(nick_name: &amp;quot;racky coon&amp;quot;)&lt;/code&gt; so now our file will look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-crystal&#34;&gt;# tasks/db/seed/sample_data.cr
require &amp;quot;../../../spec/support/factories/**&amp;quot;

class Db::Seed::SampleData &amp;lt; LuckyTask::Task
  summary &amp;quot;Add sample database records helpful for development&amp;quot;

  def call
    SavePet.create!(nick_name: &amp;quot;racky coon&amp;quot;)

    puts &amp;quot;Done adding sample data&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We test this with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lucky db.seed.sample_data
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;assuming this runs we should be able to view this data in our db (I often use the cli - but you might also want to use: &lt;code&gt;dbgate&lt;/code&gt; &lt;a href=&#34;https://dbgate.org/):&#34;&gt;https://dbgate.org/):&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;psql
\l
\c lucky_poly_development
select * from animals;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;cool - lets try a factory too - these are especially help when complex and building relationships, etc:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-crystal&#34;&gt;# spec/support/factories/animal_factory.cr
class AnimalFactory &amp;lt; Avram::Factory
  def initialize
    nick_name &amp;quot;Nick Name&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now lets try using our factory in the seed file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-crystal&#34;&gt;# tasks/db/seed/sample_data.cr
require &amp;quot;../../../spec/support/factories/**&amp;quot;

class Db::Seed::SampleData &amp;lt; LuckyTask::Task
  summary &amp;quot;Add sample database records helpful for development&amp;quot;

  def call
    SaveAnimal.create!(nick_name: &amp;quot;racky coon&amp;quot;, species: &amp;quot;racoon&amp;quot;)

    # using a factory: https://luckyframework.org/guides/testing/creating-test-data#factory-create
    AnimalFactory.create do |factory|
      factory.nick_name(&amp;quot;Dyno&amp;quot;)
      factory.species(&amp;quot;Dog&amp;quot;)
    end

    # a shortcut way to write a block in crystal, see: https://crystal-lang.org/reference/syntax_and_semantics/blocks_and_procs.html#short-one-argument-syntax
    AnimalFactory.create &amp;amp;.nick_name(&amp;quot;ShinÃ©&amp;quot;).species(&amp;quot;cat&amp;quot;)

    puts &amp;quot;Done adding sample data&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test again with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lucky db.seed.sample_data
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sweet, let&amp;rsquo;s snapshot and try more complex stuff!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;add a simple model and seed data in it&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;simple-lucky-forms-in-pages-instead-of-shared&#34;&gt;Simple Lucky Forms (in pages instead of shared)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://luckycasts.com/videos/component-basics&#34;&gt;https://luckycasts.com/videos/component-basics&lt;/a&gt;
&lt;a href=&#34;https://luckycasts.com/videos/lucky-html-in-crystal&#34;&gt;https://luckycasts.com/videos/lucky-html-in-crystal&lt;/a&gt;
&lt;a href=&#34;https://luckyframework.org/guides/frontend/html-forms&#34;&gt;https://luckyframework.org/guides/frontend/html-forms&lt;/a&gt;
&lt;a href=&#34;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&#34;&gt;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&lt;/a&gt;
&lt;a href=&#34;https://luckyframework.org/guides/frontend/html-forms#shared-components&#34;&gt;https://luckyframework.org/guides/frontend/html-forms#shared-components&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lets test the web page&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and go to the url &lt;code&gt;/pets&lt;/code&gt; and create a &lt;strong&gt;Pet&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We discover we have problems - validation errors.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type mismatches (crystal is strongly typed - but the form generator ignores this - so we need to adjust by hans)&lt;/li&gt;
&lt;li&gt;Required human_id is missing (the generator isn&amp;rsquo;t aware of &lt;code&gt;belongs_to&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I didn&amp;rsquo;t find lots of Documentation or examples on Components, but I did find this article - which got me started on Lucky html and forms:
&lt;a href=&#34;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&#34;&gt;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After I figured out how to update FormComponents I found this: &lt;a href=&#34;https://luckycasts.com/videos/component-basics&#34;&gt;https://luckycasts.com/videos/component-basics&lt;/a&gt; - I&amp;rsquo;ll go back and view this!&lt;/p&gt;
&lt;p&gt;This got me going!  However, one difficulty I had was the Boolean field &lt;code&gt;house_trained&lt;/code&gt; - I tried both Checkboxes and Radio Buttons, but I kept getting &lt;code&gt;overload&lt;/code&gt; errors (which I finally realized were type mis-matches - you can&amp;rsquo;t send text into a Boolean field).  So I settled on a select_list where I can present a tuple with a &amp;ldquo;human readable value&amp;rdquo; and a &amp;ldquo;model value&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;So in the end my first draft form looked like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# src/pages/pets/new_page.cr
class Pets::NewPage &amp;lt; MainLayout
  needs operation : SavePet
  quick_def page_title, &amp;quot;New Pet&amp;quot;

  def content
    h1 &amp;quot;New Pet&amp;quot;
    render_pet_form(operation)
  end

  def render_pet_form(op)
    # comment out the form component for now
    # form_for Pets::Create do
    #   # Edit fields in src/components/pets/form_fields.cr
    #   mount Pets::FormFields, op

    #   submit &amp;quot;Save&amp;quot;, data_disable_with: &amp;quot;Saving...&amp;quot;
    # end

    form_for Pets::Create do
      div do
        label_for op.name
        text_input op.name
      end
      div do
        label_for op.species
        select_input(op.species, class: &amp;quot;custom-select&amp;quot;) do
          select_prompt(&amp;quot;Select&amp;quot;)
          options_for_select(op.species, [{&amp;quot;Cat&amp;quot;, &amp;quot;cat&amp;quot;}, {&amp;quot;Dog&amp;quot;, &amp;quot;dog&amp;quot;}])
        end
      end
      # eventually allow for this to be blank
      # eventually allow a dropdown list to be dependent on species
      div do
        label_for op.breed
        text_input op.breed
      end
      div do
        label_for op.age
        number_input(op.age, class: &amp;quot;custom-input&amp;quot;, min: &amp;quot;0&amp;quot;, max: &amp;quot;99&amp;quot;)
      end
      div do
        label_for op.house_trained
        select_input(op.house_trained, class: &amp;quot;custom-select&amp;quot;) do
          select_prompt(&amp;quot;Select&amp;quot;)
          options_for_select(op.house_trained, [{&amp;quot;yes&amp;quot;, true}, {&amp;quot;No&amp;quot;, false}])
        end
      end
      div do
        label_for op.human_id
        select_input op.human_id do
          options_for_select(op.human_id, humans_for_select)
        end
      end
      submit &amp;quot;Save Pet&amp;quot;
    end
  end

  # find all the humans and create a tuple of the name and id - displayed and passed to model
  private def humans_for_select
    HumanQuery.new.map do |human|
      { human.name, human.id }
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;of course this isn&amp;rsquo;t shared by the &lt;code&gt;edit&lt;/code&gt; page, but it is still helpful to see the Lucky way to create html.&lt;/p&gt;
&lt;p&gt;So after a while I figured out how to revert this code and use SharedForms (I think this is a form of FrontEnd Components).&lt;/p&gt;
&lt;p&gt;Lets test again:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool it works as I expect&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;a working &#39;new&#39; html form - not shared&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;shared-web-form---component&#34;&gt;Shared Web Form - Component&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://luckycasts.com/videos/component-basics&#34;&gt;https://luckycasts.com/videos/component-basics&lt;/a&gt;
&lt;a href=&#34;https://luckyframework.org/guides/frontend/html-forms&#34;&gt;https://luckyframework.org/guides/frontend/html-forms&lt;/a&gt;
&lt;a href=&#34;https://luckyframework.org/guides/frontend/html-forms#shared-components&#34;&gt;https://luckyframework.org/guides/frontend/html-forms#shared-components&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;With a little more experience with Lucky HTML lets try the component forms again at &lt;code&gt;src/components/pets/form_fields.cr&lt;/code&gt; (so lets revert: &lt;code&gt;src/pages/pets/new_page.cr&lt;/code&gt; back to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# src/pages/pets/new_page.cr
class Pets::NewPage &amp;lt; MainLayout
  needs operation : SavePet
  quick_def page_title, &amp;quot;New Pet&amp;quot;

  def content
    h1 &amp;quot;New Pet&amp;quot;
    render_pet_form(operation)
  end

  def render_pet_form(op)
    form_for Pets::Create do
      # Edit fields in src/components/pets/form_fields.cr
      mount Pets::FormFields, op

      submit &amp;quot;Save&amp;quot;, data_disable_with: &amp;quot;Saving...&amp;quot;
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once I had build the first form and understood the errors - so the same form as a form_component looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# src/components/pets/form_fields.cr
class Pets::FormFields &amp;lt; BaseComponent
  needs operation : SavePet

  def render
    mount Shared::Field, operation.name, &amp;amp;.text_input(autofocus: &amp;quot;true&amp;quot;)
    mount Shared::Field, operation.species do |input_html|
      input_html.select_input append_class: &amp;quot;select-input&amp;quot; do
        select_prompt(&amp;quot;Select&amp;quot;)
        options_for_select operation.species, [{&amp;quot;Dog&amp;quot;, &amp;quot;dog&amp;quot;}, {&amp;quot;Cat&amp;quot;, &amp;quot;cat&amp;quot;}]
      end
    end
    mount Shared::Field, operation.breed
    mount Shared::Field, operation.age, &amp;amp;.number_input(append_class: &amp;quot;custom-input&amp;quot;, min: &amp;quot;0&amp;quot;, max: &amp;quot;99&amp;quot;)
    mount Shared::Field, operation.house_trained do |input_html|
      input_html.select_input append_class: &amp;quot;select-input&amp;quot; do
        select_prompt(&amp;quot;Select&amp;quot;)
        options_for_select operation.house_trained, [{&amp;quot;yes&amp;quot;, true}, {&amp;quot;no&amp;quot;, false}]
      end
    end
    mount Shared::Field, operation.human_id do |input_html|
      input_html.select_input append_class: &amp;quot;select-input&amp;quot; do
        select_prompt(&amp;quot;Select&amp;quot;)
        options_for_select operation.human_id, options_for_humans
      end
    end
  end

  private def options_for_humans
    HumanQuery.new.map do |human|
      { human.name, human.id }
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;the documentation has several examples with: &lt;code&gt;attrs: [:required]&lt;/code&gt; in the form.  This does client side validation (will not even submit the form if empty).  I don&amp;rsquo;t recommend using this generally.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if you don&amp;rsquo;t put anything next to the variable a text input without anything more than the errors are assumed &lt;code&gt;&amp;amp;.text_input()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Lets test again:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;cool - lets snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;working shared form component with a variety of types&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;redirect-after-create--update-to-index&#34;&gt;Redirect after Create / Update to Index&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://luckyframework.org/guides/http-and-routing/routing-and-params&#34;&gt;https://luckyframework.org/guides/http-and-routing/routing-and-params&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I find it annoying after creating and updating a resource to have to then manually go back to the index page from the show page.&lt;/p&gt;
&lt;p&gt;In lucky the routing/controll happens in the &lt;code&gt;action&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;To change what happens after creating and updating a Pet we simply change &lt;code&gt;src/actions/pets/create.cr&lt;/code&gt; to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# src/actions/pets/create.cr
class Pets::Create &amp;lt; BrowserAction
  post &amp;quot;/pets&amp;quot; do
    SavePet.create(params) do |operation, pet|
      if pet
        flash.success = &amp;quot;The record has been saved&amp;quot;
        html IndexPage, pets: PetQuery.new  # new action (copied from index)
        # redirect Show.with(pet.id)        # old no longer wanted
      else
        flash.failure = &amp;quot;It looks like the form is not valid&amp;quot;
        html NewPage, operation: operation
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And update &lt;code&gt;src/actions/pets/update.cr&lt;/code&gt; is similarly easy:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# src/actions/pets/update.cr
class Pets::Update &amp;lt; BrowserAction
  put &amp;quot;/pets/:pet_id&amp;quot; do
    pet = PetQuery.find(pet_id)
    SavePet.update(pet, params) do |operation, updated_pet|
      if operation.saved?
        flash.success = &amp;quot;The record has been updated&amp;quot;
        html IndexPage, pets: PetQuery.new
        # redirect Show.with(updated_pet.id)
      else
        flash.failure = &amp;quot;It looks like the form is not valid&amp;quot;
        html EditPage, operation: operation, pet: updated_pet
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I appreciate how explicit these are!&lt;/p&gt;
&lt;h2 id=&#34;optional-fields&#34;&gt;Optional Fields&lt;/h2&gt;
&lt;p&gt;Often a &lt;strong&gt;breed&lt;/strong&gt; is unknown - we could just add an &lt;code&gt;unknown&lt;/code&gt; value, but that&amp;rsquo;s silly, lets figure out how to work with unknown / unneeded data and allow nil in our &lt;code&gt;breed&lt;/code&gt; field.&lt;/p&gt;
&lt;p&gt;Since Crystal is strongly typed - one needs to explicitly mark that a field can be nil with &lt;code&gt;?&lt;/code&gt; - you can see the docs here: &lt;a href=&#34;https://luckyframework.org/guides/database/models#adding-a-column&#34;&gt;https://luckyframework.org/guides/database/models#adding-a-column&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So to make &lt;strong&gt;breed&lt;/strong&gt; optional we will change the pets model to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Pet &amp;lt; BaseModel
  table do
    column name : String
    column species : String
    column breed : String?  # adding `?` makes the field optional (nil-able)
    column age : Int32
    column house_trained : Bool

    # relations
    belongs_to owner : Owner
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when I run lucky - I&amp;rsquo;ll expect to find some errors - (probably in a view saying I need null protecction).  However instead I get:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Unhandled exception: Pet has defined &#39;breed&#39; as nilable (String?), but the database column does not allow nils.
web          |
web          | Either mark the column as required in Pet:
web          |
web          |   # Remove the &#39;?&#39;
web          |   column breed : String
web          |
web          | Or, make the column optional in a migration:
web          |
web          |   â¸ Generate a migration:
web          |
web          |       lucky gen.migration MakePetBreedOptional
web          |
web          |   â¸ Make the column optional:
web          |
web          |       make_optional :pets, :breed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oddly, I don&amp;rsquo;t see anything in the migration Docs &lt;code&gt;https://www.luckyframework.org/guides/database/migrations&lt;/code&gt; about marking a file optional (nor how to make it optional in the original migration).  Since we w&lt;/p&gt;
&lt;p&gt;But lets try:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky gen.migration MakePetBreedOptional
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hmm, the error says what to put in the migration, but not the rollback, lets search the luckyframework repos and see what we find:  &lt;a href=&#34;https://github.com/luckyframework/avram/blob/f676a9a7d2e70d74891ad686039bf393983d0760/src/avram/migrator/statement_helpers.cr&#34;&gt;https://github.com/luckyframework/avram/blob/f676a9a7d2e70d74891ad686039bf393983d0760/src/avram/migrator/statement_helpers.cr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here we see what the options are so lets edit the migration to look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class MakePetBreedOptional::V20210507125901 &amp;lt; Avram::Migrator::Migration::V1
  def migrate
    make_optional :pets, :breed
    # alter table_for(Pet) do
    #   make_optional :breed
    # end
  end

  def rollback
    # query for breed fields that are nil and fill them BEFORE making the field REQUIRED!
    PetQuery.new.breed.is_nil.each do |pet|
      SavePet.update!(pet, breed: &amp;quot;unknown&amp;quot;)
    end
    # this would work too, but might as well let the db do the heavy lifting
    # PetQuery.new.each do |pet|
    #   SavePet.update!(pet, breed: &amp;quot;unknown&amp;quot;) if pet.breed.nil?
    # end

    # simple way of making ONE field required
    make_required :pets, :breed

    # this would be better when changing lots of fields
    # alter table_for(Pet) do
    #   make_required :breed
    # end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OK - lets try again:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool it works - lets make a new record - with an null value.&lt;/p&gt;
&lt;p&gt;Lets look at the record within postgresql:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;psql -d pets_development
select * from pets;

 id |       created_at       |       updated_at       | name  | breed | species | age | house_trained | owner_id
----+------------------------+------------------------+-------+-------+---------+-----+---------------+----------
  1 | 2021-05-07 15:23:28+02 | 2021-05-07 15:23:28+02 | Nyima |       | dog     |  11 | t             |        1
\q
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;rsquo;s be sure our rollback works.  Notice - before we make it &lt;code&gt;required&lt;/code&gt; we find records with nil values and fill them &lt;code&gt;unknown&lt;/code&gt;.  An example of adding data logic within a migration can be found at: &lt;a href=&#34;https://luckyframework.org/guides/database/migrations#using-fill_existing_with-and-default-values&#34;&gt;https://luckyframework.org/guides/database/migrations#using-fill_existing_with-and-default-values&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky db.rollback
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OK - good the migration didn&amp;rsquo;t crash - lets check the DB.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
psql -d pets_development
select * from pets;

 id |       created_at       |       updated_at       | name  |  breed  | species | age | house_trained | owner_id
----+------------------------+------------------------+-------+---------+---------+-----+---------------+----------
  1 | 2021-05-07 15:23:28+02 | 2021-05-07 16:28:55+02 | Nyima | unknown | dog     |  11 | t             |        1
\q
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nice it worked.&lt;/p&gt;
&lt;h2 id=&#34;display-validation-errors&#34;&gt;Display Validation Errors&lt;/h2&gt;
&lt;p&gt;If we leave some fields out - Lucky gives us validation errors - all fields appear to be required without explicitly allowing nils - but we don&amp;rsquo;t see them with our default form.  Lets fix that.&lt;/p&gt;
&lt;h2 id=&#34;add-validations&#34;&gt;Add Validations&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s add a few custom validations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;minimal pet_name length&lt;/li&gt;
&lt;li&gt;numeric range&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tests-for-our-validations&#34;&gt;Tests for our Validations&lt;/h2&gt;
&lt;p&gt;Now that we have some logic lets add some tests&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/luckyframework/lucky_flow&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BrowserTesting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pretty-urls&#34;&gt;Pretty URLs&lt;/h2&gt;
&lt;p&gt;Looks interesting and easy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/luckyframework/avram_slugify&#34;&gt;https://github.com/luckyframework/avram_slugify&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lucky-pubsub&#34;&gt;Lucky PubSub&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/luckyframework/pulsar&#34;&gt;https://github.com/luckyframework/pulsar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bulma-integration&#34;&gt;Bulma Integration&lt;/h2&gt;
&lt;p&gt;Integrate CSS Frameworks&lt;/p&gt;
&lt;h2 id=&#34;view-components&#34;&gt;View Components&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://luckycasts.com/videos/component-basics&#34;&gt;https://luckycasts.com/videos/component-basics&lt;/a&gt;
&lt;a href=&#34;https://luckyframework.org/guides/frontend/rendering-html#creating-and-using-components&#34;&gt;https://luckyframework.org/guides/frontend/rendering-html#creating-and-using-components&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;tailwind-integration&#34;&gt;Tailwind Integration&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://luckycasts.com/videos/tailwind-css&#34;&gt;https://luckycasts.com/videos/tailwind-css&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s make the pages a bit nicer&lt;/p&gt;
&lt;h2 id=&#34;html-to-lucky-formatter&#34;&gt;HTML to Lucky formatter&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://luckyframework.org/html&#34;&gt;https://luckyframework.org/html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If we want to create some more complex pages with tailwind - lets use the converted to help.&lt;/p&gt;
&lt;h2 id=&#34;dynamic-front-end---selections-dependencies-alpinejs--stimulusjs-&#34;&gt;Dynamic Front-end - Selections Dependencies (AlpineJS / StimulusJS) ?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://luckycasts.com/videos/stimulus-js&#34;&gt;https://luckycasts.com/videos/stimulus-js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Make the breed list, dependent on the species list
Lets change the Front-End language on the fly
Lets make the new TailwindUI menu bar have the dynamic features.&lt;/p&gt;
&lt;h2 id=&#34;has-many-through&#34;&gt;Has many through&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luckyframework.org/guides/database/models#has-many-through-many-to-many&#34;&gt;https://www.luckyframework.org/guides/database/models#has-many-through-many-to-many&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;polymorphic-relationships&#34;&gt;Polymorphic Relationships&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luckyframework.org/guides/database/models#polymorphic-associations&#34;&gt;https://www.luckyframework.org/guides/database/models#polymorphic-associations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One reason I favor Lucky is the database &lt;code&gt;Avram&lt;/code&gt; supports polymorphic relationships - which seems to come up a lot in my code - so lets see how to get it working and support multiple types:&lt;/p&gt;
&lt;p&gt;Pets -&amp;gt; Cats, Dogs, Horses, etc&lt;/p&gt;
&lt;h2 id=&#34;optional-relations&#34;&gt;Optional Relations&lt;/h2&gt;
&lt;h2 id=&#34;internationalization-i18n&#34;&gt;Internationalization (i18n)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://luckycasts.com/videos/translations&#34;&gt;https://luckycasts.com/videos/translations&lt;/a&gt;
&lt;a href=&#34;https://luckyframework.org/guides/frontend/internationalization&#34;&gt;https://luckyframework.org/guides/frontend/internationalization&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;dynamic-i18n-in-front-end&#34;&gt;Dynamic i18n in Front-End?&lt;/h2&gt;
&lt;h2 id=&#34;components-with-scopes&#34;&gt;Components (with scopes)&lt;/h2&gt;
&lt;h2 id=&#34;lucky-code-scopes&#34;&gt;Lucky Code Scopes&lt;/h2&gt;
&lt;h2 id=&#34;resource-authorization&#34;&gt;Resource Authorization&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/stephendolan/pundit&#34;&gt;https://github.com/stephendolan/pundit&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;web-sockets&#34;&gt;Web Sockets&lt;/h2&gt;
&lt;p&gt;For now something like &lt;strong&gt;LiveView&lt;/strong&gt; and &lt;strong&gt;Hotwire&lt;/strong&gt; are not yet integrated into lucky - its build your own.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cable-cr/cable&#34;&gt;https://github.com/cable-cr/cable&lt;/a&gt;
&lt;a href=&#34;https://github.com/luckyframework/lucky/issues/554&#34;&gt;https://github.com/luckyframework/lucky/issues/554&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;deploying-lucky--env&#34;&gt;Deploying Lucky &amp;amp; ENV&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://fullstackstanley.com/read/categories/lucky-framework/&#34;&gt;https://fullstackstanley.com/read/categories/lucky-framework/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;security-alternatives&#34;&gt;Security (Alternatives)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/grottopress/shield&#34;&gt;https://github.com/grottopress/shield&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;message--events---queues&#34;&gt;Message / Events - Queues&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/mosquito-cr/mosquito&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/mperham/sidekiq.cr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sidekiq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/bmulvihill/dispatch&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;InMemory-JobQueue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;language-inflections&#34;&gt;Language Inflections&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s make a little silly Human and Pets database/webpage:&lt;/p&gt;
&lt;p&gt;The simplest way to generate is with: &lt;code&gt;lucky gen.resource.browser&lt;/code&gt; its basically the same as &lt;code&gt;rails g scaffold&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So lets get started:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky gen.resource.browser Human name:String
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OOPS - that generated the plural of &lt;code&gt;Human&lt;/code&gt; as &lt;code&gt;Humen&lt;/code&gt; instead of &lt;code&gt;Humans&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;lets clear all our incorrect files and fix this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clean -fd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;rsquo;s create a new config file for inflections &lt;code&gt;config/inflect.cr&lt;/code&gt; and enter:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# this probably isn&#39;t necessary for very long - but for now it is needed.
Wordsmith::Inflector.inflections.irregular(&amp;quot;human&amp;quot;, &amp;quot;humans&amp;quot;)

# I like using persons (also a dictionary word) over people, to do this we need
# - first we have to remove the original setting by doing:
Wordsmith::Inflector.inflections.plurals.delete(/(p)erson$/i)
# - now we can override the original with our preference
Wordsmith::Inflector.inflections.irregular(&amp;quot;person&amp;quot;, &amp;quot;persons&amp;quot;)

# if using `staff` as in human staff - then also add staff to uncountable:
Wordsmith::Inflector.inflections.uncountable(%w(staff))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/luckyframework/wordsmith/blob/master/src/wordsmith/inflections.cr&#34;&gt;https://github.com/luckyframework/wordsmith/blob/master/src/wordsmith/inflections.cr&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# config/inflector.cr
module Wordsmith
  Inflector.inflections.clear

  Inflector.inflections.plural(/$/, &amp;quot;s&amp;quot;)
  Inflector.inflections.plural(/s$/i, &amp;quot;s&amp;quot;)

  # etc, etc, etc

  Inflector.inflections.irregular(&amp;quot;human&amp;quot;, &amp;quot;humans&amp;quot;)
  Inflector.inflections.irregular(&amp;quot;person&amp;quot;, &amp;quot;persons&amp;quot;)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if we try again we will have the same problem!  We need to remove our binaries and recompile lucky with our need config!  (I lost a lot of time on this detail)! Do this with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rm -rf lib &amp;amp;&amp;amp; rm -rf bin &amp;amp;&amp;amp; shards update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can try to create a new Resource again.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Phoenix 1.5 authentication with POW</title>
      <link>https://btihen.me/post_elixir_phoenix/phoenix_1_5_authentication_pow/</link>
      <pubDate>Sun, 25 Apr 2021 01:01:53 +0200</pubDate>
      <guid>https://btihen.me/post_elixir_phoenix/phoenix_1_5_authentication_pow/</guid>
      <description>&lt;h2 id=&#34;auth&#34;&gt;Auth&lt;/h2&gt;
&lt;p&gt;Auth with POW&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=hnD0Z0LGMIk&#34;&gt;https://www.youtube.com/watch?v=hnD0Z0LGMIk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.skcript.com/svr/using-bamboo-to-send-emails-in-phoenix/&#34;&gt;https://www.skcript.com/svr/using-bamboo-to-send-emails-in-phoenix/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kabisa.nl/tech/real-world-phoenix-lets-auth-some-users/&#34;&gt;https://www.kabisa.nl/tech/real-world-phoenix-lets-auth-some-users/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-1/&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-1/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&#34;&gt;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kabisa.nl/tech/real-world-phoenix-sign-up-flow-spa-style-with-liveview/&#34;&gt;https://www.kabisa.nl/tech/real-world-phoenix-sign-up-flow-spa-style-with-liveview/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@andreichernykh/phoenix-simple-authentication-authorization-in-step-by-step-tutorial-form-dc93ea350153&#34;&gt;https://medium.com/@andreichernykh/phoenix-simple-authentication-authorization-in-step-by-step-tutorial-form-dc93ea350153&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;POW and LiveViews&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.to/oliverandrich/how-to-connect-pow-and-live-view-in-your-phoenix-project-1ga1&#34;&gt;https://dev.to/oliverandrich/how-to-connect-pow-and-live-view-in-your-phoenix-project-1ga1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Auth with auth.gen&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://elixircasts.io/using-phx_gen_auth-for-phoenix-authentication&#34;&gt;https://elixircasts.io/using-phx_gen_auth-for-phoenix-authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-phx-gen-auth-part-1/&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-phx-gen-auth-part-1/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-phx-gen-auth-part-2/&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-phx-gen-auth-part-2/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fullstackphoenix.com/tutorials/combining-authentication-solutions-with-guardian-and-phx-gen-auth&#34;&gt;https://fullstackphoenix.com/tutorials/combining-authentication-solutions-with-guardian-and-phx-gen-auth&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Auth with PubSub&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://curiosum.dev/blog/elixir-phoenix-liveview-messenger-part-3&#34;&gt;https://curiosum.dev/blog/elixir-phoenix-liveview-messenger-part-3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Auth with Email&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hex.pm/packages/bamboo&#34;&gt;https://hex.pm/packages/bamboo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hexdocs.pm/bamboo_smtp/readme.html&#34;&gt;https://hexdocs.pm/bamboo_smtp/readme.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://elixircasts.io/sending-email-with-bamboo-part-1&#34;&gt;https://elixircasts.io/sending-email-with-bamboo-part-1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://elixircasts.io/sending-email-with-bamboo-part-2&#34;&gt;https://elixircasts.io/sending-email-with-bamboo-part-2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devato.com/post/use-bamboo-to-send-email-in-phoenix&#34;&gt;https://devato.com/post/use-bamboo-to-send-email-in-phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kabisa.nl/tech/real-world-phoenix-lets-send-some-emails/&#34;&gt;https://www.kabisa.nl/tech/real-world-phoenix-lets-send-some-emails/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&#34;&gt;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;General Auth Principles
&lt;a href=&#34;https://nithinbekal.com/posts/phoenix-authentication/&#34;&gt;https://nithinbekal.com/posts/phoenix-authentication/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;mail-in-test-env&#34;&gt;Mail in Test Env&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mailhog/MailHog&#34;&gt;https://github.com/mailhog/MailHog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mailcatcher.me/&#34;&gt;https://mailcatcher.me/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Pow has the advantage that it updates security patches &amp;ndash; since its a well maintained library.&lt;/p&gt;
&lt;p&gt;This repo can be found at: &lt;a href=&#34;https://github.com/btihen/phoenix_1_5_pow_auth_config&#34;&gt;https://github.com/btihen/phoenix_1_5_pow_auth_config&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Get the latest version from: &lt;a href=&#34;https://hex.pm/packages/pow&#34;&gt;https://hex.pm/packages/pow&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{:pow, &amp;quot;~&amp;gt; 1.0&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install the dependency:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix deps.get
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install POW:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix pow.install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets verify all is good with the install:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix deps.compile
mix help | grep pow
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now hopefully you see some new &lt;code&gt;pow&lt;/code&gt; commands&lt;/p&gt;
&lt;h2 id=&#34;configure-pow&#34;&gt;Configure Pow&lt;/h2&gt;
&lt;p&gt;There are three files you&amp;rsquo;ll need to configure first before you can use Pow.&lt;/p&gt;
&lt;p&gt;First, append this to &lt;code&gt;config/config.exs&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config :fare, :pow,
  user: Fare.Users.User,
  repo: Fare.Repo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, add &lt;code&gt;Pow.Plug.Session&lt;/code&gt; plug to &lt;code&gt;lib/fare_web/endpoint.ex&lt;/code&gt; after &lt;code&gt;plug Plug.Session&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;defmodule FareWeb.Endpoint do
  use Phoenix.Endpoint, otp_app: :fare   # add this line HERE!

  # ...

  plug Plug.Session, @session_options
  plug Pow.Plug.Session, otp_app: :fare  # add this line HERE!
  plug FareWeb.Router
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Last, update &lt;code&gt;lib/fare_web/router.ex&lt;/code&gt; with the Pow routes - this first time we need to do a little extra config:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  pipeline :api do
    plug :accepts, [&amp;quot;json&amp;quot;]
  end
  scope &amp;quot;/&amp;quot;, MyAppWeb do
    pipe_through [:browser, :protected]

    # Add your protected routes here
  end

  scope &amp;quot;/&amp;quot;, MyAppWeb do
    pipe_through :browser

    live &amp;quot;/&amp;quot;, PageLive, :index
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Should now look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  pipeline :api do
    plug :accepts, [&amp;quot;json&amp;quot;]
  end

  pipeline :protected do
    plug Pow.Plug.RequiredAuthentication,
          error_handler: Pow.Phoenix.PlugErrorHandler
  end

  scope &amp;quot;/&amp;quot; do
    pipe_through :browser

    pow_routes()
  end

  scope &amp;quot;/&amp;quot;, MyAppWeb do
    pipe_through [:browser, :protected]

    # Add your protected routes here
    resources &amp;quot;/tasks&amp;quot;, TaskController
  end

  scope &amp;quot;/&amp;quot;, MyAppWeb do
    pipe_through :browser

    live &amp;quot;/&amp;quot;, PageLive, :index
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets check the routes - that all is well configured:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.routes | grep pow
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hopefully you see some new pow routes.&lt;/p&gt;
&lt;p&gt;Now we can migrate to create our users table:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix ecto.migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if we start phoenix:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and open phoenix: &lt;code&gt;localhost:4000&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;pow-user-links&#34;&gt;POW user Links&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-1/&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Notice there is no menu option to login - lets build a simple signup/signin/logout link.&lt;/p&gt;
&lt;p&gt;In root.html.eex find &lt;code&gt;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://hexdocs.pm/phoenix/overview.html&amp;quot;&amp;gt;Get Started&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/code&gt; and we will replace it with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;            &amp;lt;%= if Pow.Plug.current_user(@conn) do %&amp;gt;
              &amp;lt;li&amp;gt;
                &amp;lt;%= link &amp;quot;#{@current_user.email}&amp;quot;, to: Routes.pow_registration_path(@conn, :edit) %&amp;gt;
              &amp;lt;/li&amp;gt;
              &amp;lt;li&amp;gt;
                &amp;lt;%= link &amp;quot;Sign-out&amp;quot;, to: Routes.pow_session_path(@conn, :delete), method: :delete %&amp;gt;
              &amp;lt;/li&amp;gt;
            &amp;lt;% else %&amp;gt;
              &amp;lt;li&amp;gt;&amp;lt;%= link &amp;quot;Sign-in&amp;quot;, to: Routes.pow_session_path(@conn, :new) %&amp;gt;&amp;lt;/li&amp;gt;
              &amp;lt;li&amp;gt;&amp;lt;%= link &amp;quot;Register&amp;quot;, to: Routes.pow_registration_path(@conn, :new) %&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now reload and try it out:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;you should be able to register&lt;/li&gt;
&lt;li&gt;sign-out&lt;/li&gt;
&lt;li&gt;sign in&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;customizable-login-pages&#34;&gt;Customizable Login pages&lt;/h2&gt;
&lt;p&gt;Generate the pages to customize with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix pow.phoenix.gen.templates
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now be sure to change the config in &lt;code&gt;config/confix.ex&lt;/code&gt; from:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config :my_app, :pow,
  user: MyApp.Users.User,
  repo: Fare.Repo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config :my_app, :pow,
  user: MyApp.Users.User,
  repo: MyApp.Repo,
  web_module: MyAppWeb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Without updating the config the newly generated pages won&amp;rsquo;t be used!&lt;/p&gt;
&lt;p&gt;The new templates to modify are found in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lib/fare_web/templates/pow/registration&lt;/code&gt; &amp;amp;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lib/fare_web/templates/pow/session&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now make a small change to the pages to ensure all works.&lt;/p&gt;
&lt;h2 id=&#34;create-a-restricted-user-page&#34;&gt;Create a restricted user page&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=hnD0Z0LGMIk&#34;&gt;https://www.youtube.com/watch?v=hnD0Z0LGMIk&lt;/a&gt;
&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-1/&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Create a normal html page first:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.gen.html Tasks Task tasks description:string completed:boolean
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;BE SURE TO PUT the new route in the &lt;code&gt;protected&lt;/code&gt; area of the routes file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/fare_web/router.ex
  scope &amp;quot;/&amp;quot;, MyAppWeb do
    pipe_through [:browser, :protected]

    # Add your protected routes here
    resources &amp;quot;/tasks&amp;quot;, TaskController
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now of course run the migration:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix ecto.migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now &lt;code&gt;/tasks&lt;/code&gt; should only be availble to signed in users.  Be sure you are logged out and cannot get to the &lt;code&gt;/tasks&lt;/code&gt; route (and infact are redirected to sign-in). And once logged in the page works as expected.&lt;/p&gt;
&lt;h2 id=&#34;extensions&#34;&gt;Extensions&lt;/h2&gt;
&lt;h3 id=&#34;persistent-login-sessions-remember-me&#34;&gt;Persistent Login Sessions (Remember me)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Currently every time the user closes the browser they are logged out - the login cookie doesn&amp;rsquo;t persist - most users would like the option to change this - with a &lt;code&gt;remember me&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;in &lt;code&gt;config/config.exs&lt;/code&gt; change the &lt;code&gt;:pow&lt;/code&gt; config to look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config :my_app, :pow,
  user: MyApp.Users.User,
  repo: MyApp.Repo,
  web_module: MyAppWeb,
  # add the following two lines
  extensions: [PowPersistentSession],
  controller_callbacks: Pow.Extension.Phoenix.ControllerCallbacks
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in &lt;code&gt;/lib/my_app_web/endpoint.ex&lt;/code&gt; we need to add the persistent cookie setting immediately after the &lt;code&gt;Pow.Plug.Session&lt;/code&gt; plug and before the routing &lt;code&gt;MyAppWeb.Router&lt;/code&gt; plug &amp;ndash; now the end of the endpoint file should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  # enable Pow session based authentication
  plug Pow.Plug.Session, otp_app: :warehouse
  # enable Pow persistent sessions
  plug PowPersistentSession.Plug.Cookie
  # routing plug
  plug MyAppWeb.Router
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;just above the login button on the &lt;code&gt;sign-in&lt;/code&gt; page add the following check-box:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/fare_web/templates/pow/session/new.html.eex
  &amp;lt;%= label f, :persistent_session, &amp;quot;Remember me&amp;quot; %&amp;gt;
  &amp;lt;%= checkbox f, :persistent_session %&amp;gt;

  &amp;lt;div&amp;gt;
    &amp;lt;%= submit &amp;quot;Sign in&amp;quot; %&amp;gt;
  &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;restart Phoenix with: &lt;code&gt;mix phx.server&lt;/code&gt; and now you should be able to close your browser and re-open the link and stay logged in if the &lt;code&gt;remember-me&lt;/code&gt; is clicked.&lt;/p&gt;
&lt;h2 id=&#34;after-logout---go-to-landing-page-after-hook-routing&#34;&gt;After Logout - go to Landing Page (After Hook Routing)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One little annoying thing is that when we logout we go to the sign-in page instead of the landing page.  We can fix that by adding a call_back_route - you can find all the callback routes at: &lt;a href=&#34;https://github.com/danschultzer/pow/blob/master/lib/pow/phoenix/routes.ex&#34;&gt;https://github.com/danschultzer/pow/blob/master/lib/pow/phoenix/routes.ex&lt;/a&gt; - we will use: the &lt;code&gt;after_sign_out_path&lt;/code&gt; callback.&lt;/p&gt;
&lt;p&gt;To do this we will make a new &lt;code&gt;pow.routes&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch lib/warehouse_web/pow/routes.ex
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add the following contents:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt; EOF&amp;gt; lib/my_app_web/pow/routes.ex
defmodule MyAppWeb.Pow.Routes do
  use Pow.Phoenix.Routes
  alias MyAppWeb.Router.Helpers, as: Routes

  def after_sign_out_path(conn), do: Routes.page_path(conn, :index)
end
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now finally update &lt;code&gt;config/confix.exs&lt;/code&gt; by adding &lt;code&gt;routes_backend: MyAppWeb.Pow.Routes&lt;/code&gt; to the &lt;code&gt;:pow&lt;/code&gt; config so now it would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config :my_app, :pow,
  user: MyApp.Users.User,
  repo: MyApp.Repo,
  web_module: MyAppWeb,
  extensions: [PowPersistentSession],
  controller_callbacks: Pow.Extension.Phoenix.ControllerCallbacks,
  routes_backend: MyAppWeb.Pow.Routes    # add this line
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming all works we will snapshot now!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;on logout go to landing page&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;password-reset-and-email-confirmation&#34;&gt;Password Reset and Email Confirmation&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/pow-auth/pow_assent&#34;&gt;https://github.com/pow-auth/pow_assent&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=hnD0Z0LGMIk&#34;&gt;https://www.youtube.com/watch?v=hnD0Z0LGMIk&lt;/a&gt;
&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The following are the possible extensions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PowResetPassword&lt;/li&gt;
&lt;li&gt;PowEmailConfirmation&lt;/li&gt;
&lt;li&gt;PowPersistentSession&lt;/li&gt;
&lt;li&gt;PowInvitation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s start with password reset and email confirmation.&lt;/p&gt;
&lt;p&gt;First we need to do a migration:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix pow.extension.ecto.gen.migrations --extension PowResetPassword --extension PowEmailConfirmation
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now update the phoenix config &lt;code&gt;config/config.ex&lt;/code&gt; again from:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config :my_app, :pow,
  user: MyApp.Users.User,
  repo: MyApp.Repo,
  web_module: MyAppWeb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config :my_app, :pow,
  user: MyApp.Users.User,
  repo: MyApp.Repo,
  web_module: MyAppWeb,
  extensions: [PowPersistentSession, PowResetPassword, PowEmailConfirmation],
  controller_callbacks: Pow.Extension.Phoenix.ControllerCallbacks
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now update the &lt;code&gt;LIB_PATH/users/user.ex&lt;/code&gt; file from:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;defmodule Fare.Users.User do
  use Ecto.Schema
  use Pow.Ecto.Schema

  schema &amp;quot;users&amp;quot; do
    pow_user_fields()

    timestamps()
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;defmodule MyApp.Users.User do
  use Ecto.Schema
  use Pow.Ecto.Schema
  use Pow.Extension.Ecto.Schema,
      extensions: [PowResetPassword, PowEmailConfirmation]

  schema &amp;quot;users&amp;quot; do
    pow_user_fields()

    timestamps()
  end

  def changeset(user_or_changeset, attrs) do
    user_or_changeset
    |&amp;gt; pow_changeset(attrs)
    |&amp;gt; pow_extension_changeset(attrs)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And of course the routes &lt;code&gt;WEB_PATH/router.ex&lt;/code&gt; too - at the top of the file add:
so it looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;defmodule MyAppWeb.Router do
  use MyAppWeb, :router
  use Pow.Phoenix.Router
  use Pow.Extension.Phoenix.Router,
      extensions: [PowResetPassword, PowEmailConfirmation]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And in the pow routes config change from:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  scope &amp;quot;/&amp;quot; do
    pipe_through :browser

    pow_routes()
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  scope &amp;quot;/&amp;quot; do
    pipe_through :browser

    pow_routes()
    pow_extension_routes()
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now finally, we need can update any views needed by POW&amp;rsquo;s new extensions with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix pow.extension.phoenix.gen.templates --extension PowResetPassword --extension PowEmailConfirmation
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can update the sign-in page with a reset password button.  We will add the following, to the end of &lt;code&gt;lib/fare_web/templates/pow/session/new.html.eex&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;|
&amp;lt;span&amp;gt;
&amp;lt;%= link &amp;quot;Reset Password&amp;quot;, to: Routes.pow_reset_password_reset_password_path(@conn, :new) %&amp;gt;
&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets be sure we can link to reset password view.&lt;/p&gt;
&lt;p&gt;First we will do our migration:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix ecto.migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now to to sign-in and see if the reset password link works.
Cool it does, but it we try to use it - it complains it needs email back-end setup.&lt;/p&gt;
&lt;h2 id=&#34;email-backend&#34;&gt;Email backend&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&#34;&gt;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First we will create a mailer function in: &lt;code&gt;lib/my_app_web/pow/pow_mailer.ex&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir lib/my_app_web/pow/
touch lib/my_app_web/pow/pow_mailer.ex
cat &amp;lt;&amp;lt;EOF &amp;gt; lib/my_app_web/pow/pow_mailer.ex
defmodule FareWeb.Pow.Mailer do
  use Pow.Phoenix.Mailer

  require Logger

  @impl true
  def cast(%{user: user, subject: subject, text: text, html: html}) do
    # Forward Struct to logger - disable/remove when Bamboo configured
    %{to: user.email, subject: subject, text: text, html: html}
  end

  @impl true
  def process(email) do
    # log email sent
    Logger.debug(&amp;quot;E-mail sent: #{inspect email}&amp;quot;)
  end
end
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now that we have an email template we need to tell pow about the mailer with the config: &lt;code&gt;mailer_backend: MyAppWeb.Pow.Mailer&lt;/code&gt; in &lt;code&gt;config/config.exs&lt;/code&gt; so change to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# config for pow - user authentication
config :my_app, :pow,
  user: MyApp.Users.User,
  repo: MyApp.Repo,
  web_module: MyAppWeb,
  mailer_backend: MyAppWeb.Pow.Mailer,  # add this
  extensions: [PowPersistentSession, PowResetPassword, PowEmailConfirmation],
  controller_callbacks: Pow.Extension.Phoenix.ControllerCallbacks
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now generate the POW mail templates - with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix pow.extension.phoenix.mailer.gen.templates --extension PowResetPassword --extension PowEmailConfirmation
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Phoenix also needs to know about the mailer templates we will generate so add to &lt;code&gt;lib/my_app_web.ex&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  def mailer_view do
    quote do
      use Phoenix.View, root: &amp;quot;lib/my_app_web/templates&amp;quot;,
                        namespace: MyAppWeb

      use Phoenix.HTML
    end
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the final config change in &lt;code&gt;config/config.ex&lt;/code&gt; to access our new templates:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# config for pow - user authentication
config :fare, :pow,
  user: Fare.Users.User,
  repo: Fare.Repo,
  web_module: MyAppWeb,
  web_mailer_module: MyAppWeb,          # add this to access the templates
  mailer_backend: MyAppWeb.Pow.Mailer,
  extensions: [PowPersistentSession, PowResetPassword, PowEmailConfirmation],
  controller_callbacks: Pow.Extension.Phoenix.ControllerCallbacks
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if we resart phoenix and test out reset link - we should see in the logs &amp;lsquo;a pretend sent email&amp;rsquo; - something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[debug] E-mail sent: %{html: &amp;quot;&amp;lt;h3&amp;gt;Hi,&amp;lt;/h3&amp;gt;\n&amp;lt;p&amp;gt;Please use the following link to reset your password:&amp;lt;/p&amp;gt;\n&amp;lt;p&amp;gt;&amp;lt;a href=\&amp;quot;http://localhost:4000/reset-password/SFMyNTY.MTJkNDliZWItZTg2My00ZDM3LTg2YzgtYzE5MDdjMDk5ODgz.kFRCfvdOSeEnupbbujdAKoaCuMXXk91qzZCUMrB43mw\&amp;quot;&amp;gt;http://localhost:4000/reset-password/SFMyNTY.MTJkNDliZWItZTg2My00ZDM3LTg2YzgtYzE5MDdjMDk5ODgz.kFRCfvdOSeEnupbbujdAKoaCuMXXk91qzZCUMrB43mw&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;\n&amp;lt;p&amp;gt;You can disregard this email if you didn&amp;amp;#39;t request a password reset.&amp;lt;/p&amp;gt;&amp;quot;, subject: &amp;quot;Reset password link&amp;quot;, text: &amp;quot;Hi,\n\nPlease use the following link to reset your password:\n\nhttp://localhost:4000/reset-password/SFMyNTY.MTJkNDliZWItZTg2My00ZDM3LTg2YzgtYzE5MDdjMDk5ODgz.kFRCfvdOSeEnupbbujdAKoaCuMXXk91qzZCUMrB43mw\n\nYou can disregard this email if you didn&#39;t request a password reset.\n&amp;quot;, to: &amp;quot;btihen@gmail.com&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;copy the link out of the email in the log:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost:4000/reset-password/SFMyNTY.MTJkNDliZWItZTg2My00ZDM3LTg2YzgtYzE5MDdjMDk5ODgz.kFRCfvdOSeEnupbbujdAKoaCuMXXk91qzZCUMrB43mw
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;into the browser - type a new password and try to login.&lt;/p&gt;
&lt;p&gt;Assuming all works we will snapshot now!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;pow configured to send emails - no sender yet&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;after-logout---go-to-landing-page-after-hook-routing-1&#34;&gt;After Logout - go to Landing Page (After Hook Routing)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One little annoying thing is that when we logout we go to the sign-in page instead of the landing page.  We can fix that by adding a call_back_route - you can find all the callback routes at: &lt;a href=&#34;https://github.com/danschultzer/pow/blob/master/lib/pow/phoenix/routes.ex&#34;&gt;https://github.com/danschultzer/pow/blob/master/lib/pow/phoenix/routes.ex&lt;/a&gt; - we will use: the &lt;code&gt;after_sign_out_path&lt;/code&gt; callback.&lt;/p&gt;
&lt;p&gt;To do this we will make a new &lt;code&gt;pow.routes&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch lib/warehouse_web/pow/routes.ex
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add the following contents:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt; EOF&amp;gt; lib/my_app_web/pow/routes.ex
defmodule MyAppWeb.Pow.Routes do
  use Pow.Phoenix.Routes
  alias MyAppWeb.Router.Helpers, as: Routes

  def after_sign_out_path(conn), do: Routes.page_path(conn, :index)
end
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now finally update &lt;code&gt;config/confix.exs&lt;/code&gt; by adding &lt;code&gt;routes_backend: MyAppWeb.Pow.Routes&lt;/code&gt; to the &lt;code&gt;:pow&lt;/code&gt; config so now it would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config :my_app, :pow,
  user: MyApp.Users.User,
  repo: MyApp.Repo,
  web_module: MyAppWeb,
  web_mailer_module: MyAppWeb,
  mailer_backend: MyAppWeb.Pow.Mailer,
  routes_backend: MyAppWeb.Pow.Routes,  # Add this line
  controller_callbacks: Pow.Extension.Phoenix.ControllerCallbacks,
  extensions: [PowPersistentSession, PowResetPassword, PowEmailConfirmation]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming all works we will snapshot now!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;on logout go to landing page&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;configure-email-bamboo-with-pow&#34;&gt;Configure Email BAMBOO with POW&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hexdocs.pm/bamboo/readme.html&#34;&gt;https://hexdocs.pm/bamboo/readme.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kabisa.nl/tech/real-world-phoenix-lets-send-some-emails/&#34;&gt;https://www.kabisa.nl/tech/real-world-phoenix-lets-send-some-emails/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&#34;&gt;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Use Bamboo to do the mailing find the new versions at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hex.pm/packages/bamboo&#34;&gt;https://hex.pm/packages/bamboo&lt;/a&gt;
Add to &lt;code&gt;mix.exs&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;    {:bamboo, &amp;quot;~&amp;gt; 2.1&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;get the new dependency:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix deps.get
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the Test Config we need to configure bamboo with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# config/test.exs
config :my_app, MyApp.Mailer,
  adapter: Bamboo.TestAdapter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the Dev Config lets setup the in-memory email config&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# config/dev.exs
config :fare, FareWeb.Pow.Mailer,
  adapter: Bamboo.LocalAdapter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When using &lt;code&gt;Bamboo.LocalAdapter&lt;/code&gt; in dev mode we can view the email (without digging through the log file) using &lt;code&gt;Bamboo.EmailPreviewPlug&lt;/code&gt; - we set this up with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if Mix.env == :dev do
  forward &amp;quot;/sent_emails&amp;quot;, Bamboo.EmailPreviewPlug
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;rsquo;s setup our mailer to use Bamboo - we will edit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/my_app_web/pow/pow_mailer.ex
defmodule MyAppWeb.Pow.Mailer do
  use Pow.Phoenix.Mailer

  # ADDED to use Bamboo
  use Bamboo.Mailer, otp_app: :fare  # Bamboo needs to know the supervisor
  import Bamboo.Email                # provides access to the Bamboo&#39;s methods

  require Logger

  @impl true
  def cast(%{user: user, subject: subject, text: text, html: html}) do
    # ADDED when Bamboo is configured
    new_email(
      to: user.email,
      from: &amp;quot;reading-list@example.com&amp;quot;,
      subject: subject,
      html_body: html,
      text_body: text
    )
  end

  @impl true
  def process(email) do
    # ADDED when Bamboo is configured
    deliver_now(email)

    # check email functionality and contents
    Logger.debug(&amp;quot;E-mail sent: #{inspect email}&amp;quot;)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s register a new account (or reset a password).
Now we can see the sent email at: http://localhost/sent_emails (in dev mode)&lt;/p&gt;
&lt;h2 id=&#34;bamboo-adapters---smtp-config-production-ideas&#34;&gt;Bamboo Adapters - SMTP Config (Production Ideas)&lt;/h2&gt;
&lt;p&gt;Available adapters are listed at: &lt;a href=&#34;https://hexdocs.pm/bamboo/readme.html#available-adapters&#34;&gt;https://hexdocs.pm/bamboo/readme.html#available-adapters&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Given the number of adapters - here we will configure just SMTP (and learn to trap it while testing)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.kabisa.nl/tech/real-world-phoenix-lets-send-some-emails/&#34;&gt;https://www.kabisa.nl/tech/real-world-phoenix-lets-send-some-emails/&lt;/a&gt;
&lt;a href=&#34;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&#34;&gt;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Use Bamboo to do the mailing find the new versions at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hex.pm/packages/bamboo&#34;&gt;https://hex.pm/packages/bamboo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hex.pm/packages/bamboo_smtp&#34;&gt;https://hex.pm/packages/bamboo_smtp&lt;/a&gt;
Add to &lt;code&gt;mix.exs&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;    {:bamboo, &amp;quot;~&amp;gt; 2.1&amp;quot;},
    {:bamboo_smtp, &amp;quot;~&amp;gt; 2.1&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now install and setup up: &lt;a href=&#34;https://github.com/mailhog/&#34;&gt;https://github.com/mailhog/&lt;/a&gt; (on a MacOS) simply install with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install mailhog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and run mailhog with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mailhog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or if you want mailhog running all the time in the background you can type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  brew services start mailhog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or you can use: or &lt;a href=&#34;https://mailcatcher.me/&#34;&gt;https://mailcatcher.me/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;These serivices  - listen on &lt;code&gt;localhost:1025&lt;/code&gt; and you can view the email at: http://localhost:8025&lt;/p&gt;
&lt;p&gt;now configure the mail service (in &lt;code&gt;config/dev.exs&lt;/code&gt;) to use Mailhog or Mailcather with Phoenix by adding:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# config/dev.exs
config :my_app, MyAppWeb.Pow.Mailer,
  adapter: Bamboo.SMTPAdapter,
  server: &amp;quot;localhost&amp;quot;,
  port: 1025
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In production it might look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# config/config.exs
config :my_app, MyApp.Mailer,
  adapter: Bamboo.SMTPAdapter,
  server: &amp;quot;smtp.domain&amp;quot;,
  hostname: &amp;quot;your.domain&amp;quot;,
  port: 1025,
  username: &amp;quot;your.name@your.domain&amp;quot;, # or {:system, &amp;quot;SMTP_USERNAME&amp;quot;}
  password: &amp;quot;pa55word&amp;quot;, # or {:system, &amp;quot;SMTP_PASSWORD&amp;quot;}
  tls: :if_available, # can be `:always` or `:never`
  allowed_tls_versions: [:&amp;quot;tlsv1&amp;quot;, :&amp;quot;tlsv1.1&amp;quot;, :&amp;quot;tlsv1.2&amp;quot;], # or {:system, &amp;quot;ALLOWED_TLS_VERSIONS&amp;quot;} w/ comma seprated values (e.g. &amp;quot;tlsv1.1,tlsv1.2&amp;quot;)
  ssl: false, # can be `true`
  retries: 1,
  no_mx_lookups: false, # can be `true`
  auth: :if_available # can be `:always`. If your smtp relay requires authentication set it to `:always`.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you will need to start your mail-trap (in a separate cli terminal):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mailhog
# or `mailcather`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when you register a new account or change a password you can see the email at:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost:8025
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;customizing---pow-flash-messages&#34;&gt;Customizing - POW Flash messages&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Create a new module for our messages.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch lib/my_app_web/pow/messages.ex
cat &amp;lt;&amp;lt;EOF&amp;gt;&amp;gt;lib/my_app_web/pow/messages.ex
defmodule MyAppWeb.Pow.Messages do
  use Pow.Phoenix.Messages
  use Pow.Extension.Phoenix.Messages,  # add extensions in use
    extensions: [PowResetPassword, PowEmailConfirmation]

  import MyAppWeb.Gettext

  # PowMessages - functions defined:
  # https://hexdocs.pm/pow/Pow.Phoenix.Messages.html#summary
  # https://github.com/danschultzer/pow/blob/master/lib/pow/phoenix/messages.ex
  def signed_in(_conn), do: gettext(&amp;quot;Welcome back.&amp;quot;)
  def signed_out(_conn), do: gettext(&amp;quot;Signed out successfullly.&amp;quot;)
  def user_not_authenticated(_conn), do: gettext(&amp;quot;You need to sign in to see this page.&amp;quot;)

  # PowResetPassword - functions defined:
  # https://github.com/danschultzer/pow/blob/master/lib/extensions/reset_password/phoenix/messages.ex
  def invalid_token(_conn), do: &amp;quot;The reset token has expired.&amp;quot;
  def password_has_been_reset(_conn), do: &amp;quot;The password has been updated.&amp;quot;
  def email_has_been_sent(_conn), do: &amp;quot;An email with reset instructions has been sent to you.&amp;quot;

  # PowEmailConfirmation - functions defined:
  # https://github.com/danschultzer/pow/blob/master/lib/extensions/email_confirmation/phoenix/messages.ex
  def email_has_been_confirmed(_conn), do: &amp;quot;The email address has been confirmed.&amp;quot;
  def email_confirmation_failed(_conn), do: &amp;quot;The email address couldn&#39;t be confirmed.&amp;quot;
  def email_confirmation_required(_conn), do: &amp;quot;You need to confirm your e-mail with the link e-mailed to you.&amp;quot;
end
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To be able to use this module we need to tell our config about it - so we update &lt;code&gt;config/config.exs&lt;/code&gt; with &lt;code&gt;messages_backend: FareWeb.Pow.Messages&lt;/code&gt; - so now it looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config :fare, :pow,
  user: Fare.Users.User,
  repo: Fare.Repo,
  web_module: FareWeb,
  web_mailer_module: FareWeb,
  mailer_backend: Fare.Pow.Mailer,
  routes_backend: FareWeb.Pow.Routes,
  messages_backend: FareWeb.Pow.Messages,  # Add this line
  controller_callbacks: Pow.Extension.Phoenix.ControllerCallbacks,
  extensions: [PowPersistentSession, PowResetPassword, PowEmailConfirmation]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you should see your custom messages!&lt;/p&gt;
&lt;p&gt;let&amp;rsquo;s snapshot this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;allow POW to send custom / i18n messages&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;configure-to-allow-3rd-parties---google-apple-github-etc&#34;&gt;Configure to allow 3rd Parties - Google, Apple, Github, etc.&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/pow-auth/pow_assent&#34;&gt;https://github.com/pow-auth/pow_assent&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=hnD0Z0LGMIk&#34;&gt;https://www.youtube.com/watch?v=hnD0Z0LGMIk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First add to the mix file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    # third party auth
    {:pow_assent, &amp;quot;~&amp;gt; 0.4.10&amp;quot;},
    # recommended for SSL validation with :httpc adapter
    {:certifi, &amp;quot;~&amp;gt; 2.4&amp;quot;},
    {:ssl_verify_fun, &amp;quot;~&amp;gt; 1.1&amp;quot;},
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and of course: &lt;code&gt;mix deps.get&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and install with: &lt;code&gt;mix pow_assent.install&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and now configure &lt;code&gt;lib/fare/users/user.ex&lt;/code&gt; after &lt;code&gt;use Pow.Ecto.Schema&lt;/code&gt; add &lt;code&gt;use PowAssent.Ecto.Schema&lt;/code&gt; so now the top of this file should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/fare/users/user.ex
defmodule Fare.Users.User do
  use Ecto.Schema
  use Pow.Ecto.Schema
  use PowAssent.Ecto.Schema  # added in this step
  use Pow.Extension.Ecto.Schema,
      extensions: [PowResetPassword, PowEmailConfirmation]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At the top of the &lt;code&gt;lib/fare_web/router.ex&lt;/code&gt; file after &lt;code&gt;use PowAssent.Phoenix.Router&lt;/code&gt; add &lt;code&gt;use PowAssent.Phoenix.Router&lt;/code&gt; - now the top of this file should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/fare_web/router.ex
defmodule MyAppWeb.Router do
  use MyAppWeb, :router
  use Pow.Phoenix.Router
  use PowAssent.Phoenix.Router
  use Pow.Extension.Phoenix.Router,
      extensions: [PowResetPassword, PowEmailConfirmation]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now after the last pipelines add a new &lt;code&gt;pipeline&lt;/code&gt; and its &lt;code&gt;scope&lt;/code&gt; - its a copy of the &lt;code&gt;:browser&lt;/code&gt; pipeline - without &lt;code&gt;:protect_from_forgery&lt;/code&gt; since that conflicts with &lt;strong&gt;OAuth&lt;/strong&gt; &amp;amp; after &lt;code&gt;pow_routes()&lt;/code&gt; add &lt;code&gt;pow_assent_routes()&lt;/code&gt; so now this section of the routes looks like (when Phoenix is configured for LiveView):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  pipeline :skip_csrf_protection do
    plug :accepts, [&amp;quot;html&amp;quot;]
    plug :fetch_session
    plug :fetch_live_flash
    plug :put_root_layout, {FareWeb.LayoutView, :root}
    # plug :protect_from_forgery     # conflicts with oauth
    plug :put_secure_browser_headers
  end

  scope &amp;quot;/&amp;quot; do
    pipe_through :skip_csrf_protection

    # this adds new pow routes
    pow_assent_authorization_post_callback_routes()
  end

  scope &amp;quot;/&amp;quot; do
    pipe_through :browser

    pow_routes()
    pow_assent_routes()    # newly added
    pow_extension_routes()
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember to run the new migrations with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix ecto.migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Generate the PowAssent template too (the page when using this where the user add username and OAuth password from remote site):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix pow_assent.phoenix.gen.templates
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;setup-remote-oauth-providers-github---for-now&#34;&gt;Setup remote OAuth providers (Github - for now)&lt;/h3&gt;
&lt;p&gt;Go to:
&lt;a href=&#34;https://github.com/settings/applications/new&#34;&gt;https://github.com/settings/applications/new&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Enter an &lt;strong&gt;Application name&lt;/strong&gt; and enter the &lt;strong&gt;Homepage url&lt;/strong&gt; as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost:4000/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the &lt;strong&gt;Authorization callback&lt;/strong&gt; (for our dev environment) as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost:4000/auth/github/callback
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Configure Github Credential Secrets&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hexdocs.pm/elixir/Application.html&#34;&gt;https://hexdocs.pm/elixir/Application.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devato.com/post/handling-environment-variables-in-phoenix&#34;&gt;https://devato.com/post/handling-environment-variables-in-phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/44510403/phoenix-import-module-into-config&#34;&gt;https://stackoverflow.com/questions/44510403/phoenix-import-module-into-config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/30995743/how-to-get-a-variable-value-from-environment-files-in-phoenix&#34;&gt;https://stackoverflow.com/questions/30995743/how-to-get-a-variable-value-from-environment-files-in-phoenix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First update &lt;code&gt;.gitignore&lt;/code&gt; with the line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**/*.secret.exs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then add in our case the &lt;code&gt;dev.secrets.exs&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch config/dev.secret.exs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you get your &lt;strong&gt;Client ID&lt;/strong&gt; and &lt;strong&gt;Client secrets&lt;/strong&gt; you can configure  &lt;code&gt;config/dev.secret.exs&lt;/code&gt; with the following config:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import Config

config :my_app, :pow_assent,
  providers: [
    github: [
      client_id: &amp;quot;REPLACE_WITH_CLIENT_ID&amp;quot;,
      client_secret: &amp;quot;REPLACE_WITH_CLIENT_SECRET&amp;quot;,
      strategy: Assent.Strategy.Github
    ]
  ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now at the END of &lt;code&gt;config/dev.exs&lt;/code&gt; add the line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import_config &amp;quot;dev.secret.exs&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now at the end of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lib/my_app_web/templates/pow/registration/edit.html.eex&lt;/code&gt; (edit profile),&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lib/my_app_web/templates/pow/registration/new.html.eex&lt;/code&gt; (register),&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lib/fare_web/templates/pow/session/new.html.eex&lt;/code&gt; (sign-in)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;add the following comprehension to list all the configured OAuth log-in links:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;%=
  for link &amp;lt;- PowAssent.Phoenix.ViewHelpers.provider_links(@conn),
      do: content_tag(:span, link)
%&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;pow readme: &lt;a href=&#34;https://hexdocs.pm/pow/README.html&#34;&gt;https://hexdocs.pm/pow/README.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;video tutorial: &lt;a href=&#34;https://www.youtube.com/watch?v=hnD0Z0LGMIk&#34;&gt;https://www.youtube.com/watch?v=hnD0Z0LGMIk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;add pubsub &lt;a href=&#34;https://curiosum.dev/blog/elixir-phoenix-liveview-messenger-part-3&#34;&gt;https://curiosum.dev/blog/elixir-phoenix-liveview-messenger-part-3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;add email to pow: &lt;a href=&#34;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&#34;&gt;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-1/&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-1/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Phoenix LiveView - Simple Real-Time SPA</title>
      <link>https://btihen.me/post_elixir_phoenix/phoenix_1_5_liveview_simple_realtime/</link>
      <pubDate>Sat, 10 Apr 2021 17:01:53 +0200</pubDate>
      <guid>https://btihen.me/post_elixir_phoenix/phoenix_1_5_liveview_simple_realtime/</guid>
      <description>&lt;p&gt;Here is a quick example of how to create a very simple &amp;ldquo;real-time&amp;rdquo;-&amp;ldquo;single-page-app&amp;rdquo; using phoenix-liveview.  This provides the same functionality to as 
&lt;a href=&#34;post_ruby_rails/rails_6_1_hotwire_simple_realtime&#34;&gt;Realtime Rails with Hotwire&lt;/a&gt; - in order to compare.&lt;/p&gt;
&lt;p&gt;The repo can be found here: &lt;a href=&#34;https://github.com/btihen/live-tweets&#34;&gt;https://github.com/btihen/live-tweets&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;create--config-a-project&#34;&gt;create / config a project&lt;/h2&gt;
&lt;p&gt;First we will creat the folder / project location&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir tweets
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we will tell it which software to use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch tweets/.tool-versions
cat &amp;lt;&amp;lt;EOF &amp;gt;&amp;gt;tweets/.tool-versions
erlang 23.3.1
elixir 1.11.4-otp-23
nodejs lts-Fermium
Postgres 13.2
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-new-phoenix-project&#34;&gt;Create a new Phoenix Project&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&#34;&gt;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now you can simply do:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.new tweets --live
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will now get the message:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The directory /Users/btihen/Dropbox/devel/marpori/tweets already exists. Are you sure you want to continue? [Yn]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Say &lt;code&gt;Y&lt;/code&gt; yes.
Say &lt;code&gt;Y&lt;/code&gt; yes again when you see:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Fetch and install dependencies? [Yn]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This can take a few minutes - when done, enter the directory and setup.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd tweets
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Adjust the DB settings as needed in: &lt;code&gt;config/dev.exs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Create the database and lets see if default tests work and we get the start page.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix ecto.create
mix test
mix phx.server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;assuming all is good lets snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init
git add .
git commit -m &amp;quot;initial setup commit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code commit can be seen at: &lt;a href=&#34;https://github.com/btihen/live-tweets/commit/2eb9016371db3210eaf3a1cb35e4066e3b67bdbe&#34;&gt;https://github.com/btihen/live-tweets/commit/2eb9016371db3210eaf3a1cb35e4066e3b67bdbe&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;create-our-tweet-model&#34;&gt;create our tweet model&lt;/h2&gt;
&lt;p&gt;Create this with the generator (notice we are using &lt;code&gt;mix phx.gen.live&lt;/code&gt; not &lt;code&gt;mix phx.gen.html&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.gen.live Messages Post posts body:text
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Change migration to require data - add &lt;code&gt;null: false&lt;/code&gt; to our field so it now looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# priv/repo/migrations/20210418084643_create_posts.exs
defmodule Tweets.Repo.Migrations.CreatePosts do
  use Ecto.Migration

  def change do
    create table(:posts) do
      add :body, :text, null: false

      timestamps()
    end

  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets update the routes as described by the generator - in &lt;code&gt;lib/tweets_web/router.ex&lt;/code&gt; so the section that looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  scope &amp;quot;/&amp;quot;, TweetsWeb do
    pipe_through :browser

    live &amp;quot;/&amp;quot;, PageLive, :index
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;should be change to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  scope &amp;quot;/&amp;quot;, TweetsWeb do
    pipe_through :browser

    # live &amp;quot;/&amp;quot;, PageLive, :index
    live &amp;quot;/&amp;quot;, PostLive.Index, :index
    live &amp;quot;/posts&amp;quot;, PostLive.Index, :index
    live &amp;quot;/posts/new&amp;quot;, PostLive.Index, :new
    live &amp;quot;/posts/:id/edit&amp;quot;, PostLive.Index, :edit

    live &amp;quot;/posts/:id&amp;quot;, PostLive.Show, :show
    live &amp;quot;/posts/:id/show/edit&amp;quot;, PostLive.Show, :edit
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now check our field &lt;code&gt;body&lt;/code&gt; is required in validations &amp;ndash; in our changeset.  We see &lt;code&gt;validate_required([:body])&lt;/code&gt; in the file: &lt;code&gt;lib/tweets/messages/post.ex&lt;/code&gt; - so we are all set.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  def changeset(post, attrs) do
    post
    |&amp;gt; cast(attrs, [:body])
    |&amp;gt; validate_required([:body])
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So it time to migrate &amp;amp; test:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix ecto.migrate
mix test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hmm - the tests generator and html use different html standards: to make the tests pass test that phoenix returns &lt;code&gt;can&amp;amp;#39;t be blank&lt;/code&gt; instead of &lt;code&gt;can&amp;amp;apos;t be blank&lt;/code&gt; in &lt;code&gt;test/tweets_web/live/post_live_test.exs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;also change: &lt;code&gt;&amp;quot;Welcome to Phoenix!&amp;quot;&lt;/code&gt; to &lt;code&gt;&amp;quot;Listing Posts&amp;quot;&lt;/code&gt; in &lt;code&gt;test/tweets_web/live/page_live_test.exs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now lets see how our new SPA works:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It works, but we want to list the most recent tweets at the top of the page &amp;ndash; let&amp;rsquo;s investigate &amp;ndash; open &lt;code&gt;lib/tweets_web/live/post_live/index.ex&lt;/code&gt; we see in the &lt;code&gt;mount&lt;/code&gt; command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/tweets_web/live/post_live/index.ex
  def mount(_params, _session, socket) do
    {:ok, assign(socket, :posts, list_posts())}
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It uses &lt;code&gt;list_posts()&lt;/code&gt; to get the list - so let&amp;rsquo;s change this function.&lt;/p&gt;
&lt;p&gt;Open: &lt;code&gt;lib/tweets/messages.ex&lt;/code&gt; and change:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/tweets/messages.ex
  def list_posts do
    Repo.all(Post)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/tweets/messages.ex
 def list_posts do
    Post
      |&amp;gt; order_by(desc: :inserted_at)
      |&amp;gt; Repo.all
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool now our SPA works like we want &amp;ndash; but it isn&amp;rsquo;t real-time between two users / browsers.&lt;/p&gt;
&lt;p&gt;This code can be seen at: &lt;a href=&#34;https://github.com/btihen/live-tweets/commit/3f432d7c06d974f9c2349937a35e391dedeb2ad6&#34;&gt;https://github.com/btihen/live-tweets/commit/3f432d7c06d974f9c2349937a35e391dedeb2ad6&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;broadcast-changes-with-pubsub&#34;&gt;Broadcast changes with Pubsub&lt;/h2&gt;
&lt;p&gt;Phoenix uses Websockets to do &lt;code&gt;real-time&lt;/code&gt; communication.  In our &amp;ldquo;context&amp;rdquo; we will create our &lt;code&gt;channel&lt;/code&gt; - the pipeline that the socket uses to send information back and forth to various &amp;ldquo;subscribers&amp;rdquo; - viewers of our page.&lt;/p&gt;
&lt;h3 id=&#34;setup-the-messages-channel&#34;&gt;Setup the &amp;ldquo;Messages&amp;rdquo; Channel&lt;/h3&gt;
&lt;p&gt;We go into: &lt;code&gt;lib/tweets/messages.ex&lt;/code&gt; and at the top of the file add the Broadcast Setup:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/tweets/messages.ex
defmodule Tweets.Messages do
  @moduledoc &amp;quot;&amp;quot;&amp;quot;
  The Messages context.
  &amp;quot;&amp;quot;&amp;quot;

  import Ecto.Query, warn: false
  alias Tweets.Repo
  alias Tweets.Messages.Post

  # Setup Broadcasting
  @topic inspect(__MODULE__)

  def subscribe do
    Phoenix.PubSub.subscribe(Tweets.PubSub, @topic)
  end

  def notify_subscribers({:ok, post}, event) do
    posts = list_posts()
    Phoenix.PubSub.broadcast(Tweets.PubSub, @topic, {__MODULE__, event, posts})
    {:ok, post}
  end

  def notify_subscribers({:error, post}, event) do
    {:error, post}
  end
  # Setup Broadcasting
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets quickly review this new code:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@topic inspect(__MODULE__)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;makes @topic named &lt;code&gt;Tweets.Messages&lt;/code&gt; - but if we change the module name it changes @topic too.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;subscribe&lt;/code&gt; function - allows us to register our index page with channel created automatically by LiveView.&lt;/p&gt;
&lt;p&gt;We have two &lt;code&gt;notify_subscribers&lt;/code&gt; because we will call these after we do our DB actions - writing to the DB could fail or succeed.  If we have success then we will update all subscribers and the last line tuple passes the results of the interaction back to the actual user.   (Of course we don&amp;rsquo;t need to notify when the DB transaction fails, we only need to pass the message back to the user).&lt;/p&gt;
&lt;h3 id=&#34;subscribing-to-the-messages-channel&#34;&gt;Subscribing to the &amp;lsquo;Messages&amp;rsquo; Channel&lt;/h3&gt;
&lt;p&gt;Now that we have &lt;code&gt;notify_subscribers&lt;/code&gt; that broadcasts &lt;code&gt;Phoenix.PubSub.broadcast(Tweets.PubSub, @topic, {__MODULE__, event, posts})&lt;/code&gt; we need a way to subscribe to this channel and receive these messages in all our index pages.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/tweets_web/live/post_live/index.ex
defmodule TweetsWeb.PostLive.Index do
  use TweetsWeb, :live_view

  alias Tweets.Messages
  alias Tweets.Messages.Post

  @impl true
  def mount(_params, _session, socket) do
    # register with the channel if connection to LiveView
    if connected?(socket), do: Messages.subscribe()
    {:ok, assign(socket, :posts, list_posts())}
  end

  @impl true
  def handle_info({Messages, &amp;quot;posts-changed&amp;quot;, posts}, socket) do
    socket = assign(socket, :posts, posts)
    {:noreply, socket}
  end
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The important changes are to &lt;strong&gt;subscribe to the channel&lt;/strong&gt; we we have subscribed to our Websocket we do this in the &lt;code&gt;mount&lt;/code&gt; function with &lt;code&gt;if connected?(socket), do: Messages.subscribe()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now we need a way to &lt;strong&gt;recieve information from the channel&lt;/strong&gt; this is done with the &lt;code&gt;handle_info&lt;/code&gt; function - so we will simply take the new list of posts and update the socket and index will take care of the rest &amp;ndash; automatically!&lt;/p&gt;
&lt;h3 id=&#34;sending-messages-to-the-channel&#34;&gt;Sending Messages to the Channel&lt;/h3&gt;
&lt;p&gt;So now to activate our changes - we need to send to the channel via &lt;code&gt;notify_subscribers&lt;/code&gt; when we successfully change something in the Messages &amp;ldquo;post&amp;rdquo; context.  To do this we will make small changes to the create_post, update_post and delete_post functions.  We will add &lt;code&gt;notify_subscribers({status, post}, &amp;quot;posts-changed&amp;quot;)&lt;/code&gt; to the end of each function.  Since we only defined one event &lt;code&gt;&amp;quot;posts-changed&amp;quot;&lt;/code&gt; in our index page &lt;code&gt;handle_info&lt;/code&gt; function &amp;ndash; we will hard-code that into our &lt;code&gt;notify_subscribers&lt;/code&gt; call&lt;/p&gt;
&lt;p&gt;So our simple DB calls in Messages currently looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/tweets/messages.ex
  def create_post(attrs \\ %{}) do
    %Post{}
      |&amp;gt; Post.changeset(attrs)
      |&amp;gt; Repo.insert()
  end

  def update_post(%Post{} = post, attrs) do
    post
      |&amp;gt; Post.changeset(attrs)
      |&amp;gt; Repo.update()
  end

  def delete_post(%Post{} = post) do
    Repo.delete(post)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now becomes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/tweets/messages.ex
  def create_post(attrs \\ %{}) do
    {status, post} = %Post{}
                      |&amp;gt; Post.changeset(attrs)
                      |&amp;gt; Repo.insert()
    notify_subscribers({status, post}, &amp;quot;posts-changed&amp;quot;)
  end

  def update_post(%Post{} = post, attrs) do
    {status, post} = post
                      |&amp;gt; Post.changeset(attrs)
                      |&amp;gt; Repo.update()
    notify_subscribers({status, post}, &amp;quot;posts-changed&amp;quot;)
  end

  def delete_post(%Post{} = post) do
    {status, post} = post
                      |&amp;gt; Repo.delete()
    notify_subscribers({status, post}, &amp;quot;posts-changed&amp;quot;)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: in-order to pass the DB transaction information back to the user, we need to capture that information with the tuple: &lt;code&gt;{status, post}&lt;/code&gt; - which notify_subscribers will pass back and will be returned to the user - the returns values will be either &lt;code&gt;{:ok, post}&lt;/code&gt; or &lt;code&gt;{:error, post_changeset}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s be sure we didn&amp;rsquo;t break anything and run our tests again:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ideally, all is still good so lets try our updated app now:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now any changes we make should be seen all users.&lt;/p&gt;
&lt;p&gt;Cool, lets snapshot this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout -b liveview_spa_broadcast_with_pubsub
git add .
git commit -m &amp;quot;add realtime broadcast to all users&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code can be seen at: &lt;a href=&#34;https://github.com/btihen/live-tweets/commit/32c179e05cae68c5a2a6d49f54bf5a8dcf4d4dac&#34;&gt;https://github.com/btihen/live-tweets/commit/32c179e05cae68c5a2a6d49f54bf5a8dcf4d4dac&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;In my mind this is far simpler to setup as a single page app - using the LiveView generator and a little more work to add broadcasting than in Rails.  Converting a Standard Phoenix HTML page to LiveView however is considerably more difficult than Converting a Standard Rails page to Hotwire.  I also find adding advanced features much more straight-forward in LiveView - as you write the event_handlers in you liveview pages and it is very clear what is happening.  In rails you need to know what is happening without being able to see the code.  I also like that LiveView - when it can&amp;rsquo;t find an event - you get lots of errors.  This is very helpful.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Phoenix 1.5 PETAL Stack Setup - w/ asdf</title>
      <link>https://btihen.me/post_elixir_phoenix/phoenix_1_5_petal_setup_with_asdf/</link>
      <pubDate>Sat, 10 Apr 2021 01:01:53 +0200</pubDate>
      <guid>https://btihen.me/post_elixir_phoenix/phoenix_1_5_petal_setup_with_asdf/</guid>
      <description>&lt;p&gt;I have been enjoying the tools associated with Elixir and exploring the frontend. LiveView helps make that more intuitive and when that isn&amp;rsquo;t enough, AlpineJS is a lightweight JS tool with a similar syntax as Vue.&lt;/p&gt;
&lt;h2 id=&#34;install-asdf---and-required-software&#34;&gt;Install asdf - and required software&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://thinkingelixir.com/install-elixir-using-asdf/&#34;&gt;https://thinkingelixir.com/install-elixir-using-asdf/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cogini.com/blog/using-asdf-with-elixir-and-phoenix/&#34;&gt;https://www.cogini.com/blog/using-asdf-with-elixir-and-phoenix/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&#34;&gt;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On a Mac I used Homebrew:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install asdf
echo -e &#39;\n. $(brew --prefix asdf)/asdf.sh&#39; &amp;gt;&amp;gt; ~/.bash_profile
echo -e &#39;\n. $(brew --prefix asdf)/etc/bash_completion.d/asdf.bash&#39; &amp;gt;&amp;gt; ~/.bash_profile
source ~/.bash_profile  # (or open a new terminal)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can install asdf software packages:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;asdf plugin-add erlang
asdf plugin-add elixir
asdf plugin-add nodejs
asdf plugin-add Postgres
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you need to install the desired versions (usually the newest) - currently:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;asdf list all erlang
asdf install erlang 23.3.1

# note the elixir version otp must match the erlang version!
asdf list all elixir
asdf install elixir 1.11.4-otp-23

# asdf install elixir 1.11.4-otp-24
# if you mismatch elixir with erlang you will get errors like:
# {&amp;quot;init terminating in do_boot&amp;quot;,{undef,[{elixir,start_cli,[],[]},{init,start_em,1,[]},{init,do_boot,3,[]}]}}

asdf list all nodejs
asdf install nodejs lts-fermium

asdf list all Postgres
asdf install Postgres 13.2
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;get-the-newest-phoenix-hex-package&#34;&gt;Get the newest Phoenix Hex Package&lt;/h2&gt;
&lt;p&gt;Once you have established you have the requrements - the download the newest version of Phoenix (go to: &lt;a href=&#34;https://hexdocs.pm/phoenix/installation.html#phoenix&#34;&gt;https://hexdocs.pm/phoenix/installation.html#phoenix&lt;/a&gt; to see the newest version) - at the time of this writing its 1.5.8 - be sure its installed using:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix archive.install hex phx_new 1.5.8
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create--config-a-project&#34;&gt;create / config a project&lt;/h2&gt;
&lt;p&gt;First we will creat the folder / project location&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir fenix
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we will tell it which software to use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch fenix/.tool-versions
cat &amp;lt;&amp;lt;EOF &amp;gt;&amp;gt;fenix/.tool-versions
erlang 23.3.1
elixir 1.11.4-otp-23
Postgres 13.2
nodejs lts-Fermium
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-new-phoenix-project&#34;&gt;Create a new Phoenix Project&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&#34;&gt;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now you can simply do:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.new fenix --live
cd fenix
mix ecto.create
mix phx.server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;assuming all is good lets configure git:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init
git add .
git commit -m &amp;quot;initial Phoneix install with LiveView&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;install--test-alpine-js&#34;&gt;install &amp;amp; test Alpine JS&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://underjord.io/getting-started-with-petal.html&#34;&gt;https://underjord.io/getting-started-with-petal.html&lt;/a&gt;
&lt;a href=&#34;https://dockyard.com/blog/2020/12/21/optimizing-user-experience-with-liveview&#34;&gt;https://dockyard.com/blog/2020/12/21/optimizing-user-experience-with-liveview&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd assets
npm install alpinejs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now change &lt;code&gt;app.js&lt;/code&gt; is to require our new setup:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# assets/js/app.js
// .. after the app.scss import add:
import Alpine from &amp;quot;alpinejs&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;still in &lt;code&gt;assets/js/app.js&lt;/code&gt; find&lt;code&gt;:&lt;/code&gt;let liveSocket = new LiveSocket(&amp;quot;/live&amp;quot;, Socket, {params: {_csrf_token: csrfToken}})`&lt;/p&gt;
&lt;p&gt;and change to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let liveSocket =
    new LiveSocket(&amp;quot;/live&amp;quot;,
                    Socket,
                    { params: {_csrf_token: csrfToken},
                      dom: {
                        onBeforeElUpdated(from, to){
                          if(from.__x){ Alpine.clone(from.__x, to) }
                        }
                    } }
                  )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;TEST by adding to the end of: &lt;code&gt;lib/fenix_web/live/page_live.html.leex&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;section&amp;gt;
  &amp;lt;h2&amp;gt;Alpine JS Installed&amp;lt;/h2&amp;gt;
  &amp;lt;div x-data=&amp;quot;{name:&#39;&#39;}&amp;quot;&amp;gt;
    &amp;lt;label for=&amp;quot;name&amp;quot;&amp;gt;Name:&amp;lt;/label&amp;gt;
    &amp;lt;input id=&amp;quot;name&amp;quot; type=&amp;quot;text&amp;quot; x-model=&amp;quot;name&amp;quot; /&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;br&amp;gt;&amp;lt;b&amp;gt;&amp;lt;em&amp;gt;Output:&amp;lt;/em&amp;gt;&amp;lt;/b&amp;gt; &amp;lt;span x-text=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test with:
&lt;code&gt;mix phx.server&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;when typing the name should appear below!&lt;/p&gt;
&lt;p&gt;let&amp;rsquo;s snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;phoenix with alpine js&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;integrating-tailwind-into-phoenix&#34;&gt;Integrating Tailwind into phoenix&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix&#34;&gt;https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix&lt;/a&gt;
&lt;a href=&#34;https://fullstackphoenix.com/tutorials/get-started-with-tailwind-in-phoenix&#34;&gt;https://fullstackphoenix.com/tutorials/get-started-with-tailwind-in-phoenix&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This source gives several options - here we install with &lt;code&gt;postcss-import&lt;/code&gt; (for components from the beginning):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd assets
npm install tailwindcss postcss autoprefixer postcss-loader@4.2  postcss-import --save-dev

touch postcss.config.js
cat &amp;lt;&amp;lt;EOF &amp;gt; postcss.config.js
module.exports = {
  plugins: {
    &amp;quot;postcss-import&amp;quot;: {},
    tailwindcss: {},
    autoprefixer: {}
  }
}
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now open: &lt;code&gt;assets/webpack.config.js&lt;/code&gt; and find:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
	test: /\.[s]?css$/,
	use: [
		MiniCssExtractPlugin.loader,
		&#39;css-loader&#39;,
		&#39;sass-loader&#39;,
	],
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;change too (add &lt;code&gt;&#39;postcss-loader&#39;&lt;/code&gt; between &lt;code&gt;&#39;css-loader&#39;&lt;/code&gt; &amp;amp; &lt;code&gt;&#39;sass-loader&#39;&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
	test: /\.[s]?css$/,
	use: [
		MiniCssExtractPlugin.loader,
		&#39;css-loader&#39;,
		&#39;postcss-loader&#39;,
		&#39;sass-loader&#39;,
	],
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now initialize tailwind config with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npx tailwindcss init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;this creates the file &lt;code&gt;tailwind.config.js&lt;/code&gt; we will replace the &lt;code&gt;purge: [],&lt;/code&gt; section with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;purge: [
    &#39;../lib/**/*.ex&#39;,
    &#39;../lib/**/*.leex&#39;,
    &#39;../lib/**/*.eex&#39;,
    &#39;./js/**/*.js&#39;
  ],
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the fill will look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;module.exports = {
  purge: [
    &#39;../lib/**/*.ex&#39;,
    &#39;../lib/**/*.leex&#39;,
    &#39;../lib/**/*.eex&#39;,
    &#39;./js/**/*.js&#39;
  ],
  darkMode: false, // or &#39;media&#39; or &#39;class&#39;
  theme: {
    extend: {},
  },
  variants: {
    extend: {},
  },
  plugins: [],
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now in &lt;code&gt;assets/package.json&lt;/code&gt; find:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;quot;scripts&amp;quot;: {
    &amp;quot;deploy&amp;quot;: &amp;quot;webpack --mode production&amp;quot;,
    &amp;quot;watch&amp;quot;: &amp;quot;webpack --mode development --watch&amp;quot;
  },
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and change this to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;quot;scripts&amp;quot;: {
    &amp;quot;deploy&amp;quot;: &amp;quot;NODE_ENV=production webpack --mode production&amp;quot;,
    &amp;quot;watch&amp;quot;: &amp;quot;webpack --mode development --watch&amp;quot;
  },
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we will create a file for our custom styles the &lt;code&gt;assets/css/custom-style.css&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# assuming you are still in the assets directory on the cli
touch css/custom-styles.css
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s also create our a custom component (we will make buttons for a counter to be sure tailwind and aplineJS are playing well together):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# assuming you are still in the assets directory on the cli
mkdir css/components
touch css/components/buttons.css
cat &amp;lt;&amp;lt;EOF &amp;gt; css/components/buttons.css
@layer components {
  .btn-redish {
    @apply bg-red-300 hover:bg-red-600 text-blue-800 font-bold py-2 px-4 rounded;
  }
  .btn-greenish {
    @apply bg-green-300 hover:bg-green-600 text-blue-800 font-bold py-2 px-4 rounded;
  }
}
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now will will configure Phoenix to load Tailwind, our custom-styles and our custom-components &amp;ndash; DO THIS AT THE TOP OF the file &lt;code&gt;assets/css/app.scss&lt;/code&gt; (@imports must be before all else):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* Import tailwind - with postcss-import installed */
@import &amp;quot;tailwindcss/base&amp;quot;;
@import &amp;quot;tailwindcss/components&amp;quot;;
@import &amp;quot;tailwindcss/utilities&amp;quot;;

/* custom styles - put after base imports! */
@import &amp;quot;./custom-styles.css&amp;quot;;

/* import custom components */
@import &amp;quot;./components/buttons.css&amp;quot;;

/* default phoenix styles - eventually remove */
@import &amp;quot;./phoenix.css&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;add a test html from tailwind to the end of: &lt;code&gt;lib/fenix_web/live/page_live.html.leex&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;section class=&amp;quot;grid grid-cols-1 gap-4&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;h2 class=&amp;quot;text-red-500 text-5xl font-bold text-center&amp;quot;&amp;gt;Tailwind CSS with AlpineJS&amp;lt;/h2&amp;gt;
    &amp;lt;p class=&amp;quot;mt-5 font-bold text-center&amp;quot;&amp;gt;Red Title with Colored Counter Buttons&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;mt-10 flex justify-center&amp;quot; x-data=&amp;quot;{ count: 0 }&amp;quot;&amp;gt;
    &amp;lt;button class=&amp;quot;btn-redish&amp;quot; x-on:click=&amp;quot;count--&amp;quot;&amp;gt;Decrement&amp;lt;/button&amp;gt;
    &amp;lt;code&amp;gt;count: &amp;lt;/code&amp;gt;&amp;lt;code x-text=&amp;quot;count&amp;quot;&amp;gt;&amp;lt;/code&amp;gt;
    &amp;lt;button class=&amp;quot;btn-greenish&amp;quot; x-on:click=&amp;quot;count++&amp;quot;&amp;gt;Increment&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when we start the server with &lt;code&gt;mix phx.server&lt;/code&gt; we should have a centered / red title and colored buttons on our counter.&lt;/p&gt;
&lt;p&gt;now lets snapshot our PETAL setup:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;Tailwind installed&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=o4Prej0wIZA&#34;&gt;https://www.youtube.com/watch?v=o4Prej0wIZA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.pthompson.org/alpine-js-and-liveview&#34;&gt;http://blog.pthompson.org/alpine-js-and-liveview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix&#34;&gt;https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fullstackphoenix.com/tutorials/get-started-with-tailwind-in-phoenix&#34;&gt;https://fullstackphoenix.com/tutorials/get-started-with-tailwind-in-phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fullstackphoenix.com/tutorials/combine-phoenix-liveview-with-alpine-js&#34;&gt;https://fullstackphoenix.com/tutorials/combine-phoenix-liveview-with-alpine-js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/mindvalley-technology/how-to-add-tailwindcss-to-your-phoenix-project-e2250ad31ace&#34;&gt;https://medium.com/mindvalley-technology/how-to-add-tailwindcss-to-your-phoenix-project-e2250ad31ace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://thinkingelixir.com/podcast-episodes/021-tailwind-css-alpine-js-and-liveview-with-patrick-thompson/&#34;&gt;https://thinkingelixir.com/podcast-episodes/021-tailwind-css-alpine-js-and-liveview-with-patrick-thompson/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Rails 6.1 - Hotwire with Lazy Loading</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_1_hotwire_lazy_load_data/</link>
      <pubDate>Sun, 28 Mar 2021 01:57:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_1_hotwire_lazy_load_data/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;As was seen in 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_1_hotwire_flash_messages/&#34;&gt;Using Hotwire with Flash Messages&lt;/a&gt; Hotwire can easily load data - let&amp;rsquo;s do this in a lazy loaded way (after the html is loaded we add data).&lt;/p&gt;
&lt;h2 id=&#34;basic-setup&#34;&gt;Basic Setup&lt;/h2&gt;
&lt;p&gt;Start with the code at the end of: 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_1_hotwire_simple_realtime/&#34;&gt;Using Hotwire in Rails&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;prepare-our-code&#34;&gt;Prepare our code&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s remove the extra Tweet.new load in the controller&amp;rsquo;s index method:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/controllers/tweets_controller.rb
  def index
    @tweets = Tweet.all.order(created_at: :desc)
    # @tweet = Tweet.new # no longer needed
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now if we try our code we get a null value error (for course).&lt;/p&gt;
&lt;p&gt;So to fix this we need to load the data back in (and restructure our index page a bit).&lt;/p&gt;
&lt;p&gt;Turbo works well if you use the normal templates - so in this case we will use the &lt;code&gt;new&lt;/code&gt; template on the home page to call the new form and get its own data:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/views/tweets/index.html.erb
&amp;lt;h1&amp;gt;Tweets&amp;lt;/h1&amp;gt;
&amp;lt;%= turbo_stream_from &amp;quot;tweets&amp;quot; %&amp;gt;

&amp;lt;h2 class=&amp;quot;mt-3 h4 text-muted&amp;quot;&amp;gt;New Tweet&amp;lt;/h2&amp;gt;
&amp;lt;div class=&amp;quot;card card-body&amp;quot;&amp;gt;
  &amp;lt;%= turbo_frame_tag &amp;quot;new-tweet&amp;quot;, src: new_tweet_path, target: &amp;quot;_top&amp;quot; %&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;h2 class=&amp;quot;mt-3 h4 text-muted&amp;quot;&amp;gt;Tweet Feed&amp;lt;/h2&amp;gt;
&amp;lt;%= turbo_frame_tag &amp;quot;tweets&amp;quot; do %&amp;gt;
  &amp;lt;%= render @tweets %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice the new template is using the dom_id &amp;ldquo;new-tweet&amp;rdquo; and not &amp;ldquo;new_tweet&amp;rdquo;. Also note that this tag has a &lt;code&gt;src:&lt;/code&gt; - that is where it is getting its data source (&amp;amp; view to use) - in this case the &lt;code&gt;new_tweet_path&lt;/code&gt; routes to &lt;code&gt;tweets_controller#new&lt;/code&gt; and that calls the &lt;code&gt;veiw&lt;/code&gt; template.  The final thing to note is the &lt;code&gt;target&lt;/code&gt; - this tells the turbo_tag to look / act outside the contraints of its frame (otherwise we couldn&amp;rsquo;t reach the controller).&lt;/p&gt;
&lt;p&gt;Currently this won&amp;rsquo;t work yet - we need to create a &lt;strong&gt;matching tag&lt;/strong&gt; &amp;ndash; including the &lt;code&gt;target&lt;/code&gt; in the &lt;code&gt;new&lt;/code&gt; template.  So our updated &lt;code&gt;new&lt;/code&gt; template now looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; app/views/tweets/new.html.erb
&amp;lt;h1&amp;gt;New Tweet&amp;lt;/h1&amp;gt;

&amp;lt;%= turbo_frame_tag &amp;quot;new-tweet&amp;quot;, target: &amp;quot;_top&amp;quot; do %&amp;gt;
  &amp;lt;%= render &#39;form&#39;, tweet: @tweet %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we should have a new form that uses the standard rails data flow within the index - just like the display and edit of individual tweets also uses show and edit templates too.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;The repo where you can find this code in the branch:
&lt;a href=&#34;https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_lazy_load_data&#34;&gt;https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_lazy_load_data&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rails 6.1 - Hotwire with Modals</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_1_hotwire_modal_form/</link>
      <pubDate>Sat, 20 Mar 2021 18:57:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_1_hotwire_modal_form/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Now that you have the basics of using Hotwire in Rails 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_1_hotwire_simple_realtime/&#34;&gt;Using Hotwire in Rails&lt;/a&gt; - its interesting to try using it in other contexts, inparticular &lt;strong&gt;modals&lt;/strong&gt; are very useful for inputs in Single Page Apps.  So in this Blog we will make the new input form a modal and leave the edit as an in-place form.&lt;/p&gt;
&lt;h2 id=&#34;basic-setup&#34;&gt;Basic Setup&lt;/h2&gt;
&lt;p&gt;Start with the code at the end of: 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_1_hotwire_simple_realtime/&#34;&gt;Using Hotwire in Rails&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;add-jquery-to-bootstrap-setup&#34;&gt;Add jQuery to Bootstrap Setup&lt;/h2&gt;
&lt;p&gt;First we need to ensure we have JS and JQuery (installed with Bootstrap) - so we will simply add the following to the end of our &amp;lt;body&amp;gt; in the &lt;code&gt;application.html.erb&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/views/layouts/application.html.erb
&amp;lt;body&amp;gt;
  &amp;lt;p id=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;%= yield %&amp;gt;
  &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&amp;quot; integrity=&amp;quot;sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js&amp;quot; integrity=&amp;quot;sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;add-modal-to-index&#34;&gt;Add Modal to Index&lt;/h2&gt;
&lt;p&gt;So we will start by replacing the new-form with a button that toggles the modal.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/views/tweets/index.html.erb
&amp;lt;h1&amp;gt;Tweets&amp;lt;/h1&amp;gt;
&amp;lt;%= turbo_stream_from &amp;quot;tweets&amp;quot; %&amp;gt;

&amp;lt;h2 class=&amp;quot;mt-3 h4 text-muted&amp;quot;&amp;gt;New Tweet&amp;lt;/h2&amp;gt;
&amp;lt;%= render &amp;quot;tweets/modal_new&amp;quot;, tweet: @tweet %&amp;gt;

&amp;lt;h2 class=&amp;quot;mt-3 h4 text-muted&amp;quot;&amp;gt;Tweet Feed&amp;lt;/h2&amp;gt;
&amp;lt;%= turbo_frame_tag &amp;quot;tweets&amp;quot; do %&amp;gt;
  &amp;lt;%= render @tweets %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now lets make a partial that has the modal toggle button and the associated html to enable the modal to function (this code is basically copied from the Bootstrap website):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/views/tweets/_modal_new.html.erb
&amp;lt;%= link_to &amp;quot;#&amp;quot;, class: &#39;btn btn-sm btn-outline-primary&#39;, data: { toggle: &amp;quot;modal&amp;quot;, target: &amp;quot;#tweetModal&amp;quot; } do %&amp;gt;
New Tweet
&amp;lt;% end %&amp;gt;

&amp;lt;div class=&amp;quot;modal fade&amp;quot; id=&amp;quot;tweetModal&amp;quot; tabindex=&amp;quot;-1&amp;quot; aria-labelledby=&amp;quot;exampleModalLabel&amp;quot; aria-hidden=&amp;quot;true&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;modal-dialog&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;modal-content&amp;quot;&amp;gt;
      &amp;lt;%= render &amp;quot;tweets/modal_form&amp;quot;, tweet: tweet %&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice we have a partial for the form still - this is because we have to point turbo at a dom_id within a partial (without doing this we can&amp;rsquo;t get validation errors back into this form).  This is a mix of the Bootstrap example code placed within the rails form.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#  app/views/tweets/_modal_form.html.erb
&amp;lt;%= form_with(model: tweet, id: dom_id(tweet)) do |form| %&amp;gt;

  &amp;lt;div class=&amp;quot;modal-header&amp;quot;&amp;gt;
    &amp;lt;h5 class=&amp;quot;modal-title&amp;quot;&amp;gt;New Tweet&amp;lt;/h5&amp;gt;
    &amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;close&amp;quot; data-dismiss=&amp;quot;modal&amp;quot; aria-label=&amp;quot;Close&amp;quot;&amp;gt;
      &amp;lt;span aria-hidden=&amp;quot;true&amp;quot;&amp;gt;&amp;amp;times;&amp;lt;/span&amp;gt;
    &amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;modal-body&amp;quot;&amp;gt;
    &amp;lt;% if tweet.errors.any? %&amp;gt;
    &amp;lt;div id=&amp;quot;error_explanation&amp;quot;&amp;gt;
      &amp;lt;h2&amp;gt;&amp;lt;%= pluralize(tweet.errors.count, &amp;quot;error&amp;quot;) %&amp;gt; prohibited this tweet from being saved:&amp;lt;/h2&amp;gt;

      &amp;lt;ul&amp;gt;
        &amp;lt;% tweet.errors.each do |error| %&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;%= error.full_message %&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;% end %&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;% end %&amp;gt;

    &amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
      &amp;lt;%= form.label :body %&amp;gt;
      &amp;lt;%= form.text_area :body %&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;modal-footer&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;actions&amp;quot;&amp;gt;
      &amp;lt;%= form.submit class: &amp;quot;btn btn-sm btn-outline-success&amp;quot; %&amp;gt;
      &amp;lt;%= link_to &amp;quot;Cancel&amp;quot;, tweet, class: &amp;quot;btn btn-sm btn-outline-danger&amp;quot; %&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;

&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;test&#34;&gt;Test&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Modal Opens&lt;/li&gt;
&lt;li&gt;Modal Close Works&lt;/li&gt;
&lt;li&gt;Modal Cancel Works&lt;/li&gt;
&lt;li&gt;Create valid Tweet &amp;ndash; works and broadcasts&lt;/li&gt;
&lt;li&gt;Create invalid Tweet &amp;ndash; Errors go to wrong form (must click cancel or reload)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In fact, if you put the regular form back into the index page you will see that the validation errors show up there.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;misplaced_validation_errors_on_create.png&#34; alt=&#34;validation errors in wrong form&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;fix-validation-errors&#34;&gt;Fix validation errors&lt;/h2&gt;
&lt;p&gt;We fix this like this like a normal form - we change how the controller uses turbo_stream. So instead of pointing to the partial: &amp;ldquo;tweets/form&amp;rdquo; we need to point to &amp;ldquo;tweets/modal_form&amp;rdquo; (the new partial with the form).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/controllers/tweets_controller.rb
  def create
    @tweet = Tweet.new(tweet_params)
    respond_to do |format|
      if @tweet.save
        format.html { redirect_to tweets_url, notice: &amp;quot;Tweet was successfully created.&amp;quot; }
        format.json { render :show, status: :created, location: @tweet }
      else
        format.turbo_stream { # route turbo_stream validation errors
                      render turbo_stream: turbo_stream.replace(
                              @tweet, partial: &amp;quot;tweets/modal_form&amp;quot;,
                              locals: { tweet: @tweet}) }
        format.html { render :new, status: :unprocessable_entity }
        format.json { render json: @tweet.errors, status: :unprocessable_entity }
      end
    end
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now all our tests should work.&lt;/p&gt;
&lt;h2 id=&#34;using-turbo-templates&#34;&gt;Using turbo templates&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s refactor - for future flexibility.  We&amp;rsquo;ll create the template.  Since we are using the &lt;code&gt;create&lt;/code&gt; method within the controller - we&amp;rsquo;ll call the file: &lt;code&gt;create.turbo_stream.html.erb&lt;/code&gt; - notice, unsurprisingly it looks what&amp;rsquo;s in the controller.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/views/tweets/create.turbo_stream.erb
&amp;lt;!--             action  dom_id           partial with the dom_id        actual data --&amp;gt;
&amp;lt;%= turbo_stream.replace @tweet, partial: &amp;quot;tweets/modal_form&amp;quot;, locals: { tweet: @tweet } %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can make the controller look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/controllers/tweets_controller.rb
  def create
    @tweet = Tweet.new(tweet_params)
    respond_to do |format|
      if @tweet.save
        format.html { redirect_to tweets_url, notice: &amp;quot;Tweet was successfully created.&amp;quot; }
        format.json { render :show, status: :created, location: @tweet }
      else
        format.turbo_stream  # route turbo_stream validation errors
        format.html { render :new, status: :unprocessable_entity }
        format.json { render json: @tweet.errors, status: :unprocessable_entity }
      end
    end
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using the template allows us the flexibilty to make multiple dynamic changes to the page on a create.  This is demonstrated in the post describing using Flash messages with Hotwire.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;The repo where you can find this code in the branch:
&lt;a href=&#34;https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_modal_new_tweet&#34;&gt;https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_modal_new_tweet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The important commit is:
&lt;a href=&#34;https://github.com/btihen/ruby_kafi_hotwire_tweets/commit/0c37fb6071b31d13f4cf3ce2499326893724e131&#34;&gt;https://github.com/btihen/ruby_kafi_hotwire_tweets/commit/0c37fb6071b31d13f4cf3ce2499326893724e131&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rails 6.1 - Hotwire with StimulusJS</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_1_hotwire_and_stimulusjs/</link>
      <pubDate>Sun, 14 Mar 2021 18:57:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_1_hotwire_and_stimulusjs/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Hotwire only updates dom_ids (usually only within a partial) - so other Frontend needs still need to be met with Javascript.  Rails uses StimulusJS to augment Hotwire.  I 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_1_hotwire_flash_messages/&#34;&gt;Using Hotwire with Flash Messages&lt;/a&gt; we created a new instance of Tweet in the turbo_template and sent that to the form.  (Pretty non-standard) - we can do this even more simply by using JS to clear the form without instantiating a new object.&lt;/p&gt;
&lt;h2 id=&#34;basic-setup&#34;&gt;Basic Setup&lt;/h2&gt;
&lt;p&gt;Start with the code at the end of: 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_1_hotwire_flash_messages/&#34;&gt;Using Hotwire with Flash Messages&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;stimulusjs-to-clear-forms&#34;&gt;StimulusJS to clear forms&lt;/h2&gt;
&lt;p&gt;To enable Flash Messages our create/controller looked like - which seems a little messy - in &lt;code&gt;create&lt;/code&gt; (happy-path) we handle all the updates via the create.turbo_stream.erb template and with validation errors we explicity (in the controller - handle the validation errors)&lt;/p&gt;
&lt;p&gt;So lets start by disabling the code we no longer need in the template:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/views/tweets/create.turbo_stream.erb
&amp;lt;%# turbo_stream.replace &amp;quot;tweet-form&amp;quot;, partial: &amp;quot;tweets/form&amp;quot;, locals: { tweet: Tweet.new } %&amp;gt;
&amp;lt;%# to send a message to the notice partial %&amp;gt;
&amp;lt;%= turbo_stream.append &amp;quot;notice&amp;quot;, partial: &amp;quot;shared/notice&amp;quot;, locals: {notice: &amp;quot;Tweet was successfully created.&amp;quot;} %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So we are only leaving the turbo_stream.append active.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s test here and be sure the new form doesn&amp;rsquo;t clear after making a new tweet.&lt;/p&gt;
&lt;h2 id=&#34;add-a-stimulusjs-controller&#34;&gt;Add a StimulusJS controller&lt;/h2&gt;
&lt;p&gt;We don&amp;rsquo;t need to add / install or configure StimulusJS since Hotwire already handles this.&lt;/p&gt;
&lt;p&gt;So let&amp;rsquo;s create the JS file to clear the form - its quite simple we will just use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// app/javascript/controllers/reset_form_controller.js
import { Controller } from &amp;quot;stimulus&amp;quot;

export default class extends Controller {
  reset() {
    this.element.reset()
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to tie this to the form we need to go into the form and add the &lt;code&gt;data:&lt;/code&gt; info &amp;ndash; so now our form should start with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/views/tweets/_form.html.erb
&amp;lt;%= form_with(model: tweet, id: dom_id(tweet),
              data: {controller: &amp;quot;reset-form&amp;quot;, action: &amp;quot;turbo:submit-end-&amp;gt;reset-form#reset&amp;quot;}
            ) do |form| %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;code&gt;data&lt;/code&gt; tag ties the stimulus &lt;strong&gt;controller&lt;/strong&gt; &lt;code&gt;reset_form_controller.js&lt;/code&gt; with the &lt;code&gt;reset-form&lt;/code&gt; setting &amp;ndash; notice the html uses a &lt;code&gt;-&lt;/code&gt; when ruby uses &lt;code&gt;_&lt;/code&gt;. On the form &lt;strong&gt;action&lt;/strong&gt; &lt;code&gt;submit-end&lt;/code&gt; then execute (&#39;-&amp;gt;&#39;) in the controller &lt;code&gt;reset-form&lt;/code&gt; the function (&#39;#&#39;) &lt;code&gt;reset&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Fairly straight-forward, but it helps to be aware of the syntax and the differences between Ruby and Javascript.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;The repo where you can find this code in the branch:
&lt;a href=&#34;https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_with_stimulus&#34;&gt;https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_with_stimulus&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rails 6.1 - Hotwire with Flash Messages</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_1_hotwire_flash_messages/</link>
      <pubDate>Sat, 06 Mar 2021 18:57:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_1_hotwire_flash_messages/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Now that you have the basics of using Hotwire in Rails 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_1_hotwire_simple_realtime/&#34;&gt;Using Hotwire in Rails&lt;/a&gt; - its interesting to try using it in other contexts, inparticular &lt;strong&gt;modals&lt;/strong&gt; are very useful for inputs in Single Page Apps.  So in this Blog we will make the new input form a modal and leave the edit as an in-place form.&lt;/p&gt;
&lt;h2 id=&#34;basic-setup&#34;&gt;Basic Setup&lt;/h2&gt;
&lt;p&gt;Start with the code at the end of: 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_1_hotwire_simple_realtime/&#34;&gt;Using Hotwire in Rails&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;flash-messages-in-partial&#34;&gt;Flash Messages in Partial&lt;/h2&gt;
&lt;p&gt;Remember, turbo_streams requires a dom_id and a partial in order to know where to send / update the HTML it generates &amp;ndash; so let&amp;rsquo;s prepare &lt;code&gt;application.html.erb&lt;/code&gt; so that flash messages use partials.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/views/layouts/application.html.erb
&amp;lt;body&amp;gt;
  &amp;lt;%= render &amp;quot;shared/notice&amp;quot;, notice: notice %&amp;gt;
  &amp;lt;%= yield %&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and of course we need a partials for notices now (we will keep it very simple):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/views/shared/_notice.html.erb
&amp;lt;p id=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now we will create a turbo template to handle the flash on create:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/views/tweets/create.turbo_stream.erb
&amp;lt;%# to send a message to the notice partial %&amp;gt;
&amp;lt;!--            action   dom_id         partial with dom_id   data to send in the notice --&amp;gt;
&amp;lt;%= turbo_stream.append &amp;quot;notice&amp;quot;, partial: &amp;quot;shared/notice&amp;quot;, locals: {notice: &amp;quot;Tweet created.&amp;quot;} %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order for the controller and turbo_stream to handle this non-standard action we need to update the create method in the controller with the instructions &lt;code&gt;format.turbo_stream&lt;/code&gt; on a successful create:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/controllers/tweets_controller.rb
def create
    @tweet = Tweet.new(tweet_params)

    respond_to do |format|
      if @tweet.save
        format.turbo_stream  # enables flash message on create - via the create template
        format.html { redirect_to tweets_url, notice: &amp;quot;Tweet was successfully created.&amp;quot; }
        format.json { render :show, status: :created, location: @tweet }
      else
        format.turbo_stream { # route turbo validation errors
                      render turbo_stream: turbo_stream.replace(
                              @tweet, partial: &amp;quot;tweets/form&amp;quot;,
                              locals: { tweet: @tweet}) }
        format.html { render :new, status: :unprocessable_entity }
        format.json { render json: @tweet.errors, status: :unprocessable_entity }
      end
    end
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when we test everything works great, except our form no longer clears. We can fix that by adding a second action to the create template (we will send a Tweet.new - there are other approaches too - covered in 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_1_hotwire_and_stimulusjs&#34;&gt;Hotwire and StimulusJS&lt;/a&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/views/tweets/create.turbo_stream.erb
&amp;lt;%# clear form on create - without using JavaScript - by replacing the old Tweet info with Tweet.new %&amp;gt;
&amp;lt;%= turbo_stream.replace &amp;quot;tweet-form&amp;quot;, partial: &amp;quot;tweets/form&amp;quot;, locals: { tweet: Tweet.new } %&amp;gt;
&amp;lt;%# to send a message to the notice partial %&amp;gt;
&amp;lt;%= turbo_stream.append &amp;quot;notice&amp;quot;, partial: &amp;quot;shared/notice&amp;quot;, locals: {notice: &amp;quot;Tweet was successfully created.&amp;quot;} %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;refactor&#34;&gt;Refactor&lt;/h2&gt;
&lt;p&gt;You might have noticed, that we have moved most of our turbo_steam template to the template file, but not the replace for validation errors &amp;ndash; since we already have a &lt;code&gt;replace&lt;/code&gt; command in our template - we will need to leave our specific instructions in the errors as is &amp;ndash; until we clear the form with JS.&lt;/p&gt;
&lt;p&gt;NOTE: now that we are consolidating our template info it might be tempting to add the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- to prepend on create - disabled to avoid double vision when broadcasting --&amp;gt;
&amp;lt;%#%   stream_action   dom_id_target, render_partial,       send_local_variables   %&amp;gt;
&amp;lt;%= turbo_stream.prepend &amp;quot;tweets&amp;quot;, partial: &amp;quot;tweets/tweet&amp;quot;, locals: { tweet: @tweet } %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but don&amp;rsquo;t add the default happy path instructions to the template when a model already has a broadcast after hook - if you add this instruction the person creating a new tweet will see two!&lt;/p&gt;
&lt;h2 id=&#34;flash-after-we-update&#34;&gt;Flash after we update&lt;/h2&gt;
&lt;p&gt;This is now very straight forward we simply add &lt;code&gt;format.turbo_stream&lt;/code&gt; to our save and create an &lt;code&gt;update.turbo_stream.erb&lt;/code&gt; template&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/views/tweets/update.turbo_stream.erb
&amp;lt;%# to send a message to the notice partial %&amp;gt;
&amp;lt;%= turbo_stream.append &amp;quot;notice&amp;quot;, partial: &amp;quot;shared/notice&amp;quot;, locals: {notice: &amp;quot;Tweet was successfully created.&amp;quot;} %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now we can tell the controller to use that:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#  app/controllers/tweets_controller.rb
  def update
    respond_to do |format|
      if @tweet.update(tweet_params)
        format.turbo_stream
        format.html { redirect_to @tweet, notice: &amp;quot;Tweet was successfully updated.&amp;quot; }
        format.json { render :show, status: :ok, location: @tweet }
      else
        format.html { render :edit, status: :unprocessable_entity }
        format.json { render json: @tweet.errors, status: :unprocessable_entity }
      end
    end
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We don&amp;rsquo;t have to clear the form on update since the &lt;code&gt;edit&lt;/code&gt; template is replaced with the &lt;code&gt;show&lt;/code&gt; template already.  So we are done.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;The repo where you can find this code in the branch:
&lt;a href=&#34;https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_flash_messages&#34;&gt;https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_flash_messages&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rails 6.1 - Hotwire (Simple Realtime SPA)</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_1_hotwire_simple_realtime/</link>
      <pubDate>Sun, 28 Feb 2021 18:57:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_1_hotwire_simple_realtime/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://hotwire.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hotwire&lt;/a&gt;  is planned to be integrated into Rails 7.x and is already included in the soon to be published book: 
&lt;a href=&#34;https://pragprog.com/titles/nrclient/modern-front-end-development-for-rails/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Modern Front-End Development for Rails: Hotwire, Stimulus, Turbo, and React &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hotwire allows us to build Single Page Apps using Ruby and Rails with nearly NO configuration! It allow very responsive web-applications as it reloads only the parts of the page that change via a socket.  Hotwire using 
&lt;a href=&#34;https://turbo.hotwire.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Turbo&lt;/a&gt; - an evolution of TurboLinks and as such is mobile friendly and in most cases can send the replacement HTML directly from the server to the client with minimal or no client side processing over websockets so there is minimal lag time.&lt;/p&gt;
&lt;p&gt;In this article we convert a seemingly &amp;lsquo;single-page&amp;rsquo; web app that reloads with every request see previous article 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_1_single_page_app_simulate_reloads/&#34;&gt;Tweets - A Single Page Rails App (using reloads)&lt;/a&gt; and convert it into a proper &amp;lsquo;single-page&amp;rsquo; app that only refreshes the aspects that change.  This makes web-pages with lots of data and complexity FAST and feel like native apps.  This is done with Hotwire (using web-sockets).&lt;/p&gt;
&lt;h2 id=&#34;basic-setup&#34;&gt;Basic Setup&lt;/h2&gt;
&lt;p&gt;We will be starting with a basic Tweet Simulator it looks something like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_1st_starting_point.png&#34; alt=&#34;tweet_index_1st&#34;&gt;&lt;/p&gt;
&lt;p&gt;The starting code base can be found at: &lt;a href=&#34;https://github.com/btihen/tweet_simulator_rails&#34;&gt;https://github.com/btihen/tweet_simulator_rails&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The steps to re-create this code can be found at: 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_tweet_single_page_reloads/&#34;&gt;Tweets - A Single Page Rails App (using reloads)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The actual Tweet Hotwire code from this article can be found at:&lt;/p&gt;
&lt;h2 id=&#34;install-and-configure-hotwire&#34;&gt;Install and configure Hotwire&lt;/h2&gt;
&lt;h3 id=&#34;install-hotwire&#34;&gt;Install Hotwire&lt;/h3&gt;
&lt;p&gt;To use hotwire - we need to install it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bundle add hotwire-rails
bin/rails hotwire:install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The hotwire package is smart enough to install via webpack if that&amp;rsquo;s installed or in the asset pipeline if no webpacker is installed.  This project uses webpack (but it shouldn&amp;rsquo;t matter).&lt;/p&gt;
&lt;p&gt;This also installs Stimulus Javascript and enables redis if not already installed.  Now you should see the following steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stimulus config in: &lt;code&gt;application.js&lt;/code&gt; and setup.&lt;/li&gt;
&lt;li&gt;Turbo install and setup&lt;/li&gt;
&lt;li&gt;Removal of Turbolinks&lt;/li&gt;
&lt;li&gt;Enable Redis gem&lt;/li&gt;
&lt;li&gt;Configure Redis to work with ActionCable (Rails Websockets)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and the output should look something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Appending Stimulus setup code to
      append  app/javascript/packs/application.js
Creating controllers directory
      create  app/javascript/controllers
      create  app/javascript/controllers/hello_controller.js
      create  app/javascript/controllers/index.js
Installing all Stimulus dependencies
         run  yarn add stimulus from &amp;quot;.&amp;quot;
...
â¨  Done in 36.58s.

Install Turbo
         run  yarn add @hotwired/turbo-rails from &amp;quot;.&amp;quot;
...
â¨  Done in 7.40s.

      insert  app/javascript/packs/application.js
Remove Turbolinks
        gsub  Gemfile
         run  bin/bundle from &amp;quot;.&amp;quot;
         run  bin/yarn remove turbolinks from &amp;quot;.&amp;quot;
yarn remove v1.22.10
[1/2] ð  Removing module turbolinks...
...

        gsub  app/javascript/packs/application.js
        gsub  app/javascript/packs/application.js
Enable redis in bundle
        gsub  Gemfile
Switch development cable to use redis
        gsub  config/cable.yml

Turbo successfully installed â¡ï¸
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE: a prerequisite is that you already have Redis (server) installed in your development environment.&lt;/p&gt;
&lt;h3 id=&#34;check-project-config-for-hotwire&#34;&gt;Check Project config for Hotwire&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;References to turbolinks must be removed&lt;/li&gt;
&lt;li&gt;Turbo is installed&lt;/li&gt;
&lt;li&gt;Stimulus is installed&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you have problems you can experiment try adding one or more of the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;%= yield :head %&amp;gt;
  &amp;lt;%= turbo_include_tags %&amp;gt;
  &amp;lt;%= stimulus_include_tags %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In particular, I found the top two helpful - but this is a new technology - and it is still evolving.  In the end the &lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt; might need to look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;

&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Tweets&amp;lt;/title&amp;gt;
  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt;
  &amp;lt;%= csrf_meta_tags %&amp;gt;
  &amp;lt;%= csp_meta_tag %&amp;gt;

  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css&amp;quot; integrity=&amp;quot;sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;
  &amp;lt;%= stylesheet_link_tag &#39;application&#39;, media: &#39;all&#39; %&amp;gt;
  &amp;lt;%= javascript_pack_tag &#39;application&#39; %&amp;gt;
  &amp;lt;%= yield :head %&amp;gt;
  &amp;lt;%= turbo_include_tags %&amp;gt;
  &amp;lt;%# stimulus_include_tags %&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
  &amp;lt;%= yield %&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check the app is still working and make a git snapshot.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;install and configure hotwire-rails&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;using-hotwire&#34;&gt;Using Hotwire&lt;/h2&gt;
&lt;p&gt;Avoid the page reloads and only update our changes by sending new HTML&lt;/p&gt;
&lt;h3 id=&#34;broadcast-new-tweets-to-all-clients&#34;&gt;Broadcast New Tweets to all Clients&lt;/h3&gt;
&lt;p&gt;To broadcast changes to a client we need to modify the model and add the broadcast command.   A Broadcast &amp;ldquo;tweets&amp;rdquo; sends changes to the turbo_stream (websocket channel) with the same name.
To add the new tweets to the top of the &amp;ldquo;tweets&amp;rdquo; page (frame) we need to use the &lt;code&gt;broadcast_prepend_to&lt;/code&gt; instead of the &lt;code&gt;broadcast_append_to&lt;/code&gt; (which puts new entries at the bottom)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/models/tweet.rb
class Tweet &amp;lt; ApplicationRecord
  validates :body, presence: true

  # broadcast &amp;quot;tweets&amp;quot; send all changes to the turbo_stream view &amp;quot;tweets&amp;quot;
  # broadcast_prepend_to places new information at the top instead of appending to the bottom
  after_create_commit { broadcast_prepend_to &amp;quot;tweets&amp;quot; }
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order for this model broadcast to work we need to create a place to send it.  We do this in the view via a stream with the command &lt;code&gt;&amp;lt;%= turbo_stream_from &amp;quot;tweets&amp;quot; %&amp;gt;&lt;/code&gt; we also need to tell this &lt;code&gt;stream&lt;/code&gt; where to update &amp;ndash; we do this with the turbo tag of the same name: &lt;code&gt;&amp;lt;%= turbo_frame_tag &amp;quot;tweets&amp;quot; do %&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So lets update our index page :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/views/tweets/index.html.erb
&amp;lt;!-- connects to the backend broadcast (via a channel) --&amp;gt;
&amp;lt;%= turbo_stream_from &amp;quot;tweets&amp;quot; %&amp;gt;

&amp;lt;!-- frame that receives the taged data --&amp;gt;
&amp;lt;%= turbo_frame_tag &amp;quot;tweets&amp;quot; do %&amp;gt;
  &amp;lt;%= render @tweets %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to see our new frames lets update our css to make them visible - lets add a border to our turbo-frames:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/assets/stylesheets/tweets.scss
turbo-frame {
  display: block;
  border: 1px solid green
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s check that our new broadcast feature run: &lt;code&gt;bin/rails s&lt;/code&gt; and open two browser windows point at &lt;code&gt;http://localhost:3000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_2nd_broadcast_new.png&#34; alt=&#34;tweet_index_2nd&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can see in the left window we created a new tweet and it automatically appeared in the right window!  HOW COOL IS THAT!&lt;/p&gt;
&lt;p&gt;Notice that the &amp;ldquo;blue&amp;rdquo; turbo-frame is around all the displayed tweets.&lt;/p&gt;
&lt;p&gt;Lets also take a quick look at the logs - from this transaction:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Started POST &amp;quot;/tweets&amp;quot; for 127.0.0.1 at 2021-02-28 21:12:59 +0100
Processing by TweetsController#create as TURBO_STREAM
  Parameters: {&amp;quot;authenticity_token&amp;quot;=&amp;gt;&amp;quot;[FILTERED]&amp;quot;, &amp;quot;tweet&amp;quot;=&amp;gt;{&amp;quot;body&amp;quot;=&amp;gt;&amp;quot;Fourth Tweet&amp;quot;}, &amp;quot;commit&amp;quot;=&amp;gt;&amp;quot;Create Tweet&amp;quot;}
  TRANSACTION (1.6ms)  BEGIN
  â³ app/controllers/tweets_controller.rb:28:in `block in create&#39;
  Tweet Create (60.1ms)  INSERT INTO &amp;quot;tweets&amp;quot; (&amp;quot;body&amp;quot;, &amp;quot;created_at&amp;quot;, &amp;quot;updated_at&amp;quot;) VALUES ($1, $2, $3) RETURNING &amp;quot;id&amp;quot;  [[&amp;quot;body&amp;quot;, &amp;quot;Fourth Tweet&amp;quot;], [&amp;quot;created_at&amp;quot;, &amp;quot;2021-02-28 20:12:59.221408&amp;quot;], [&amp;quot;updated_at&amp;quot;, &amp;quot;2021-02-28 20:12:59.221408&amp;quot;]]
  â³ app/controllers/tweets_controller.rb:28:in `block in create&#39;
  TRANSACTION (2.4ms)  COMMIT
  â³ app/controllers/tweets_controller.rb:28:in `block in create&#39;
  Rendered tweets/_tweet.html.erb (Duration: 1.7ms | Allocations: 416)
[ActionCable] Broadcasting to tweets: &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;prepend\&amp;quot; target=\&amp;quot;tweets\&amp;quot;&amp;gt;&amp;lt;template&amp;gt;&amp;lt;div class=\&amp;quot;card card-body\&amp;quot;&amp;gt;\n  &amp;lt;div&amp;gt;Fourth Tweet&amp;lt;/div&amp;gt;\n\n  &amp;lt;div class=\&amp;quot;mt-2\&amp;quot;&amp;gt;\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-success\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;post\&amp;quot; href=\&amp;quot;/tweets/7/like\&amp;quot;&amp;gt;Like (0)&amp;lt;/a&amp;gt;\n\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-info\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;post\&amp;quot; href=\&amp;quot;/tweets/7/retweet\&amp;quot;&amp;gt;Retweet (0)&amp;lt;/a&amp;gt;\n\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-primary\&amp;quot; href=\&amp;quot;/tweets/7/edit\&amp;quot;&amp;gt;Edit&amp;lt;/a&amp;gt;\n\n    &amp;lt;a data-confirm=\&amp;quot;Are you sure?\&amp;quot; class=\&amp;quot;btn btn-sm btn-outline-danger\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;delete\&amp;quot; href=\&amp;quot;/tweets/7\&amp;quot;&amp;gt;Destroy&amp;lt;/a&amp;gt;\n  &amp;lt;/div&amp;gt;\n&amp;lt;/div&amp;gt;\n&amp;lt;/template&amp;gt;&amp;lt;/turbo-stream&amp;gt;&amp;quot;
Redirected to http://localhost:3000/tweets
Completed 302 Found in 105ms (ActiveRecord: 64.1ms | Allocations: 5636)


Turbo::StreamsChannel transmitting &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;prepend\&amp;quot; target=\&amp;quot;tweets\&amp;quot;&amp;gt;&amp;lt;template&amp;gt;&amp;lt;div class=\&amp;quot;card card-body\&amp;quot;&amp;gt;\n  &amp;lt;div&amp;gt;Fourth Tweet&amp;lt;/div&amp;gt;\n\n  &amp;lt;div class=\&amp;quot;mt-2\&amp;quot;&amp;gt;\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-success\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;post\&amp;quot; href=\&amp;quot;/tweets/7/like\&amp;quot;&amp;gt;Like (0)&amp;lt;/a&amp;gt;\n\n    &amp;lt;a class=\&amp;quot;btn btn-s... (via streamed from tweets)
Turbo::StreamsChannel transmitting &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;prepend\&amp;quot; target=\&amp;quot;tweets\&amp;quot;&amp;gt;&amp;lt;template&amp;gt;&amp;lt;div class=\&amp;quot;card card-body\&amp;quot;&amp;gt;\n  &amp;lt;div&amp;gt;Fourth Tweet&amp;lt;/div&amp;gt;\n\n  &amp;lt;div class=\&amp;quot;mt-2\&amp;quot;&amp;gt;\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-success\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;post\&amp;quot; href=\&amp;quot;/tweets/7/like\&amp;quot;&amp;gt;Like (0)&amp;lt;/a&amp;gt;\n\n    &amp;lt;a class=\&amp;quot;btn btn-s... (via streamed from tweets)
Started GET &amp;quot;/tweets&amp;quot; for 127.0.0.1 at 2021-02-28 21:12:59 +0100
Processing by TweetsController#index as TURBO_STREAM
  Rendering layout layouts/application.html.erb
  Rendering tweets/index.html.erb within layouts/application
  Rendered tweets/_form.html.erb (Duration: 2.6ms | Allocations: 501)
  Tweet Load (41.8ms)  SELECT &amp;quot;tweets&amp;quot;.* FROM &amp;quot;tweets&amp;quot; ORDER BY &amp;quot;tweets&amp;quot;.&amp;quot;created_at&amp;quot; DESC
  â³ app/views/tweets/index.html.erb:15
  Rendered collection of tweets/_tweet.html.erb [3 times] (Duration: 1.3ms | Allocations: 429)
  Rendered tweets/index.html.erb within layouts/application (Duration: 50.7ms | Allocations: 2283)
[Webpacker] Everything&#39;s up-to-date. Nothing to do
  Rendered layout layouts/application.html.erb (Duration: 75.7ms | Allocations: 7207)
Completed 200 OK in 80ms (Views: 34.9ms | ActiveRecord: 41.8ms | Allocations: 7831)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is a bunch of interesting information, but for now I just want to point out the only thing sent was the new html to display:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[ActionCable] Broadcasting to tweets: &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;prepend\&amp;quot; target=\&amp;quot;tweets\&amp;quot;&amp;gt;&amp;lt;template&amp;gt;&amp;lt;div class=\&amp;quot;card card-body\&amp;quot;&amp;gt;\n  &amp;lt;div&amp;gt;Fourth Tweet&amp;lt;/div&amp;gt;\n\n  &amp;lt;div class=\&amp;quot;mt-2\&amp;quot;&amp;gt;\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-success\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;post\&amp;quot; href=\&amp;quot;/tweets/7/like\&amp;quot;&amp;gt;Like (0)&amp;lt;/a&amp;gt;\n\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-info\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;post\&amp;quot; href=\&amp;quot;/tweets/7/retweet\&amp;quot;&amp;gt;Retweet (0)&amp;lt;/a&amp;gt;\n\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-primary\&amp;quot; href=\&amp;quot;/tweets/7/edit\&amp;quot;&amp;gt;Edit&amp;lt;/a&amp;gt;\n\n    &amp;lt;a data-confirm=\&amp;quot;Are you sure?\&amp;quot; class=\&amp;quot;btn btn-sm btn-outline-danger\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;delete\&amp;quot; href=\&amp;quot;/tweets/7\&amp;quot;&amp;gt;Destroy&amp;lt;/a&amp;gt;\n  &amp;lt;/div&amp;gt;\n&amp;lt;/div&amp;gt;\n&amp;lt;/template&amp;gt;&amp;lt;/turbo-stream&amp;gt;&amp;quot;
Redirected to http://localhost:3000/tweets
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using websockets to send html to the parts of the webpage that need to be updated is very efficient.&lt;/p&gt;
&lt;p&gt;Since the broadcast is at the model level, we can even create a new tweet on the cli and all our web-clients will update:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bin/rails c
Tweet.create(body: &amp;quot;CLI tweet appears&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_3rd_broadcast_new_cli.png&#34; alt=&#34;tweet_index_3rd&#34;&gt;&lt;/p&gt;
&lt;p&gt;Lets make a snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;new tweets are broadcast to all clients&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;broadcast-deleted-tweets-to-all-clients&#34;&gt;Broadcast Deleted Tweets to all Clients&lt;/h3&gt;
&lt;p&gt;we need to add another broadcast to the model:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/models/tweet.rb
class Tweet &amp;lt; ApplicationRecord
  validates :body, presence: true

  # broadcast &amp;quot;tweets&amp;quot; send all changes to the `turbo_stream` view &amp;quot;tweets&amp;quot;
  # `broadcast_prepend_to` places new information at the top instead of appending to the bottom
  after_create_commit { broadcast_prepend_to &amp;quot;tweets&amp;quot; }
  after_destroy_commit { broadcast_remove_to &amp;quot;tweets&amp;quot; }
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But for this to work we will need to create frames around every tweet so we can find and delete the individual tweet to do this we will at a tag to our &lt;code&gt;_tweet&lt;/code&gt; partial.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/views/tweets/_tweet.html.erb
&amp;lt;!-- this tag with `tweet` instead of &#39;tweets&#39; identifies an individual tweet --&amp;gt;
&amp;lt;%= turbo_frame_tag tweet do %&amp;gt;
&amp;lt;div class=&amp;quot;card card-body&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;%= tweet.body %&amp;gt;&amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;mt-2&amp;quot;&amp;gt;
    &amp;lt;%= link_to &amp;quot;Like (#{tweet.likes})&amp;quot;,
                tweet_like_path(tweet),
                method: :post,
                class: &amp;quot;btn btn-sm btn-outline-success&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &amp;quot;Retweet (#{tweet.retweets})&amp;quot;,
                tweet_retweet_path(tweet),
                method: :post,
                class: &amp;quot;btn btn-sm btn-outline-info&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &#39;Edit&#39;, edit_tweet_path(tweet),
                class: &amp;quot;btn btn-sm btn-outline-primary&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &#39;Destroy&#39;, tweet_path(tweet), method: :delete,
                data: { confirm: &#39;Are you sure?&#39; },
                class: &amp;quot;btn btn-sm btn-outline-danger&amp;quot; %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when you should be able to delete a tweet in the middle of the tweets and not reload the entire page index page.  You will notice also that each tweet now has the turbo-frame border.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_4th_delete_broadcast.png&#34; alt=&#34;tweet_index_4th&#34;&gt;&lt;/p&gt;
&lt;p&gt;In the above image you can see we are deleting the 3rd tweet - in the middle of the tweets.  And of course it works in both our web-clients because of the new broadcast and tags we added.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_5th_deleted.png&#34; alt=&#34;tweet_index_5th&#34;&gt;&lt;/p&gt;
&lt;p&gt;Looking at the logs we see that we only send the information that is changing to each client:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Turbo::StreamsChannel transmitting &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;remove\&amp;quot; target=\&amp;quot;tweet_6\&amp;quot;&amp;gt;&amp;lt;/turbo-stream&amp;gt;&amp;quot; (via streamed from tweets)
Turbo::StreamsChannel transmitting &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;remove\&amp;quot; target=\&amp;quot;tweet_6\&amp;quot;&amp;gt;&amp;lt;/turbo-stream&amp;gt;&amp;quot; (via streamed from tweets)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;here is the full transaction:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Started DELETE &amp;quot;/tweets/6&amp;quot; for 127.0.0.1 at 2021-02-28 21:45:44 +0100
Processing by TweetsController#destroy as TURBO_STREAM
  Parameters: {&amp;quot;authenticity_token&amp;quot;=&amp;gt;&amp;quot;[FILTERED]&amp;quot;, &amp;quot;id&amp;quot;=&amp;gt;&amp;quot;6&amp;quot;}
  Tweet Load (5.5ms)  SELECT &amp;quot;tweets&amp;quot;.* FROM &amp;quot;tweets&amp;quot; WHERE &amp;quot;tweets&amp;quot;.&amp;quot;id&amp;quot; = $1 LIMIT $2  [[&amp;quot;id&amp;quot;, 6], [&amp;quot;LIMIT&amp;quot;, 1]]
  â³ app/controllers/tweets_controller.rb:63:in `set_tweet&#39;
  TRANSACTION (0.8ms)  BEGIN
  â³ app/controllers/tweets_controller.rb:53:in `destroy&#39;
  Tweet Destroy (27.4ms)  DELETE FROM &amp;quot;tweets&amp;quot; WHERE &amp;quot;tweets&amp;quot;.&amp;quot;id&amp;quot; = $1  [[&amp;quot;id&amp;quot;, 6]]
  â³ app/controllers/tweets_controller.rb:53:in `destroy&#39;
  TRANSACTION (30.8ms)  COMMIT
  â³ app/controllers/tweets_controller.rb:53:in `destroy&#39;
[ActionCable] Broadcasting to tweets: &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;remove\&amp;quot; target=\&amp;quot;tweet_6\&amp;quot;&amp;gt;&amp;lt;/turbo-stream&amp;gt;&amp;quot;
Redirected to http://localhost:3000/tweets
Completed 302 Found in 234ms (ActiveRecord: 66.0ms | Allocations: 6664)


Turbo::StreamsChannel transmitting &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;remove\&amp;quot; target=\&amp;quot;tweet_6\&amp;quot;&amp;gt;&amp;lt;/turbo-stream&amp;gt;&amp;quot; (via streamed from tweets)
Turbo::StreamsChannel transmitting &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;remove\&amp;quot; target=\&amp;quot;tweet_6\&amp;quot;&amp;gt;&amp;lt;/turbo-stream&amp;gt;&amp;quot; (via streamed from tweets)
Started GET &amp;quot;/tweets&amp;quot; for 127.0.0.1 at 2021-02-28 21:45:44 +0100
Processing by TweetsController#index as TURBO_STREAM
  Rendering layout layouts/application.html.erb
  Rendering tweets/index.html.erb within layouts/application
  Rendered tweets/_form.html.erb (Duration: 1.9ms | Allocations: 501)
  Tweet Load (1.6ms)  SELECT &amp;quot;tweets&amp;quot;.* FROM &amp;quot;tweets&amp;quot; ORDER BY &amp;quot;tweets&amp;quot;.&amp;quot;created_at&amp;quot; DESC
  â³ app/views/tweets/index.html.erb:15
  Rendered collection of tweets/_tweet.html.erb [3 times] (Duration: 1.2ms | Allocations: 528)
  Rendered tweets/index.html.erb within layouts/application (Duration: 10.2ms | Allocations: 2380)
[Webpacker] Everything&#39;s up-to-date. Nothing to do
  Rendered layout layouts/application.html.erb (Duration: 27.4ms | Allocations: 7296)
Completed 200 OK in 31ms (Views: 26.6ms | ActiveRecord: 1.6ms | Allocations: 7918)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s take another snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;broadcast deleted tweets via hotwire&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;edit--updates-to-all-clients&#34;&gt;Edit / Updates to all clients!&lt;/h3&gt;
&lt;p&gt;Turbo unlike Turbo-Links works with Forms as well as links.  This allows us to edit our posts.&lt;/p&gt;
&lt;h4 id=&#34;start-with-the-create-form&#34;&gt;Start with the Create Form&lt;/h4&gt;
&lt;p&gt;Lets start by testing the create form as is with validation errors - if we enter a blank message we should get an error.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_6th_no_frame_validations.png&#34; alt=&#34;tweet_index_6th_no_frame_validations&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now lets put this form in a turbo-frame - since we will need this in a form for edit - lets start with the easy case - new / create - where the form will always be in the same location. Ideally, the &lt;code&gt;turbo_stream_from&lt;/code&gt; definition is before the first &lt;code&gt;turbo_frame_tag&lt;/code&gt;.  Now your index view will look something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/views/tweets/index.html.erb
&amp;lt;p id=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;!-- connects to the backend broadcast (via a channel) --&amp;gt;
&amp;lt;%= turbo_stream_from &amp;quot;tweets&amp;quot; %&amp;gt;

&amp;lt;h1&amp;gt;Tweets&amp;lt;/h1&amp;gt;

&amp;lt;h4&amp;gt;New Tweet&amp;lt;/h4&amp;gt;

&amp;lt;!-- the form needs to be in a frame - otherwise we can&#39;t edit in place --&amp;gt;
&amp;lt;%= turbo_frame_tag &amp;quot;tweet-form&amp;quot; do %&amp;gt;
  &amp;lt;%= render &amp;quot;tweets/form&amp;quot;, tweet: @tweet %&amp;gt;
&amp;lt;% end %&amp;gt;

&amp;lt;h4&amp;gt;Tweet Feed&amp;lt;/h4&amp;gt;

&amp;lt;!-- frame that receives the taged data --&amp;gt;
&amp;lt;%= turbo_frame_tag &amp;quot;tweets&amp;quot; do %&amp;gt;
  &amp;lt;%= render @tweets %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Log file - from the log file we see we are still reloading the page see the line: &lt;code&gt;Tweet Load (83.9ms)  SELECT &amp;quot;tweets&amp;quot;.* FROM &amp;quot;tweets&amp;quot; ORDER BY &amp;quot;tweets&amp;quot;.&amp;quot;created_at&amp;quot;&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Started POST &amp;quot;/tweets&amp;quot; for 127.0.0.1 at 2021-03-01 20:55:34 +0100
Processing by TweetsController#create as TURBO_STREAM
  Parameters: {&amp;quot;authenticity_token&amp;quot;=&amp;gt;&amp;quot;[FILTERED]&amp;quot;, &amp;quot;tweet&amp;quot;=&amp;gt;{&amp;quot;body&amp;quot;=&amp;gt;&amp;quot;&amp;quot;}, &amp;quot;commit&amp;quot;=&amp;gt;&amp;quot;Create Tweet&amp;quot;}
  Rendering layout layouts/application.html.erb
  Rendering tweets/index.html.erb within layouts/application
  Rendered tweets/_form.html.erb (Duration: 4.9ms | Allocations: 1362)
  Tweet Load (83.9ms)  SELECT &amp;quot;tweets&amp;quot;.* FROM &amp;quot;tweets&amp;quot; ORDER BY &amp;quot;tweets&amp;quot;.&amp;quot;created_at&amp;quot; DESC
  â³ app/views/tweets/index.html.erb:23
  Rendered collection of tweets/_tweet.html.erb [4 times] (Duration: 2.0ms | Allocations: 700)
  Rendered tweets/index.html.erb within layouts/application (Duration: 94.0ms | Allocations: 3159)
[Webpacker] Everything&#39;s up-to-date. Nothing to do
  Rendered layout layouts/application.html.erb (Duration: 119.2ms | Allocations: 8006)
Completed 422 Unprocessable Entity in 125ms (Views: 35.9ms | ActiveRecord: 83.9ms | Allocations: 9244)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To fix this we will need the &lt;code&gt;form&lt;/code&gt; to have a tag id - to do this we can update the form with &lt;code&gt;&amp;lt;%= form_with(model: tweet, id: dom_id(tweet)) do |form| %&amp;gt;&lt;/code&gt; - also:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;%= form_with(model: tweet, id: dom_id(tweet)) do |form| %&amp;gt;
&amp;lt;% if tweet.errors.any? %&amp;gt;
&amp;lt;div id=&amp;quot;error_explanation&amp;quot;&amp;gt;
  &amp;lt;h2&amp;gt;&amp;lt;%= pluralize(tweet.errors.count, &amp;quot;error&amp;quot;) %&amp;gt; prohibited this tweet from being saved:&amp;lt;/h2&amp;gt;

  &amp;lt;ul&amp;gt;
    &amp;lt;% tweet.errors.each do |error| %&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;%= error.full_message %&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;

&amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
  &amp;lt;%= form.label :body %&amp;gt;
  &amp;lt;%= form.text_area :body %&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div class=&amp;quot;actions&amp;quot;&amp;gt;
  &amp;lt;%= form.submit %&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But even still we need to the controller how to use the turbo_stream.  There are several ways (with and without a template).  We will start without a tempate (actually the template info is inline) using: &lt;code&gt;format.turbo_stream { render turbo_stream: turbo_stream.replace(@tweet, partial: &amp;quot;tweets/form&amp;quot;, locals: { tweet: @tweet}) }&lt;/code&gt;.  Not the create controller should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/controllers/tweets_controller.rb
  def create
    @tweet = Tweet.new(tweet_params)

    respond_to do |format|
      if @tweet.save
        format.html { redirect_to tweets_url, notice: &amp;quot;Tweet was successfully created.&amp;quot; }
        format.json { render :show, status: :created, location: @tweet }
      else
        format.turbo_stream { render turbo_stream: turbo_stream.replace(@tweet, partial: &amp;quot;tweets/form&amp;quot;, locals: { tweet: @tweet}) }
        @tweets = Tweet.all.order(created_at: :desc)
        format.html { render :index, status: :unprocessable_entity }
        format.json { render json: @tweet.errors, status: :unprocessable_entity }
      end
    end
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when we create an invalid message we should see (notice the turbo-frame outline):
&lt;img src=&#34;tweet_index_7th_w_frame_validation.png&#34; alt=&#34;tweet_index_7th_w_frame_validation&#34;&gt;&lt;/p&gt;
&lt;p&gt;When we look at the logs we can confirm we are using the TURBO_STREAM for both directions and NOT reloading the page (no &lt;code&gt;LOAD&lt;/code&gt; in the log):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Started POST &amp;quot;/tweets&amp;quot; for 127.0.0.1 at 2021-03-01 21:22:13 +0100
Processing by TweetsController#create as TURBO_STREAM
  Parameters: {&amp;quot;authenticity_token&amp;quot;=&amp;gt;&amp;quot;[FILTERED]&amp;quot;, &amp;quot;tweet&amp;quot;=&amp;gt;{&amp;quot;body&amp;quot;=&amp;gt;&amp;quot;&amp;quot;}, &amp;quot;commit&amp;quot;=&amp;gt;&amp;quot;Create Tweet&amp;quot;}
  Rendered tweets/_form.html.erb (Duration: 3.0ms | Allocations: 1373)
Completed 200 OK in 7ms (Views: 0.3ms | ActiveRecord: 0.0ms | Allocations: 2641)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that validation errors work again - lets be sure that we can still create a new tweet.&lt;/p&gt;
&lt;p&gt;Assuming all works - lets take a quick snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;new tweet form is hooked into turbo-stream and validations still work&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;?????
Turbo - is clever enough to figure out the routing in the default case and will use its own stream to update the page - however you could also define an explicit stream - something like: &lt;code&gt;format.turbo_stream { render turbo_stream: turbo_stream.prepend(@tweet, locals: { tweet: @tweet}) }&lt;/code&gt; or with &lt;code&gt;format.turbo_stream&lt;/code&gt; and a turbo view &lt;code&gt;app/views/tweets/create.turbo_stream&lt;/code&gt; - containing: &lt;code&gt;&amp;lt;%=  %&amp;gt;&lt;/code&gt;
????&lt;/p&gt;
&lt;h4 id=&#34;in-place-edit&#34;&gt;In-Place Edit&lt;/h4&gt;
&lt;p&gt;In oder to do an in-place edit we will need yet another type of broadcast &lt;code&gt;after_update_commit { broadcast_replace_to &amp;quot;tweets&amp;quot; }&lt;/code&gt;
so our new model will now look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/models/tweet.rb
class Tweet &amp;lt; ApplicationRecord
  validates :body, presence: true

  # broadcast &amp;quot;tweets&amp;quot; send all changes to the `turbo_stream` view &amp;quot;tweets&amp;quot;
  # `broadcast_prepend_to` places new information at the top instead of appending to the bottom
  after_create_commit { broadcast_prepend_to &amp;quot;tweets&amp;quot; }
  after_destroy_commit { broadcast_remove_to &amp;quot;tweets&amp;quot; }
  after_update_commit { broadcast_replace_to &amp;quot;tweets&amp;quot; }
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now would hope it would all work, but when we click on Edit, the item disappears (and re-appears on reload).
&lt;img src=&#34;tweet_index_8th_broken_edit.png&#34; alt=&#34;tweet_index_8th_broken_edit&#34;&gt;&lt;/p&gt;
&lt;p&gt;Lets look at the logs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Started GET &amp;quot;/tweets/11/edit&amp;quot; for 127.0.0.1 at 2021-03-03 20:10:53 +0100
Processing by TweetsController#edit as HTML
  Parameters: {&amp;quot;id&amp;quot;=&amp;gt;&amp;quot;11&amp;quot;}
  Tweet Load (0.7ms)  SELECT &amp;quot;tweets&amp;quot;.* FROM &amp;quot;tweets&amp;quot; WHERE &amp;quot;tweets&amp;quot;.&amp;quot;id&amp;quot; = $1 LIMIT $2  [[&amp;quot;id&amp;quot;, 11], [&amp;quot;LIMIT&amp;quot;, 1]]
  â³ app/controllers/tweets_controller.rb:68:in `set_tweet&#39;
  Rendering tweets/edit.html.erb
  Rendered tweets/_form.html.erb (Duration: 2.3ms | Allocations: 676)
  Rendered tweets/edit.html.erb (Duration: 3.8ms | Allocations: 980)
Completed 200 OK in 8ms (Views: 4.5ms | ActiveRecord: 0.7ms | Allocations: 2104)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We see that it loads the tweet and sends it to the edit.html.erb page (which loads the form partial), but we don&amp;rsquo;t see anything but the index page (minus the tweet we wanted to edit).  Unfortunately, Hotwire, doesn&amp;rsquo;t provide an error, it just doesn&amp;rsquo;t find a location to render the edit on our index (since the edit link is within a stream tag) and just replaces our dom_id with nothing.  Here is where Hotwire could provide much better feedback.&lt;/p&gt;
&lt;p&gt;In any case, the fix is straightforward, we need to tell Rails what in the edit page goes into the index page so we can do that with another frame_tag: &lt;code&gt;&amp;lt;%= turbo_frame_tag dom_id(@tweet) do %&amp;gt;&lt;/code&gt; Now the edit.html.erb page should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/views/tweets/edit.html.erb
&amp;lt;h1&amp;gt;Editing Tweet&amp;lt;/h1&amp;gt;

&amp;lt;%= turbo_frame_tag dom_id(@tweet) do %&amp;gt;
  &amp;lt;%= render &#39;form&#39;, tweet: @tweet %&amp;gt;
&amp;lt;% end %&amp;gt;

&amp;lt;%= link_to &#39;Show&#39;, @tweet %&amp;gt; |
&amp;lt;%= link_to &#39;Back&#39;, tweets_path %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE: We don&amp;rsquo;t need to fix the form partial since we did that in the previous &lt;code&gt;new&lt;/code&gt; step with by adding a dom_id tag to the form with: &lt;code&gt;&amp;lt;%= form_with(model: tweet, id: dom_id(tweet)) do |form| %&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_9th_in_place_wo_css.png&#34; alt=&#34;tweet_index_9th_in_place_wo_css&#34;&gt;&lt;/p&gt;
&lt;p&gt;We might notice that the edit page lacks formatting (the form is squished up against the left of our frame).  This is because our tweet partial has a card div but that is lacking when replace the dom_id with the form &amp;ndash; we can easily fix this by adding the CSS to our edit page:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/views/tweets/edit.html.erb
&amp;lt;h1&amp;gt;Editing Tweet&amp;lt;/h1&amp;gt;

&amp;lt;%= turbo_frame_tag dom_id(@tweet) do %&amp;gt;
&amp;lt;div class=&amp;quot;card card-body&amp;quot;&amp;gt;
  &amp;lt;%= render &#39;form&#39;, tweet: @tweet %&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;

&amp;lt;%= link_to &#39;Show&#39;, @tweet %&amp;gt; |
&amp;lt;%= link_to &#39;Back&#39;, tweets_path %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when we reload and try to edit &amp;ndash; we see what we expect:
&lt;img src=&#34;tweet_index_10th_in_place_edit.png&#34; alt=&#34;tweet_index_10th_in_place_edit&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now when we actually do an edit we see it all works as expected.  From the logs we see
it loads the tweet from the db, then the the edit page which loads the frame (this time it actually places it into the dom_id we provided, but unfortunately, we can&amp;rsquo;t see that from the logs)!  And we can see that when we submit the edit &amp;ndash; the tweet model sends out the html patch send to both windows we have open.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Started GET &amp;quot;/tweets/11/edit&amp;quot; for 127.0.0.1 at 2021-03-03 20:34:56 +0100
Processing by TweetsController#edit as HTML
  Parameters: {&amp;quot;id&amp;quot;=&amp;gt;&amp;quot;11&amp;quot;}
  Tweet Load (1.0ms)  SELECT &amp;quot;tweets&amp;quot;.* FROM &amp;quot;tweets&amp;quot; WHERE &amp;quot;tweets&amp;quot;.&amp;quot;id&amp;quot; = $1 LIMIT $2  [[&amp;quot;id&amp;quot;, 11], [&amp;quot;LIMIT&amp;quot;, 1]]
  â³ app/controllers/tweets_controller.rb:68:in `set_tweet&#39;
  Rendering tweets/edit.html.erb
  Rendered tweets/_form.html.erb (Duration: 2.5ms | Allocations: 649)
  Rendered tweets/edit.html.erb (Duration: 3.8ms | Allocations: 985)
Completed 200 OK in 9ms (Views: 5.3ms | ActiveRecord: 1.0ms | Allocations: 2110)

Started PATCH &amp;quot;/tweets/11&amp;quot; for 127.0.0.1 at 2021-03-03 20:35:11 +0100
Processing by TweetsController#update as TURBO_STREAM
  Parameters: {&amp;quot;authenticity_token&amp;quot;=&amp;gt;&amp;quot;[FILTERED]&amp;quot;, &amp;quot;tweet&amp;quot;=&amp;gt;{&amp;quot;body&amp;quot;=&amp;gt;&amp;quot;jump! how high?&amp;quot;}, &amp;quot;commit&amp;quot;=&amp;gt;&amp;quot;Update Tweet&amp;quot;, &amp;quot;id&amp;quot;=&amp;gt;&amp;quot;11&amp;quot;}
  Tweet Load (1.1ms)  SELECT &amp;quot;tweets&amp;quot;.* FROM &amp;quot;tweets&amp;quot; WHERE &amp;quot;tweets&amp;quot;.&amp;quot;id&amp;quot; = $1 LIMIT $2  [[&amp;quot;id&amp;quot;, 11], [&amp;quot;LIMIT&amp;quot;, 1]]
  â³ app/controllers/tweets_controller.rb:68:in `set_tweet&#39;
  TRANSACTION (1.0ms)  BEGIN
  â³ app/controllers/tweets_controller.rb:45:in `block in update&#39;
  Tweet Update (58.8ms)  UPDATE &amp;quot;tweets&amp;quot; SET &amp;quot;body&amp;quot; = $1, &amp;quot;updated_at&amp;quot; = $2 WHERE &amp;quot;tweets&amp;quot;.&amp;quot;id&amp;quot; = $3  [[&amp;quot;body&amp;quot;, &amp;quot;jump! how high?&amp;quot;], [&amp;quot;updated_at&amp;quot;, &amp;quot;2021-03-03 19:35:11.765970&amp;quot;], [&amp;quot;id&amp;quot;, 11]]
  â³ app/controllers/tweets_controller.rb:45:in `block in update&#39;
  TRANSACTION (2.3ms)  COMMIT
  â³ app/controllers/tweets_controller.rb:45:in `block in update&#39;
  Rendered tweets/_tweet.html.erb (Duration: 2.0ms | Allocations: 499)
[ActionCable] Broadcasting to tweets: &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;replace\&amp;quot; target=\&amp;quot;tweet_11\&amp;quot;&amp;gt;&amp;lt;template&amp;gt;&amp;lt;!-- this tag with `tweet` instead of &#39;tweets&#39; identifies an individual tweet --&amp;gt;\n&amp;lt;turbo-frame id=\&amp;quot;tweet_11\&amp;quot;&amp;gt;\n\n&amp;lt;div class=\&amp;quot;card card-body\&amp;quot;&amp;gt;\n  &amp;lt;div&amp;gt;jump! how high?&amp;lt;/div&amp;gt;\n\n  &amp;lt;div class=\&amp;quot;mt-2\&amp;quot;&amp;gt;\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-success\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;post\&amp;quot; href=\&amp;quot;/tweets/11/like\&amp;quot;&amp;gt;Like (0)&amp;lt;/a&amp;gt;\n\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-info\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;post\&amp;quot; href=\&amp;quot;/tweets/11/retweet\&amp;quot;&amp;gt;Retweet (0)&amp;lt;/a&amp;gt;\n\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-primary\&amp;quot; href=\&amp;quot;/tweets/11/edit\&amp;quot;&amp;gt;Edit&amp;lt;/a&amp;gt;\n\n    &amp;lt;a data-confirm=\&amp;quot;Are you sure?\&amp;quot; class=\&amp;quot;btn btn-sm btn-outline-danger\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;delete\&amp;quot; href=\&amp;quot;/tweets/11\&amp;quot;&amp;gt;Destroy&amp;lt;/a&amp;gt;\n  &amp;lt;/div&amp;gt;\n&amp;lt;/div&amp;gt;\n\n&amp;lt;/turbo-frame&amp;gt;&amp;lt;/template&amp;gt;&amp;lt;/turbo-stream&amp;gt;&amp;quot;
Redirected to http://localhost:3000/tweets
Completed 302 Found in 116ms (ActiveRecord: 63.1ms | Allocations: 6308)

Turbo::StreamsChannel transmitting &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;replace\&amp;quot; target=\&amp;quot;tweet_11\&amp;quot;&amp;gt;&amp;lt;template&amp;gt;&amp;lt;!-- this tag with `tweet` instead of &#39;tweets&#39; identifies an individual tweet --&amp;gt;\n&amp;lt;turbo-frame id=\&amp;quot;tweet_11\&amp;quot;&amp;gt;\n\n&amp;lt;div class=\&amp;quot;card card-body\&amp;quot;&amp;gt;\n  &amp;lt;div&amp;gt;jump! how high?&amp;lt;/div&amp;gt;\n\n  &amp;lt;div class=\&amp;quot;mt-2\&amp;quot;&amp;gt;\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn... (via streamed from tweets)
Turbo::StreamsChannel transmitting &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;replace\&amp;quot; target=\&amp;quot;tweet_11\&amp;quot;&amp;gt;&amp;lt;template&amp;gt;&amp;lt;!-- this tag with `tweet` instead of &#39;tweets&#39; identifies an individual tweet --&amp;gt;\n&amp;lt;turbo-frame id=\&amp;quot;tweet_11\&amp;quot;&amp;gt;\n\n&amp;lt;div class=\&amp;quot;card card-body\&amp;quot;&amp;gt;\n  &amp;lt;div&amp;gt;jump! how high?&amp;lt;/div&amp;gt;\n\n  &amp;lt;div class=\&amp;quot;mt-2\&amp;quot;&amp;gt;\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn... (via streamed from tweets)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets add a &lt;code&gt;cancel&lt;/code&gt; button to the form so we don&amp;rsquo;t need to reload the page to stop editing - we can do that with a show link &lt;code&gt;&amp;lt;%= link_to &amp;quot;Cancel&amp;quot;, @tweet, class: &amp;quot;btn btn-sm btn-outline-danger&amp;quot; %&amp;gt;&lt;/code&gt; - so our form would now look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/views/tweets/_form.html.erb
&amp;lt;%= form_with(model: tweet, id: dom_id(tweet)) do |form| %&amp;gt;
&amp;lt;% if tweet.errors.any? %&amp;gt;
&amp;lt;div id=&amp;quot;error_explanation&amp;quot;&amp;gt;
  &amp;lt;h2&amp;gt;&amp;lt;%= pluralize(tweet.errors.count, &amp;quot;error&amp;quot;) %&amp;gt; prohibited this tweet from being saved:&amp;lt;/h2&amp;gt;

  &amp;lt;ul&amp;gt;
    &amp;lt;% tweet.errors.each do |error| %&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;%= error.full_message %&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;

&amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
  &amp;lt;%= form.label :body %&amp;gt;
  &amp;lt;%= form.text_area :body %&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div class=&amp;quot;action&amp;quot;&amp;gt;
  &amp;lt;%= form.submit class: &amp;quot;btn btn-sm btn-outline-success&amp;quot; %&amp;gt;
  &amp;lt;%= link_to &amp;quot;Cancel&amp;quot;, @tweet, class: &amp;quot;btn btn-sm btn-outline-danger&amp;quot; %&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately, now when we hit &lt;code&gt;cancel&lt;/code&gt; - the tweet disappears &amp;ndash; because @tweet points to the show page and our current show page has no turbo_frame with a &lt;code&gt;dom_id&lt;/code&gt;. We can fix this by putting our show page (formatted like the tweet partial wrapped in a frame tag with a dom_id) - like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/views/tweets/show.html.erb
&amp;lt;%= turbo_frame_tag dom_id(@tweet) do %&amp;gt;

&amp;lt;div class=&amp;quot;card card-body&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;%= @tweet.body %&amp;gt;&amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;mt-2&amp;quot;&amp;gt;
    &amp;lt;%= link_to &amp;quot;Like (#{@tweet.likes})&amp;quot;,
                tweet_like_path(@tweet),
                method: :post,
                class: &amp;quot;btn btn-sm btn-outline-success&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &amp;quot;Retweet (#{@tweet.retweets})&amp;quot;,
                tweet_retweet_path(@tweet),
                method: :post,
                class: &amp;quot;btn btn-sm btn-outline-info&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &#39;Edit&#39;, edit_tweet_path(@tweet),
                class: &amp;quot;btn btn-sm btn-outline-primary&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &#39;Destroy&#39;, tweet_path(@tweet), method: :delete,
                data: { confirm: &#39;Are you sure?&#39; },
                class: &amp;quot;btn btn-sm btn-outline-danger&amp;quot; %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, this is a bit silly since this is basically the same as our partial and we have two places to change if we want to adjust our tweet layout &amp;ndash; so we can fix this by using the tweet partial:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/views/tweets/show.html.erb
&amp;lt;%= turbo_frame_tag dom_id(@tweet) do %&amp;gt;
  &amp;lt;%= render @tweet %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works, but renders a tag inside a turbo_frame with the tweet dom_id inside the same turbo_frame with the same dom_id (I only noticed this since I have the css marking all turbo_frames):
&lt;img src=&#34;tweet_index_11th_double_frame.png&#34; alt=&#34;tweet_index_11th_double_frame&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is because the tweet partial also has a dom_id - and show will process whatever it finds &amp;ndash; but only sends whatever is marked by the dom_id.&lt;/p&gt;
&lt;p&gt;This was a little tricky to notice at first without the HTML inspector &amp;ndash; since in show I used the explicit dom_id: &lt;code&gt;&amp;lt;%= turbo_frame_tag @tweet do %&amp;gt;&lt;/code&gt; and in the tweet partial I used the implicit dom_id tag: &lt;code&gt;&amp;lt;%= turbo_frame_tag tweet do %&amp;gt;&lt;/code&gt;.  Unfortunately, for now Rails Turbo provides does not yet provide warnings when you render the same dom_id twice.&lt;/p&gt;
&lt;p&gt;In any case, now it may be clear that the the proper solution is that show should now read like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/views/tweets/show.html.erb
&amp;lt;%= render @tweet %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when you inspect the HTML you will only see one dom_id for each tweet and since turbo only replaces items with the correct tags and ids - it renders the tweet partial now.  This is all a bit tricky to debug, hopefully, with time more errors or logging will be added - but for now, I suggest adding &lt;code&gt;&amp;lt;!-- --&amp;gt;&lt;/code&gt; HTML comments with the name of the file inside each turbo tag to ease debugging &amp;ndash; at least until everything works as wished.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s be sure the validation still works for edit too. Try to submit an empty edit - we should see:
&lt;img src=&#34;tweet_index_12_edit_w_validations.png&#34; alt=&#34;tweet_index_12_edit_w_validations&#34;&gt;
because the form now has a dom_id and the validation errors are sent there.&lt;/p&gt;
&lt;p&gt;If some other route is happening another way to fix this would be to add &lt;code&gt;format.turbo_stream { render turbo_stream: turbo_stream.replace(@tweet, partial: &amp;quot;tweets/form&amp;quot;, locals: { tweet: @tweet}) }&lt;/code&gt; to the controller update method:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/controllers/tweets_controller.rb
def update
    respond_to do |format|
      if @tweet.update(tweet_params)
        format.html { redirect_to tweets_url, notice: &amp;quot;Tweet was successfully updated.&amp;quot; }
        format.json { render :show, status: :ok, location: @tweet }
      else
        format.turbo_stream { render turbo_stream: turbo_stream.replace(@tweet, partial: &amp;quot;tweets/form&amp;quot;, locals: { tweet: @tweet}) }
        format.html { render :edit, status: :unprocessable_entity }
        format.json { render json: @tweet.errors, status: :unprocessable_entity }
      end
    end
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OK - ideally all functionality in the edit form is now working well!&lt;/p&gt;
&lt;p&gt;Time for another snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;turbo frame now allows in-place edit and cancel edit without reloading&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;likes-and-retweet&#34;&gt;Likes and Retweet&lt;/h3&gt;
&lt;p&gt;I was able to get these special routes / actions to update just the calling browser, but unable to get these to broadcast to all open connections.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;I am particularly fond of the GoRails videos.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hotwire.dev/&#34;&gt;https://hotwire.dev/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://turbo.hotwire.dev/&#34;&gt;https://turbo.hotwire.dev/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hotwired/hotwire-rails&#34;&gt;https://github.com/hotwired/hotwire-rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=NtTfYfWAzw0&#34;&gt;https://www.youtube.com/watch?v=NtTfYfWAzw0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=77GvSdc2Pf8&#34;&gt;https://www.youtube.com/watch?v=77GvSdc2Pf8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=NtTfYfWAzw0&#34;&gt;https://www.youtube.com/watch?v=NtTfYfWAzw0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=MRv4XGu6QkY&#34;&gt;https://www.youtube.com/watch?v=MRv4XGu6QkY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gorails.com/episodes/hotwire-rails?autoplay=1&#34;&gt;https://gorails.com/episodes/hotwire-rails?autoplay=1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://robrace.dev/build-a-twitter-clone-with-rails-hotwire/&#34;&gt;https://robrace.dev/build-a-twitter-clone-with-rails-hotwire/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.cloud66.com/taking-rails-to-the-next-level-with-hotwire/&#34;&gt;https://blog.cloud66.com/taking-rails-to-the-next-level-with-hotwire/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://betterprogramming.pub/hotwire-actiontext-and-rails-6-be025dce7d87&#34;&gt;https://betterprogramming.pub/hotwire-actiontext-and-rails-6-be025dce7d87&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Tweets - A Single Page Rails App (using reloads)</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_1_single_page_app_simulate/</link>
      <pubDate>Sat, 20 Feb 2021 18:57:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_1_single_page_app_simulate/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;This article is just to have a base app that stays on the index page.  We will use this as a starting point for a more efficient single page app by updating this project with Hotwire in the next article 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_hotwire_tweet_single_page/&#34;&gt;Tweets - A Rails based Single Page App using Hotwire&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://hotwire.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hotwire&lt;/a&gt; allows us to build Single Page Apps using Ruby and Rails with nearly NO configuration! It allow very responsive web-applications as it reloads only the parts of the page that change via a socket.  Hotwire using 
&lt;a href=&#34;https://turbo.hotwire.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Turbo&lt;/a&gt; - an evolution of TurboLinks and as such is mobile friendly and in most cases can send the replacement HTML directly from the server to the client with minimal or no client side processing over websockets so there is minimal lag time.&lt;/p&gt;
&lt;p&gt;This code can be found at: &lt;a href=&#34;https://github.com/btihen/tweet_simulator_rails&#34;&gt;https://github.com/btihen/tweet_simulator_rails&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;basic-setup&#34;&gt;Basic Setup&lt;/h2&gt;
&lt;h3 id=&#34;create-the-project&#34;&gt;Create the project&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;ll skip Turbolinks since Turbo replaces Turbolinks and also installs Stimulus&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rails new tweets -d postgresql -T --skip-turbolinks --skip-spring
cd tweets
git add .
git commit -m &amp;quot;initial commit after creation&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I generally take a lot of git snapshots (and then squash them - so its easy to go back to a known good point if things don&amp;rsquo;t work out).&lt;/p&gt;
&lt;h3 id=&#34;create-a-traditional-rails-tweet-clone&#34;&gt;Create a Traditional Rails Tweet Clone&lt;/h3&gt;
&lt;h4 id=&#34;tweet-model&#34;&gt;Tweet Model&lt;/h4&gt;
&lt;p&gt;We&amp;rsquo;ll scaffold the model to get all the parts we need&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bin/rails g scaffold tweet body:text likes:integer retweets:integer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&amp;rsquo;ll update the migration to prevent blanks - make the migration file look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# db/migrate/yyyymmddHHMMSS_create_tweets.rb
class CreateTweets &amp;lt; ActiveRecord::Migration[6.1]
  def change
    create_table :tweets do |t|
      t.text :body, null: false
      t.integer :likes, null: false, default: 0
      t.integer :retweets, null: false, default: 0

      t.timestamps
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we should be able to successfully create and migrate out database&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bin/rails db:create
bin/rails db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Given the Database restrictions we&amp;rsquo;ll add validations to the model. So now it should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/models/tweet.rb
class Tweet &amp;lt; ApplicationRecord
  validates :body, presence: true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets also point the root route at our tweets resource - so now it should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# config/routes.rb
Rails.application.routes.draw do
  resources :tweets
  root to: &amp;quot;tweets#index&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets start up rails and be sure everything works so far:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bin/rails s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;go to &lt;code&gt;http://localhost:3000&lt;/code&gt; and make and edit and delete some tweets.&lt;/p&gt;
&lt;p&gt;Assuming it works lets commit these changes.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;created tweet scaffold, validations and routes&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;lets-make-this-useable-more-like-a-single-page-app&#34;&gt;Let&amp;rsquo;s make this useable (more like a single page app)&lt;/h4&gt;
&lt;p&gt;Lets start by fixing the following problems:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the create form allows us to choose and edit likes and retweets&lt;/li&gt;
&lt;li&gt;tweets are listed in the opposite order in oldest to newest&lt;/li&gt;
&lt;li&gt;to create a new tweet we need to go to a separate new page&lt;/li&gt;
&lt;li&gt;creating and editing new tweets brings us to a show page (away from our index)&lt;/li&gt;
&lt;li&gt;message, likes, retweets, etc are all listed in one long table row (we&amp;rsquo;ll fix with some bootstrap css)&lt;/li&gt;
&lt;li&gt;likes and retweets are not usable&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As mentioned users shouldn&amp;rsquo;t choose their likes and retweets:
&lt;img src=&#34;tweet_form_1st.png&#34; alt=&#34;tweet_form_1st&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now lets remove likes and retweets from our form:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/views/tweets/_form.html.erb
&amp;lt;%= form_with(model: tweet) do |form| %&amp;gt;
  &amp;lt;% if tweet.errors.any? %&amp;gt;
    &amp;lt;div id=&amp;quot;error_explanation&amp;quot;&amp;gt;
      &amp;lt;h2&amp;gt;&amp;lt;%= pluralize(tweet.errors.count, &amp;quot;error&amp;quot;) %&amp;gt; prohibited this tweet from being saved:&amp;lt;/h2&amp;gt;

      &amp;lt;ul&amp;gt;
        &amp;lt;% tweet.errors.each do |error| %&amp;gt;
          &amp;lt;li&amp;gt;&amp;lt;%= error.full_message %&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;% end %&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;% end %&amp;gt;

  &amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
    &amp;lt;%= form.label :body %&amp;gt;
    &amp;lt;%= form.text_area :body %&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;actions&amp;quot;&amp;gt;
    &amp;lt;%= form.submit %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the form should look like:
&lt;img src=&#34;tweet_form_2nd.png&#34; alt=&#34;tweet_form_2nd&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you made several tweets you&amp;rsquo;ll notice that the tweets are in oldest to newest.
&lt;img src=&#34;tweet_index_1st_oldest.png&#34; alt=&#34;tweet_index_1st&#34;&gt;&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll fix that with the index controller sort order:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/controllers/tweets_controller.rb
class TweetsController &amp;lt; ApplicationController
  before_action :set_tweet, only: %i[ show edit update destroy ]

  def index
    @tweets = Tweet.all.order(created_at: :desc)
  end
  ...
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_2nd_newest.png&#34; alt=&#34;tweet_index_2nd&#34;&gt;&lt;/p&gt;
&lt;p&gt;now tweets should be newest to oldest&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s put our create tweet at the top of our index page&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/views/tweets/index.html.erb
&amp;lt;p id=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;h1&amp;gt;Tweets&amp;lt;/h1&amp;gt;

&amp;lt;h4&amp;gt;New Tweet&amp;lt;/h4&amp;gt;
&amp;lt;%= render &amp;quot;tweets/form&amp;quot;, tweet: @tweet %&amp;gt;

&amp;lt;h4&amp;gt;Tweet Feed&amp;lt;/h4&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now when we check out index page again &amp;ndash; oops, we get an error:
&lt;img src=&#34;tweet_index_3rd_error.png&#34; alt=&#34;tweet_index_3rd_error&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;errors&lt;/code&gt; is null because the new instance isn&amp;rsquo;t available we need to add a new tweet to our index page from the controller:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/controllers/tweets_controller.rb
class TweetsController &amp;lt; ApplicationController
  before_action :set_tweet, only: %i[ show edit update destroy ]

  def index
    # put newest tweets at the top of the page
    @tweets = Tweet.all.order(created_at: :desc)
    @tweet = Tweet.new
  end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when we view index we should be able to create a tweet on the index page:
&lt;img src=&#34;tweet_index_4th_top.png&#34; alt=&#34;tweet_index_4th&#34;&gt;&lt;/p&gt;
&lt;p&gt;However, after creation we still go to show page and need to navigate back to the index page - lets fix that in the create controller.  We will change the line:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;format.html { redirect_to @tweet, notice: &amp;quot;Tweet was successfully created.&amp;quot; }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;with:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;format.html { redirect_to tweets_url, notice: &amp;quot;Tweet was successfully created.&amp;quot; }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We will have the same problem with update &amp;ndash; so let&amp;rsquo;s fix them both.  Now the controller should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/controllers/tweets_controller.rb
  def create
    @tweet = Tweet.new(tweet_params)

    respond_to do |format|
      if @tweet.save
        format.html { redirect_to tweets_url, notice: &amp;quot;Tweet was successfully created.&amp;quot; }
        format.json { render :show, status: :created, location: @tweet }
      else
        format.html { render :new, status: :unprocessable_entity }
        format.json { render json: @tweet.errors, status: :unprocessable_entity }
      end
    end
  end

  def update
    respond_to do |format|
      if @tweet.update(tweet_params)
        format.html { redirect_to tweet_url, notice: &amp;quot;Tweet was successfully updated.&amp;quot; }
        format.json { render :show, status: :ok, location: @tweet }
      else
        format.html { render :edit, status: :unprocessable_entity }
        format.json { render json: @tweet.errors, status: :unprocessable_entity }
      end
    end
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now after we create a new tweet we should &amp;lsquo;stay&amp;rsquo; (it actually reloads - which could be slow if we had many tweets on the page - we will fix this with hotwire) on the index page and see:
&lt;img src=&#34;tweet_index_5th_after_create.png&#34; alt=&#34;tweet_index_5th&#34;&gt;&lt;/p&gt;
&lt;p&gt;OK we are almost there, but we still have rows of tables and not a nice tweet feed look.&lt;/p&gt;
&lt;p&gt;Lets add Bootstrap CSS for some modest beauty (you can copy this file or use the below link to get the newest Bootstrap CSS)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/views/layout/application.html.erb
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;

&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Tweets&amp;lt;/title&amp;gt;
  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt;
  &amp;lt;%= csrf_meta_tags %&amp;gt;
  &amp;lt;%= csp_meta_tag %&amp;gt;

  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot;
        href=&amp;quot;https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css&amp;quot;
        integrity=&amp;quot;sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l&amp;quot;
        crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;
  &amp;lt;%= stylesheet_link_tag &#39;application&#39;, media: &#39;all&#39; %&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
  &amp;lt;%= yield %&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you can get the newest bootstrap link from: &lt;a href=&#34;https://getbootstrap.com/docs/&#34;&gt;https://getbootstrap.com/docs/&lt;/a&gt; or &lt;a href=&#34;https://www.bootstrapcdn.com/&#34;&gt;https://www.bootstrapcdn.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now lets make a partial reformat our feed with bootstrap:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/views/tweets/_tweet.html.erb
&amp;lt;div class=&amp;quot;card card-body&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;%= tweet.body %&amp;gt;&amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;mt-2&amp;quot;&amp;gt;
    &amp;lt;%= &amp;quot;Like (#{tweet.likes})&amp;quot; %&amp;gt;

    &amp;lt;%= &amp;quot;Retweet (#{tweet.retweets})&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &#39;Edit&#39;, edit_tweet_path(tweet),
              class: &amp;quot;btn btn-sm btn-success&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &#39;Destroy&#39;, tweet_path(tweet), method: :delete,
              data: { confirm: &#39;Are you sure?&#39; },
              class: &amp;quot;btn btn-sm btn-danger&amp;quot; %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets integrate the tweet partial into the index page:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/views/tweets/index.html.erb
&amp;lt;p id=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;h1&amp;gt;Tweets&amp;lt;/h1&amp;gt;

&amp;lt;h4&amp;gt;New Tweet&amp;lt;/h4&amp;gt;
&amp;lt;%= render &amp;quot;tweets/form&amp;quot;, tweet: @tweet %&amp;gt;

&amp;lt;h4&amp;gt;Tweet Feed&amp;lt;/h4&amp;gt;
&amp;lt;%= render @tweets %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have an app that basically works from the index pages (not yet Edit, but without Hotwire, that&amp;rsquo;s difficult &amp;ndash; see the next article)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_6th_formatted.png&#34; alt=&#34;tweet_index_6th&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take another git snapshot of &amp;lsquo;index&amp;rsquo; reloading app.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;tweet app mostly from the index page&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;activate-likes-and-retweets&#34;&gt;Activate likes and retweets&lt;/h4&gt;
&lt;p&gt;To finish this simple app lets activate Likes and Retweets - we will do this with new controllers since this is an independent action from our tweet itself.  We will use the &lt;code&gt;create&lt;/code&gt; since we are &lt;code&gt;creating&lt;/code&gt; a like or a retweet.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s build the like controller - we will redirect back to the index where we want to stay:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/controllers/likes_controller.rb
class LikesController &amp;lt; ApplicationController
  before_action :set_tweet

  def create
    @tweet.increment! :likes
    redirect_to tweets_url
  end

  private

  def set_tweet
    @tweet = Tweet.find(params[:tweet_id])
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now the retweet controller:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/controllers/retweets_controller.rb
class RetweetsController &amp;lt; ApplicationController
  before_action :set_tweet

  def create
    @tweet.increment! :retweets
    redirect_to tweets_url
  end

  private

  def set_tweet
    @tweet = Tweet.find(params[:tweet_id])
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These controllers are dependent on the tweet so they are subroutes of a tweet - so lets update our routes to be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# config/routes.rb
Rails.application.routes.draw do
  resources :tweets do
    resource :like, only: [:create]
    resource :retweet, only: [:create]
  end
  root to: &amp;quot;tweets#index&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets add the connection to controller in our front-end with buttons.  Note we need to use the &lt;code&gt;method: :post&lt;/code&gt; for our like and retweet &lt;code&gt;create&lt;/code&gt; because these are normally &lt;code&gt;posted&lt;/code&gt; by the &lt;code&gt;edit&lt;/code&gt; form.  In this case we want to bypass a form and just update.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/views/tweets/_tweet.html.erb
&amp;lt;div class=&amp;quot;card card-body&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;%= tweet.body %&amp;gt;&amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;mt-2&amp;quot;&amp;gt;
    &amp;lt;%= link_to &amp;quot;Like (#{tweet.likes})&amp;quot;,
                tweet_like_path(tweet),
                method: :post,
                class: &amp;quot;btn btn-sm btn-outline-success&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &amp;quot;Retweet (#{tweet.retweets})&amp;quot;,
                tweet_retweet_path(tweet),
                method: :post,
                class: &amp;quot;btn btn-sm btn-outline-info&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &#39;Edit&#39;, edit_tweet_path(tweet),
                class: &amp;quot;btn btn-sm btn-outline-primary&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &#39;Destroy&#39;, tweet_path(tweet), method: :delete,
                data: { confirm: &#39;Are you sure?&#39; },
                class: &amp;quot;btn btn-sm btn-outline-danger&amp;quot; %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Test that everything works as expected!  Assuming it works - we will take another snapshot.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;likes and retweets enabled and also &#39;stay&#39; on index page&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_7th_likes_retweets.png&#34; alt=&#34;tweet_index_7th&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Hero&#39;s Journey</title>
      <link>https://btihen.me/post_edu/edgilty_btihen_heros_journey/</link>
      <pubDate>Fri, 01 Jan 2021 01:16:20 +0200</pubDate>
      <guid>https://btihen.me/post_edu/edgilty_btihen_heros_journey/</guid>
      <description>&lt;p&gt;Stories, especially a Heroâs Journey, have a long and successful track record of creating engaging stories, movies, and, more recently, captivating ad campaigns for marketers and business executives. For several reasons, I also argue that the Heroâs Journey is very helpful in a learning context - especially if the students themselves are the authors of the story.&lt;/p&gt;
&lt;p&gt;First of all, stories allow students a variety of ways to engage with curriculum goals. I generally like to have students create a story related to the unit, giving them just enough guidelines to ensure a good challenge, while still clearly seeing if they have accomplished the goal, all without falling back on the teacherâs opinion.&lt;/p&gt;
&lt;p&gt;To do this, I start with a statement For example, when creating a unit on biology and robotics, the goal was to have the students create a robot that would keep their plants alive over a two week vacation. If the robot fails, the garden dies. Or in a boat design / physics class, students were to design a boat that met at least one of three prescribed qualities and could survive at least one of three prescribed nautical challenges.&lt;/p&gt;
&lt;p&gt;The second step is to have the students define a âfutureâ or âimaginaryâ persona and a goal or reason that this persona is doing the project. I have them document their persona, since at the end of the project, they will present their story using that persona. Students are allowed to adjust their persona and goal as they progress.&lt;/p&gt;
&lt;p&gt;Once students have chosen a persona, goal and purpose, they start the actual work on their project. At this point, most students are quite engaged since they have picked some aspect of the project that interests them and have found a way that the project and materials relate to their own world. By developing a purpose in the context of the story, they are more likely to be successful when they encounter the âchallenge.â&lt;/p&gt;
&lt;p&gt;I am careful to design the projects so that there is no perfect solution and the projects represent a significant challenge. It is important that the students need to think through and explore several aspects of the topic to understand, in their opinion, the best way forward. Of course, it is important to make the whole endeavor doable. Like a good game, it starts off easy and gets progressively harder, building skills as the game - the story - progress. It helps to keep the students focused on the next immediate doable aspect of the project, while keeping an eye on moving toward their goal.&lt;/p&gt;
&lt;p&gt;As the project gets more challenging and students are working toward the âimpossibleâ perfection they seem to desire, it is important to be patient and supportive. When students struggle, they are learning. When they have to make difficult compromises to best arrive at their goal, or an acceptable variation of the goal, they are learning. Messy is how learning is.&lt;/p&gt;
&lt;p&gt;The best way I have found to help the students, in addition to observing and guiding them during class, is to regularly review student progress with them, reflecting together on their progress. What about their work is effective? What could they try to be even more effective? What, indeed, does effective mean - to them?&lt;/p&gt;
&lt;p&gt;The last step is to have the students present their purpose, personas, goal, and project. In short, their heroic journey.&lt;/p&gt;
&lt;p&gt;To quickly compare the above project flow to an Agile process, including the kickoff, consider these steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kickoff meeting (define the goals and roles)&lt;/li&gt;
&lt;li&gt;Daily Standups &amp;amp; other Scrum activities&lt;/li&gt;
&lt;li&gt;External Scrum demo &amp;amp; Review of feedback&lt;/li&gt;
&lt;li&gt;Sprint Retrospective (reflecting on what can be even better)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Resources:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Hero%27s_journey&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Heroâs Journey Defined&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Liftoff: Launching Agile Teams &amp;amp; Projects, by Diana Larsen &amp;amp; Ainsley Nies, (ISBN-13: 978-1680501636)&lt;/li&gt;
&lt;li&gt;The Agile Samurai: How Agile Masters Deliver Great Software, by Jonathan Rasmusson (ISBN-13 9781934356586)&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.mountaingoatsoftware.com/blog/advice-on-conducting-agile-project-kickoff-meetings&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Advice on Conduction Agile Project Kickoff Meetings&lt;/a&gt;, by Ben Kohen&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://thedigitalprojectmanager.com/project-kickoff-meeting/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How To Run A Project Kickoff Meeting (With Sample Agendas)&lt;/a&gt;, by Ben Aston&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Invoke/Involve Stories&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Allow students to dream a future and work with difficulties.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://youtu.be/1nYFpuc2Umk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Common Structure of the Greatest Communicators&lt;/a&gt; - A TEDxEast talk by Nancy Duarte.  Explores making the status quo unappealing and draw them forward to the future of what can be, drawing people in and using resistance to move forward.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.ted.com/talks/andrew_stanton_the_clues_to_a_great_story?language=en&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Clues to a Great Story&lt;/a&gt; - shares what he knows about storytelling &amp;ndash; starting at the end and working back to the beginning. A TED talk by Andrew Stanton, the writer behind &amp;ldquo;Toy Story&amp;rdquo; and &amp;ldquo;Wall-E&amp;rdquo; and &amp;ldquo;John Carter.&amp;rdquo; &lt;em&gt;Contains graphic language.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=Nj-hdQMa3uA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The magical science of storytelling&lt;/a&gt; - a TEDxStockholm by David JP Phillips.  David JP Phillips shares key neurological findings on storytelling and with the help of his own stories, induces in us the release of four neurotransmitters of his choice.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Feedback: It&#39;s Not what You Think</title>
      <link>https://btihen.me/post_edu/explore_uplift_feedback/</link>
      <pubDate>Sat, 05 Dec 2020 01:16:20 +0200</pubDate>
      <guid>https://btihen.me/post_edu/explore_uplift_feedback/</guid>
      <description>&lt;p&gt;I do what I can to create an environment where students can learn as much as possible both independently and from each other collaboratively. This has two large impacts. First, as a teacher I am mostly removed from continually correcting students. Second, as a teacher I have time to coach and guide the students when they need help and guidance, in a manner they are asking for. Teaching is much more joyful when you arenât continually in a position of correcting  and judging what is right. The classroom atmosphere is positively impacted as well.&lt;/p&gt;
&lt;p&gt;To promote independent learning I do what I can to create learning situations (and projects) where &lt;strong&gt;natural&lt;/strong&gt; feedback is integral to the learning process. Natural feedback comes about in circumstances where the student work itself produces the feedback with no dependence on the teacher. For example, while learning about designing boats, if students are printing their designs on a 3D printer, the students themselves will see how their boats float and how they react to adverse conditions, for example waves and wind. If the assignment asks students to test their boats by setting up a fan to blow across the test pool, they will see if their boat can travel across the pool without hitting the side wall or foundering. Or in math and physics students can do what we call sanity checks. Are their calculations plausible? Learning the skill of creating and learning from feedback that you control yourself is a transferable, life-worthy skill, that goes beyond the particular content of an activity or course.&lt;/p&gt;
&lt;p&gt;To promote collaborative learning, I help students learn how to support each other by giving feedback that is easy to digest. Instead of promoting correction, I ask students to follow the Pixar &lt;strong&gt;additive&lt;/strong&gt; feedback method (see the resources at the end for further information). In short, I have the following demo or presentation rules:&lt;/p&gt;
&lt;p&gt;As a &lt;strong&gt;feedback giver&lt;/strong&gt;: 1) stop and think, then 2) start with what you like and 3) say what you would like to see more of. There is no corrective feedback or discussions of what you dislike. Students (and the teacher) just offer what they would like to see more of. Itâs ok, of course, if that feedback excludes some of whatâs there!&lt;/p&gt;
&lt;p&gt;As a &lt;strong&gt;demo presenter&lt;/strong&gt;: 1) listen and 2) do not comment or or mount a defense to what you are hearing, but clarification questions are allowed and encouraged. After the demo, (3) stop and think; then (4) decide what suggestions to act upon and what not to act upon.&lt;/p&gt;
&lt;p&gt;Students (and many teachers) are not very practiced at Pixarâs &lt;strong&gt;additive feedback&lt;/strong&gt;, so practice is practice is essential.  In fact, initially I guide all demos to ensure they learn the practices to feel safe while demoing, giving and getting additive feedback.  After demos I do a quick reflection with the group to help them think through what ideas to use and what to disregard.  Over time, the students get good at this and I no longer guide the demos.&lt;/p&gt;
&lt;p&gt;When &amp;lsquo;natural&amp;rsquo; feedback isn&amp;rsquo;t easy or when working with technical topics where there are multiple ways to solve a problem and when judgement is important. Then instead of emphasizing &amp;lsquo;additive&amp;rsquo; feedback, I turn to 
&lt;a href=&#34;https://www.michaelagreiler.com/about/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dr. Michaela Greiler (Doctor McKayla)&lt;/a&gt; &lt;strong&gt;code review guidelines&lt;/strong&gt; in her video 
&lt;a href=&#34;https://www.michaelagreiler.com/respectful-constructive-code-review-feedback/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Respectful, Constructive Code-Review Feedback&lt;/a&gt;.  She developed these guidelines while working at Microsoft&amp;rsquo;s Research and Development Department while studying the effects of code reviews and feedback on team performance.&lt;/p&gt;
&lt;p&gt;I avoid the phrase &amp;ldquo;constructive feedback,&amp;rdquo; since that phrase is too often code for stating what you personally think is correct. When the teacher does that, from the position of power granted to teachers by way of assigning grades, for example, constructive feedback becomes another way to tell students what is right (according to the teacher) and what students should do. Encouraging additive feedback puts the focus on what the student is learning, not what the teacher is thinking.&lt;/p&gt;
&lt;p&gt;To ensure that collaborative feedback is practiced I require every project to include at least one adjustment that students must credit to another studentâs feedback when they hand-in or present their project.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Technology companies focus on communication and feedback to create an environment of enthusiastic, engaged learners.  Fundamentally, they are moving away from an &amp;lsquo;authoritative&amp;rsquo;,  &amp;lsquo;telling&amp;rsquo; and &amp;lsquo;corrective&amp;rsquo; approach and instead toward an &amp;lsquo;amplifying&amp;rsquo;, &amp;lsquo;curious&amp;rsquo; and &amp;lsquo;collaborative&amp;rsquo; approach.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pixar&amp;rsquo;s Plussing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Amplifying feedback over silencing feedback.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=jziy7comOT8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pixar&amp;rsquo;s &amp;ldquo;Plussing&amp;rdquo; - Feedback Tool&lt;/a&gt; - In this short video he describes how to use Pixar&amp;rsquo;s Plussing in the the classroom to improve learning and collaboration.  
&lt;a href=&#34;https://www.davidleeedtech.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;David Lee&lt;/a&gt; is the Tech &amp;amp; Innovation Specialist at 
&lt;a href=&#34;https://www.sas.edu.sg/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Singapore American School&lt;/a&gt;.  He is also the author of 
&lt;a href=&#34;https://www.davidleeedtech.org/designthinkingintheclassroom&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Design Thinking in the Classroom&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://joehirsch.me/2017/03/29/pixar/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pixarâs Secret to giving Feedback&lt;/a&gt; - a short, clear article describing the differences between silencing and amplifying (&amp;lsquo;plussing&amp;rsquo; or &amp;lsquo;additive&amp;rsquo;) feedback.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://hbr.org/2008/09/how-pixar-fosters-collective-creativity&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How Pixar Fosters Collective Creativity&lt;/a&gt;, by Ed Catmull. A Harvard Business Review article that describes the misconception about creativity. The focus of the article is summarize with this quote: &amp;ldquo;The view that good ideas are rarer and more valuable than good people is rooted in a misconception of creativity.&amp;rdquo; Ed Catmull is the author of &lt;strong&gt;
&lt;a href=&#34;https://www.creativityincbook.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Creativity, Inc.&lt;/a&gt;:&lt;/strong&gt; Overcoming the Unseen Forces That Stand in the Way of True Inspiration, ISBN-13: 978-0593070109, by Ed Catmull (co-founder of Pixar) and Amy Wallace. This is the book that sparked a lot of interest in &amp;lsquo;additive&amp;rsquo; or &amp;lsquo;plussing&amp;rsquo; feedback.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://hbr.org/2010/07/how-to-make-good-decisions-les&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Five ways Pixar makes Better Decisions&lt;/a&gt; - a Harvard Business Review article that describes how organizations with good judgment have a number of typical attributes. One is that they involve a number of different people in making important decisions. Their senior executives keep in mind that they donât have a monopoly on knowledge and judgment and therefore involve multiple people in decision processes. Thomas H. Davenport is the Presidentâs Distinguished Professor in Management and Information Technology at 
&lt;a href=&#34;https://www.babson.edu/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Babson College&lt;/a&gt;, a research fellow at the 
&lt;a href=&#34;http://ide.mit.edu/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MIT Initiative on the Digital Economy&lt;/a&gt;, and a senior adviser at 
&lt;a href=&#34;https://www2.deloitte.com/global/en/pages/deloitte-analytics/topics/deloitte-analytics-services.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Deloitte Analytics&lt;/a&gt;. He is the author of over a dozen management books, most recently 
&lt;a href=&#34;https://www.harpercollins.com/products/only-humans-need-apply-thomas-h-davenportjulia-kirby?variant=32217989349410&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Only Humans Need Apply: Winners and Losers in the Age of Smart Machines&lt;/a&gt; and 
&lt;a href=&#34;https://mitpress.mit.edu/books/ai-advantage&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The AI Advantage&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Effective Feedback&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sharing perspective instead of authoritatively telling.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=wtl5UrrgU8c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The secret to giving great feedback&lt;/a&gt;: The Way We Work, a &lt;strong&gt;TED&lt;/strong&gt; series, by cognitive psychologist 
&lt;a href=&#34;https://lifelabslearning.com/faculty/dr-leeann-renniger/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LeeAnn Renniger&lt;/a&gt;.  She shares a scientifically proven method for giving effective feedback. Visit &lt;a href=&#34;https://go.ted.com/thewaywework&#34;&gt;https://go.ted.com/thewaywework&lt;/a&gt; for more! She also has a book: 
&lt;a href=&#34;https://www.penguinrandomhouse.com/books/316304/surprise-by-tania-luna-and-leeann-renninger-phd/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Surprise&lt;/strong&gt;: Embrace the Unpredictable and Engineer the Unexpected&lt;/a&gt;, ISBN-13 : 978-0399169823, by Tania Luna and LeeAnn Renninger PhD.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.michaelagreiler.com/respectful-constructive-code-review-feedback/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How to Give Respectful and Constructive Code Review Feedback&lt;/a&gt; - a short video by Dr. 
&lt;a href=&#34;https://www.michaelagreiler.com/about/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Michaela Greiler&lt;/a&gt; (Doctor McKayla) explaining 10 ways to respectfully collaborate and improve.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Technical Feedback&lt;/strong&gt; &lt;em&gt;(without being the sage on the stage)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dr. Michaela Greiler has a full length talk 
&lt;a href=&#34;https://www.youtube.com/watch?v=hzBHtgWlc4I&amp;amp;feature=emb_rel_end&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How To Phrase Respectful Code Review Feedback&lt;/a&gt;.  She is also working on a Code Review Book.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://leanpub.com/whattolookforinacodereview&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What to Look for in a Code Review&lt;/a&gt;, by Trisha Gee of Jet Brains.  She also has a talk 
&lt;a href=&#34;https://trishagee.com/presentations/code_review_best_practice/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Code Review Best Practices&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Agile Communication and Management Approaches&lt;/strong&gt; &lt;em&gt;(classroom management)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://pragprog.com/titles/jsengman/become-an-effective-software-engineering-manager/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Become an Effective Software Engineering Manager&lt;/a&gt;: How to Be the Leader Your Development Team Needs, ISBN: 9781680507249, by James Stanier.  This book is a reflection about how to go beyond agile and what has worked well at &lt;strong&gt;Spotify&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Teachers on Communication and Inspiration&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=UCFg9bcW7Bk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Teaching Methods for Inspiring the Students of the Future&lt;/a&gt; - A TEDxLafayette talk by Joe Ruhl on working with students: Choice, Collaboration, Communication, Critical Thinking, Creativity and Caring.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=vrU6YJle6Q4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What makes a good teacher great?&lt;/a&gt; - A TEDxSantoDomingo talk by Azul Terronez on connecting and listing to students and developing rapor.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Docker Intro using MailCatcher</title>
      <link>https://btihen.me/post_tech_notes/codium_plugins/</link>
      <pubDate>Tue, 03 Nov 2020 01:19:09 +0200</pubDate>
      <guid>https://btihen.me/post_tech_notes/codium_plugins/</guid>
      <description>&lt;p&gt;Need to point Codium to MS extions?  Do the following:&lt;/p&gt;
&lt;h3 id=&#34;like-codium-but-need-a-ms-code-plugin&#34;&gt;&lt;strong&gt;Like Codium but need a MS Code Plugin?&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/37143536/no-extensions-found-when-running-visual-studio-code-from-source&#34;&gt;https://stackoverflow.com/questions/37143536/no-extensions-found-when-running-visual-studio-code-from-source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;open:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vim /Applications/VSCodium.app/Contents/Resources/app/product.json&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This can be fixed by adding following to product.json:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;extensionsGallery&amp;quot;: {
    &amp;quot;serviceUrl&amp;quot;: &amp;quot;https://marketplace.visualstudio.com/_apis/public/gallery&amp;quot;,
    &amp;quot;cacheUrl&amp;quot;: &amp;quot;https://vscode.blob.core.windows.net/gallery/index&amp;quot;,
    &amp;quot;itemUrl&amp;quot;: &amp;quot;https://marketplace.visualstudio.com/items&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Web Design Resources</title>
      <link>https://btihen.me/post_tech_notes/web_design_resources/</link>
      <pubDate>Sun, 01 Nov 2020 01:57:16 +0200</pubDate>
      <guid>https://btihen.me/post_tech_notes/web_design_resources/</guid>
      <description>&lt;h2 id=&#34;thesarus-word-finder&#34;&gt;Thesarus (word finder)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.wordhippo.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wordhippo&lt;/a&gt; - finds older and specialty words!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;code-hightlights&#34;&gt;Code hightlights&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://highlightjs.org/usage/&#34;&gt;https://highlightjs.org/usage/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;docs&#34;&gt;Docs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://plantuml.com/&#34;&gt;https://plantuml.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dbdiagram.io/home&#34;&gt;https://dbdiagram.io/home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.planttext.com/&#34;&gt;https://www.planttext.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://plantuml.com/ie-diagram&#34;&gt;https://plantuml.com/ie-diagram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.quickdatabasediagrams.com/&#34;&gt;https://www.quickdatabasediagrams.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://graphviz.org/doc/info/lang.html&#34;&gt;https://graphviz.org/doc/info/lang.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://modeling-languages.com/uml-tools/#textual&#34;&gt;https://modeling-languages.com/uml-tools/#textual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mamchenkov.net/wordpress/2015/08/20/graphviz-dot-erds-network-diagrams&#34;&gt;https://mamchenkov.net/wordpress/2015/08/20/graphviz-dot-erds-network-diagrams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://towardsdatascience.com/drawing-a-uml-diagram-in-the-vs-code-53c2e67deffe&#34;&gt;https://towardsdatascience.com/drawing-a-uml-diagram-in-the-vs-code-53c2e67deffe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;logos&#34;&gt;Logos&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://logomakr.com/&#34;&gt;https://logomakr.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freelogodesign.org/&#34;&gt;https://www.freelogodesign.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.namecheap.com/logo-maker/app/&#34;&gt;https://www.namecheap.com/logo-maker/app/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hatchful.shopify.com/onboarding/pick-space&#34;&gt;https://hatchful.shopify.com/onboarding/pick-space&lt;/a&gt;\&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svgx.app/?ref=madewithsvelte.com&#34;&gt;https://svgx.app/?ref=madewithsvelte.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;slides&#34;&gt;Slides&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://zulko.github.io/eaglejs-demo/#/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EagleJS&lt;/a&gt; - Vue Based&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://revealjs.com/installation/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RevealJS&lt;/a&gt; - React Based&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/gnab/remark/wiki&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RemarkJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://glidejs.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GlideJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://marp.app/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Marp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;images-and-icons&#34;&gt;Images and Icons&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m often looking for a way to make websites more interesting here are a few resources I use:&lt;/p&gt;
&lt;h2 id=&#34;drawings&#34;&gt;Drawings&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://themeisle.com/blog/free-illustrations/&#34;&gt;https://themeisle.com/blog/free-illustrations/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://undraw.co/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Undraw&lt;/a&gt; &amp;ndash; free to use drawings in SVG&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.manypixels.co/gallery/?color=50c6e1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;manypixels&lt;/a&gt; - colors are adjustable!&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://stubborn.fun/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;stubborn.fun&lt;/a&gt; - new&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.drawkit.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;drawkit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://stories.freepik.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;stories.freepick&lt;/a&gt; - with attribution&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://illlustrations.co/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;illlustrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://iradesign.io/illustrations&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;iradesign&lt;/a&gt; - can change the colors!&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://absurd.design/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;absurd&lt;/a&gt; - funky stuff&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://icons8.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;icons8&lt;/a&gt; - images, drawings, photos, Icons!&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.humaaans.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;humaaans&lt;/a&gt; - all about people and lots of adjustments&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://grapbox.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grapbox&lt;/a&gt; - images, drawings, photos, Icons!&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.uistore.design/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;uistore&lt;/a&gt; - mix of stuff&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;photos&#34;&gt;Photos&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://unsplash.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Unsplash&lt;/a&gt; - photos free to use for everyone&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;css---nextgen&#34;&gt;CSS - NextGen&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/windicss/windicss&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Windi&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://vite-ruby.netlify.app/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ViteRuby/Rails&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://web-crunch.com/posts/vite-ruby-on-rails-application-template&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vite/Windi/Rails&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/justalever/kickoff_vite_rails&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vite/Windi/Rails6&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/vitejs/awesome-vite#integrations-with-backends&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AwesomeVite.js&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://dev.to/bvalentino/using-viewcomponents-with-actioncable-1kg2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RailsViewComponents&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://dev.to/andy/rails-to-introduce-view-components-3ome&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IntroRailsViewComponents&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://bloggie.io/@kinopyo/viewcomponent-my-attempt-to-answer-what-value-it-brings&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RailsViewComponents&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://medium.flatstack.com/a-component-based-approach-to-writing-views-in-ruby-on-rails-applications-using-view-components-17e262d9ae2b&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RailsViewComponents&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://mindreframer.com/posts/js-bundling-with-instant-live-reload-for-phoenix-and-liveview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vite/Phoenix/Article&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/mindreframer/phx-vite-demo/compare/checkpoint-0...checkpoint-4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vite/Phoenix/DemoRepo&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# learn to build a rails template!
git clone https://github.com/justalever/kickoff_vite_rails.git
rails new project --skip-webpack-install --skip-javascript -m kickoff_vite_rails/template.rb

cd project
bin/rails s
bin/vite dev (in second window or with forman/overmind)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;css&#34;&gt;CSS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://bulma.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bulma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://tailwindcss.com/docs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tailwindcss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://headlessui.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;headlessui&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://tailwindui.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tailwindui&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.tailwindtoolbox.com/starter-components&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tailwindtoolbar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;css--alpinejs--stimulusjs&#34;&gt;CSS / AlpineJS / StimulusJS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.alpinetoolbox.com/tools/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AplineToolbox&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=a_Jkn4hb6kI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Night/DayTailwindCSS&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=L6Jwa7al8os&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ResponsiveNavBarTailwindCSS&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://zaengle.com/blog/building-an-accessible-nav-with-alpine-js-and-tailwind-css&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AccessibleNavWTailwind&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://web-crunch.com/posts/lets-build-tailwind-css-responsive-navbar&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NavBarTailwindCSS&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=VLNOfRIiiYk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vue/Rails6&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=eUedqaHS4RQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vue/Rails6-WebCrunch&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://web-crunch.com/posts/ruby-on-rails-api-vue-js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vue/RailsAPI-WebCrunch&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://medium.com/swlh/how-to-integrate-vue-js-with-rails-6-5bd4c6263b18&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vue/Rails6&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://levelup.gitconnected.com/vue-js-with-rails-6-and-performing-crud-operations-b043ef3691f2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vue/Rails6/LevelUp&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://dev.to/mixed_code/setup-for-vue-and-buefy-in-rails-6-3cng&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vue/Buefy/Rails6&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://dev.to/itachiuchiha/bulma-based-ui-components-for-vuejs-41i4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Buefy-BulmaUI&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;icons&#34;&gt;Icons&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://ionicons.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IonIcons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://heroicons.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HeroIcons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://feathericons.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FeatherIcons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://themify.me/themify-icons&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;themifyIcons&lt;/a&gt; - good variety and brands too&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://fontawesome.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FontAwesome&lt;/a&gt; - Icons; many are completely free&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://fontawesome.com/icons?d=gallery&amp;amp;q=archive&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FontAwesome6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://thenounproject.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Noun Project&lt;/a&gt; - Icons and photos for all to use (with attribution)&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://primer.style/octicons/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Octicons&lt;/a&gt; - free icons on github&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://glyphicons.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Glyphicons&lt;/a&gt; - Icons in Bootstrap see also: &lt;a href=&#34;https://getbootstrap.com/docs/3.3/components/&#34;&gt;https://getbootstrap.com/docs/3.3/components/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://simpleicons.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SimpleIcons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://devicon.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;devicon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://iconic.app/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;iconic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;db-svelte-tool&#34;&gt;DB Svelte Tool&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://dbgate.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dbgate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;svg-text-logos&#34;&gt;SVG Text Logos&lt;/h2&gt;
&lt;p&gt;Sometimes I find it hard to come up with a good logo, but not a shortname.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Wide larger Logo&lt;/strong&gt; &lt;em&gt;(for Desktop views)&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;svg viewBox=&amp;quot;0 0 240 45&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;&amp;gt;
  &amp;lt;style&amp;gt;
    .heavy { font: bold 30px sans-serif; fill: blue;}
    .small { font: italic 25px sans-serif; fill: green; }
  &amp;lt;/style&amp;gt;
  &amp;lt;text x=&amp;quot;0&amp;quot; y=&amp;quot;35&amp;quot; class=&amp;quot;heavy&amp;quot; fill=&amp;quot;blue&amp;quot;&amp;gt;ED&amp;lt;/text&amp;gt;
  &amp;lt;text x=&amp;quot;41&amp;quot; y=&amp;quot;35&amp;quot; class=&amp;quot;small&amp;quot; fill=&amp;quot;green&amp;quot;&amp;gt;gility&amp;lt;/text&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Small stacked logo&lt;/strong&gt; &lt;em&gt;(for mobile views)&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;svg viewBox=&amp;quot;0 0 45 45&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;&amp;gt;
  &amp;lt;style&amp;gt;
    .heavy { font: bold 28px sans-serif; fill: blue;}
    .small { font: italic 18px sans-serif; fill: green; }
  &amp;lt;/style&amp;gt;
  &amp;lt;text x=&amp;quot;0&amp;quot; y=&amp;quot;22&amp;quot; class=&amp;quot;heavy&amp;quot; fill=&amp;quot;blue&amp;quot;&amp;gt;ED&amp;lt;/text&amp;gt;
  &amp;lt;text x=&amp;quot;0&amp;quot; y=&amp;quot;40&amp;quot; class=&amp;quot;small&amp;quot; fill=&amp;quot;green&amp;quot;&amp;gt;gility&amp;lt;/text&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Reflection: The Key to Adaptability</title>
      <link>https://btihen.me/post_edu/edgility_btihen_reflection/</link>
      <pubDate>Sat, 03 Oct 2020 01:16:28 +0200</pubDate>
      <guid>https://btihen.me/post_edu/edgility_btihen_reflection/</guid>
      <description>&lt;p&gt;Adaptability is the key or maybe even the definition of agility, as discussed in Paulâs article 
&lt;a href=&#34;https://btihen.me/blog/edgility_pmagnuson_adaptability&#34;&gt;Adaptability article&lt;/a&gt;. In this article Iâll discuss how I try to instill adaptability as a classroom process for student learning. These practices are borrowed from tech companies and business consultants, but I am confident they can be applied in many contexts, including education, when properly adapted.&lt;/p&gt;
&lt;p&gt;When I first taught, I only led reflections at the end of a learning unit or project and I encouraged the students to think deeply and go into detail. However, I realized that students have little practice with reflecting on their learning process, making a deep retrospective impractical. Additionally, I encourage an exploratory approach in class, where the student goal purposely doesnât align with easy-to-google solutions, so students need to learn and adapt as they go. It turns out students generally have little practice adapting as they go, perhaps because the learning path is too easy, or too clean. Thus even project work doesnât usually involve deep thinking, thoughtful decisions, and compromises to accomplish their goals.&lt;/p&gt;
&lt;p&gt;My solution was to introduce mini-reflections at the end of each class and then ask what, if anything, students would do differently in the next class. I ask one or two questions, usually from this list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What&amp;rsquo;s your goal?&lt;/li&gt;
&lt;li&gt;What&amp;rsquo;s your goal next class?&lt;/li&gt;
&lt;li&gt;What/who is allowing you to progress?&lt;/li&gt;
&lt;li&gt;What/who could help you progress with the next goal?&lt;/li&gt;
&lt;li&gt;Whatâs slowing you down?&lt;/li&gt;
&lt;li&gt;What obstacles are blocking your progress?&lt;/li&gt;
&lt;li&gt;What can you adjust, change or do more of to enjoy progress?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These mini-retrospectives last about a minute or so and happen on the way out of the class. Teachers will recognize the format as âexit ticketsâ or âpro-formas.â Because I taught engineering topics and students work in small groups of three to four, the process only takes about vie minutes and is integrated into the cleanup process. (Students are very good about getting started and being engaged - but cleanup seems to be easier to forget somehow. Those who are quicker to catch on do their mini-retrospective first). When the students have to return materials and clear their bench, I look at their work (their lab book and project) as they describe it and we jointly update their burn-down chart (an Agile progress tracking-tool &amp;amp; future blog-post) &lt;strong&gt;Importantly, I always ask what went well and how they can maintain and enjoy their progress.&lt;/strong&gt; If needed, I might also ask what they test to get unstuck, to catch up, etc.  Finally, I ask what they have in mind for the next class.&lt;/p&gt;
&lt;p&gt;These are very quick and neutral discussions that give the students practice reflecting and being asked how they will adjust in a very low-stakes environment. This seems to be exactly the practice many students need. It also turns out that many students enjoy showing off their work at the end of each class. &lt;strong&gt;These are not corrective or judgmental teacher lead meetings, but rather quick coaching and check-ins - with the goal of guiding students to self-reflect and self-regulate. This approach can be uplifting and cultivate student confidence and appreciation for learning.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Thereâs research that shows positive interactions lead to positive outcomes - perhaps unsurprisingly - and plenty of reasons to build a sense of uplift into the teaching and learning environment. Uplift is also a practice of EDgility.&lt;/p&gt;
&lt;p&gt;Once every week or so I meet with each student group during class and do a five-minute reflection (still short, but more in-depth than the one-minute check-ins) and we review more questions.  This more in-depth reflection also seems to be important and is where students really start to cultivate confidence in their self-regulation.&lt;/p&gt;
&lt;p&gt;These many small reflections encourage adaptability. With time students get good at reflection and self-regulation. At this point the students are ready to guide their reflections and self-regulation.&lt;/p&gt;
&lt;p&gt;Once students have gotten to the point where they are self-reflecting and self-correcting, the students are well on their way with an Agile-Mindset and as self-regulated learners! In my mind, this is a very life-worthy skill.&lt;/p&gt;
&lt;p&gt;Note: Be prepared to be flexible and work with each group differently to meet their needs, different students and groups take longer or shorter to self-reflect and self-regulate. Creating a safe environment where exploration, success and progress are called out and celebrated - is critical, the students have plenty of other classes where correction and short-comings as seen by others (usually the teacher) is called out.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rails 6.1 with TailwindCSS 2.0 and AlpineJS</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_1_tailwind_2_0_alpinejs/</link>
      <pubDate>Thu, 10 Sep 2020 02:46:07 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_1_tailwind_2_0_alpinejs/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;TailwindCSS is a very flexible CSS framework and makes it easy to customize unique web pages and animations.&lt;/p&gt;
&lt;p&gt;Unfortunately, with Rails its a bit tricky to install and configure with Rails Standards.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TailwindCSS 2.0 expects PostCSS 8 and Rails Webpacker uses PostCSS 7 (for now)&lt;/li&gt;
&lt;li&gt;TailwindCSS 2.0 expects AlpineJS, React or Vue &amp;ndash; by default Rails uses StimulusJS (although you can additionally install AlpineJS)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;rails-setup&#34;&gt;Rails Setup&lt;/h1&gt;
&lt;p&gt;I am assuming you have followed the Rails setup described at: 
&lt;a href=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the end, I feel like its easier / better to use tailwindcss with AlpineJS since that is how it evolved and lots of Internet resources are available for that.&lt;/p&gt;
&lt;h2 id=&#34;install-tailwind-css-20&#34;&gt;Install Tailwind CSS 2.0&lt;/h2&gt;
&lt;h3 id=&#34;tailwind-css-20-install&#34;&gt;Tailwind CSS 2.0 Install&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://tailwindcss.com/docs&#34;&gt;https://tailwindcss.com/docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Start by installing the tailwindcss compatible with postcss7 (necessary until rails-webpacker updates to postcss8) &amp;ndash; with or without upgrading webpacker the following should work:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn add tailwindcss@latest postcss@latest autoprefixer@latest

# if you get this error: Error: PostCSS plugin tailwindcss requires PostCSS 8. use:
# yarn add tailwindcss@npm:@tailwindcss/postcss7-compat postcss@^7 autoprefixer@^9
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now install AlpineJS (its easier to use AlpineJS with tailwind but Stimulus works too - just need to do it all yourself - alpine and stimulus playwell together in Rails).  Add alpine turbo drive adapter so that the AlpineJS effects work even AFTER clicking on a link!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn add alpinejs
yarn add alpine-turbo-drive-adapter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now create the tailwind config file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npx tailwindcss init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now config tailwind:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# tailwind.config.js
module.exports = {
  purge: [
    &#39;./app/**/*/*.html.erb&#39;,
    &#39;./app/helpers/**/*/*.rb&#39;,
    &#39;./app/javascript/**/*/*.js&#39;,
    &#39;./app/javascript/**/*/*.vue&#39;,
    &#39;./app/javascript/**/*/*.react&#39;
  ],
  darkMode: false, // or &#39;media&#39; or &#39;class&#39;
  theme: {
    extend: {},
  },
  variants: {
    extend: {},
  },
  plugins: [
    // not needed here ?
    // require(&#39;@tailwindcss/forms&#39;),
  ],
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;tell &lt;code&gt;postcss.config.js&lt;/code&gt; about tailwind:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* postcss.config.js */
module.exports = {
  plugins: [
    require(&amp;quot;tailwindcss&amp;quot;)(&amp;quot;./tailwind.config.js&amp;quot;),
    require(&amp;quot;postcss-import&amp;quot;),
    require(&amp;quot;postcss-flexbugs-fixes&amp;quot;),
    require(&amp;quot;postcss-preset-env&amp;quot;)({
      autoprefixer: {
        flexbox: &amp;quot;no-2009&amp;quot;,
      },
      stage: 3,
    }),
  ],
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create application.scss&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir app/javascript/stylesheets
touch app/javascript/stylesheets/application.scss
cat &amp;lt;&amp;lt;EOF &amp;gt;app/javascript/stylesheets/application.scss
/* app/javascript/stylesheets/application.scss */
@import &amp;quot;tailwindcss/base&amp;quot;;
@import &amp;quot;tailwindcss/components&amp;quot;;
@import &amp;quot;tailwindcss/utilities&amp;quot;;

/* Add custom CSS here */
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;import tailwind into &lt;code&gt;application.js&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* app/javascript/packs/application.js */
import Rails from &amp;quot;@rails/ujs&amp;quot;
import &amp;quot;@hotwired/turbo-rails&amp;quot;
import * as ActiveStorage from &amp;quot;@rails/activestorage&amp;quot;
import &amp;quot;channels&amp;quot;

// import alpinejs and its necessary rails adaptation
import &#39;alpine-turbo-drive-adapter&#39;
require(&amp;quot;alpinejs&amp;quot;)

// import tailwind into javascript
import &amp;quot;../stylesheets/application.scss&amp;quot;

Rails.start()
ActiveStorage.start()

import &amp;quot;controllers&amp;quot;

require(&amp;quot;trix&amp;quot;)
require(&amp;quot;@rails/actiontext&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&amp;rsquo;s great to get samples from &lt;a href=&#34;https://tailwindui.com&#34;&gt;https://tailwindui.com&lt;/a&gt; (&amp;amp; other places) - USE THE INSPECTOR to copy the HTML (this will copy the AlpineJS settings too) - the standard copy HTML button requires you to add the JS on your own.&lt;/p&gt;
&lt;p&gt;create a navbar:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch app/views/layouts/_navbar.html.erb
cat &amp;lt;&amp;lt;EOF &amp;gt;app/views/layouts/_navbar.html.erb
&amp;lt;nav x-data=&amp;quot;{ open: false }&amp;quot; class=&amp;quot;bg-gray-800&amp;quot;&amp;gt;
  &amp;lt;!-- NavBar here --&amp;gt;
&amp;lt;/nav&amp;gt;
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create a footer:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- app/views/layouts/_footer.html.erb --&amp;gt;
&amp;lt;footer class=&amp;quot;bg-gray-50&amp;quot; aria-labelledby=&amp;quot;footerHeading&amp;quot;&amp;gt;
  &amp;lt;h2 id=&amp;quot;footerHeading&amp;quot; class=&amp;quot;sr-only&amp;quot;&amp;gt;Company&amp;lt;/h2&amp;gt;
  &amp;lt;div class=&amp;quot;max-w-md mx-auto pt-12 px-4 sm:max-w-7xl sm:px-6 lg:pt-16 lg:px-8&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;xl:grid xl:grid-cols-3 xl:gap-8&amp;quot;&amp;gt;
      Some Footer Info
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;mt-12 border-t border-gray-200 py-8&amp;quot;&amp;gt;
      &amp;lt;p class=&amp;quot;text-base text-gray-400 xl:text-center&amp;quot;&amp;gt;
        &amp;amp;copy; 2020 Company, Inc. All rights reserved.
      &amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/footer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Update the landing page:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- app/views/landing/index.html.erb --&amp;gt;
&amp;lt;!-- landing page here --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;application.html.erb&lt;/code&gt; needs to import the javascript stylesheet and the navbar&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- app/views/layouts/application.html.erb --&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Vivers&amp;lt;/title&amp;gt;
  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt;
  &amp;lt;%= csrf_meta_tags %&amp;gt;
  &amp;lt;%= csp_meta_tag %&amp;gt;

  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://rsms.me/inter/inter.css&amp;quot;&amp;gt;
  &amp;lt;%= stylesheet_link_tag &#39;application&#39;, media: &#39;all&#39; %&amp;gt;
  &amp;lt;%= stylesheet_pack_tag &#39;application&#39;, media: &#39;all&#39; %&amp;gt;
  &amp;lt;%= javascript_pack_tag &#39;application&#39; %&amp;gt;
  &amp;lt;%= yield :head %&amp;gt;
  &amp;lt;%= turbo_include_tags %&amp;gt;
  &amp;lt;%# stimulus_include_tags %&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;div class=&amp;quot;pb-32&amp;quot;&amp;gt;
      &amp;lt;%= render &#39;layouts/navbar&#39; %&amp;gt;
      &amp;lt;header class=&amp;quot;py-10&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;max-w-9xl mx-auto px-4 sm:px-6 lg:px-8&amp;quot;&amp;gt;
          &amp;lt;p class=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;
          &amp;lt;p class=&amp;quot;alert&amp;quot;&amp;gt;&amp;lt;%= alert %&amp;gt;&amp;lt;/p&amp;gt;
          &amp;lt;h1 class=&amp;quot;text-3xl font-bold&amp;quot;&amp;gt;
            Dashboard
          &amp;lt;/h1&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/header&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;main class=&amp;quot;-mt-32&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;max-w-9xl mx-auto pb-12 px-4 sm:px-6 lg:px-8&amp;quot;&amp;gt;
        &amp;lt;%= yield %&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/main&amp;gt;
    &amp;lt;%= render &#39;layouts/footer&#39; %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You may need to want rails with both (to increase reload speed after changes &amp;ndash; but &lt;code&gt;bin/rails s&lt;/code&gt; is enough):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bin/rails s
# runnding the following in a separate window tends to speed CSS / JS recompilation
./bin/webpack-dev-server
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;install-tailwind-svg-icons&#34;&gt;Install Tailwind SVG Icons&lt;/h2&gt;
&lt;p&gt;You can embed the Icon directly into the View - downloading from:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://heroicons.dev/&#34;&gt;https://heroicons.dev/&lt;/a&gt;
&lt;a href=&#34;https://heroicons.com/&#34;&gt;https://heroicons.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However, you can also use a gem and add flexibility:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/bharget/heroicon&#34;&gt;https://github.com/bharget/heroicon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In gemfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gem &amp;quot;heroicon&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From CLI:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bundle
rails g heroicon:install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Usage:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;%= heroicon &amp;quot;search&amp;quot; %&amp;gt;
&amp;lt;%= heroicon &amp;quot;search&amp;quot;, variant: :outline %&amp;gt;
&amp;lt;%= heroicon &amp;quot;search&amp;quot;, options: { class: &amp;quot;text-primary-500&amp;quot; } %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or
&lt;a href=&#34;https://github.com/andrewjmead/rails_heroicons/&#34;&gt;https://github.com/andrewjmead/rails_heroicons/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Gemfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gem &#39;rails_heroicons&#39;, &#39;~&amp;gt; 1.0.1&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CLI&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bundle
gem install rails_heroicons
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Usage:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;%= heroicon(&#39;user&#39;) %&amp;gt;
&amp;lt;%= heroicon(&#39;user&#39;, class_name: &#39;icon icon-large&#39;) %&amp;gt;
&amp;lt;%= heroicon(&#39;user&#39;, style: :outline, class_name: &#39;icon icon-large&#39;) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The classes magically update the SVG embedded using:&lt;/p&gt;
&lt;h3 id=&#34;use-svg-images--icons-in-rails----heroicons-or-zondicons&#34;&gt;USE SVG Images / Icons in Rails &amp;ndash; HeroIcons or ZondIcons&lt;/h3&gt;
&lt;p&gt;Downloaded SVG images in Rails:
&lt;a href=&#34;https://heroicons.com/&#34;&gt;https://heroicons.com/&lt;/a&gt;
&lt;a href=&#34;https://heroicons.dev/&#34;&gt;https://heroicons.dev/&lt;/a&gt;
&lt;a href=&#34;http://www.zondicons.com/icons.html&#34;&gt;http://www.zondicons.com/icons.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OR download the Icons and use the gem:
&lt;a href=&#34;https://github.com/jamesmartin/inline_svg&#34;&gt;https://github.com/jamesmartin/inline_svg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Gemfile:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gem &#39;inline_svg&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CLI:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bundle
gem install inline_svg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;USAGE:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Sprockets
inline_svg_tag(file_name, options={})

# Webpacker
inline_svg_pack_tag(file_name, options={})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OR without gem:&lt;/p&gt;
&lt;p&gt;you can embed the SVG directly into rails using:
&lt;a href=&#34;https://dev.to/hslzr/using-inline-svgs-with-rails-3khb&#34;&gt;https://dev.to/hslzr/using-inline-svgs-with-rails-3khb&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;reference-articles&#34;&gt;Reference Articles&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://davidteren.medium.com/tailwindcss-2-0-with-rails-6-1-postcss-8-0-9645e235892d&#34;&gt;https://davidteren.medium.com/tailwindcss-2-0-with-rails-6-1-postcss-8-0-9645e235892d&lt;/a&gt;
&lt;a href=&#34;https://web-crunch.com/posts/how-to-install-tailwind-css-2-using-ruby-on-rails&#34;&gt;https://web-crunch.com/posts/how-to-install-tailwind-css-2-using-ruby-on-rails&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Install and Configure Rails</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_install_n_configure/</link>
      <pubDate>Thu, 10 Sep 2020 01:46:07 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_install_n_configure/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;To document is mostly for me &amp;ndash; at least until I automate my setup defaults. However, I am glad to share and get ideas from others too.  I will build a little calendar app I use with friends (it&amp;rsquo;s focused on being mobile friendly and easy to use &amp;ndash; not a full featured calendar).&lt;/p&gt;
&lt;h1 id=&#34;rails-setup&#34;&gt;Rails Setup&lt;/h1&gt;
&lt;p&gt;Taken from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/alxndr/7569551&#34;&gt;https://gist.github.com/alxndr/7569551&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.codewithjason.com/rails-integration-tests-rspec-capybara/&#34;&gt;https://www.codewithjason.com/rails-integration-tests-rspec-capybara/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackernoon.com/how-to-build-awesome-integration-tests-with-capybara-j9333y68&#34;&gt;https://hackernoon.com/how-to-build-awesome-integration-tests-with-capybara-j9333y68&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;create-the-project&#34;&gt;create the project:&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# -T - skips tests;              I like rspec
# -d postgresql;                 I like postgresql best for the db
# --skip-spring --skip-listen;   Spring caches and doesn&#39;t notice all changes (even after rails restart)
#                                I have lost several hours not realizing Spring wasn&#39;t seeing my changes

rails new calendar -T -d postgresql --webpack=stimulus --skip-turbolinks --skip-spring

cd calendar

# in some cases you may have serveral bundlers or need to create binstubs
# gem install bundler:2.1.4
# rails app:update:bin
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;update-the-readme-and-initialize-git&#34;&gt;update the README and initialize Git&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;initial commit&amp;quot;
git remote add origin git@gitlab.com:btihen/calendar.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;add-extra-gems-for-this-project&#34;&gt;Add extra Gems for this project&lt;/h2&gt;
&lt;p&gt;add rspec, devise, factory_bot and stimulus_reflex&lt;/p&gt;
&lt;p&gt;Execute the following command (or add to the Gemfile)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt;EOF &amp;gt;&amp;gt; Gemfile
# Project Gems
##############

# FRONT END
###########
gem &amp;quot;hotwire-rails&amp;quot;                # probably not needed as of Rails 7.x
# gem &amp;quot;stimulus_reflex&amp;quot;, &amp;quot;~&amp;gt; 3.3&amp;quot;  # probably superseeded by hotwire-rails

# BACK END
##########
gem &#39;devise&#39;

# DEV / TESTS
#############
group :development, :test do
  gem &#39;awesome_print&#39;        # formats pry (&amp;amp; irb outputs into readable formats)

  gem &#39;pry-rails&#39;
  gem &#39;pry-byebug&#39;           # Adds byebug&#39;s step debugging and stack navigation
  # gem &#39;pry-debugger&#39;       # adds step, continue, etc (alternative to pry-byebug)
  gem &#39;pry-stack_explorer&#39;   # easy stack traces when debugging
  # more pry gems if needed at: https://spin.atomicobject.com/2012/08/06/live-and-let-pry/

  gem &#39;factory_bot_rails&#39;
  gem &#39;faker&#39;

  # gem &#39;rspec-rails&#39;
  gem &#39;capybara&#39;
  gem &#39;rspec-rails&#39;, &#39;~&amp;gt; 4.0.0&#39;

  # lets spring work with rspec
  gem &#39;spring-commands-rspec&#39;
end

group :test do
  # easier tests (inside rspec)
  gem &#39;shoulda-matchers&#39;

  # cucumber can test emails (rspec too?)
  # gem &#39;email_spec&#39;

  # code coverage
  gem &#39;simplecov&#39;
  gem &#39;simplecov-console&#39;
end
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;now-uncomment-a-few-gems-in-the-original-gemfile&#34;&gt;Now uncomment a few Gems in the Original Gemfile&lt;/h2&gt;
&lt;p&gt;Uncomment the following to ensure ActionText and Stimulus Refelx (work properly).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gem &#39;image_processing&#39;, &#39;~&amp;gt; 1.2&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;is needed by Active Storage (ActionText needs Active Storage)&lt;/p&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gem &#39;redis&#39;, &#39;~&amp;gt; 4.0&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;is needed by Stimulus Reflex (which uses Action Channels) to manage WebSockets&lt;/p&gt;
&lt;h2 id=&#34;install-and-configure-base-gems&#34;&gt;Install and configure base gems&lt;/h2&gt;
&lt;p&gt;now run:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bundle install&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;to install all the new gems and create a &lt;code&gt;Gemfile.lock&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;install-activestorage-and-actiontext&#34;&gt;Install ActiveStorage and ActionText&lt;/h2&gt;
&lt;p&gt;run the following commands:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# bundle exec rails webpacker:install
# bundle exec rails webpacker:install:stimulus
bundle exec rails active_storage:install
bundle exec rails action_text:install
bin/rails hotwire:install
bin/rails g devise:install
bin/rails g rspec:install
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;rspec-config-files&#34;&gt;Rspec: Config Files&lt;/h2&gt;
&lt;h3 id=&#34;create-needed-folders-for-our-config&#34;&gt;Create needed folders for our config&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;mkdir spec/features

# a place to put test helper code
mkdir spec/support
mkdir spec/support/features
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;rspec-config-file-specrails_helperrb&#34;&gt;Rspec Config file &lt;code&gt;spec/rails_helper.rb&lt;/code&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;To enable integration tests with rspec add: &lt;code&gt;require &#39;capybara/rspec&#39;&lt;/code&gt; below &lt;code&gt;require &#39;rspec/rails&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To load Test helper code add: &lt;code&gt;Dir[Rails.root.join(&amp;quot;spec/support/**/*.rb&amp;quot;)].each { |file| require file }&lt;/code&gt; below &lt;code&gt;require &#39;capybara/rspec&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;just after the ActiveRecord config and before RSpec.configure block add:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;Capybara.register_driver :selenium_chrome do |app|
  Capybara::Selenium::Driver.new(app, browser: :chrome)
end
Capybara.javascript_driver = :selenium_chrome
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Add the FactoryBot config in the section with:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;RSpec.configure do |config|
  # ...

  # support for Factory Bot
  config.include FactoryBot::Syntax::Methods

  # setup devise login helpers in Rspec
  config.include Devise::Test::IntegrationHelpers, type: :request

  # allows us for force session logouts (im feature tests)
  config.include Warden::Test::Helpers
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;finally at the end of the file add support for shoulda matchers with:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;Shoulda::Matchers.configure do |config|
  config.integrate do |with|
    with.test_framework :rspec
    with.library :rails
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOW &lt;code&gt;spec/rails_helper.rb&lt;/code&gt; should look like (its long, sometimes the full context is clearer):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# This file is copied to spec/ when you run &#39;rails generate rspec:install&#39;
require &#39;spec_helper&#39;
ENV[&#39;RAILS_ENV&#39;] ||= &#39;test&#39;
require File.expand_path(&#39;../config/environment&#39;, __dir__)
# Prevent database truncation if the environment is production
abort(&amp;quot;The Rails environment is running in production mode!&amp;quot;) if Rails.env.production?
require &#39;rspec/rails&#39;
# Add additional requires below this line. Rails is not loaded until this point!

# enables integration/feature tests using rspec
require &#39;capybara/rspec&#39;

# loads custom helper test code
Dir[Rails.root.join(&amp;quot;spec/support/**/*.rb&amp;quot;)].each { |file| require file }
# or you could use:
# Dir[Rails.root.join(&#39;spec&#39;, &#39;support&#39;, &#39;**&#39;, &#39;*.rb&#39;)].sort.each { |f| require f }

# Checks for pending migrations and applies them before tests are run.
# If you are not using ActiveRecord, you can remove these lines.
begin
  ActiveRecord::Migration.maintain_test_schema!
rescue ActiveRecord::PendingMigrationError =&amp;gt; e
  puts e.to_s.strip
  exit 1
end

# configure capybara integration tests
Capybara.register_driver :selenium_chrome do |app|
  Capybara::Selenium::Driver.new(app, browser: :chrome)
end
Capybara.javascript_driver = :selenium_chrome

RSpec.configure do |config|
  # Remove this line if you&#39;re not using ActiveRecord or ActiveRecord fixtures
  config.fixture_path = &amp;quot;#{::Rails.root}/spec/fixtures&amp;quot;

  # If you&#39;re not using ActiveRecord, or you&#39;d prefer not to run each of your
  # examples within a transaction, remove the following line or assign false
  # instead of true.
  config.use_transactional_fixtures = true

  # You can uncomment this line to turn off ActiveRecord support entirely.
  # config.use_active_record = false

  # RSpec Rails can automatically mix in different behaviours to your tests
  # based on their file location, for example enabling you to call `get` and
  # `post` in specs under `spec/controllers`.
  #
  # You can disable this behaviour by removing the line below, and instead
  # explicitly tag your specs with their type, e.g.:
  #
  #     RSpec.describe UsersController, type: :controller do
  #       # ...
  #     end
  #
  # The different available types are documented in the features, such as in
  # https://relishapp.com/rspec/rspec-rails/docs
  config.infer_spec_type_from_file_location!

  # Filter lines from Rails gems in backtraces.
  config.filter_rails_from_backtrace!
  # arbitrary gems may also be filtered via:
  # config.filter_gems_from_backtrace(&amp;quot;gem name&amp;quot;)

  # support for Factory Bot
  config.include FactoryBot::Syntax::Methods

  # setup devise login helpers in Rspec (login helpers)
  config.include Devise::Test::IntegrationHelpers, type: :request

  # allows us for force session logouts (im feature tests)
  config.include Warden::Test::Helpers
end

Shoulda::Matchers.configure do |config|
  config.integrate do |with|
    with.test_framework :rspec
    with.library :rails
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;create--test-a-landing-page&#34;&gt;Create / Test a landing page&lt;/h1&gt;
&lt;p&gt;A simple config test before we setup devise (authentication).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Generate a page&lt;/strong&gt; &amp;ndash; I don&amp;rsquo;t (generally) use helpers nor contoller or view specs - so I&amp;rsquo;ll create the landing page using the following generator:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;rails g controller Landing index --no-helper --no-assets --no-controller-specs --no-view-specs
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;Update Routes&lt;/strong&gt; &lt;code&gt;config/routes.rb&lt;/code&gt; with:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;  get &#39;landing/index&#39;
  root to: &amp;quot;landing#index&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;Add Hidden Test Content&lt;/strong&gt; to simplify testing add:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;p hidden id=&#39;landing_index&#39;&amp;gt;Landing Index&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Request test:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;# spec/requests/landing_request_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &amp;quot;Landings&amp;quot;, type: :request do

  describe &amp;quot;GET /index&amp;quot; do
    it &amp;quot;returns http success&amp;quot; do
      get &amp;quot;/landing/index&amp;quot;
      expect(response).to have_http_status(:success)

      expect(response.body).to include(&amp;quot;&amp;lt;p hidden id=&#39;landing_index&#39;&amp;gt;Landing Index&amp;lt;/p&amp;gt;&amp;quot;)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Feature Test (to be sure they are working too)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;# spec/features/landing_page_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &#39;Landing Page Works without a login&#39;, type: :feature do
  scenario &#39;Visit landing Page&#39; do
    visit root_path

    page_tag = find(&#39;p#landing_index&#39;, text: &#39;Landing Index&#39;, visible: false)
    expect(page_tag).to be_truthy
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Test and commit&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rake db:migrate
bundle exec rspec
git add .
git commit -m &amp;quot;rspec: unit and feature tests configured and landing page works&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;config-hotwire&#34;&gt;Config Hotwire&lt;/h3&gt;
&lt;p&gt;Ensure the  In the end the &lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt; looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;

&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Tweets&amp;lt;/title&amp;gt;
  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt;
  &amp;lt;%= csrf_meta_tags %&amp;gt;
  &amp;lt;%= csp_meta_tag %&amp;gt;

  &amp;lt;!-- Bootstrap 4 if interested
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css&amp;quot; integrity=&amp;quot;sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;
  --&amp;gt;
  &amp;lt;%= stylesheet_link_tag &#39;application&#39;, media: &#39;all&#39; %&amp;gt;
  &amp;lt;%= javascript_pack_tag &#39;application&#39; %&amp;gt;
  &amp;lt;%= yield :head %&amp;gt;
  &amp;lt;%= turbo_include_tags %&amp;gt;
  &amp;lt;%# stimulus_include_tags %&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
  &amp;lt;p class=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;p class=&amp;quot;alert&amp;quot;&amp;gt;&amp;lt;%= alert %&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;%= yield %&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;devise--user-config&#34;&gt;Devise / User Config&lt;/h3&gt;
&lt;p&gt;Configure dev email for devise:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# config/environments/development.rb:
  config.action_mailer.default_url_options = { host: &#39;localhost&#39;, port: 3000 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create the user and migration&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rails g devise user
# if you will make a custom login (probably needed to look nice)
# rails g devise:views
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Adjust the migration:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class DeviseCreateUsers &amp;lt; ActiveRecord::Migration[6.1]
  def change
    create_table :users do |t|
      ## Database authenticatable
      t.string :email,              null: false, default: &amp;quot;&amp;quot;
      t.string :encrypted_password, null: false, default: &amp;quot;&amp;quot;

      ## Recoverable
      t.string   :reset_password_token
      t.datetime :reset_password_sent_at

      ## Rememberable
      t.datetime :remember_created_at

      ## Trackable
      t.integer  :sign_in_count, default: 0, null: false
      t.datetime :current_sign_in_at
      t.datetime :last_sign_in_at
      t.string   :current_sign_in_ip
      t.string   :last_sign_in_ip

      ## Confirmable
      # t.string   :confirmation_token
      # t.datetime :confirmed_at
      # t.datetime :confirmation_sent_at
      # t.string   :unconfirmed_email # Only if using reconfirmable

      ## Lockable
      # t.integer  :failed_attempts, default: 0, null: false # Only if lock strategy is :failed_attempts
      # t.string   :unlock_token # Only if unlock strategy is :email or :both
      # t.datetime :locked_at

      t.timestamps null: false
    end

    add_index :users, :email,                unique: true
    add_index :users, :reset_password_token, unique: true
    # add_index :users, :confirmation_token,   unique: true
    # add_index :users, :unlock_token,         unique: true
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Route file should now look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Rails.application.routes.draw do
  devise_for :users
  get &#39;landing/index&#39;
  root to: &amp;quot;landing#index&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will update the user model with password complexity validation:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class User &amp;lt; ApplicationRecord
  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable
  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :validatable

  validate :password_complexity

  def password_complexity
    # Regexp extracted from https://stackoverflow.com/questions/19605150/regex-for-password-must-contain-at-least-eight-characters-at-least-one-number-a
    return if password.blank? || password =~ /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&amp;amp;*-]).{10,70}$/

    errors.add :password, &#39;Complexity requirement not met. Length should be 10-70 characters and include: 1 uppercase, 1 lowercase, 1 digit and 1 special character&#39;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create the user Factory (which also uses Faker):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# spec/factories/users.rb
FactoryBot.define do
  factory :user do
    email       { Faker::Internet.safe_email }  # probably need to add index for uniqueness
    password    { Faker::Internet.password(min_length: 10, max_length: 50, mix_case: true, special_characters: true) }
  end
  trait :invalid do
    email       { Faker::Internet.username }
    password    { &amp;quot;hoi&amp;quot; }
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create the user spec (uses FactoryBot &amp;amp; Shoulda):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# spec/models/user_spec.rb
require &#39;rails_helper&#39;

RSpec.describe User, type: :model do
  describe &amp;quot;Factory with&amp;quot; do

    context &amp;quot;default parameters&amp;quot; do
      it &amp;quot;creates a valid model&amp;quot; do
        user = FactoryBot.build :user
        expect(user.valid?).to be_truthy
      end
    end

    context &amp;quot;invalid parameters&amp;quot; do
      it &amp;quot;fails model validation&amp;quot; do
        user = FactoryBot.build :user, :invalid
        expect(user.valid?).to be_falsey
      end
    end
  end

  context &amp;quot;ActiveRecord / DB Tests&amp;quot; do
    it { should have_db_column(:email) }
    it { should have_db_index(:email).unique }
  end

  context &amp;quot;ActiveModel / Validations&amp;quot; do
    it &amp;quot;detects a bad email&amp;quot; do
      user = FactoryBot.build :user, email: &amp;quot;bill&amp;quot;
      expect(user.valid?).to be_falsey
      expect(user.errors.messages[:email]).to match_array [&amp;quot;is invalid&amp;quot;]
    end
    it &amp;quot;detects a non-compliant password&amp;quot; do
      user = FactoryBot.build :user, password: &amp;quot;hoi&amp;quot;
      expect(user.valid?).to be_falsey
      expect(user.errors.messages[:password]).to match_array [&amp;quot;is too short (minimum is 6 characters)&amp;quot;,
                                                              &amp;quot;Complexity requirement not met. Length should be 10-70 characters and include: 1 uppercase, 1 lowercase, 1 digit and 1 special character&amp;quot;]
    end
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;test-setup-and-commit-when-green&#34;&gt;Test setup and commit when green:&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;rake db:migrate
bundle exec rspec
git add .
git commit -m &amp;quot;devise configured, FactoryBot, Faker and Shoulda working&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-user-landing--profile-page-autoredirect&#34;&gt;create user landing / profile page (autoredirect)&lt;/h2&gt;
&lt;h2 id=&#34;test-restricted-logins&#34;&gt;Test restricted logins&lt;/h2&gt;
&lt;p&gt;a basic login feature test might look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;require &#39;rails_helper&#39;

RSpec.describe &#39;Users Login&#39;, type: :feature do
  let(:user)  { FactoryBot.create :user }
  after :each do
    Warden.test_reset!
  end
  describe &#39;user logs in successfully&#39; do
    scenario &#39;and is redirected to user home page&#39; do
      user_log_in(user)
      expect(current_path).to eql(auth_user_root_path)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;install-fonts--icons&#34;&gt;Install Fonts / Icons&lt;/h2&gt;
&lt;h3 id=&#34;fontawesome-good-with-bulma&#34;&gt;Fontawesome (Good with Bulma)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://kelishrestha.medium.com/how-to-install-font-awesome-with-yarn-in-rails-6-0-c2506543c13d&#34;&gt;https://kelishrestha.medium.com/how-to-install-font-awesome-with-yarn-in-rails-6-0-c2506543c13d&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn add @fortawesome/fontawesome-free
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update application.scss&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$fa-font-path: &#39;@fortawesome/fontawesome-free/webfonts&#39;;
@import &#39;@fortawesome/fontawesome-free/scss/fontawesome&#39;;
@import &#39;@fortawesome/fontawesome-free/scss/solid&#39;;
@import &#39;@fortawesome/fontawesome-free/scss/regular&#39;;
@import &#39;@fortawesome/fontawesome-free/scss/brands&#39;;
@import &#39;@fortawesome/fontawesome-free/scss/v4-shims&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update application.js&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import &amp;quot;@fortawesome/fontawesome-free/js/all&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or via cdn: vhttps://fontawesome.com/how-to-use/customizing-wordpress/snippets/setup-cdn-webfont
add to &lt;code&gt;application.html.erb&lt;/code&gt; ()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1&amp;quot;&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot;
      href=&amp;quot;https://pro.fontawesome.com/releases/v5.10.0/css/all.css&amp;quot;
      integrity=&amp;quot;sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p&amp;quot;
      crossorigin=&amp;quot;anonymous&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;install-bulma-a-css-framework-if-desired&#34;&gt;Install BULMA: a CSS Framework (if desired)&lt;/h2&gt;
&lt;p&gt;Bulma is a relatively new CSS framework. It feels like a light, streamlined alternative to Bootstrap. Bulma doesnât include any JavaScript at all. This means some stuff just wonât work out of the box. For example, the burger menu wonât toggle without a little JavaScript help. Weâll get to that later.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn add bulma
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Open app/javascript/packs/application.js and add the following to the top:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import &#39;../styles&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create app/javascript/styles.scss:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@import &#39;~bulma/bulma&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;customize bulma by adding to the top of &lt;code&gt;styles.scss&lt;/code&gt; file: &lt;a href=&#34;https://stackoverflow.com/questions/48809328/bulma-navbar-breakpoint&#34;&gt;https://stackoverflow.com/questions/48809328/bulma-navbar-breakpoint&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@import &amp;quot;~bulma/sass/utilities/initial-variables.sass&amp;quot;;
$navbar-breakpoint: $tablet;
@import &amp;quot;~bulma/bulma.sass&amp;quot;;
@import &#39;~bulma/bulma&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;choices are: $desktop (default 960px), $tablet (769px), $widescreen (1152px), $fullhd (1344px)
variable defaults: &lt;a href=&#34;https://bulma.io/documentation/customize/variables/&#34;&gt;https://bulma.io/documentation/customize/variables/&lt;/a&gt;
variables that can be set: &lt;a href=&#34;https://bulma-customizer.bstash.io&#34;&gt;https://bulma-customizer.bstash.io&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;a-sample-bulma-navbar&#34;&gt;A sample Bulma navbar&lt;/h3&gt;
&lt;p&gt;Open app/views/layouts/application.html.erb and add the following just above the yield line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;%= render &#39;layouts/navbar&#39; %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create app/views/layouts/_navbar.html.erb:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
  &amp;lt;nav class=&amp;quot;navbar&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;navbar-brand&amp;quot;&amp;gt;
      &amp;lt;a class=&amp;quot;navbar-item&amp;quot; href=&amp;quot;#&amp;quot;&amp;gt;
        &amp;lt;img src=&amp;quot;https://bulma.io/images/bulma-logo.png&amp;quot; width=&amp;quot;112&amp;quot; height=&amp;quot;28&amp;quot;&amp;gt;
      &amp;lt;/a&amp;gt;
      &amp;lt;div class=&amp;quot;navbar-burger burger&amp;quot; data-target=&amp;quot;main-nav&amp;quot;&amp;gt;
        &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;
        &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;
        &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div id=&amp;quot;main-nav&amp;quot; class=&amp;quot;navbar-menu&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;navbar-start&amp;quot;&amp;gt;
        &amp;lt;%= link_to root_url, class: &#39;navbar-item&#39; do %&amp;gt;
          &amp;lt;span class=&amp;quot;icon&amp;quot;&amp;gt;
            &amp;lt;i class=&amp;quot;far fa-gem&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
          &amp;lt;/span&amp;gt;
          &amp;lt;span&amp;gt;Home&amp;lt;/span&amp;gt;
        &amp;lt;% end %&amp;gt;
        &amp;lt;%= link_to home_about_url, class: &#39;navbar-item&#39; do %&amp;gt;
          &amp;lt;span class=&amp;quot;icon&amp;quot;&amp;gt;
            &amp;lt;i class=&amp;quot;far fa-star&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
          &amp;lt;/span&amp;gt;
          &amp;lt;span&amp;gt;About&amp;lt;/span&amp;gt;
        &amp;lt;% end %&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/nav&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is basically copied from the Bulma examples. It is a basic nav bar with two menu items; Home and About.&lt;/p&gt;
&lt;p&gt;We now have all the pieces in place and can start wiring up our Stimulus controllers.&lt;/p&gt;
&lt;p&gt;Create a Stimulus controller
To keep this example simple, weâre going to create a single controller which weâll attach to the body tag in the main layout. This controller will be responsible for rendering the Font Awesome icons (as described in a previous post) as well as handling our Bulma burger menu.&lt;/p&gt;
&lt;p&gt;Create app/javascript/controllers/main_controller.js:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import fontawesome from &#39;@fortawesome/fontawesome&#39;
import icons from &#39;@fortawesome/fontawesome-free-regular&#39;
import { Controller } from &#39;stimulus&#39;
export default class extends Controller {
  initialize() {
    fontawesome.library.add(icons)
  }
  connect() {
    fontawesome.dom.i2svg()

    // Get all &amp;quot;navbar-burger&amp;quot; elements
    var $navbarBurgers = Array.prototype.slice.call(document.querySelectorAll(&#39;.navbar-burger&#39;), 0);

    // Check if there are any navbar burgers
    if ($navbarBurgers.length &amp;gt; 0) {

      // Add a click event on each of them
      $navbarBurgers.forEach(function ($el) {
        $el.addEventListener(&#39;click&#39;, function () {

          // Get the target from the &amp;quot;data-target&amp;quot; attribute
          var target = $el.dataset.target;
          var $target = document.getElementById(target);

          // Toggle the class on both the &amp;quot;navbar-burger&amp;quot; and the &amp;quot;navbar-menu&amp;quot;
          $el.classList.toggle(&#39;is-active&#39;);
          $target.classList.toggle(&#39;is-active&#39;);

        });
      });
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This controller imports the icons from Font Awesome when initialize is called. Every time connect is called it renders the icons and then searches for navbar burgers to attach the appropriate click events on.&lt;/p&gt;
&lt;p&gt;Connect the controller
Now we want to connect the body tag to our controller using an HTML5 data attribute.&lt;/p&gt;
&lt;p&gt;Open &lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt; and add the following attribute to the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;body data-controller=&amp;quot;main&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now it should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/views/layouts/application.html.erb
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;

&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Tweets&amp;lt;/title&amp;gt;
  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt;
  &amp;lt;%= csrf_meta_tags %&amp;gt;
  &amp;lt;%= csp_meta_tag %&amp;gt;

  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css&amp;quot; integrity=&amp;quot;sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;
  &amp;lt;%= stylesheet_link_tag &#39;application&#39;, media: &#39;all&#39; %&amp;gt;
  &amp;lt;%= javascript_pack_tag &#39;application&#39; %&amp;gt;
  &amp;lt;%= yield :head %&amp;gt;
  &amp;lt;%= turbo_include_tags %&amp;gt;
  &amp;lt;%# stimulus_include_tags %&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body data-controller=&amp;quot;main&amp;quot;&amp;gt;
  &amp;lt;%= render &#39;layouts/navbar&#39; %&amp;gt;
  &amp;lt;p class=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;p class=&amp;quot;alert&amp;quot;&amp;gt;&amp;lt;%= alert %&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;%= yield %&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://blackninjadojo.com/css/bulma/2019/02/27/how-to-create-a-layout-for-your-rails-application-using-bulma.html&#34;&gt;https://blackninjadojo.com/css/bulma/2019/02/27/how-to-create-a-layout-for-your-rails-application-using-bulma.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;discourgaged---no-longer-necessary&#34;&gt;Discourgaged - no longer necessary:&lt;/h3&gt;
&lt;p&gt;If you plan to user database_cleaner &amp;ndash; then also see this article to finish your config:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@amliving/my-rails-rspec-set-up-6451269847f9&#34;&gt;https://medium.com/@amliving/my-rails-rspec-set-up-6451269847f9&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Value: Motivation and Knowledge with a Context</title>
      <link>https://btihen.me/post_edu/edgility_btihen_value/</link>
      <pubDate>Sat, 22 Aug 2020 14:05:18 +0200</pubDate>
      <guid>https://btihen.me/post_edu/edgility_btihen_value/</guid>
      <description>&lt;p&gt;I like to find ways to make the topic of study valuable - not to me, but to the students. I actually usually find that value requires a context or integration. If an engineer builds a more efficient transport boat, but the boat regularly sinks when sailing in wind, then the boat has little value despite its newly engineered efficiency. Similarly, student learning proceeds with value.&lt;/p&gt;
&lt;p&gt;Generally, I have found students will cultivate their own value when they have a choice in how they approach and apply the learning associated with a subject. In particular, students will find value when they can define their own goal consistent with the class agenda and ideally within a context that is valuable or interesting to others.&lt;/p&gt;
&lt;p&gt;To that end, I encourage students to pick their own learning goals within the open guidelines of the class. I generally ask them to choose their own backstory and context for each subject. For many teachers - and possibly for you, the readers - this may sound silly or like a waste of time. However, creating a backstory and context has many beneficial side effects: a) students have a goal that they chose themselves; b) students have their own context - many teenagers seem to enjoy creating a new experimental identity); and c) students research the broad aspects of a topic and to figure out what is most important in the areas that they find attractive. At this point, assuming the students have the feeling that they will be supported and can accomplish their goal, they have acquired their own value and context for the material and the project.&lt;/p&gt;
&lt;p&gt;This startup process includes the students learning some background about what they are learning without violating the principle of âcooking from day one.â Teenagers, if not overwhelmed by the idea, enjoy picking their own goals and exercising their indepence. As teachers, it is important to be flexible enough to allow goals that might be outside our teacher expectations, especially if the outcomes are valuable and still fit, perhaps more widely interpreted, with the learning goals of the course.&lt;/p&gt;
&lt;p&gt;However, startup with choice is not quite enough. Itâs not the whole story.&lt;/p&gt;
&lt;p&gt;Students must go deep enough in a subject so that they discover viable, but  competing, answers to the problems they are working on, so that they can explain why their solutions are defendable within their chosen context. For example, while collaborating with a biology teacher, we decided to combine biology and robotics and have the students build their own mini-robot gardeners to care for their plants over a three week holiday. A few students chose what they believed was the best watering strategy, but they didnât anticipate that the cleaning staff would  move their equipment during the break. The ensuing jiggling dislodged a few sensors, and some plants were flooded with water and drowned. Upon return they learned that âbestâ is only best if it includes planning for failures. We could have explained planning for failure to the students, but the natural consequences of a flood was a much better teacher and the real world consequences much more memorable.&lt;/p&gt;
&lt;p&gt;Basically, it is important to help ensure that students learn within a context with enough complexity so they learn to choose between multiple possible answers that will each have different strengths and weaknesses.&lt;/p&gt;
&lt;p&gt;Many students are not yet accustomed to the expectation of learning enough about a topic so that they understand its complexity and the context for when it is valuable and when it is not. Therefore, initially, it is usually helpful to have them work through small challenges in a supportive, low risk situation where mistakes and exploration is safe and expected. This creates an uplifting environment where learning is enjoyable and self-motivating. Without uplift, the engagement of value and self-motivation is challenging and the need for judgement increases (and starts a vicious cycle). See the 
&lt;a href=&#34;https://peakchallenges.ch/blog/edgility_pmagnuson_uplift&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Uplift blog&lt;/a&gt; for a further discussion.&lt;/p&gt;
&lt;p&gt;The depth of knowledge gained when students choose between viable alternatives they have discovered themselves seems surprisingly under-emphasized in schools, since in the professional world this is a basic expectation. We expect our bridges and buildings to do well in earthquakes, high winds, and high water while they also serve our daily needs well. We expect doctors to advise us or pick the best medication, based on our age, sickness, our expectation of quality of life during treatment. We can perhaps leverage value to expect more of our students, too.&lt;/p&gt;
&lt;p&gt;Learning value within a context is a very important life skill - not just an important academic skill.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Smallify to Learn Effectively</title>
      <link>https://btihen.me/post_edu/edgility_btihen_smallify/</link>
      <pubDate>Fri, 24 Jul 2020 14:05:38 +0200</pubDate>
      <guid>https://btihen.me/post_edu/edgility_btihen_smallify/</guid>
      <description>&lt;p&gt;As mentioned in the 
&lt;a href=&#34;https://peakchallenges.ch/blog/edgility_pmagnuson_transparency&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Transparency article&lt;/a&gt;, there is an important interaction between having the âbig pictureâ (having a goal and some expectations along the way) and knowing âwhat to do nextâ (a feeling of workability and progress). This article explores how to establish both by creating an effective self-guided learning strategy for students.&lt;/p&gt;
&lt;p&gt;In EDgility we encourage student self-determination. Student choice and understanding the big picture are critical components to cultivate self-determination. They need to understand the big picture in order to exercise real choice. To support them, I like to offer students projects with broad goals. The big general goal starts the process of smallifying, because they will have to smallify in order to make progress. The students first explore the field just enough to find ideas that interest them, to pick their own specific goal, and to find a purpose or context for that goal.  It is important at this stage that the studentâs goals already include a complication / design compromise consistent with the overall goal. For example, students may choose to build a cargo boat that saves energy, but it must also be stable in waves. Commercially, their boat is only better if it is effective at the overall goal (staying afloat) and good at a new specific goal (saving energy). Students must think broadly and understand the context of their project in actual use.&lt;/p&gt;
&lt;p&gt;This first step generally creates a lot of enthusiasm (and ideas) as the students create a storyline, a new identity, and an organization to support their mission. The story line and organization need to be attractive to them and others, both to support their motivation and to make for a good sales pitch at the end of the unit.&lt;/p&gt;
&lt;p&gt;Two classes that started with big goals that required smallifying into many workable steps were the âBoat Designâ and âRobot Gardenersâ classes.  Iâve written about those elsewhere, see e.g. 
&lt;a href=&#34;https://btihen.me/publication/ecis_designed_to_float_your_boat_article/&#34;&gt;boat design in ECIS Global Insights&lt;/a&gt; and 
&lt;a href=&#34;https://btihen.me/publication/las_spotlight_robot_gardener/&#34;&gt;Robot Gardeners in Spotlight&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The next step in smallifying is for the students to figure out the most important aspects needed to accomplish the big goals. I call this &lt;strong&gt;distilling&lt;/strong&gt; the essence of the topic in relation to their goal. For example, in the boat design class, all boat designs must understand buoyancy (flotation), and depending on the boat specialty and safety features, two or three other concepts will be important, i.e., students who choose to build a speedboat will need excellent fluid efficiency and perhaps also stability while turning. Learning to discover the important aspects of a large complex field and to find the critical aspects relating to oneâs goals is an important life skill in almost all aspects of life. It is, in fact, a skill that transcends the specific content of the class - and therefore lifeworthy.&lt;/p&gt;
&lt;p&gt;I give the students only a short amount of time to do these first two steps (perhaps one or two classes total). This prevents analysis paralysis. Besides, not having time to fully understand a field before starting gives the students permission to adjust as they explore their topic. Learning to manage and adjust projects as you learn and progress is known as &lt;strong&gt;agile management&lt;/strong&gt; - another useful life-skill in our quickly evolving world.&lt;/p&gt;
&lt;p&gt;At this point the students start the iterative smallification of concrete actionable steps to learn and progress toward the goal. These small steps are exploratory and safe. Safe means that the step is small enough that it isnât upsetting if it doesn&amp;rsquo;t work on the first try and safe means that the teacher is neutral about successful and unsuccessful steps. &lt;strong&gt;Exploring and learning is what is celebrated.&lt;/strong&gt; Under no condition can mistakes be punished or made a point of shame. Without feeling safe about errors and unknowns, smallifying and creative learning is almost impossible. It will take time for most students to trust this environment, thus initially, expect students to be reluctant to smallify in order to explore all the unknowns inherent in big messy goals.&lt;/p&gt;
&lt;p&gt;Figuring out the next workable step happens as the student progresses - students are not working from a large, clear plan that maps out each step at the beginning of the project. I do give students who have never worked this way a few introductory steps to get them started.  Once underway, students gain confidence and generally have enough experience to find the next workable step - as they progress. Hereâs a concrete example of smallifying, based on building a racing catamaran that is stable while turning at speed might be:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;configure your computer with the software to print on a 3-D printer;&lt;/li&gt;
&lt;li&gt;design and print a box (or any simple shape);&lt;/li&gt;
&lt;li&gt;print the above shape, but make it hollow (learn to subtract a shape);&lt;/li&gt;
&lt;li&gt;print the above hollowed shape joined with a second shape; if the first shape is a box, add a cone, sphere, pyramid, etc (this requires addition and translation);&lt;/li&gt;
&lt;li&gt;etc. (now the students have enough basics to keep learning and progressing).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As Bill Rankin said in several keynote addresses, you learn to cook by cooking. In fact, you learn almost anything by doing it. You have to jump in and start, or âget cooking.â&lt;/p&gt;
&lt;p&gt;Of course, a student who chooses to build a rescue boat will have a different set of small steps, but common to both boats is learning to work incrementally and building on the next workable small step toward the goal. This is a powerful learning technique that builds confidence in students&#39; ability to learn and be successful.&lt;/p&gt;
&lt;p&gt;Once the students get the hang of this process of moving from the big picture, identifying a few critical aspects, and smallifiying their project into small workable steps, they have effectively learned how to learn and self-correct as they move toward a large complex goal. This meta-aspect of the learning process and its deliberate practice may in the long run be a lifeworthy skill that goes far beyond the specific content of a single class. Engineering classes such as the Boat Design class example here work well. So, too, do classes in art and other areas.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Caution:&lt;/strong&gt; Smallification happens in &lt;strong&gt;small&lt;/strong&gt; chunks (one or two steps at a time maximum). In the tech world we call this planning at the last responsible moment, but fundamentally, it is about figuring out the next workable thing when the students have enough information to see that next step. This prevents the feeling that the big goal is just too overwhelming. Students who have never worked this way will need some smallifying guidance. For example, in the Boat Design class, I gave students a few steps to get started and I give the details of the final assessment. (I like a public demonstration and company pitch.)  As a teacher you may want to step through a project to be more confident in the timing, practice the smallifying, etc, but be careful not to give away more than needed and avoid at all costs big and detailed plans! The fun and exploration is a central feature of a motivating and educational experience for the students.&lt;/p&gt;
&lt;p&gt;Fundamentally, creating a learning environment where having the big picture and exploring the details along the way can create an uplifting educational journey.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rails Devise User Model with Roles</title>
      <link>https://btihen.me/post_ruby_rails/rails_devise_users_namespaced/</link>
      <pubDate>Fri, 10 Jul 2020 20:45:51 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_devise_users_namespaced/</guid>
      <description>&lt;h2 id=&#34;configure-devise-for-multiple-types-of-accounts&#34;&gt;Configure devise (for multiple types of accounts)&lt;/h2&gt;
&lt;p&gt;install the devise engine:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bin/rails generate devise:install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now follow the basic setup config &amp;ndash; add to &lt;code&gt;config/environments/development.rb&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config.action_mailer.default_url_options = { host: &#39;localhost&#39;, port: 3000 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;add notifications to the layout for devise in &lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt; just above &lt;code&gt;&amp;lt;%= yeild %&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;p class=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p class=&amp;quot;alert&amp;quot;&amp;gt;&amp;lt;%= alert %&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now create one or more models for devise:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rails g devise:views
rails generate devise user
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the routes to put the login in separate routes in &lt;code&gt;config/routes.rb&lt;/code&gt; - make the routes look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  devise_for :users,  path: &#39;users&#39;  # http://localhost:3000/users/sign_in
  devise_for :admins, path: &#39;admins&#39; # http://localhost:3000/admins/sign_in
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;turn on scoped views (since login forms can be different) in &lt;code&gt;config/initializers/devise.rb&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config.scoped_views = true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create the scoped views: (instead of: rails g devise:views) do:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rails g devise:views users/devise
rails g devise:views admins/devise
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now we should open these migrations and uncomment any added fields we use - I generally like to use most of the fields:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# frozen_string_literal: true

class DeviseCreateAdmins &amp;lt; ActiveRecord::Migration[6.0]
  def change
    create_table :admins do |t|
      ## Database authenticatable
      t.string :email,              null: false, default: &amp;quot;&amp;quot;
      t.string :encrypted_password, null: false, default: &amp;quot;&amp;quot;

      ## Recoverable
      t.string   :reset_password_token
      t.datetime :reset_password_sent_at

      ## Rememberable
      t.datetime :remember_created_at

      ## Trackable
      t.integer  :sign_in_count, default: 0, null: false
      t.datetime :current_sign_in_at
      t.datetime :last_sign_in_at
      t.inet     :current_sign_in_ip
      t.inet     :last_sign_in_ip

      ## Confirmable
      t.string   :confirmation_token
      t.datetime :confirmed_at
      t.datetime :confirmation_sent_at
      t.string   :unconfirmed_email # Only if using reconfirmable

      ## Lockable
      t.integer  :failed_attempts, default: 0, null: false # Only if lock strategy is :failed_attempts
      t.string   :unlock_token # Only if unlock strategy is :email or :both
      t.datetime :locked_at

      t.timestamps null: false
    end

    add_index :admins, :email,                unique: true
    add_index :admins, :reset_password_token, unique: true
    add_index :admins, :confirmation_token,   unique: true
    add_index :admins, :unlock_token,         unique: true
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and adjust the &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;admin&lt;/code&gt; models too and turn on the features we want or need. We will go into detail later, for now I will just add trackable to the models:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class User &amp;lt; ApplicationRecord
  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable
  devise :database_authenticatable, :registerable, :trackable,
         :recoverable, :rememberable, :validatable
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and of course migrate too.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bin/rails db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create custome controllers for each sessions - this also allows the users to have different fields and features:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rails generate devise:controllers users/devise
rails generate devise:controllers admins/devise
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;configure the routes to point to these new controllers:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  # http://localhost:3000/users/sign_in
  devise_for :users,  path: &#39;users&#39;,
                      controllers: {
                        sessions:      &#39;users/devise/sessions&#39;,
                        passwords:     &#39;users/devise/passwords&#39;,
                        registrations: &#39;users/devise/registrations&#39;
                      }
  # http://localhost:3000/admins/sign_in
  devise_for :admins, path: &#39;admins&#39;,
                      controllers: {
                        sessions:      &#39;admins/devise/sessions&#39;,
                        passwords:     &#39;admins/devise/passwords&#39;,
                        registrations: &#39;admins/devise/registrations&#39;
                      }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now the routes should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ bin/rails routes
                     Prefix Verb   URI Pattern                        Controller#Action
           new_user_session GET    /users/sign_in(.:format)           users/sessions#new
               user_session POST   /users/sign_in(.:format)           users/sessions#create
       destroy_user_session DELETE /users/sign_out(.:format)          users/sessions#destroy
          new_user_password GET    /users/password/new(.:format)      users/passwords#new
         edit_user_password GET    /users/password/edit(.:format)     users/passwords#edit
              user_password PATCH  /users/password(.:format)          users/passwords#update
                            PUT    /users/password(.:format)          users/passwords#update
                            POST   /users/password(.:format)          users/passwords#create
   cancel_user_registration GET    /users/cancel(.:format)            user/registrations#cancel
      new_user_registration GET    /users/sign_up(.:format)           user/registrations#new
     edit_user_registration GET    /users/edit(.:format)              user/registrations#edit
          user_registration PATCH  /users(.:format)                   user/registrations#update
                            PUT    /users(.:format)                   user/registrations#update
                            DELETE /users(.:format)                   user/registrations#destroy
                            POST   /users(.:format)                   user/registrations#create
          new_admin_session GET    /admins/sign_in(.:format)          admin/sessions#new
              admin_session POST   /admins/sign_in(.:format)          admin/sessions#create
      destroy_admin_session DELETE /admins/sign_out(.:format)         admin/sessions#destroy
         new_admin_password GET    /admins/password/new(.:format)     admin/passwords#new
        edit_admin_password GET    /admins/password/edit(.:format)    admin/passwords#edit
             admin_password PATCH  /admins/password(.:format)         admin/passwords#update
                            PUT    /admins/password(.:format)         admin/passwords#update
                            POST   /admins/password(.:format)         admin/passwords#create
  cancel_admin_registration GET    /admins/cancel(.:format)           admin/registrations#cancel
     new_admin_registration GET    /admins/sign_up(.:format)          admin/registrations#new
    edit_admin_registration GET    /admins/edit(.:format)             admin/registrations#edit
         admin_registration PATCH  /admins(.:format)                  admin/registrations#update
                            PUT    /admins(.:format)                  admin/registrations#update
                            DELETE /admins(.:format)                  admin/registrations#destroy
                            POST   /admins(.:format)                  admin/registrations#create
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;lets make logged in home pages (for the user and admin)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rails g controller users/home index --no-helper --no-assets --no-controller-specs --no-view-specs
rails g controller admins/home index --no-helper --no-assets --no-controller-specs --no-view-specs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now lets update our routes to ponit to these pages if the user is logged in add the following belos the deivse_for commands&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Rails.application.routes.draw do
  # http://localhost:3000/admins/sign_in
  devise_for :admins, path: &#39;admins&#39;,
                      controllers: {
                        sessions:      &#39;admins/devise/sessions&#39;,
                        passwords:     &#39;admins/devise/passwords&#39;,
                        registrations: &#39;admins/devise/registrations&#39;
                      }
  # http://localhost:3000/umdzes/sign_in
  devise_for :umdzes, path: &#39;umdzes&#39;,
                      controllers: {
                        sessions:      &#39;umdzes/devise/sessions&#39;,
                        passwords:     &#39;umdzes/devise/passwords&#39;,
                        registrations: &#39;umdzes/devise/registrations&#39;
                      }
  # http://localhost:3000/patrons/sign_in
  devise_for :patrons,  path: &#39;patrons&#39;,
                      controllers: {
                        sessions:      &#39;patrons/devise/sessions&#39;,
                        passwords:     &#39;patrons/devise/passwords&#39;,
                        registrations: &#39;patrons/devise/registrations&#39;
                      }

  authenticated :patron do
    root &#39;patrons/home#index&#39;,     as: :auth_patron_root
  end
  authenticated :umdze do
    root &#39;umdzes/home#index&#39;,      as: :auth_umdze_root
  end
  authenticated :admin do
    root &#39;admins/home#index&#39;, as: :auth_admin_root
  end


  namespace :admins do
    get &#39;home/index&#39;
    # resource  :home_page,        only: [:index]
  end
  get &#39;/admins&#39;, to: &#39;admins/home#index&#39;, as: :admins

  namespace :umdzes do
    get &#39;home/index&#39;
    # resource  :home_page,        only: [:index]
  end
  get &#39;/umdzes&#39;, to: &#39;umdzes/home#index&#39;, as: :umdzes

  namespace :patrons do
    get &#39;home/index&#39;
    # resource  :home_page,        only: [:index]
  end
  get &#39;/patrons&#39;, to: &#39;patrons/home#index&#39;, as: :patrons

  get &#39;/landing&#39;, to: &#39;landing#index&#39;, as: :landing
  get &#39;landing/index&#39;
  root to: &amp;quot;landing#index&amp;quot;
end

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;now-lets-make-applicationcontrollers-for-each-namespace--enforce-authentication&#34;&gt;now lets make ApplicationControllers for each namespace &amp;amp; enforce authentication&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;touch app/controllers/admins/application_controller.rb
cat &amp;lt;&amp;lt; EOF &amp;gt; app/controllers/admins/application_controller.rb
class Admins::ApplicationController &amp;lt; ApplicationController
  before_action :authenticate_admin!

  private

  def this_user
    current_admin
  end
end
EOF

touch app/controllers/umdzes/application_controller.rb
cat &amp;lt;&amp;lt; EOF &amp;gt; app/controllers/umdzes/application_controller.rb
class Umdzes::ApplicationController &amp;lt; ApplicationController
  before_action :authenticate_umdze!, unless: :allowed_access

  private

  def allowed_access
    current_admin
  end

  def this_user
    current_umdze || current_admin
  end
end
EOF

touch app/controllers/patrons/application_controller.rb
cat &amp;lt;&amp;lt; EOF &amp;gt; app/controllers/patrons/application_controller.rb
class Patrons::ApplicationController &amp;lt; ApplicationController
  before_action :authenticate_patron!, unless: :allowed_access

  private
  def allowed_access
    current_umdze || current_admin
  end

  def this_user
    current_patron || current_umdze || current_admin
  end
end
EOF

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;now-we-will-inhert-from-these-new-controllers-and-enforce-limits&#34;&gt;now we will inhert from these new controllers and enforce limits&lt;/h1&gt;
&lt;p&gt;now lets require these pages to have authenticated the correct user type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/controllers/admins/home_controller.rb
class Admins::HomeController &amp;lt; Admins::ApplicationController
  def index
  end
end

# app/controllers/umdzes/home_controller.rb
class Umdzes::HomeController &amp;lt; Umdzes::ApplicationController
  def index
  end
end

# app/controllers/patrons/home_controller.rb
class Patrons::HomeController &amp;lt; Patrons::ApplicationController
  def index
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;now-prevent-student-and-admin-accounts-from-cross-visits-during-testing-or-whatever&#34;&gt;Now prevent student and admin accounts from cross visits (during testing, or whatever)&lt;/h2&gt;
&lt;p&gt;create this new file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch app/controllers/concerns/accessible.rb
cat &amp;lt;&amp;lt; EOF &amp;gt; app/controllers/concerns/accessible.rb
module Accessible
  extend ActiveSupport::Concern
  included do
    before_action :check_user
  end

  protected
  def check_user
    if current_admin
      flash.clear
      # The authenticated admin root path can be defined in your routes.rb in: devise_scope :admin do...
      redirect_to(auth_admin_root_path) and return
    elsif current_umdze
      flash.clear
      # The authenticated admin root path can be defined in your routes.rb in: devise_scope :admin do...
      redirect_to(auth_umdze_root_path) and return
    elsif current_patron
      flash.clear
      # The authenticated user root path can be defined in your routes.rb in: devise_scope :user do...
      redirect_to(auth_partron_root_path) and return
    end
  end
end
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;use-this-accessible-concern&#34;&gt;use this accessible concern&lt;/h2&gt;
&lt;p&gt;Now add &lt;code&gt;include Accessible&lt;/code&gt; in the appropriate controllers:&lt;/p&gt;
&lt;p&gt;Note:
You must skip_before_action for the destroy action in each SessionsController to prevent the redirect to happen before the sign out occurs.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# eg. ../controllers/admins/sessions_controller.rb
class Admins::SessionsController &amp;lt; Devise::SessionsController
 include Accessible
 skip_before_action :check_user, only: :destroy
 # ...
end

# eg. ../controllers/admins/registrations_controller.rb
You must also skip_before_action for the edit, update, destroy, and cancel actions in each RegistrationsController to allow current users to edit and cancel their own accounts. Otherwise they will be redirected before they can reach these pages.

class Admins::RegistrationsController &amp;lt; Devise::RegistrationsController
 include Accessible
 skip_before_action :check_user, except: [:new, :create]
 # ...
end

# eg. ../controllers/umdzes/sessions_controller.rb
class Umdzes::SessionsController &amp;lt; Devise::SessionsController

 include Accessible
 skip_before_action :check_user, only: :destroy
 # ...
end

# eg. ../controllers/umdzes/registrations_controller.rb
class Umdzes::RegistrationsController &amp;lt; Devise::RegistrationsController

 include Accessible
 skip_before_action :check_user, except: [:new, :create]
 # ...
end

# eg. ../controllers/patrons/sessions_controller.rb
class Patrons::SessionsController &amp;lt; Devise::SessionsController

 include Accessible
 skip_before_action :check_user, only: :destroy
 # ...
end

# eg. ../controllers/patrons/registrations_controller.rb
class Patrons::RegistrationsController &amp;lt; Devise::RegistrationsController

 include Accessible
 skip_before_action :check_user, except: [:new, :create]
 # ...
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;now-lets-give-the-patron-account-a-usernames&#34;&gt;now lets give the patron account a usernames&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/heartcombo/devise/wiki/How-To%3A-Allow-users-to-sign-in-with-something-other-than-their-email-address&#34;&gt;https://github.com/heartcombo/devise/wiki/How-To%3A-Allow-users-to-sign-in-with-something-other-than-their-email-address&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rails generate migration add_username_to_patrons username:string:uniq
rails generate migration add_umdzes_name_to_umdzes fullname:string
rails generate migration add_admins_name_to_admins fullname:string

# now update the new migration to look like:
class AddUsernamToPatrons &amp;lt; ActiveRecord::Migration[6.0]
  def change
    # username is key not email - in fact we don&#39;t want an email
    rename_column :patrons, :email, :username
  end
end

class AddFullnameToUmdzes &amp;lt; ActiveRecord::Migration[6.0]
  def change
    add_column :umdzes, :umdzes_name, :string, null: false
  end
end

class AddFullnameToAdmins &amp;lt; ActiveRecord::Migration[6.0]
  def change
    add_column :admins, :admins_name, :string, null: false
  end
end

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;update-the-models&#34;&gt;update the models&lt;/h2&gt;
&lt;p&gt;now we need to go to the models and make the following updates:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# app/models/admin.rb
class Admin &amp;lt; ApplicationRecord
  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable
  devise  :database_authenticatable, :trackable, # :registerable,
          :rememberable, :validatable #, :recoverable

  validates :email, uniqueness: true
  validates :admins_name, presence: true
end

# app/models/umdze.rb
class Umdze &amp;lt; ApplicationRecord
  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable
  devise  :database_authenticatable, :trackable, # :registerable,
          :rememberable, :validatable #, :recoverable

  validates :email, uniqueness: true
  validates :umdzes_name, presence: true
end


# app/models/patrons.rb
class Patron &amp;lt; ApplicationRecord
  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable
  devise  :database_authenticatable, :trackable, # :registerable,
          :rememberable, :validatable, # :recoverable
          :authentication_keys =&amp;gt; [:username]

  validates :username, uniqueness: true
  # make the email field optional
  # validates :email, uniqueness: true

  def email_required?
    false
  end

  def email_changed?
    false
  end

  # use this instead of email_changed? for Rails = 5.1.x
  def will_save_change_to_email?
    false
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now we can safely migrate &lt;code&gt;bundle exec rails db:migrate&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;lets-test-our-logins&#34;&gt;lets test our logins&lt;/h2&gt;
&lt;p&gt;lets create some common feature test code:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://forum.upcase.com/t/rspec-support-vs-helpers/4986&#34;&gt;https://forum.upcase.com/t/rspec-support-vs-helpers/4986&lt;/a&gt;
&lt;a href=&#34;https://thoughtbot.com/blog/rspec-integration-tests-with-capybara&#34;&gt;https://thoughtbot.com/blog/rspec-integration-tests-with-capybara&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# spec/support/features/session_helpers.rb
module Features
  module SessionHelpers
    # def patron_sign_up(username:, password:)
    #   visit new_patron_registration_path
    #   expect(page).to have_button(&#39;Sign up&#39;)
    #   fill_in &#39;Username&#39;, with: username
    #   fill_in &#39;Password&#39;, with: password
    #   click_button &#39;Sign up&#39;
    # end
    def patron_log_in(patron = nil)
      patron = FactoryBot.create :patron if patron.nil?
      visit new_patron_session_path
      expect(page).to have_button(&#39;Log in&#39;)
      fill_in &#39;Username&#39;, with: patron.username
      fill_in &#39;Password&#39;, with: patron.password
      click_on &#39;Log in&#39;
    end

    # def umdze_sign_up(email:, password:)
    #   visit new_umdze_registration_path
    #   expect(page).to have_button(&#39;Sign up&#39;)
    #   fill_in &#39;Email&#39;, with: email
    #   fill_in &#39;Password&#39;, with: password
    #   click_button &#39;Sign up&#39;
    # end
    def umdze_log_in(umdze = nil)
      umdze = FactoryBot.create :umdze if umdze.nil?
      visit new_admin_session_path
      expect(page).to have_button(&#39;Log in&#39;)
      fill_in &#39;Email&#39;, with: admin.email
      fill_in &#39;Password&#39;, with: admin.password
      click_on &#39;Log in&#39;
    end

    # def admin_sign_up(email:, password:)
    #   visit new_admin_registration_path
    #   expect(page).to have_button(&#39;Sign up&#39;)
    #   fill_in &#39;Email&#39;, with: email
    #   fill_in &#39;Password&#39;, with: password
    #   click_button &#39;Sign up&#39;
    # end
    def admin_log_in(admin = nil)
      admin = FactoryBot.create :admin if admin.nil?
      visit new_admin_session_path
      expect(page).to have_button(&#39;Log in&#39;)
      fill_in &#39;Email&#39;, with: admin.email
      fill_in &#39;Password&#39;, with: admin.password
      click_on &#39;Log in&#39;
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are not allowing registrations, so that code is commented out.  However, we see we must configure our factories for this code to work.&lt;/p&gt;
&lt;p&gt;Lets tell rspec how to access this code in feature tests:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# spec/support/features.rb
RSpec.configure do |config|
  config.include Features::SessionHelpers, type: :feature
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;lets-create-test-for-our-devise-model-factories&#34;&gt;Lets create test for our devise model factories:&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# spec/models/patron_spec.rb
require &#39;rails_helper&#39;

RSpec.describe User, type: :model do
  describe &amp;quot;factory functions&amp;quot; do
    it &amp;quot;generates a valid user&amp;quot; do
      model = FactoryBot.build :user
      expect(model.valid?).to be true
    end
    it &amp;quot;saves a valid user&amp;quot; do
      model = FactoryBot.build :user
      expect(model.save).to be_truthy
    end
  end

  describe &amp;quot;DB settings&amp;quot; do
    it { have_db_index(:email) }
    it { is_expected.to have_db_column(:encrypted_password) }
  end
end

# spec/models/admin_spec.rb
require &#39;rails_helper&#39;

RSpec.describe Admin, type: :model do
  describe &amp;quot;factory functions&amp;quot; do
    it &amp;quot;generates a valid admin&amp;quot; do
      model = FactoryBot.build :admin
      expect(model.valid?).to be true
    end
    it &amp;quot;saves a valid admin&amp;quot; do
      model = FactoryBot.build :admin
      expect(model.save).to be_truthy
    end
  end

  describe &amp;quot;DB settings&amp;quot; do
    it { have_db_index(:email) }
    it { is_expected.to have_db_column(:encrypted_password) }
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;be sure these fail - run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rspec spec/models/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to configure the factories so all is working:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# spec/factories/patrons.rb
FactoryBot.define do
  factory :user do
    sequence(:email)      { |n| &amp;quot;#{Faker::Internet.email}&amp;quot;.split(&#39;@&#39;).join(&amp;quot;#{n}@&amp;quot;) }
    password              { &#39;LetM3-InNow&#39; }
    password_confirmation { &#39;LetM3-InNow&#39; }
    # enable this if using confirmable
    # confirmed_at { Date.today }
  end
end

# spec/factories/umdzes.rb
FactoryBot.define do
  factory :umdze do
    sequence(:email)      { |n| &amp;quot;#{Faker::Internet.email}&amp;quot;.split(&#39;@&#39;).join(&amp;quot;#{n}@&amp;quot;) }
    password              { &#39;LetM3-InNow!&#39; }
    password_confirmation { &#39;LetM3-InNow!&#39; }
    umdzes_name           { &amp;quot;#{Faker::Name.first_name} #{Faker::Name.last_name}&amp;quot; }
    # enable this if using confirmable
    # confirmed_at          { Date.today }
  end
end

# spec/factories/admins.rb
FactoryBot.define do
  factory :admin do
    sequence(:email)      { |n| &amp;quot;#{Faker::Internet.email}&amp;quot;.split(&#39;@&#39;).join(&amp;quot;#{n}@&amp;quot;) }
    password              { &#39;LetM3-InNow!&#39; }
    password_confirmation { &#39;LetM3-InNow!&#39; }
    admins_name           { &amp;quot;#{Faker::Name.first_name} #{Faker::Name.last_name}&amp;quot; }
    # enable this if using confirmable
    # confirmed_at          { Date.today }
  end
end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;be sure these pass now - run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rspec spec/models/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we are ready to test devise and our restricted access to the users home page:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.madetech.com/blog/feature-testing-with-rspec&#34;&gt;https://www.madetech.com/blog/feature-testing-with-rspec&lt;/a&gt;
&lt;a href=&#34;https://thoughtbot.com/blog/rspec-integration-tests-with-capybara&#34;&gt;https://thoughtbot.com/blog/rspec-integration-tests-with-capybara&lt;/a&gt;
&lt;a href=&#34;https://github.com/heartcombo/devise/wiki/How-To:-Test-with-Capybara&#34;&gt;https://github.com/heartcombo/devise/wiki/How-To:-Test-with-Capybara&lt;/a&gt;
&lt;a href=&#34;https://radavis.github.io/sign-in-out-test-helpers-for-and-devise-and-capybara/&#34;&gt;https://radavis.github.io/sign-in-out-test-helpers-for-and-devise-and-capybara/&lt;/a&gt;
&lt;a href=&#34;https://www.vanderpol.net/2014/10/07/rspec-integration-tests-devise-user-registration/&#34;&gt;https://www.vanderpol.net/2014/10/07/rspec-integration-tests-devise-user-registration/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# spec/features/users/user_signup_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &#39;Users Home Page&#39;, type: :feature do
  # note user is NOT created in DB!
  let(:user)  { FactoryBot.build :user }
  after :each do
    Warden.test_reset!
  end
  describe &#39;user is not signed-up&#39; do
    scenario &#39;user signs-up on registration page&#39; do
      user_sign_up(email: user.email, password: user.password)
      expect(current_path).to eql(users_home_path)
    end
  end
end


# spec/features/users/user_login_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &#39;Users Login&#39;, type: :feature do
  let(:user)  { FactoryBot.create :user }
  after :each do
    Warden.test_reset!
  end
  describe &#39;user logs in successfully&#39; do
    scenario &#39;and is redirected to user home page&#39; do
      user_log_in(user)
      expect(current_path).to eql(auth_user_root_path)
    end
  end
end


# spec/features/users_home_page_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &#39;Users Home Page&#39;, type: :feature do
  let(:user)    { FactoryBot.create :user }
  after :each do
    # force a logout (clear warden info) after each test
    Warden.test_reset!
  end
  describe &#39;user is not authenticated&#39; do
    scenario &#39;user is redirected to user login before access to user home&#39; do
      visit users_home_path
      expect(current_path).to eql(new_user_session_path)
    end
  end
  describe &#39;user is already authenticated&#39; do
    before    { user_log_in(user) }
    scenario &#39;user gets direct access to the user homepage&#39; do
      visit users_home_path
      expect(page).to have_current_path(users_home_path)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and test to be sure admin can log in too:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# spec/features/admins/admin_login_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &#39;Users Login&#39;, type: :feature do
  after :each do
    Warden.test_reset!
  end
  scenario &#39;logs in successfully and is redirected to user home page&#39; do
    admin_log_in
    expect(current_path).to eql(auth_admin_root_path)
  end
end


# spec/features/admins/admin_signup_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &#39;Admin Signup&#39;, type: :feature do
  # IMPORTANT is NOT created in DB!
  let(:admin)  { FactoryBot.build :admin }
  after :each do
    Warden.test_reset!
  end
  describe &#39;admin is not signed-up&#39; do
    scenario &#39;admin registers&#39; do
      admin_sign_up(email: admin.email, password: admin.password)
      expect(page).to have_current_path(admins_home_path)
    end
  end
end


# spec/features/admins/admins_home_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &#39;Admins Home&#39;, type: :feature do
  let(:admin)  { FactoryBot.create :admin }
  after :each do
    Warden.test_reset!
  end
  describe &#39;un-authenticated&#39; do
    scenario &#39;attempts to access admins home page is redirected to user login&#39; do
      visit admins_home_path
      expect(current_path).to eql(new_admin_session_path)
    end
  end
  describe &#39;already authenticated&#39; do
    before    { admin_log_in(admin) }
    scenario &#39;gets access to the user homepage&#39; do
      visit admins_home_path
      expect(current_path).to eql(admins_home_path)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;before we wrap up - we need to fix our request specs - now that we added login restrictions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# spec/requests/users/home_request_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &amp;quot;Patron::Homes&amp;quot;, type: :request do

  let(:patron)   { FactoryBot.create :patron }

  describe &amp;quot;GET /index&amp;quot; do
    context &amp;quot;NOT logged in&amp;quot; do
      after do
        sign_out patron
      end
      it &amp;quot;home as &#39;/patrons&#39; page is NOT accessible&amp;quot; do
        get &amp;quot;/patrons&amp;quot;
        expect(response).to have_http_status(:redirect)
        # to login
      end
      it &amp;quot;home as &#39;patron_home_path&#39; page is NOT accessible&amp;quot; do
        get patrons_home_path
        expect(response).to have_http_status(:redirect)
      end
      it &amp;quot;home as &#39;auth_patron_root_path&#39; page is NOT accessible&amp;quot; do
        get auth_patron_root_path
        expect(response).to have_http_status(:success)
        # here we need page match for different root routes
      end
    end

    context &amp;quot;logged in&amp;quot; do
      before do
        sign_in patron
      end
      after do
        sign_out patron
      end
      it &amp;quot;home as &#39;/patrons&#39; page is accessible&amp;quot; do
        get &amp;quot;/patrons&amp;quot;
        expect(response).to have_http_status(:success)
      end
      it &amp;quot;home as &#39;patrons_home_path&#39; page is accessible&amp;quot; do
        get patrons_home_path
        expect(response).to have_http_status(:success)
      end
      it &amp;quot;home as &#39;auth_patron_root_path&#39; page is accessible&amp;quot; do
        get auth_patron_root_path
        expect(response).to have_http_status(:success)
      end
    end
  end
end

# spec/requests/umdze/home_request_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &amp;quot;Umdze::Homes&amp;quot;, type: :request do
  let(:umdze)   { FactoryBot.create :umdze }

  describe &amp;quot;GET /index&amp;quot; do
    context &amp;quot;NOT logged in&amp;quot; do
      after do
        sign_out umdze
      end
      it &amp;quot;home as &#39;/umdzes&#39; page is NOT accessible&amp;quot; do
        get &amp;quot;/umdzes&amp;quot;
        expect(response).to have_http_status(:redirect)
        # to login
      end
      it &amp;quot;home as &#39;umdzes_home_path&#39; page is NOT accessible&amp;quot; do
        get umdzes_home_path
        expect(response).to have_http_status(:redirect)
      end
      it &amp;quot;home as &#39;auth_umdze_root_path&#39; page is NOT accessible&amp;quot; do
        get auth_umdze_root_path
        expect(response).to have_http_status(:success)
        # here we need page match for different root routes
      end
    end

    context &amp;quot;logged in&amp;quot; do
      before do
        sign_in umdze
      end
      after do
        sign_out umdze
      end
      it &amp;quot;home as &#39;/umdzes&#39; page is accessible&amp;quot; do
        get &amp;quot;/umdzes&amp;quot;
        expect(response).to have_http_status(:success)
      end
      it &amp;quot;home as &#39;umdzes_home_path&#39; page is accessible&amp;quot; do
        get umdzes_home_path
        expect(response).to have_http_status(:success)
      end
      it &amp;quot;home as &#39;auth_umdze_root_path&#39; page is accessible&amp;quot; do
        get auth_umdze_root_path
        expect(response).to have_http_status(:success)
      end
    end
  end
end

# spec/requests/admins/dashboard_request_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &amp;quot;Admins::Dashboards&amp;quot;, type: :request do

  let(:admin)   { FactoryBot.create :admin }

  describe &amp;quot;GET /index&amp;quot; do
    context &amp;quot;NOT logged in&amp;quot; do
      it &amp;quot;home as &#39;/admins&#39; page is NOT accessible&amp;quot; do
        get &amp;quot;/admins&amp;quot;
        expect(response).to have_http_status(:redirect)
      end
      it &amp;quot;home as &#39;admins_home_path&#39; page is NOT accessible&amp;quot; do
        get admins_home_path
        expect(response).to have_http_status(:redirect)
      end
      it &amp;quot;home as &#39;auth_admin_root_path&#39; page is NOT accessible&amp;quot; do
        get auth_admin_root_path
        expect(response).to have_http_status(:success)
        # here we need page match for different root routes
      end
    end

    context &amp;quot;logged in&amp;quot; do
      before do
        sign_in admin
      end
      after do
        sign_out admin
      end
      it &amp;quot;home as &#39;/admins&#39; page is accessible&amp;quot; do
        get &amp;quot;/admins&amp;quot;
        expect(response).to have_http_status(:success)
      end
      it &amp;quot;home as &#39;admins_home_path&#39; page is accessible&amp;quot; do
        get admins_home_path
        expect(response).to have_http_status(:success)
      end
      it &amp;quot;home as &#39;auth_admin_root_path&#39; page is accessible&amp;quot; do
        get auth_admin_root_path
        expect(response).to have_http_status(:success)
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;run the tests and be sure all is green - if so, now is a good time to make a commit!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;rspec and devise configured and tests green&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Phoenix 1.5 Blog with Comments</title>
      <link>https://btihen.me/post_elixir_phoenix/phoenix_1_5_blog_w_comments/</link>
      <pubDate>Fri, 10 Jul 2020 09:43:51 +0200</pubDate>
      <guid>https://btihen.me/post_elixir_phoenix/phoenix_1_5_blog_w_comments/</guid>
      <description>&lt;h2 id=&#34;purpose&#34;&gt;Purpose&lt;/h2&gt;
&lt;p&gt;This article builds on the existing article: &lt;a href=&#34;https://btihen.me/post_tech/phoenix_1_5_blog_intro/&#34;&gt;https://btihen.me/post_tech/phoenix_1_5_blog_intro/&lt;/a&gt; and adds nested relationships and has_many_through.&lt;/p&gt;
&lt;h2 id=&#34;now-lets-create-comments-a-has-many-through-for-users&#34;&gt;now lets create comments (a has many through for users)&lt;/h2&gt;
&lt;p&gt;we will use &lt;code&gt;mix phx.gen.context&lt;/code&gt; this time since we will use the posts page to add comments.  We will use the context generator since we don&amp;rsquo;t need any views or templates generated.  Answer &lt;code&gt;Y&lt;/code&gt; to the question about the context already existing.  We could create to API files within the Context before the one file gets too large, but we will skip that.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.gen.context Blogs Comment comments message:text post_id:references:posts  user_id:references:users
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;update-relationships&#34;&gt;Update Relationships&lt;/h2&gt;
&lt;p&gt;We need to create the relationships and update the migration to delete comments when post is deleted:&lt;/p&gt;
&lt;p&gt;Now lets create the relationship between posts and comments:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs/comment.ex
efmodule FeenixIntro.Blogs.Comment do
  use Ecto.Schema
  import Ecto.Changeset
  alias FeenixIntro.Blogs.Post
  alias FeenixIntro.Accounts.User

  @required_fields [:user_id, :post_id, :message]

  schema &amp;quot;comments&amp;quot; do
    # remove these
    # field :post_id, :id
    # field :user_id, :id
    # add these:
    belongs_to(:user, User)
    belongs_to(:post, Post)

    field :message, :string

    timestamps()
  end

  @doc false
  def changeset(comment, attrs) do
    comment
    |&amp;gt; cast(attrs, @required_fields)
    |&amp;gt; validate_required(@required_fields)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets update posts relationship to comments:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs/post.ex
  # ...
  alias FeenixIntro.Blogs.Comment
  # ...
  schema &amp;quot;posts&amp;quot; do
    # ...
    # add this
    has_many(:comments, Comment)
  # ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could do the same &lt;code&gt;has_many&lt;/code&gt; relationship with users - but its not needed.  It is unlikely we would want to look-up all a user&amp;rsquo;s comments outside the context of a Blog.&lt;/p&gt;
&lt;h2 id=&#34;update-migration-to-delete-sub-resource-when-top-resource-is-deleted&#34;&gt;Update Migration to delete sub-resource when top-resource is deleted&lt;/h2&gt;
&lt;p&gt;To create the rails equivalent of dependent_delete we change the migration to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# priv/repo/migrations/20200704161651_create_comments.exs
      # ...
      # replce
      # add :post_id, references(:posts, on_delete: :nothing)
      # add :user_id, references(:users, on_delete: :nothing)
      # with
      add :post_id, references(:posts, on_delete: :delete_all), null: false
      add :user_id, references(:users, on_delete: :delete_all), null: false
      # ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we should be able to migrate:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix ecto.migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Start simple with the seed file&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Lets add a comment to our prebuild posts:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# priv/repo/seeds.exs
# ...
# add the alias to keep things short
alias FeenixIntro.Blogs.Comment

# ...
# this ensures all we have all the correct fields:
Repo.insert!(%Comment{user_id: dog.id, post_id: post1.id, message: &amp;quot;woof&amp;quot; })

# this also checks the relationships
post2
|&amp;gt; Ecto.build_assoc(:comments)
|&amp;gt; Comment.changeset(%{user_id: dog.id, post_id: post2.id, message: &amp;quot;BARK&amp;quot; })
|&amp;gt; Repo.insert!()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets run the seed and see if all is working:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix run priv/repo/seeds.exs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nice lets make a quick git snapshot before we work on the html aspects&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;Comments added as a resource and relationship to Posts established&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;preload-comments-within-get_post&#34;&gt;Preload comments within get_post&lt;/h2&gt;
&lt;p&gt;To show the comments within a post we will need to preload the comments &amp;ndash; this is done by adding &lt;code&gt;Repo.preload(:comments)&lt;/code&gt; to our function: &lt;code&gt;def get_post!(id)&lt;/code&gt; &amp;ndash; however, we will also want to display the comment&amp;rsquo;s author &amp;ndash; so we need to do a nested preload with: &lt;code&gt;Repo.preload([comments: [:user]])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So now this function looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs.ex
def get_post!(id) do
    Post
    |&amp;gt; Repo.get!(id)
    |&amp;gt; Repo.preload(:user)
    |&amp;gt; Repo.preload([comments: [:user]])
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This can actually be shortened to (this will be helpful later):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lib/feenix_intro/blogs.ex
def get_post!(id) do
    Post
    |&amp;gt; Repo.get!(id)
    |&amp;gt; Repo.preload([:user, comments: [:user]])
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;display-the-comments-within-the-post-show&#34;&gt;Display the comments within the Post show&lt;/h2&gt;
&lt;p&gt;Now that we have updated the get_post! to preload comments we can display the comments too by adding to the end of our post&amp;rsquo;s - show template:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/templates/post/show.html.eex

# ...
&amp;lt;table&amp;gt;
  &amp;lt;thead&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th&amp;gt;Comment Author&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Message&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/thead&amp;gt;
  &amp;lt;tbody&amp;gt;
    &amp;lt;%= for comment &amp;lt;- @post.comments do %&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= comment.user.name %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= comment.message %&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;

&amp;lt;span&amp;gt;&amp;lt;%= link &amp;quot;Edit&amp;quot;, to: Routes.post_path(@conn, :edit, @post) %&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span&amp;gt;&amp;lt;%= link &amp;quot;Back&amp;quot;, to: Routes.post_path(@conn, :index) %&amp;gt;&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Start the server &lt;code&gt;mix phx.server&lt;/code&gt; and be sure this works&lt;/p&gt;
&lt;p&gt;Assuming it works, lets commit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;display comments and comment author on post show page&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;creating-comments-as-a-nested-resource&#34;&gt;Creating Comments (as a nested resource)&lt;/h2&gt;
&lt;p&gt;Since we have added comments within the Blogs context and they are associated with a post - it makes sense to create and display comments as a nested resource.  To set this up lets change our routes file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/router.ex
# ...
  scope &amp;quot;/&amp;quot;, FeenixIntroWeb do
    pipe_through :browser

    get &amp;quot;/&amp;quot;, PageController, :index
    resources &amp;quot;/users&amp;quot;, UserController

    # replace this line:
    # resources &amp;quot;/posts&amp;quot;, PostController
    # with:
    resources &amp;quot;/posts&amp;quot;, PostController do
      resources &amp;quot;/comments&amp;quot;, CommentController, only: [:create]
    end
  end
  # ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means we will be able to create a comment only within the context of an existing post (seems reasonable) &amp;ndash; more actions can be added later such as &lt;code&gt;edit&lt;/code&gt; or &lt;code&gt;delete&lt;/code&gt; possibly.&lt;/p&gt;
&lt;p&gt;This also means we need to display our comments within the context of existing posts (the best place for this is the &lt;code&gt;show&lt;/code&gt; - where all the details of the post are shown).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create the controller we just defined - we will need to make a new file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/controllers/comment_controller.ex
defmodule FeenixIntroWeb.CommentController do
  use FeenixIntroWeb, :controller

  alias FeenixIntro.Blogs

  def create(conn, %{&amp;quot;post_id&amp;quot; =&amp;gt; post_id, &amp;quot;comment&amp;quot; =&amp;gt; comment_params}) do
    # define the post we are nested within
    post = Blogs.get_post!(post_id)

    # create our new comment and handle (success or failure)
    case Blogs.create_comment(post, comment_params) do
      {:ok, _comment} -&amp;gt;
        conn
        |&amp;gt; put_flash(:info, &amp;quot;Comment created&amp;quot;)
        |&amp;gt; redirect(to: Routes.post_path(conn, :show, post))

      # TODO: return to form and show errors
      {:error, _changeset} -&amp;gt;
        conn
        |&amp;gt; put_flash(:error, &amp;quot;Comment creation failed&amp;quot;)
        |&amp;gt; redirect(to: Routes.post_path(conn, :show, post))
    end
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: at the moment we don&amp;rsquo;t handle errors, and allow those to be fixed.  We will get to that in a second step.&lt;/p&gt;
&lt;p&gt;We need to update the function &lt;code&gt;create_comment&lt;/code&gt; in order to work as a nested resource:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#  @doc &amp;quot;&amp;quot;&amp;quot;
  Creates a comment.

  ## Examples
      # also update our function docs
      # replace
      # iex&amp;gt; create_comment(%{field: value})
      # with
      iex&amp;gt; create_comment(post, %{field: value})
      {:ok, %Comment{}}

      # replace:
      # iex&amp;gt; create_comment(%{field: bad_value})
      # with:
      iex&amp;gt; create_comment(post, %{field: bad_value})
      {:error, %Ecto.Changeset{}}

  &amp;quot;&amp;quot;&amp;quot;
  # replace
  # def create_comment(attrs \\ %{}) do
  #   %Comment{}
  #   |&amp;gt; Comment.changeset(attrs)
  #   |&amp;gt; Repo.insert()
  # end

  # with (this uses the passed in post and creates an association with the new comment)
  def create_comment(%Post{} = post, attrs \\ %{}) do
    post
    |&amp;gt; Ecto.build_assoc(:comments)
    |&amp;gt; Comment.changeset(attrs)
    |&amp;gt; Repo.insert()
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to create a new Comment &lt;strong&gt;form&lt;/strong&gt; the &lt;code&gt;show&lt;/code&gt; function will need to borrow from a typical &lt;code&gt;new&lt;/code&gt; function and send and empty struct (changeset) for the form &amp;ndash; lets start by updating the PostController show function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/controllers/post_controller.ex
  # ...
  alias FeenixIntro.Blogs.Comment

  def show(conn, %{&amp;quot;id&amp;quot; =&amp;gt; id}) do
    post = Blogs.get_post!(id)
    users = Accounts.list_users()
    # replace:
    # render(conn, &amp;quot;show.html&amp;quot;, post: post, users: users)

    # with: This allows us to add comments on the Post show form!
    comment_changeset = Blogs.change_comment(%Comment{})
    render(conn, &amp;quot;show.html&amp;quot;, post: post, users: users,
                              comment_changeset: comment_changeset)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have an empty changeset for the form - we can add the form to the show page with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/templates/post/show.html.eex
# ...
&amp;lt;h3&amp;gt;Add a Comment&amp;lt;/h3&amp;gt;
&amp;lt;%= form_for @comment_changeset, Routes.post_comment_path(@conn, :create, @post), fn form -&amp;gt; %&amp;gt;

  &amp;lt;%= label form, &amp;quot;Author&amp;quot; %&amp;gt;
  &amp;lt;%= select form, :user_id, Enum.map(@users, &amp;amp;{&amp;amp;1.name, &amp;amp;1.id}) %&amp;gt;
  &amp;lt;%= error_tag form, :user %&amp;gt;

  &amp;lt;%= label form, :message %&amp;gt;
  &amp;lt;%= textarea form, :message %&amp;gt;
  &amp;lt;%= error_tag form, :message %&amp;gt;

  &amp;lt;div&amp;gt;
    &amp;lt;%= submit &amp;quot;Save&amp;quot;%&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s try this out with: &lt;code&gt;mix phx.server&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;assuming all works as expected let&amp;rsquo;s make another git commit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;comment creation as a nested resource within posts&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;handle-input-errors&#34;&gt;Handle Input Errors&lt;/h2&gt;
&lt;p&gt;Prevent empty strings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/32784008/phoenix-render-template-of-other-folder&#34;&gt;https://stackoverflow.com/questions/32784008/phoenix-render-template-of-other-folder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;lets add a minimum message legth to comments:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs/comment.ex
  def changeset(comment, attrs) do
    comment
    |&amp;gt; cast(attrs, @required_fields)
    |&amp;gt; validate_required(@required_fields)
    |&amp;gt; validate_length(:message, min: 3)
  end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, change the controller to prep the data just like a post &lt;code&gt;show&lt;/code&gt; and send the changeset - with the errors. &lt;code&gt;|&amp;gt; put_view(FeenixIntroWeb.PostView)&lt;/code&gt; is how we redirect to other external views as of Phoenix 1.5.1:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/controllers/comment_controller.ex
  # add the alias
  alias FeenixIntro.Accounts

  # ...

  def create(conn, %{&amp;quot;post_id&amp;quot; =&amp;gt; post_id, &amp;quot;comment&amp;quot; =&amp;gt; comment_params}) do
    # ...

      # replace:
      # {:error, _changeset} -&amp;gt;
      #   conn
      #   |&amp;gt; put_flash(:error, &amp;quot;Comment creation failed, please fix the errors&amp;quot;)
      #   |&amp;gt; redirect(to: Routes.post_path(conn, :show, post))

      # with:
      {:error, %Ecto.Changeset{} = changeset} -&amp;gt;
        users = Accounts.list_users()
        conn
        |&amp;gt; put_flash(:error, &amp;quot;Comment creation failed, please fix the errors&amp;quot;)
        |&amp;gt; put_view(FeenixIntroWeb.PostView)   # as of Phoenix 1.5.1
        |&amp;gt; render(&amp;quot;show.html&amp;quot;, post: post, users: users, comment_changeset: changeset)
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming this works make a new git commit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;handle comment creation errors&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;flexible-preloading&#34;&gt;Flexible preloading&lt;/h2&gt;
&lt;p&gt;You may have noticed the pre-loading is hard-coded &amp;ndash; in this case it is ok, but might not always be good.  Here is a flexible alternative:&lt;/p&gt;
&lt;p&gt;We can update / replace the following functions with the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs.ex
  def list_posts(opts \\ [:user]) do
    preloads = Keyword.get(opts, :preloads, [])
    Post
    |&amp;gt; Repo.all()
    |&amp;gt; Repo.preload(preloads)
  end

  def get_post!(id, opts \\ [:user, comments: [:user]]) do
    preloads = Keyword.get(opts, :preloads, [])
    Post
    |&amp;gt; Repo.get!(id)
    |&amp;gt; Repo.preload(preloads)
  end

  def get_comment!(id, opts \\ [:user]) do
    preloads = Keyword.get(opts, :preloads, [])
    Comment
    |&amp;gt; Repo.get!(id)
    |&amp;gt; Repo.preload(preloads)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now we can change our show post controller to look like - so that we can use this flexibility:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/controllers/post_controller.ex
  # ...

  def index(conn, _params) do
    # posts = Blogs.list_posts()
    preloads = [:user]
    posts = Blogs.list_posts(preloads: preloads)
    render(conn, &amp;quot;index.html&amp;quot;, posts: posts)
  end

  def new(conn, _params) do
    users = Accounts.list_users()
    changeset = Blogs.change_post(%Post{})
    render(conn, &amp;quot;new.html&amp;quot;, changeset: changeset, users: users)
  end

  # ...

  def show(conn, %{&amp;quot;id&amp;quot; =&amp;gt; id}) do
    # post = Blogs.get_post!(id)
    preloads = [:user, comments: [:user]]
    post = Blogs.get_post!(id, preloads: preloads)
    users = Accounts.list_users()
    # This allows us to add comments on the Post show form!
    comment_changeset = Blogs.change_comment(%Comment{})
    render(conn, &amp;quot;show.html&amp;quot;, post: post,
                              users: users,
                              comment_changeset: comment_changeset)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have the flexibilty to preload or not depending on what we want to do,&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Phoenix 1.5 Blog Intro</title>
      <link>https://btihen.me/post_elixir_phoenix/phoenix_1_5_blog_intro/</link>
      <pubDate>Sat, 04 Jul 2020 13:06:29 +0200</pubDate>
      <guid>https://btihen.me/post_elixir_phoenix/phoenix_1_5_blog_intro/</guid>
      <description>&lt;h2 id=&#34;purpose&#34;&gt;Purpose&lt;/h2&gt;
&lt;p&gt;This article creates a basic web application backed by a database and creates a few relationships.  I&amp;rsquo;ll use the mix generator commands to make this process quick and easy.  In step two we will add a graphql api.&lt;/p&gt;
&lt;h2 id=&#34;topics-covered&#34;&gt;Topics Covered&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;create a project&lt;/li&gt;
&lt;li&gt;create a resource&lt;/li&gt;
&lt;li&gt;dropdown list of a collection&lt;/li&gt;
&lt;li&gt;pre-load/display sub-reources&lt;/li&gt;
&lt;li&gt;create a has_many relationship&lt;/li&gt;
&lt;li&gt;create a belongs_to relationship&lt;/li&gt;
&lt;li&gt;delete has_many sub-resources when top resource is deleted&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;getting-started---create-an-app&#34;&gt;Getting Started - create an app&lt;/h2&gt;
&lt;p&gt;find the most recent phoenix version:
&lt;a href=&#34;https://github.com/phoenixframework/phoenix/releases&#34;&gt;https://github.com/phoenixframework/phoenix/releases&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix archive.install hex phx_new 1.5.3
mix phx.new feenix_intro
cd feenix_intro
mix ecto.create
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test with: &lt;code&gt;mix phx.server&lt;/code&gt; and go to &lt;code&gt;http://localhost:4000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Ideally you see a the Phoenix Start Page.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create a git snapshot&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init &amp;amp;&amp;amp; git add -A &amp;amp;&amp;amp; git commit -m &amp;quot;init&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-contexts&#34;&gt;Create Contexts&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Context helps us create areas of code isolation and creates an API for other contexts to use&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In our case we will need a Blogs and Accounts (better would have been Authors) context&lt;/p&gt;
&lt;p&gt;Blogs will have the posts and comments and Accounts will have the user and login credentials and user relationships (why not)?  To see the full documentation on Contexts see: &lt;a href=&#34;https://hexdocs.pm/phoenix/contexts.html&#34;&gt;https://hexdocs.pm/phoenix/contexts.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We will generate two resources and Contexts (and add more later) - lets start with users who will post their blogs (users will be within the Accounts context and posts will be within the Blogs context):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.gen.html Accounts User users name:string email:string username:string:unique
mix phx.gen.html Blogs Post posts title:string body:text user_id:references:users
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice we can generate unique fields with &lt;code&gt;:unique&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And we can generate relationships (foriegn keys) with &lt;code&gt;references&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now that we have generated our code - we need to make a few updates:&lt;/p&gt;
&lt;p&gt;First: we need to update our routes in the scope area to look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/ideas_web/router.ex
  scope &amp;quot;/&amp;quot;, FeenixIntroWeb do
    pipe_through :browser

    get &amp;quot;/&amp;quot;, PageController, :index
    resources &amp;quot;/users&amp;quot;, UserController
    resources &amp;quot;/posts&amp;quot;, PostController
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE: the API&amp;rsquo;s for our Contexts &lt;code&gt;Accounts&lt;/code&gt; and &lt;code&gt;Blogs&lt;/code&gt; is in &lt;code&gt;lib/feenix_intro/accounts.ex&lt;/code&gt; and &lt;code&gt;lib/feenix_intro/blogs/post.ex&lt;/code&gt; respectively - as we add more info into these contexts these files will get long!  &lt;strong&gt;Ideally you will always interact with the Context API and not the Repo directly this will help create much more managable code.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;define-the-has_many-relationship&#34;&gt;Define the has_many relationship&lt;/h2&gt;
&lt;p&gt;Before we migrate we need to define the relationships:&lt;/p&gt;
&lt;p&gt;so we update the users with a has_many relationship to posts&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/accounts/user.ex
defmodule FeenixIntro.Accounts.User do
  use Ecto.Schema
  import Ecto.Changeset
  alias FeenixIntro.Blogs.Post

  @required_fields [:name, :email, :username]

  schema &amp;quot;users&amp;quot; do
    has_many(:posts, Post)

    field :name, :string
    field :email, :string
    field :username, :string

    timestamps()
  end

  @doc false
  def changeset(user, attrs) do
    user
    |&amp;gt; cast(attrs, @required_fields)
    |&amp;gt; validate_required(@required_fields)
    |&amp;gt; unique_constraint(:username)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you skip the alias, then &lt;code&gt;has_many&lt;/code&gt; needs to be written as: &lt;code&gt;has_many(:posts, FeenixIntro.Blogs.Post)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;define-the-belongs_to-relationship&#34;&gt;Define the belongs_to relationship&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; replace the &lt;code&gt;field :user_id, :id&lt;/code&gt; with &lt;code&gt;belongs_to(:user, User)&lt;/code&gt; &amp;ndash; you CAN&amp;rsquo;T have both!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs/post.ex
defmodule FeenixIntro.Blogs.Post do
  use Ecto.Schema
  import Ecto.Changeset
  alias FeenixIntro.Blogs.Post
  alias FeenixIntro.Accounts.User

  @required_fields [:user_id, :title, :body]

  schema &amp;quot;posts&amp;quot; do
    belongs_to(:user, User)

    # field :user_id, :id
    field :body, :string
    field :title, :string

    timestamps()
  end

  @doc false
  def changeset(post, attrs) do
    post
    |&amp;gt; cast(attrs, @required_fields)
    |&amp;gt; validate_required(@required_fields)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE: &lt;code&gt;@required_fields [:user_id, :title, :body]&lt;/code&gt; isn&amp;rsquo;t required, but as things change defining a constant that can be reused can be convient.&lt;/p&gt;
&lt;h2 id=&#34;auto-delete-sub-resources&#34;&gt;Auto delete sub-resources&lt;/h2&gt;
&lt;p&gt;To be sure we don&amp;rsquo;t have unreferenced blogs if a user gets deleted we need to change our Blog migration to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# priv/repo/migrations/20200704152318_create_posts.exs
defmodule FeenixIntro.Repo.Migrations.CreatePosts do
  use Ecto.Migration

  def change do
    create table(:posts) do
      add :title, :string
      add :body, :text
      # remove the default
      # add :user_id, references(:users, on_delete: :nothing)
      # add the following to auto delete posts if user is deleted!
      add :user_id, references(:users, on_delete: :delete_all), null: false

      timestamps()
    end

    create index(:posts, [:user_id])
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now it should be safe to migrate using:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix ecto.migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;seed-data&#34;&gt;Seed Data&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s create seed data so that one we know how to do that and two have some data to test before we get all our views and forms working:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# priv/repo/seeds.exs

# Script for populating the database. You can run it as:
#
#     mix run priv/repo/seeds.exs
#
# We recommend using the bang functions (`insert!`, `update!`
# and so on) as they will fail if something goes wrong.

alias FeenixIntro.Repo
alias FeenixIntro.Blogs.Post
alias FeenixIntro.Accounts.User

# reset the datastore
Repo.delete_all(User) # this should also delete all Posts

# insert people
me = Repo.insert!(%User{ name: &amp;quot;Bill&amp;quot;, email: &amp;quot;bill@example.com&amp;quot;, username: &amp;quot;bill&amp;quot; })
dog = Repo.insert!(%User{ name: &amp;quot;Nyima&amp;quot;, email: &amp;quot;nyima@example.com&amp;quot;, username: &amp;quot;nyima&amp;quot; })
Repo.insert!(%Post{ user_id: me.id, title: &amp;quot;Elixir&amp;quot;, body: &amp;quot;Very cool ideas&amp;quot; })
Repo.insert!(%Post{ user_id: me.id, title: &amp;quot;Phoenix&amp;quot;, body: &amp;quot;live is fascinating&amp;quot; })
Repo.insert!(%Post{ user_id: dog.id, title: &amp;quot;Walk&amp;quot;, body: &amp;quot;oh cool&amp;quot; })
Repo.insert!(%Post{ user_id: dog.id, title: &amp;quot;Dinner&amp;quot;, body: &amp;quot;YES!&amp;quot; })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now as the comments state run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix run priv/repo/seeds.exs
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;
&lt;p&gt;run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.server
# or if you prefer:
# iex -S mix phx.server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Test USERS:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Go to: &lt;code&gt;http://localhost:4000/users&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;when we list users and create users - all is well&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TEST POSTS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Go to: &lt;code&gt;http://localhost:4000/posts&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;when we do the same withe posts - we get an error creating new posts and we don&amp;rsquo;t see the author in index and show&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we can&amp;rsquo;t create a post since we required the user_id and there is not field for that&lt;/li&gt;
&lt;li&gt;we can&amp;rsquo;t list the author&amp;rsquo;s name (just the author&amp;rsquo;s ID) until we preload the author along with the post&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;fix-post-creation-with-a-dropdown-list-of-resources&#34;&gt;Fix Post creation with a dropdown list of resources&lt;/h2&gt;
&lt;p&gt;Normally, this would be done with session info to autoselect the authenticated author, but that is for another day.  In this case, we will demonstrate how to load and pass a collection and use that to populate a dropdown entry.&lt;/p&gt;
&lt;p&gt;In the controller we must load users and add the user_id to the post form:
whe we look in the Accounts API we see: &lt;code&gt;list_users()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/controllers/post_controller.ex
  # ...
  # add the accounts context alias
  alias FeenixIntro.Accounts
  # ...
  def new(conn, _params) do
    changeset = Blogs.change_post(%Post{})
    # replace:
    # render(conn, &amp;quot;new.html&amp;quot;, changeset: changeset)
    # with:
    # collection of users for post form
    users = Accounts.list_users()
    # include the collection of users to the new form
    render(conn, &amp;quot;new.html&amp;quot;, changeset: changeset, users: users)
  end
  # ...
  def edit(conn, %{&amp;quot;id&amp;quot; =&amp;gt; id}) do
    post = Blogs.get_post!(id)
    changeset = Blogs.change_post(post)
    # replace:
    render(conn, &amp;quot;edit.html&amp;quot;, post: post, changeset: changeset)
    # with:
    users = Accounts.list_users()
    render(conn, &amp;quot;edit.html&amp;quot;, post: post, changeset: changeset, users: users)
  end
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to adapt the form to give us a choice of users:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/templates/post/form.html.eex
&amp;lt;%= form_for @changeset, @action, fn f -&amp;gt; %&amp;gt;
  &amp;lt;%= if @changeset.action do %&amp;gt;
    &amp;lt;div class=&amp;quot;alert alert-danger&amp;quot;&amp;gt;
      &amp;lt;p&amp;gt;Oops, something went wrong! Please check the errors below.&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;% end %&amp;gt;

  &amp;lt;%= label f, &amp;quot;Author&amp;quot; %&amp;gt;
  &amp;lt;%= select f, :user_id, Enum.map(@users, &amp;amp;{&amp;amp;1.name, &amp;amp;1.id}) %&amp;gt;
  &amp;lt;%= error_tag f, :user %&amp;gt;
  # ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming you can create posts now, lets make another git snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;users and posts resources can be created&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;display-the-author-of-post-with-preloads&#34;&gt;Display the Author of Post (with Preloads)&lt;/h2&gt;
&lt;p&gt;lets display the Blog author - that&amp;rsquo;s often interesting to others.
We can do this with preloading in our Blog context:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs.ex
  # change this line:
  # def list_posts, do: Repo.all(Post)
  def list_posts do
    Post
    |&amp;gt; Repo.all()
    |&amp;gt; Repo.preload(:user)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and also our get_post&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs.ex
  # change:
  # def get_post!(id), do: Repo.get!(Post, id)
  # into:
  def get_post!(id) do
    Post
    |&amp;gt; Repo.get!(id)
    |&amp;gt; Repo.preload(:user)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now we can update our index and show page to display the author&amp;rsquo;s name at the top of the page:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/templates/post/show.html.eex
&amp;lt;h1&amp;gt;Show Post&amp;lt;/h1&amp;gt;

&amp;lt;ul&amp;gt;

  &amp;lt;li&amp;gt;
    &amp;lt;strong&amp;gt;Author:&amp;lt;/strong&amp;gt;
    &amp;lt;%= @post.user.name %&amp;gt;
  &amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and in the index too:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/templates/post/index.html.eex
# ...
&amp;lt;%= for post &amp;lt;- @posts do %&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= post.user.name %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= post.title %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= post.body %&amp;gt;&amp;lt;/td&amp;gt;
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming authors and preload works properly, we can make another git snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;authors names are displayed now with preloading&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;source-code&#34;&gt;Source code&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/btihen/PhoenixIntro&#34;&gt;https://github.com/btihen/PhoenixIntro&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;helpful-resources-used&#34;&gt;Helpful Resources used:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://elixircasts.io/phoenix-contexts&#34;&gt;https://elixircasts.io/phoenix-contexts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/conradwt/zero-to-graphql-using-phoenix&#34;&gt;https://github.com/conradwt/zero-to-graphql-using-phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@damonvjanis/ecto-preloads-in-phoenix-contexts-167d11e5405e&#34;&gt;https://medium.com/@damonvjanis/ecto-preloads-in-phoenix-contexts-167d11e5405e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.to/joseph_lozano/setting-up-a-new-phoenix-1-5-project-with-phoenix-liveview-309n&#34;&gt;https://dev.to/joseph_lozano/setting-up-a-new-phoenix-1-5-project-with-phoenix-liveview-309n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/velotio-perspectives/creating-graphql-apis-using-elixir-phoenix-and-absinthe-486ff38f2549&#34;&gt;https://medium.com/velotio-perspectives/creating-graphql-apis-using-elixir-phoenix-and-absinthe-486ff38f2549&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Rework through Deliberate Practice</title>
      <link>https://btihen.me/post_edu/edgility_btihen_rework/</link>
      <pubDate>Sun, 28 Jun 2020 15:01:22 +0200</pubDate>
      <guid>https://btihen.me/post_edu/edgility_btihen_rework/</guid>
      <description>&lt;p&gt;Good learning projects (quite possibly all interesting projects), must have the right amount of complexity and built-in imperfections due to design trade-offs and compromises. This ensures that projects arenât google-able AND are challenging enough to encourage real learning. I like to think that âchallenging enoughâ ensures that students experience a sense of the âheroâs journeyâ while working on their projects and then when they are successful they will have a sense of pride in what they learned and accomplished.&lt;/p&gt;
&lt;p&gt;This level of complexity has two side effects that are common in the real world, but uncommon in education:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how to arrive at the best solution is unknown and uncertain (by even the teacher) and will require exploration - quite possibly there is more than one workable solution; and&lt;/li&gt;
&lt;li&gt;the process of exploring to find a workable solution will involve what is commonly called the dreaded deadend or, in my field of tech, going down the rabbit hole. Unfortunately, this is often seen as a problem - not knowing and not understanding is, after all, what schools set out to correct. Allowing students to head in the wrong direction, especially since many people value efficiency (for example, discovering the fastest way to learn), can seem wrong-headed, but schools in theory should value worthwhile learning as their top priority, not speed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ideally, as students work, they self-assess, self-reflect, and self-correct their own work. It is, unfortunately, very common that we as teachers correct students and we as teachers tell them not only what to rework, and how to do it. This may be efficient at getting certain results - for example, completed projects. However, I question if that is valuable learning. When we judge student work, students learn to work toward the approval found in a grade, which alters learning. Additionally, when we tell students what to do, they donât learn to self-regulate and self-motivate their own learning processes.&lt;/p&gt;
&lt;p&gt;On the other hand, when students can engage in &lt;strong&gt;deliberate practice&lt;/strong&gt; (where they self-assess, self-reflect, self-correct, and choose to &lt;strong&gt;redo&lt;/strong&gt; until they themselves are satisfied), then students not only learn the classroom curriculum, but also lifeworthy skills, including: problem solving skills, balancing competing design needs, grit (stick-to-it-ive-ness), self-directed learning, and the joy of learning and discovery. In this way, students are much more likely to become life-long learners.&lt;/p&gt;
&lt;p&gt;To ensure that students learn the process of &lt;strong&gt;deliberate practice&lt;/strong&gt;, it is important to create a classroom environment where it is straightforward for students to be able to self-assess. I have found the best way to do this is to use &lt;strong&gt;&amp;lsquo;natural&amp;rsquo; assessments&lt;/strong&gt;. At least in the world of code, engineering, and physics, this is pretty straightforward. Make rubrics in which the students can test themselves, e.g. in a class making boats, the rubric will ask if it floats with a payload, say a large coin. For areas where natural assessment isnât as easy, I teach the kids how to get (and give) each other helpful feedback (described in a later article). In this way, students are helping each other, learning from each other, and in the end self-assessing what to do with the feedback. They are no longer as reliant on the teacher.&lt;/p&gt;
&lt;p&gt;The beauty of letting students learn this way, when there is safety to explore &lt;i&gt;&lt;b&gt;(&amp;amp; make mistakes)&lt;/b&gt;&lt;/i&gt;, is that the students often enjoy the learning, gain self-confidence, and possibly learn the &lt;strong&gt;JOY&lt;/strong&gt; of learning. If this joy of learning becomes commonplace in education, we are very likely to have many more joyful, lifelong learners and innovators.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exploration in the Classroom</title>
      <link>https://btihen.me/post_edu/edgility_btihen_exploration/</link>
      <pubDate>Mon, 01 Jun 2020 16:57:16 +0200</pubDate>
      <guid>https://btihen.me/post_edu/edgility_btihen_exploration/</guid>
      <description>&lt;p&gt;Fun and a sense of adventure can be crucial to classroom engagement and learning. Cultivating a sense of adventure is similar to encouraging an atmosphere of playfulness and joy of learning. This can be quite straightforward when students are allowed to create their own goals and their own context for the goals within the curriculum. Of course, any good adventure canât be too easy. Itâs the teacherâs job to make sure a project has no obvious, googleable answer.&lt;/p&gt;
&lt;p&gt;We might worry that making the project hard and beyond what the students know how to do could be unfair or even unjust. This might be true. When students are used to the mindset of getting things right the first time, it is difficult for them to take an idea and âplayâ with it until something works. This adjustment takes some time, but once they get the hang of it, students enjoy exploring and they learn quickly.&lt;/p&gt;
&lt;p&gt;Personally, I most enjoy  observing how students learn resilience through âplayingâ with ideas and trying different options until they find a solution. In fact, in todayâs world it may be more important to learn resilience, persistence, and finding the next small workable step in order to progress toward a goal.&lt;/p&gt;
&lt;p&gt;Of course creating an environment where exploration can thrive requires not doing a few things, too - such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Not judging or criticizing mistakes or rework&lt;/li&gt;
&lt;li&gt;Not judging the work or its qualities, instead let the kids cultivate their own pride and ownership (the minimum quality tests need clear, objective and observable)&lt;/li&gt;
&lt;li&gt;Not celebrating the answers, but celebrating the exploratory and learning aspects.&lt;/li&gt;
&lt;li&gt;Not requiring that every student have the same depth of knowledge in each part of the project. It&amp;rsquo;s important to define baseline knowledge they all need to have - but after that they need to be free to explore more deeply what the student finds interesting.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To encourage exploration we have found that the following the guidance for a growth mindset is very helpful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Praise the grit and perseverance of arriving at a workable solution;&lt;/li&gt;
&lt;li&gt;Cultivate the mindset of finding the next workable thing to try, even when there is no clear path to the goal; and&lt;/li&gt;
&lt;li&gt;Encourage / expect (maybe even require) rework and changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On a practical note, it is important to create projects that are complex and have some built-in conflict that requires balancing and tradeoffs. This is important for several reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Without trade-offs, a problem isnât realistic and can be too easily googled.  The problem must be challenging enough or it isnât engaging (but it needs to be workable).&lt;/li&gt;
&lt;li&gt;Having to resolve a conflict or resolve tradeoffs and still arrive at one&amp;rsquo;s goals requires students to really go into depth and learn that aspect extra well.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In the world of engineering, it is important to have a solid generalist understanding of the field (like the basic required information tested at school), but that is rarely enough for most teams. It is important to be a specialist in at least one area of interest &amp;ndash; these are called âTâ shaped engineers - engineers that have gone deep into two areas are even more valuable and are called âÏâ shaped engineers. Iâm advocating for creating projects (and classroom environments) in school that cultivate the same generalist / specialist mindset that is often expected in graduate school and professional lives. Art curriculums have long taught the core skills and ideas and then expected students to explore and expand upon their interests. Imagine how engaging education could be when all aspects of schools encouraged choice and exploration.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Teaching this way can be uncomfortable for teachers who may traditionally have felt that they need to operate as the expert who knows everything. To model the idea, however, that you donât have to know everything, it is actually helpful not to know everything. In fact, you cannot give students a quick answer, which cuts off their chance to think through the problem, and instead you explore with the students and model how to learn and resolve difficult problems. The teacher must simply understand the basics and vocabulary of the field to help students interpret what they find.  Of course the teacher must also be comfortable modeling exploring the unknown with the kids.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Github Website with a Custom Domain &amp; SSL</title>
      <link>https://btihen.me/post_tech_notes/github_website_with_custom_domain/</link>
      <pubDate>Sun, 31 May 2020 13:22:48 +0200</pubDate>
      <guid>https://btihen.me/post_tech_notes/github_website_with_custom_domain/</guid>
      <description>&lt;h3 id=&#34;step-0-buy-a-domain-name&#34;&gt;step 0: buy a domain name&lt;/h3&gt;
&lt;p&gt;For these instructions use the (Namecheap)[https://www.namecheap.com/] service to buy your Domain.&lt;/p&gt;
&lt;h3 id=&#34;step-1-point-your-domain-name-at-usernamegithubio-optional&#34;&gt;step 1: point your domain name at: username.github.io (optional)&lt;/h3&gt;
&lt;p&gt;This takes quite a steps and disables https (more steps follow to renable ssl).  This article got me oriented:
&lt;a href=&#34;https://dev.to/rightfrombasics/connecting-namecheap-domain-with-github-pages-3nn6&#34;&gt;https://dev.to/rightfrombasics/connecting-namecheap-domain-with-github-pages-3nn6&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;log into Namecheap&lt;/li&gt;
&lt;li&gt;On the left is a sidebar with &lt;strong&gt;Dashboard&lt;/strong&gt; and the top.  Click on the &lt;strong&gt;Domain List&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Find your domain name and click the &lt;strong&gt;manage&lt;/strong&gt; button on the far right.&lt;/li&gt;
&lt;li&gt;Along the top click on &lt;strong&gt;Advanced DNS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Add your A records to the DNS config.  I typed: &lt;code&gt;dig btihen.github.io&lt;/code&gt; (of course replace with your github website name) and got:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.10.6 &amp;lt;&amp;lt;&amp;gt;&amp;gt; btihen.github.io
;; global options: +cmd
;; Got answer:
;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 28239
;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 512
;; QUESTION SECTION:
;btihen.github.io.		IN	A

;; ANSWER SECTION:
btihen.github.io.	3600	IN	A	185.199.110.153
btihen.github.io.	3600	IN	A	185.199.109.153
btihen.github.io.	3600	IN	A	185.199.108.153
btihen.github.io.	3600	IN	A	185.199.111.153
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So created the following A Records:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type          Host  Value             TTL
A Record      @     185.199.110.153   Automatic
A Record      @     185.199.109.153   Automatic
A Record      @     185.199.108.153   Automatic
A Record      @     185.199.111.153   Automatic
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Then I created a CNAME record:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;type          Host  Value             TTL
CNAME Record  www   btihen.github.io  Automatic
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-2-configure-you-github-site-to-accept-the-domain&#34;&gt;step 2: configure you github site to accept the domain&lt;/h3&gt;
&lt;p&gt;You need to make a file called CNAME in the root of your username.github.io repo and it contents must be your new domain name.&lt;/p&gt;
&lt;p&gt;For example I used:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd public
touch CNAME
echo &#39;btihen.me&#39; &amp;gt;&amp;gt; CNAME
git add .
git commit -m &#39;accept the domain name: btihen.me&#39;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-3-stop-and-check&#34;&gt;step 3: stop and check&lt;/h3&gt;
&lt;p&gt;NOW: &lt;code&gt;http://your-domain-name.com&lt;/code&gt; should work&lt;/p&gt;
&lt;h3 id=&#34;step-4-free-ssl-for-the-domain&#34;&gt;step 4: Free ssl for the domain&lt;/h3&gt;
&lt;p&gt;following the advice from: &lt;a href=&#34;https://dev.to/rightfrombasics/adding-ssl-to-your-site-free-1fa7&#34;&gt;https://dev.to/rightfrombasics/adding-ssl-to-your-site-free-1fa7&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;create a 
&lt;a href=&#34;https://www.cloudflare.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cloudflare&lt;/a&gt; account.&lt;/li&gt;
&lt;li&gt;choose the dns feature&lt;/li&gt;
&lt;li&gt;allow cloudflare to scan your dns records (it should get the same results as when you do: &lt;code&gt;dig username.github.io&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Continue through the cloudflare process &amp;amp; cloudflare will eventually give you 2 nameservers to use.&lt;/li&gt;
&lt;li&gt;Now you can have cloudflare take over your dns &amp;ndash; log into Namecheap&lt;/li&gt;
&lt;li&gt;On the left is a sidebar with &lt;strong&gt;Dashboard&lt;/strong&gt; and the top.  Click on the &lt;strong&gt;Domain List&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Find your domain name and click the &lt;strong&gt;manage&lt;/strong&gt; button on the far right.&lt;/li&gt;
&lt;li&gt;On the top bar choose &lt;strong&gt;Domain&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Find the &lt;strong&gt;Nameservers&lt;/strong&gt; section&lt;/li&gt;
&lt;li&gt;Choose &lt;strong&gt;Custom DNS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Add the tow servers given to you by Cloudflare and save.&lt;/li&gt;
&lt;li&gt;Go back to cloudflare and choose &lt;strong&gt;Full&lt;/strong&gt; end to end encryption&lt;/li&gt;
&lt;li&gt;Choose &lt;strong&gt;Always Use HTTPS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Save and click the &lt;strong&gt;Re-check now&lt;/strong&gt; button.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Unfortunately, now you need to wait for a 1/2 hour or morefor the dns service to transfer from Namecheap to Cloudflare.  Theoretically up to 48 hours (but a 1/2 hour is much more typical).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Explore, Uplift and Reflect</title>
      <link>https://btihen.me/post_edu/explore_uplift_reflect/</link>
      <pubDate>Sun, 24 May 2020 15:16:45 +0200</pubDate>
      <guid>https://btihen.me/post_edu/explore_uplift_reflect/</guid>
      <description>&lt;p&gt;Basically a mix of having the kids build on their strengths, &lt;strong&gt;exploring&lt;/strong&gt; the doing project based with and goal and within a context of the student&amp;rsquo;s choice.  The project-work uses many agile processes*, one step outside their knowledge/comfort,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Agility in this context means small-teams that work with small aspects of a bigger objective and build their knowledge / project iteratively and reflect (on demo suggestions (feedback) AND their own learning process) to inform the next iteration and enjoy the exploration of knowledge.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;teachers-responsibilities--activities&#34;&gt;Teacher&amp;rsquo;s Responsibilities &amp;amp; Activities&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;UPLIFT&lt;/strong&gt; &lt;em&gt;BUILD SUCCESS AND CONFIDENCE&lt;/em&gt; &amp;ndash; &lt;strong&gt;I personally like to borrow from the concept of the Hero&amp;rsquo;s Journey&lt;/strong&gt; - Help the student have a context and need to learn &amp;amp; &lt;strong&gt;apply&lt;/strong&gt; knowledge to the point where they can SOLVE A COMPLEX CHALLENGE to meet the goal within the context of the learning objectives of the class (or unit).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Uplifted Atmosphere&lt;/strong&gt; - guide kids to encourage strengths&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;re-enforce&lt;/em&gt; activities that builds the student&amp;rsquo;s confidence and joy in learning&lt;/li&gt;
&lt;li&gt;&lt;em&gt;re-direct&lt;/em&gt; distracting /destructive activities toward helpful actions&lt;/li&gt;
&lt;li&gt;&lt;em&gt;exploration&lt;/em&gt; create an atmosphere where learning can be fun, meaningful and exploratory (like young kids) and not stressful and time-based&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;Natural Assessment &amp;amp; Motivation&lt;/strong&gt; - whenever possible &amp;amp; allowed - I avoid grading, assessing and correcting students.  Instead, I encourage nature assessments and motivation.
&lt;em&gt;For example, while building boats, have a pool and criteria for &amp;ldquo;tracking&amp;rdquo;, &amp;ldquo;load&amp;rdquo;, etc. and have the students test the boat in the pool - where everyone can see and test the qualities.  To that end, I find it very helpful if the students work will be publicly viewed and seen by others - preferably with the students present to &amp;ldquo;show&amp;rdquo; their product &amp;amp; experience the pride (or embarrassment in their work).  That&amp;rsquo;s often much more ownership than a grade.&lt;/em&gt;
If a state or other external final exam like an AP test is part of the course &amp;ndash; then I suggest after covering the material in the project based way &amp;ndash; then spend the last part of the class doing practice exams until the students are comfortable with the exam aspects of the knowledge.  This mixed approach has been very successful in teaching AP Computer Science (nearly all students received the top score 19 of 20 students).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Teaching Activities&lt;/strong&gt; - guide kids to learn the materials (rarely instruct)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;guide students to other students who can help them&lt;/li&gt;
&lt;li&gt;help the students smallify their work to find something they can research &amp;amp; solve (the next doable step just beyond their skill-level)&lt;/li&gt;
&lt;li&gt;help the students with keywords, concepts and vocabulary to do the research for their next step&lt;/li&gt;
&lt;li&gt;help the students understand and interpret their research they found but don&amp;rsquo;t fully understand&lt;/li&gt;
&lt;li&gt;help the students apply their research they&amp;rsquo;ve understood conceptually, but unsure how to implement&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;students-responsibilities--activities&#34;&gt;Student&amp;rsquo;s Responsibilities &amp;amp; Activities&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Choice&lt;/strong&gt; - of goals and context within the context of the learning objectives of the class (or unit).  &lt;em&gt;For example to teach middle school students 3-D Analytical Geometry &amp;amp; Fluid Dynamics - students create companies and design a boat of their choice (and print versions of it as they refine it).  Each boat will need a specialty with a specialty (stability, comfort for people, speed, tracking, efficiency, load, &amp;hellip;) and can overcome some adversity (wind, waves, currents, &amp;hellip;)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Context&lt;/strong&gt; - students need to create a context they own for their chosen goal.  &lt;em&gt;This means creating a story (an explanation / real or imagined) for the importance of their chosen goal. For example when teaching Earth Sciences students could choose to make an Earthquake alarm system to help people in stay safe.  To that end they also have to consider the consequences of their system if people rely on it - and choose at least one failure condition they can mitigate.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Natural Assessment&lt;/strong&gt; - Students need to learn to take ownership for tracking their own knowledge, resources and quality.  &lt;em&gt;To that end, I avoid personally telling them what to correct, instead they need to get peer-reviews, do demos and get feedback from others and assess their work against their stated goals.  To that end I almost always require a public display of their work with them present.  Either a presentation or demos where people come by and they demo / explain their work.  I also have them practice within the class with each other - where they can see the quality and ideas of others with enough time to adjust their own work to meet their own standards or pride and avoid a sense of embarrassment (or not).&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Demos &amp;amp; Constructive Feedback&lt;/strong&gt; - ideally I have the kids have a project journal and demo notes and reflections need to be recorded&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Demos are IMPORTANT - putting students in the learners driver seat.  Students need to learn to get / ask for (&lt;strong&gt;pull&lt;/strong&gt;) their feedback to assess and adjust the quality and progress of their work (with help from the &lt;em&gt;Natural Assessment as a reality check &amp;ndash; not the teacher - &amp;lsquo;What does the water say?&#39;&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Students must learn to give &amp;amp; hear &amp;amp; accept feedback in their work.  To that end there are 4 rules to make this work - with more experience these can be loosened some:
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;plan&lt;/strong&gt; what and how to present the demo (&amp;amp; what the feedback might be - both likes and changes)&lt;/li&gt;
&lt;li&gt;present the demo &amp;amp; &lt;strong&gt;receiving feedback&lt;/strong&gt; - &lt;strong&gt;listen &amp;amp; take notes&lt;/strong&gt; (no challenges - keep it safe to &lt;strong&gt;give feedback&lt;/strong&gt;, further explanations or clarifications of misunderstandings - simply note ones reaction and reflect on how to improve the demo - theres no problem with doing a second demo with another group if the first group didn&amp;rsquo;t understand).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Giving Feedback&lt;/strong&gt; - includes two aspects:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;what is &lt;strong&gt;liked&lt;/strong&gt; and how that matches what is understood about the group&amp;rsquo;s goals&lt;/li&gt;
&lt;li&gt;what they think would make the work &lt;strong&gt;even better&lt;/strong&gt; (if something should change then is needs to be worded as - &amp;ldquo;I like this &amp;lsquo;pointy bow&amp;rsquo; and think it would be even better with a rounded bow&amp;rdquo;) - constructive and positive feedback (this takes practice &amp;ndash; kids (and teachers) are not well versed in &lt;strong&gt;&amp;ldquo;Pixar&amp;rsquo;s yes and &amp;hellip;&amp;quot;&lt;/strong&gt; feedback process&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;strong&gt;using a suggestion&lt;/strong&gt; each project must accept at least &lt;strong&gt;ONE&lt;/strong&gt; suggestion from another group (and credit them) and explain how they made the suggestion their own and integrated it into the project.  Without this - they cannot submit the project (its incomplete)!&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;&lt;strong&gt;Exploration&lt;/strong&gt; - kids should learn to enjoy learning&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;DO VERY little direct instruction (if any) - have the kids explore until they get a bit stuck (but don&amp;rsquo;t make them beg for help, just be patient and help them get unstuck - DON&amp;rsquo;T TELL THEM SOLUTIONS)&lt;/li&gt;
&lt;li&gt;learning need to change (as much as possible) from an external &amp;ldquo;death march&amp;rdquo; &lt;strong&gt;pushed&lt;/strong&gt; by the curriculum, but instead turned into a lean &lt;strong&gt;pull&lt;/strong&gt; system by the students own needs, interests and desire to fulfill their own chosen goals within their chosen context.&lt;/li&gt;
&lt;li&gt;ideally students track what they research and learn in the project journal.  Then all kids on the team have access to all the info (&amp;amp; is responsible to know what is known by others on the team - that is the homework - to know what others have done and be aware and understand it).  Occasionally, I look at the journal and ask other kids in the group to explain what another has researched and if the kids doesn&amp;rsquo;t know the material then the &amp;lsquo;researcher&amp;rsquo; is responsible to ensure the others on team &amp;lsquo;catch up&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;&lt;strong&gt;Path&lt;/strong&gt; - &lt;strong&gt;The Hero&amp;rsquo;s Journey &amp;amp; Smallify&lt;/strong&gt; - initially students are unfamilier with solving big complex problems without one clear &amp;lsquo;Googable&amp;rsquo; answer&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;smallify&lt;/strong&gt; - students need to learn to find the next workable step just beyond their knowledge &amp;ndash; but doable (initially kids need help with this!)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;small enough&lt;/strong&gt; - where its easy to have false starts, make lots of changes and explore and after feedback &amp;ndash; make changes without being upset at the invested time.  &lt;strong&gt;Small enough means that it is fun to explore and make changes!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hero&amp;rsquo;s Journey&lt;/strong&gt; - each project needs to involve complexity &lt;em&gt;(that has no one right solution)&lt;/em&gt; but involves a complex compromise to arrive at one&amp;rsquo;s goals.  This helps the students really learn the depth of the material and the compromises needed to accomplish their goals. (there have been recent studies showing that people only fully understand a topic and its related implications when they go through process of exploring complex compromises)&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;&lt;strong&gt;Reflection &amp;amp; Change&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;another form of reflection - done ideally daily, they asses their progress (initially I like to review their burn-down on their way out at the end of class with them and help them reflect on and verbalize what skills they are using to make progress &amp;amp; contemplate if its possible to build even more on those strengths and to reflect on whats hinder them (&amp;amp; see if they can replace that activity with something more helpful).  Over time I like to encourage the kid to just update me their progress and reflections on their way out of class.&lt;/li&gt;
&lt;li&gt;students need to get regular feedback on each phase of their work (ideally at least weekly) &amp;amp; at some point each group&amp;rsquo;s project must have at least on change inspired by feedback from another group or individual outside their group - and credit that person / group. Even if &amp;amp; in-fact ideally - they take the idea and adapt it to their needs needs and goals.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Academic Content Commands</title>
      <link>https://btihen.me/post_tech_notes/hugo_academic_cheatsheet/</link>
      <pubDate>Sat, 23 May 2020 10:39:21 +0200</pubDate>
      <guid>https://btihen.me/post_tech_notes/hugo_academic_cheatsheet/</guid>
      <description>&lt;h2 id=&#34;from-the-academic-documentation&#34;&gt;From the Academic Documentation&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content&#34;&gt;https://sourcethemes.com/academic/docs/managing-content&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;create-a-user&#34;&gt;Create a User&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;hugo new --kind authors authors/firstname_lastname
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;add person&amp;rsquo;s image&lt;/strong&gt; (png or jpg)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp picture.jpg content/authors/firstname_lastname/avatar.jpg
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-blog&#34;&gt;Create a Blog&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;hugo new --kind post post/blog_title
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;images within the article&lt;/strong&gt; - add images to the article folder:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp image.jpg content/post/blog_title/article_image.jpg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and add it to the content using: &lt;code&gt;![kanban](example.jpg)&lt;/code&gt; within the article&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;add a display image&lt;/strong&gt; (png or jpg)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp picture.jpg content/post/blog_title/featured.jpg
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;add-a-publication-reference&#34;&gt;Add a Publication Reference&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;hugo new --kind publication publication/publication_title
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;add a display image&lt;/strong&gt; (png or jpg)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp picture.jpg content/publication/publication_title/featured.jpg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;add a pdf&lt;/strong&gt; (with the same name as the folder) and it will be automatically available&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp picture.pdf content/publication/publication_title/publication_title.pdf
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-project&#34;&gt;Create a Project&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;hugo new --kind project project/project_name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;add a display image&lt;/strong&gt; (png or jpg)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp picture.jpg content/project/project_name/featured.jpg
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-talk&#34;&gt;Create a Talk&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;hugo new --kind talk talk/my-talk-name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Talk Slides&lt;/strong&gt; are a bit more complicated see:
&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#create-slides&#34;&gt;https://sourcethemes.com/academic/docs/managing-content/#create-slides&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;course-documentation&#34;&gt;Course (Documentation)&lt;/h2&gt;
&lt;p&gt;This is tricky (copy and rename an existing &lt;code&gt;course&lt;/code&gt; and adapt it)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;courses&lt;/code&gt; can be renamed and can have multiple folders (courses) within it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; the &lt;code&gt;algebra_1&lt;/code&gt; folder cannot have any sub-folders. Within an actual course all materials must be within a FLAT hierarchy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Website using Github</title>
      <link>https://btihen.me/post_tech_notes/hugo_academic_website_steps/</link>
      <pubDate>Sat, 16 May 2020 10:39:21 +0200</pubDate>
      <guid>https://btihen.me/post_tech_notes/hugo_academic_website_steps/</guid>
      <description>&lt;h3 id=&#34;step-0-install-hugo&#34;&gt;step 0: install hugo&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;brew install hugo
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-1-create-a-public-username_website-repo&#34;&gt;step 1: create a &lt;strong&gt;public&lt;/strong&gt; &lt;code&gt;username_website&lt;/code&gt; repo&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;ll assume your github account is &lt;code&gt;username&lt;/code&gt; I think this repo needs to be publicly readable (not 100% sure)&lt;/p&gt;
&lt;h3 id=&#34;step-2-clone-the-academic-hugo-locally&#34;&gt;step 2: clone the academic hugo locally&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/sourcethemes/academic-kickstart.git username_website
cd academic_website
git submodule update --init --recursive  # without this the site won&#39;t start correctly
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;be sure you have many files within: &lt;strong&gt;&lt;code&gt;themes/academic&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;step-3-update-gitignore--public-folder&#34;&gt;step 3: Update .gitignore &amp;amp; public folder&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;update &lt;code&gt;.gitignore&lt;/code&gt; remove the line with &lt;code&gt;public&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;be sure there is no &lt;code&gt;public&lt;/code&gt; folder (yet), if there is remove it and all its contents.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;step-4-point-this-repo-to-your-username_website-repo&#34;&gt;step 4: point this repo to your &lt;code&gt;username_website&lt;/code&gt; repo&lt;/h3&gt;
&lt;p&gt;I have found the easiest way to overwrite the source &lt;code&gt;origin&lt;/code&gt; repo is to do this by hand.&lt;/p&gt;
&lt;p&gt;Currently your &lt;code&gt;.git/config&lt;/code&gt; file will currently look like (notice the url referencing: &lt;code&gt;git://github.com/sourcethemes/academic-kickstart.git&lt;/code&gt; - this is what we need to update):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true
[remote &amp;quot;origin&amp;quot;]
	url = git://github.com/sourcethemes/academic-kickstart.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch &amp;quot;master&amp;quot;]
	remote = origin
	merge = refs/heads/master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;change the origin url by hand or by using sed:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sed -i.bak -e &#39;s/https:\/\/github.com\/sourcethemes\/academic-kickstart.git/git@github.com:username\/username_website.git/&#39; .git/config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;when your &lt;code&gt;.git/config&lt;/code&gt; file is correct it will look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true
[remote &amp;quot;origin&amp;quot;]
	url = git@github.com:username/username_website.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch &amp;quot;master&amp;quot;]
	remote = origin
	merge = refs/heads/master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now you can push this local repo to your github repo using:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git push -u origin --all
# git init
# git add .
# git commit -m &amp;quot;Initial commit&amp;quot;
# git push -u origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-5-configure-website-basics&#34;&gt;step 5: configure website basics&lt;/h3&gt;
&lt;h4 id=&#34;5a-set-your-site-name&#34;&gt;5A: Set your site name:&lt;/h4&gt;
&lt;p&gt;in &lt;code&gt;config/_default/config.toml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;find the &lt;code&gt;title&lt;/code&gt; attribute and set it to &lt;code&gt;username&lt;/code&gt; (or whatever is appropriate)&lt;/p&gt;
&lt;h4 id=&#34;5b-pick-a-themes&#34;&gt;5B: Pick a themes&lt;/h4&gt;
&lt;p&gt;from &lt;a href=&#34;https://sourcethemes.com/academic/themes/&#34;&gt;https://sourcethemes.com/academic/themes/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in &lt;code&gt;config/_default/config.toml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;find the &lt;code&gt;theme&lt;/code&gt; attribute and set it to your favorite theme color (or leave it as is)&lt;/p&gt;
&lt;h4 id=&#34;5c-site-logo--favicon&#34;&gt;5C: site logo &amp;amp; favicon&lt;/h4&gt;
&lt;p&gt;Put your image files into assets/images:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;logo.png&lt;/code&gt; (the logo on your webpage) file and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;icon.png&lt;/code&gt; (the favicon - icon in the webtab)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can go to &lt;code&gt;https://www.namecheap.com/logo-maker&lt;/code&gt; and make a logo&lt;/p&gt;
&lt;h4 id=&#34;5d-menu-items&#34;&gt;5D: menu items&lt;/h4&gt;
&lt;p&gt;in &lt;code&gt;config/_default/menus.toml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;remove any items you won&amp;rsquo;t use.  In my case this file now looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[[main]]
  name = &amp;quot;Posts&amp;quot;
  url = &amp;quot;#posts&amp;quot;
  weight = 20

[[main]]
  name = &amp;quot;About&amp;quot;
  url = &amp;quot;#about&amp;quot;
  weight = 50

[[main]]
  name = &amp;quot;Contact&amp;quot;
  url = &amp;quot;#contact&amp;quot;
  weight = 60
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These will also be the sections on the home page that will be enabled and configured.&lt;/p&gt;
&lt;p&gt;The larger the weight the further to the &lt;strong&gt;right&lt;/strong&gt; the item will be shown.&lt;/p&gt;
&lt;h3 id=&#34;step-6-configure-site-parameters&#34;&gt;step 6: configure site parameters&lt;/h3&gt;
&lt;p&gt;You may want to read through all the params - but the ones listed here are enough to get started.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;site_type&lt;/strong&gt; &amp;ndash; in the file: &lt;code&gt;config/_default/params.toml&lt;/code&gt;: be sure to configure the &lt;code&gt;site_type&lt;/code&gt; variable&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;configure &amp;lsquo;contact details&amp;rsquo;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;if you choose not to add an email, then be sure to set the variable &lt;code&gt;email_form=0&lt;/code&gt; on the &lt;code&gt;content/home/contact.md&lt;/code&gt; file!&lt;/li&gt;
&lt;li&gt;if you choose not to enter an address and coordinates the in the &lt;code&gt;[map]&lt;/code&gt; section set the &lt;code&gt;engine=0&lt;/code&gt; to avoid problems.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;configure social details&lt;/strong&gt; &amp;ndash; optional&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Regional Settings&lt;/strong&gt; &amp;ndash; NOTE: The date display settings seems to have a bug &amp;ndash; so I don&amp;rsquo;t recommend adjusting that.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;step-7-configure-your-homepage&#34;&gt;step 7: configure your homepage&lt;/h3&gt;
&lt;p&gt;At this point I suggest starting &lt;code&gt;hugo server&lt;/code&gt; so you can watch your edits.&lt;/p&gt;
&lt;p&gt;Now go into the folder &lt;code&gt;content/home&lt;/code&gt; and we will adjust or disable the files in this folder.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;disable with: &lt;code&gt;active=false&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;enable with: &lt;code&gt;active=true&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;oder with: &lt;code&gt;weight=20&lt;/code&gt; the bigger the number the further down on the page is show (I suggest you use the same weights used in the menu)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;contact.md&lt;/code&gt;&lt;/strong&gt; - review and see if changes are desired.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;accomplishments.md&lt;/code&gt;&lt;/strong&gt; - (and all other home page sections you decide not to display) change &lt;code&gt;active=true&lt;/code&gt; to &lt;strong&gt;&lt;code&gt;active=false&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;7a-about-page&#34;&gt;7A: &lt;code&gt;about&lt;/code&gt; page&lt;/h4&gt;
&lt;p&gt;I prefer to use the &lt;code&gt;about&lt;/code&gt; page when it is a person&amp;rsquo;s site and the &lt;code&gt;people&lt;/code&gt; page when the site is about a group effort.  So in this case:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo new --kind authors authors/author_name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;content/home/about.md&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;change the title to whatever you like: biography, about, etc&amp;hellip;&lt;/li&gt;
&lt;li&gt;change the variable &lt;code&gt;author&lt;/code&gt; to match the name you used to generate you profile above, ie:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;author = &amp;quot;author_name&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;content/authors/author_name/_index.md&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adjust the file so the information is accurate&lt;/li&gt;
&lt;li&gt;below the &lt;code&gt;---&lt;/code&gt; toward the end of the file, add your own free text to the about page.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;content/authors/author_name/avatar.jpeg&lt;/code&gt;&lt;/strong&gt; (png, jpg, etc also work)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add an attractive image to the folder &lt;code&gt;content/authors/author_name/&lt;/code&gt; and name it: &lt;strong&gt;&lt;code&gt;avatar.jpg&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;7b-people-or-team-page&#34;&gt;7B: &lt;code&gt;people&lt;/code&gt; (or Team) page&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;disable &lt;code&gt;content/home/about.md&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mark the &lt;code&gt;active&lt;/code&gt; variable as &lt;code&gt;false&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;active=false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;enable &lt;code&gt;content/home/people.md&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set &lt;code&gt;active=true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;create sub-group names:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;[content]
  user_groups = [&amp;quot;Educators&amp;quot;, &amp;quot;Researchers&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or alternatively, use an empty string to create a team without sub-teams:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[content]
  user_groups = [&amp;quot;&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Create the people (authors)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo new --kind authors authors/person_name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;content/authors/person_name/_index.md&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add one (or more) &lt;code&gt;user_group&lt;/code&gt; to the person&amp;rsquo;s profile using the &lt;code&gt;user_groups&lt;/code&gt; variable:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;user_groups = [&amp;quot;Educators&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if you used an empty string in &lt;code&gt;people.md&lt;/code&gt; add:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;user_groups = [&amp;quot;&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Edit this file so that the information is accurate&lt;/li&gt;
&lt;li&gt;below the &lt;code&gt;---&lt;/code&gt; toward the end of the file, add your own free text to the about page.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;content/authors/person_name/avatar.jpeg&lt;/code&gt;&lt;/strong&gt; (png, jpg, etc also work)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add an attractive image to the folder &lt;code&gt;content/authors/person_name/&lt;/code&gt; and name it: &lt;strong&gt;&lt;code&gt;avatar.jpg&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;step-8-test-publish-to-usernamegithubio&#34;&gt;step 8: Test publish to &lt;code&gt;username.github.io&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;When you site is good enough to publish then its time to follow the following steps (these MUST be done in order to prevent problems!)&lt;/p&gt;
&lt;h4 id=&#34;8a-public-folder-non-existent&#34;&gt;8A: public folder (non-existent)&lt;/h4&gt;
&lt;p&gt;The first time you do setup for publishing it is important this folder doesn&amp;rsquo;t exist yet and that &lt;code&gt;public&lt;/code&gt; isn&amp;rsquo;t listed in the .gitignore` file&lt;/p&gt;
&lt;h4 id=&#34;8b-git-snapshot&#34;&gt;8B: git snapshot&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;(DO NOT YET GENERATE your website)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Create your git snapshot (very important at this point since the next steps are tricky)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;First draft of homepage&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;8c-make-second-github-repo-usernamegithubio&#34;&gt;8C: make second github repo &lt;strong&gt;&lt;code&gt;username.github.io&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Now make a second &lt;strong&gt;public&lt;/strong&gt; repo (CLICK THE BOX TO INCLUDE A &lt;strong&gt;README&lt;/strong&gt; and/or a &lt;strong&gt;LISENCE&lt;/strong&gt; file!) on github called &lt;strong&gt;&lt;code&gt;username.github.io&lt;/code&gt;&lt;/strong&gt;, this MUST be exactly: &lt;code&gt;username.github.io&lt;/code&gt; for this to work!&lt;/p&gt;
&lt;p&gt;Double check your repo is not empty, but has a &lt;strong&gt;README&lt;/strong&gt; and/or a &lt;strong&gt;LISENCE&lt;/strong&gt; file.&lt;/p&gt;
&lt;p&gt;NOW go to github repo &lt;strong&gt;settings&lt;/strong&gt; and click on &lt;strong&gt;manage access&lt;/strong&gt; and be sure you have permission to at administer (or at least write to this repo) &amp;ndash; probably not so click the &lt;strong&gt;&lt;code&gt;invite teams or people&lt;/code&gt;&lt;/strong&gt; button and add yourself as an admin (an other as needed).&lt;/p&gt;
&lt;h4 id=&#34;8d-clone-usernamegithubio-to-public-within-your-hugo-project&#34;&gt;8D: clone &lt;strong&gt;&lt;code&gt;username.github.io&lt;/code&gt;&lt;/strong&gt; to public (within your Hugo project)&lt;/h4&gt;
&lt;p&gt;now go back into your website code (root folder) and type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/username/username.github.io.git public
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if you see: &lt;code&gt;warning: You appear to have cloned an empty repository.&lt;/code&gt; &amp;ndash; go back to the repo and create a README file!&lt;/p&gt;
&lt;h4 id=&#34;8e-check-your-permissions&#34;&gt;8E: check your permissions&lt;/h4&gt;
&lt;p&gt;enter you public folder and create an &lt;code&gt;index.html&lt;/code&gt; file and put in very simple html code: &lt;code&gt;&amp;lt;h1&amp;gt;Hello username.github.io&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd public
touch index.html
echo &#39;&amp;lt;h1&amp;gt;Hello username.github.io&amp;lt;/h1&amp;gt;&#39; &amp;gt;&amp;gt; index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now check this in and push it to github.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;test webpage&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point you should see a bunch of message and toward the end you should see a line with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;To github.com:username/username.github.io.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If instead you get the error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;remote: Permission to peakchallenges/peakchallenges.github.io.git denied to btihen.
fatal: unable to access &#39;https://github.com/peakchallenges/peakchallenges.github.io.git/&#39;: The requested URL returned error: 403
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;go back and check your site permissions.&lt;/p&gt;
&lt;p&gt;If site permissions aren&amp;rsquo;t a problem do the following:&lt;/p&gt;
&lt;p&gt;re-create your website repo &lt;code&gt;username.github.io.git&lt;/code&gt; outside the webcode project.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone git@github.com:username/username.github.io.git
cd username.github.io
echo &#39;&amp;lt;h1&amp;gt;Hello username.github.io - v1&amp;lt;/h1&amp;gt;&#39; &amp;gt;&amp;gt; index.html
git add index.html
git commit -m &amp;quot;update readme and test permissions&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;assuming this works then move this repo into the hugo repo:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rm -rf username_website/public
mv username.github.io username_website/public
cd username_website/public
echo &#39;&amp;lt;h1&amp;gt;Hello username.github.io - v2&amp;lt;/h1&amp;gt;&#39; &amp;gt;&amp;gt; index.html
git commit -am &amp;quot;update readme and test permissions within hugo project&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;8f-check-the-website&#34;&gt;8F: check the website&lt;/h4&gt;
&lt;p&gt;Wait a few minutes and go to the website &lt;code&gt;https://username.github.io&lt;/code&gt; and be sure you see your newly published html page.&lt;/p&gt;
&lt;h3 id=&#34;step-9-configure-public-as-a-submodule&#34;&gt;step 9: configure &lt;code&gt;public&lt;/code&gt; as a &lt;strong&gt;submodule&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Now add the username.github.io repo as a submodule to your website code repo using.  This allows nested projects without confusing git.&lt;/p&gt;
&lt;p&gt;First be sure you are in the hugo root and not the public folder and type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd public
git submodule add -b master https://github.com/username/username.github.io.git public`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now in &lt;code&gt;.git/modules&lt;/code&gt; you might see a folder called &lt;code&gt;public&lt;/code&gt; (with a bunch of stuff in it) if not simply edit your &lt;code&gt;.git/config&lt;/code&gt; so that after:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[submodule &amp;quot;themes/academic&amp;quot;]
  path = themes/academic
  url = https://github.com/gcushen/hugo-academic.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you see:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[submodule &amp;quot;public&amp;quot;]
  path = public
  url = https://github.com/username/username.github.io.git
  branch = master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can add it by hand or with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt;&amp;quot;EOF&amp;quot; &amp;gt;&amp;gt; git/config
[submodule &amp;quot;public&amp;quot;]
  path = public
  url = https://github.com/username/username.github.io.git
  branch = master
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-10-publish-your-new-hugo-webpage&#34;&gt;step 10: publish your new Hugo webpage:&lt;/h3&gt;
&lt;p&gt;Now to publish the Hugo site you prepared do the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo -d public
cd public
git add .
git commit -m &amp;quot;first webpage content&amp;quot;
git push
# toward the end you should see: `To github.com:username/username.github.io.git`
cd ..
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Follow this proceedure every time you update your site.&lt;/p&gt;
&lt;p&gt;NOTE: BE SURE NOT TO delete the folder &lt;code&gt;public/.git/&lt;/code&gt; or you will need to reconfigure your public submodule.&lt;/p&gt;
&lt;p&gt;now go back to &lt;code&gt;https://username.github.io&lt;/code&gt; and you should see your hugo site!&lt;/p&gt;
&lt;p&gt;(This might take a few minutes &amp;ndash; up to a half-hour &amp;ndash; to publish)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker Intro using MailCatcher</title>
      <link>https://btihen.me/post_tech_notes/docker_intro_with_mail_catcher/</link>
      <pubDate>Tue, 12 May 2020 21:19:09 +0200</pubDate>
      <guid>https://btihen.me/post_tech_notes/docker_intro_with_mail_catcher/</guid>
      <description>&lt;h3 id=&#34;intro&#34;&gt;&lt;strong&gt;Intro&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;It is often helpful to be able to test email sending from an application during development or testing (or even to make testing emails on a staging server possible).&lt;/p&gt;
&lt;p&gt;To do this follow these instructions for a safe convenient way to test and inspect emails sent from an application.&lt;/p&gt;
&lt;h3 id=&#34;setup&#34;&gt;&lt;strong&gt;SETUP&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;First we need to get the repo (or at least the docker file)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# get the mailcatcher repo
git clone git@github.com:sj26/mailcatcher.git

# go into mailcather repo
cd mailcatcher

# configure to use the newest `released` gem version of mailcatcher
sed -i.bu1 &#39;s/FROM ruby:2.5/FROM ruby:2.6/&#39; Dockerfile
sed -i.bu2 &#39;s/ARG VERSION=0.6.5/ARG VERSION=0.7.1/&#39; Dockerfile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Dockerfile should now look like (which is actually all that is actually needed):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM ruby:2.6
MAINTAINER Samuel Cochran &amp;lt;sj26@sj26.com&amp;gt;

ARG VERSION=0.7.1

RUN gem install mailcatcher -v $VERSION

EXPOSE 1025 1080

ENTRYPOINT [&amp;quot;mailcatcher&amp;quot;, &amp;quot;--foreground&amp;quot;]
CMD [&amp;quot;--ip&amp;quot;, &amp;quot;0.0.0.0&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;build-image&#34;&gt;&lt;strong&gt;BUILD IMAGE&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Now you can download the docker image and install the gems into it with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# -t adds repository:tag info -- the &#39;.&#39; at the end is important:
docker build -t btihen/ruby/mailcatcher:ruby_2.6 .
# ...
# should end with something like
# Successfully built 21e0de2bdd68

# now tag it as the **lasted** image with:
docker build -t btihen/ruby/mailcatcher:latest .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now you can see your list of docker images (you should see the starting image/container we just created):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker images
REPOSITORY                 TAG                 IMAGE ID            CREATED             SIZE
btihen/ruby/mailcatcher    latest              21e0de2bdd68        8 minutes ago       870MB
btihen/ruby/mailcatcher    ruby_2.6            21e0de2bdd68        8 minutes ago       870MB
ruby                       2.6                 a98425292e84        2 weeks ago         843MB
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;build-container&#34;&gt;&lt;strong&gt;BUILD CONTAINER&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Now start the docker image using the build image id (&lt;code&gt;-d&lt;/code&gt; allows it to run in the backgroud, &lt;code&gt;-p 1025:1025 -p 1080:1080&lt;/code&gt; opens a connection on ports 1025 &amp;amp; 1080 from localhost to the docker image):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# build a container so we can test our image
docker run -d -p 1025:1025 -p 1080:1080 --name mailcatcher btihen/ruby/mailcatcher:latest

# or if you like ids better
docker run -d -p 1025:1025 -p 1080:1080 --name mailcatcher 21e0de2bdd68

# if you forgot the image-id you can list the images with:
docker images
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;testing-http--smtp&#34;&gt;&lt;strong&gt;TESTING (http &amp;amp; smtp)&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;now you should be able to go to &lt;code&gt;http://localhost:1080&lt;/code&gt; and see the mailcatcher webpage.&lt;/p&gt;
&lt;p&gt;now lets test the smtp side from the cli using these instructions: &lt;code&gt;https://www.shellhacks.com/send-email-smtp-server-command-line/&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# connect to the mail server
$ telnet localhost 1025
# or
$ telnet 127.0.0.1 1025
220 smtp.domain.ext ESMTP Sendmail ?version-number?; ?date+time+gmtoffset?

# declare yourself (IP or DNS)
&amp;gt; HELO local.domain.name
250 smtp.domain.ext Hello local.domain.name [xxx.xxx.xxx.xxx], pleased to meet you

# declare who the email is from:
&amp;gt; MAIL FROM: test@local.domain.name
250 2.1.0 sender@adress.ext... Sender ok

# declare who should get the email:
&amp;gt; RCPT TO: recipient@adress.ext
250 2.1.5 recipient@adress.ext... Recipient ok

# setup the DATA transmission:
 &amp;gt; DATA
354 Enter mail, end with &amp;quot;.&amp;quot; on a line by itself

# type a subject two returns and a message ending with &#39;.&#39; (on its own line):
SUBJECT: Test message

Hello,
this is a TEST message,
please don&#39;t reply.
Thank you.
.

# end the connection
&amp;gt; QUIT
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now check the mail has arrived in mailcatcher at &lt;code&gt;localhost:1080&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Assuming you see the email sent - you can be sure your image &amp;amp; container is setup properly.&lt;/p&gt;
&lt;h3 id=&#34;stopping-exited-container&#34;&gt;&lt;strong&gt;STOPPING (exited) CONTAINER&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;When we are done with mailcatcher we can stop the docker process:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker ps -a
docker kill mailcatcher
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;starting-built-but-exited-containers&#34;&gt;&lt;strong&gt;STARTING BUILT (but exited) CONTAINERS&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;To restart mailcatcher at a later date simply type:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker start mailcatcher&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;sharing-images-once-they-work&#34;&gt;&lt;strong&gt;SHARING IMAGES (once they work)&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# login to the Azure Container Repository
docker login btihen -u username -p xxxxxxxxxxx

# upload the new image
docker push btihen/ruby/mailcatcher
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;retrieving-shared-image&#34;&gt;&lt;strong&gt;RETRIEVING SHARED IMAGE&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;az acr login --name username
az acr repository list --name username --output table

# getting the image
docker pull btihen/ruby/image_name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;containerize the image&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# these are the default local ports - adjust to your needs
docker run -d -p 1025:1025 -p 1080:1080 --name mailcatcher btihen/ruby/mailcatcher:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;start the container&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker start mailcatcher
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;listing-repo-images&#34;&gt;&lt;strong&gt;LISTING Repo IMAGES&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;One-time install&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# if needed install the azure cli
brew update &amp;amp;&amp;amp; brew install azure-cli

# the following may also be needed:
brew update &amp;amp;&amp;amp; brew install python3 &amp;amp;&amp;amp; brew upgrade python3
brew link --overwrite python3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Retrieve the image list&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# login with the azure-cli
az acr login --name username

# list the images
az acr repository list --name username --output table
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;removing-containers&#34;&gt;&lt;strong&gt;REMOVING CONTAINERS&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;when we no longer need mailcatcher we can remove it with (&lt;code&gt;-a&lt;/code&gt; lists running and stopped containers):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker ps -a
docker rm mailcatcher
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;REMOVING IMAGES&lt;/strong&gt;
To fully clean up and remove (images &amp;ndash; after the containers are removed):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker images
REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE
btihen/ruby/mailcatcher  ruby_2.5            21e0de2bdd68        25 minutes ago      870MB
ruby                     2.5                 a98425292e84        2 weeks ago         843MB

$ docker image rm 21e0de2bdd68

$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
ruby                2.5                 a98425292e84        2 weeks ago         843MB
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Phoenix 1.5 LiveView &amp; PubSub Basics</title>
      <link>https://btihen.me/post_elixir_phoenix/phoenix_1_5_live_view_basics/</link>
      <pubDate>Sun, 10 May 2020 17:01:53 +0200</pubDate>
      <guid>https://btihen.me/post_elixir_phoenix/phoenix_1_5_live_view_basics/</guid>
      <description>&lt;p&gt;I have been watching Phoenix and Elixir for a while, and the idea of writing dynamic Web Applications without needing a ton of JavaScript is very interesting.  I recently saw this video by Chris McCord:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=MZvmYaFkNJI&amp;amp;feature=youtu.be&#34;&gt;https://www.youtube.com/watch?v=MZvmYaFkNJI&amp;amp;feature=youtu.be&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;which is very cool.  I wanted to learn more and found this Phoenix 1.4 tutorial:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=2bipVjOcvdI&#34;&gt;https://www.youtube.com/watch?v=2bipVjOcvdI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dennisbeatty.com/2019/03/19/how-to-create-a-counter-with-phoenix-live-view.html&#34;&gt;https://dennisbeatty.com/2019/03/19/how-to-create-a-counter-with-phoenix-live-view.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and decided to translate that into Phoenix 1.5. This is what follows.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Since I am just learning the Phoenix Framework and will need to refer to this for my self to remember how to do basic things &amp;ndash; I&amp;rsquo;ve documented every little detail.&lt;/p&gt;
&lt;h3 id=&#34;step-0---setup-environment&#34;&gt;Step 0 - setup environment&lt;/h3&gt;
&lt;p&gt;Setup environment &amp;amp; newest version of elixir:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exenv install 1.10.3
exenv global
exenv local 1.10.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install the 1.5.1 phx_new generator:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mix archive.install hex phx_new 1.5.1&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;step-1-create-a-phoenix-project-with-liveview&#34;&gt;Step 1: Create a Phoenix Project with LiveView&lt;/h3&gt;
&lt;p&gt;Create the project (notice the &lt;code&gt;--live&lt;/code&gt; - that enables LiveView, &lt;code&gt;--no-ecto&lt;/code&gt; - keeps the project smaller since we won&amp;rsquo;t be persisting any data):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mix phx.new counter --no-ecto --live&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;enter project and create init commit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd counter
git init &amp;amp;&amp;amp; git add -A &amp;amp;&amp;amp; git commit -m &amp;quot;init&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-2---simple-counter-page-using-liveview&#34;&gt;Step 2 - simple counter page using LiveView&lt;/h3&gt;
&lt;p&gt;Make a counter_live folder &amp;amp; an index.ex file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir lib/counter_web/live/counter_live
touch lib/counter_web/live/counter_live/index.ex
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add the following contents:
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# lib/counter_web/live/counter_live/index.ex&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CounterWeb.CounterLive.Index&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CounterWeb&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:live_view&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;# since we don&amp;#39;t have a db to pull from we initialize on mount&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@impl&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; mount(_params, _session, socket) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    {&lt;span style=&#34;color:#e6db74&#34;&gt;:ok&lt;/span&gt;, assign(socket, &lt;span style=&#34;color:#e6db74&#34;&gt;:val&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)}
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; render(assigns) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;~L&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;h1&amp;gt;Live Counter&amp;lt;/h1&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;p&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;lt;b&amp;gt;Here is a great complex page&amp;lt;/b&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;lt;h2&amp;gt;The count is: &amp;lt;%= @val %&amp;gt;&amp;lt;/h2&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;lt;button phx-click=&amp;#34;dec&amp;#34;&amp;gt;-&amp;lt;/button&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;lt;button phx-click=&amp;#34;inc&amp;#34;&amp;gt;+&amp;lt;/button&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;lt;button phx-click=&amp;#34;clear&amp;#34;&amp;gt;clear&amp;lt;/button&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;p&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;lt;i&amp;gt;even more awesome content&amp;lt;/i&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;# event handler for &amp;lt;button phx-click=&amp;#34;inc&amp;#34;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; handle_event(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inc&amp;#34;&lt;/span&gt;, _, socket) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    {&lt;span style=&#34;color:#e6db74&#34;&gt;:noreply&lt;/span&gt;, update(socket, &lt;span style=&#34;color:#e6db74&#34;&gt;:val&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(&amp;amp;1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))}
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;# event handler for &amp;lt;button phx-click=&amp;#34;dec&amp;#34;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; handle_event(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dec&amp;#34;&lt;/span&gt;, _, socket) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    {&lt;span style=&#34;color:#e6db74&#34;&gt;:noreply&lt;/span&gt;, update(socket, &lt;span style=&#34;color:#e6db74&#34;&gt;:val&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(&amp;amp;1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))}
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;# event handler for &amp;lt;button phx-click=&amp;#34;clear&amp;#34;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; handle_event(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clear&amp;#34;&lt;/span&gt;, _, socket) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    {&lt;span style=&#34;color:#e6db74&#34;&gt;:noreply&lt;/span&gt;, update(socket, &lt;span style=&#34;color:#e6db74&#34;&gt;:val&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(&amp;amp;1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &amp;amp;1))}
    &lt;span style=&#34;color:#75715e&#34;&gt;# {:noreply, update(socket, :val, 0)} # very slow - why?&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Now update the routers (so we can get to the new webpage &amp;ndash; now our app should work:
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;  scope &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;CounterWeb&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    pipe_through &lt;span style=&#34;color:#e6db74&#34;&gt;:browser&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# live &amp;#34;/&amp;#34;, PageLive, :index        # remove this line&lt;/span&gt;
    live &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;CounterLive.Index&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:index&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# add this line&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Start pheonix:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mix phx.server&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Go to:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;localhost:4000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You should now see the website and the counter should function&lt;/p&gt;
&lt;p&gt;Assuming all is good, I&amp;rsquo;ll take a git snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;counter with live update&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-3---running-tests&#34;&gt;Step 3 - Running tests&lt;/h3&gt;
&lt;p&gt;In order to run the tests we type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We see that PageLive test fails.  This is because we replaced this behavior with &lt;code&gt;CounterLive&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To fix this we will create a &lt;strong&gt;CounterLive&lt;/strong&gt; test and delete &lt;strong&gt;PageLive&lt;/strong&gt; test.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rm test/counter_web/live/page_live_text.exs
touch test/counter_web/live/counter_live_text.exs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is the code for our new test: it basically just checks to be sure our Title is on the page:
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# test/counter_web/live/counter_live_text.exs&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CounterWeb.CounterLiveTest&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CounterWeb.ConnCase&lt;/span&gt;

  &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CounterWeb.CounterLive.Index&lt;/span&gt;

  test &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;disconnected and connected render&amp;#34;&lt;/span&gt;, %{&lt;span style=&#34;color:#e6db74&#34;&gt;conn&lt;/span&gt;: conn} &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    {&lt;span style=&#34;color:#e6db74&#34;&gt;:ok&lt;/span&gt;, page_live, disconnected_html} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; live(conn, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;)
    assert disconnected_html &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Live Counter&amp;#34;&lt;/span&gt;
    assert render(page_live) &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Live Counter&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Now we can test again: &lt;code&gt;mix test&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now that works, lets take another git snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;counter with live update&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-4----liveview-templates&#34;&gt;Step 4 &amp;ndash; LiveView Templates&lt;/h3&gt;
&lt;p&gt;Create a template file (helpful for complex html pages, but simple to create):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;touch lib/counter_web/live/counter_live/index.html.leex&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now just copy the html (from the render method into this file):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-linenos=table,linenostart=1&#34; data-lang=&#34;linenos=table,linenostart=1&#34;&gt;# lib/counter_web/live/counter_live/index.html.leex
&amp;lt;h1&amp;gt;Live Counter&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;
  &amp;lt;b&amp;gt;Here is a great complex page&amp;lt;/b&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;div&amp;gt;
  &amp;lt;h2&amp;gt;The count is: &amp;lt;%= @val %&amp;gt;&amp;lt;/h2&amp;gt;
  &amp;lt;button phx-click=&amp;#34;dec&amp;#34;&amp;gt;-&amp;lt;/button&amp;gt;
  &amp;lt;button phx-click=&amp;#34;inc&amp;#34;&amp;gt;+&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
   &amp;lt;button phx-click=&amp;#34;clear&amp;#34;&amp;gt;clear&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;p&amp;gt;
  &amp;lt;i&amp;gt;even more awesome content&amp;lt;/i&amp;gt;
&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now point &lt;code&gt;lib/counter_web/live/counter_live/index.ex&lt;/code&gt; to this file by replacing render with an apply command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# add this new function&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;defp&lt;/span&gt; apply_action(socket, &lt;span style=&#34;color:#e6db74&#34;&gt;:index&lt;/span&gt;, _params) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    socket
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# remove this funtion&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# def render(assigns) do&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;#  ~L&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;#   ...&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;#   &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;code&gt;apply_action&lt;/code&gt; understands the &lt;strong&gt;rest&lt;/strong&gt; verbs such as &lt;code&gt;:new&lt;/code&gt;, &lt;code&gt;:show&lt;/code&gt; etc.&lt;/p&gt;
&lt;p&gt;Now try the app again and it should still work!&lt;/p&gt;
&lt;p&gt;Assuming it still works, I&amp;rsquo;ll take another git snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;counter using a template&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-5---reusable-components--isolation&#34;&gt;Step 5 - Reusable Components (&amp;amp; isolation)&lt;/h3&gt;
&lt;p&gt;This allows complex components to be &lt;strong&gt;reused&lt;/strong&gt; within multiple templates and &lt;strong&gt;isolation&lt;/strong&gt; to keep one&amp;rsquo;s mental scope minimal.&lt;/p&gt;
&lt;p&gt;Create a file for the component:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;touch lib/counter_web/live/counter_live/counter_component.ex&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Move the dynamic html and it&amp;rsquo;s associated functions into this file, it&amp;rsquo;s important to import the live_components into this file using:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;use CounterWeb, :live_component&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In order to encapsulate the events into the component we will also move the event handlers into the component file.&lt;/p&gt;
&lt;p&gt;So this file will now look like:
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# lib/counter_web/live/counter_live/counter_component.ex&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CounterWeb.CounterLive.CounterComponent&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CounterWeb&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:live_component&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; render(assigns) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;~L&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;lt;h2&amp;gt;The count is: &amp;lt;%= @val %&amp;gt;&amp;lt;/h2&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;lt;button phx-click=&amp;#34;dec&amp;#34; phx-target=&amp;#34;&amp;lt;%= @myself %&amp;gt;&amp;#34;&amp;gt;-&amp;lt;/button&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;lt;button phx-click=&amp;#34;inc&amp;#34; phx-target=&amp;#34;&amp;lt;%= @myself %&amp;gt;&amp;#34;&amp;gt;+&amp;lt;/button&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;lt;button phx-click=&amp;#34;clear&amp;#34; phx-target=&amp;#34;&amp;lt;%= @myself %&amp;gt;&amp;#34;&amp;gt;clear&amp;lt;/button&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; handle_event(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inc&amp;#34;&lt;/span&gt;, _, socket) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    {&lt;span style=&#34;color:#e6db74&#34;&gt;:noreply&lt;/span&gt;, update(socket, &lt;span style=&#34;color:#e6db74&#34;&gt;:val&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(&amp;amp;1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))}
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; handle_event(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dec&amp;#34;&lt;/span&gt;, _, socket) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    {&lt;span style=&#34;color:#e6db74&#34;&gt;:noreply&lt;/span&gt;, update(socket, &lt;span style=&#34;color:#e6db74&#34;&gt;:val&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(&amp;amp;1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))}
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; handle_event(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clear&amp;#34;&lt;/span&gt;, _, socket) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# {:noreply, update(socket, :val, 0)} # very slow - why?&lt;/span&gt;
    {&lt;span style=&#34;color:#e6db74&#34;&gt;:noreply&lt;/span&gt;, update(socket, &lt;span style=&#34;color:#e6db74&#34;&gt;:val&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(&amp;amp;1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &amp;amp;1))}
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Notice the button tags are slightly more complex&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;button phx-click=&amp;quot;dec&amp;quot; phx-target=&amp;quot;&amp;lt;%= @myself %&amp;gt;&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;the &lt;strong&gt;@myself&lt;/strong&gt; basically informs the event that the handler is within the component.&lt;/p&gt;
&lt;p&gt;Now update the live template to point at the component using:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;%= live_component @socket, CounterWeb.CounterLive.CounterComponent, id: 0, val: @val %&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Also note we need to pass the @val value into the component using:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;id: 0, val: @val&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;its a little wierd, but we need to pass an &lt;strong&gt;id&lt;/strong&gt; even if there is no ecto backed record.&lt;/p&gt;
&lt;p&gt;Now the template file looks like a normal template file again (focused on formating):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# lib/counter_web/live/counter_live/index.ex&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CounterWeb.CounterLive.Index&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CounterWeb&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:live_view&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;# since we don&amp;#39;t have a db to pull from we initialize on mount&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@impl&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; mount(_params, _session, socket) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    {&lt;span style=&#34;color:#e6db74&#34;&gt;:ok&lt;/span&gt;, assign(socket, &lt;span style=&#34;color:#e6db74&#34;&gt;:val&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)}
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; render(assigns) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;~L&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;h1&amp;gt;Live Counter&amp;lt;/h1&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;p&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;lt;b&amp;gt;Here is a great complex page&amp;lt;/b&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;%= live_component @socket, CounterWeb.CounterLive.CounterComponent, id: 0, val: @val %&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;p&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;lt;i&amp;gt;even more awesome content&amp;lt;/i&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Lets check that this still works.&lt;/p&gt;
&lt;p&gt;Assuming it still works, I&amp;rsquo;ll make one last git snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;live pages using isolated components - like JS does&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Kanban Usage</title>
      <link>https://btihen.me/post_edu/kanban_usage/</link>
      <pubDate>Sun, 03 May 2020 19:25:09 +0200</pubDate>
      <guid>https://btihen.me/post_edu/kanban_usage/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Kanban is a visual way to track your tasks and your progress.  Many people find this helpful way to to show yourself, your parents and teachers what work needs to be done.  Ideally, this is done on a large screen, sheet of paper, or whiteboard - so that it is obvious and easily seen as a reminder.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;example.jpg&#34; alt=&#34;kanban&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;status-tracking&#34;&gt;Status Tracking&lt;/h2&gt;
&lt;p&gt;The simplest &lt;code&gt;statuses&lt;/code&gt; would be: &lt;strong&gt;To-Do, Doing, Done&lt;/strong&gt;&lt;/p&gt;
&lt;!-- &lt;see example image&gt; --&gt;
&lt;p&gt;Some teacher often require a draft &lt;code&gt;Review&lt;/code&gt; before final submissions, engineers use a similar column &lt;code&gt;Review&lt;/code&gt; or &lt;code&gt;Demo&lt;/code&gt;.  Generally, this is a good idea to check your work with peers, parents or your teacher before handing in your work &amp;ndash; so we suggest a &lt;code&gt;Review&lt;/code&gt; column before done. So now the statuses would be:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To-Do, Doing, Review, Done&lt;/strong&gt;&lt;/p&gt;
&lt;!-- &lt;see example image&gt; --&gt;
&lt;h2 id=&#34;swim-lanes-tracking-multiple-classes--projects&#34;&gt;Swim-lanes (tracking multiple classes / projects)&lt;/h2&gt;
&lt;p&gt;Ideally when using this technique you keep the number of simultaneous tasks &lt;strong&gt;(WIP)&lt;/strong&gt; to a minimum&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The number of simultaneous tasks is called &lt;code&gt;work-in-progress&lt;/code&gt; or abbreviated as &lt;code&gt;WIP&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Education, unfortunately, expects a lot of simultaneous tasks within a variety of classes.  To address this we can use &lt;code&gt;swim-lanes&lt;/code&gt; to track our priorities with a jumble of independent projects (classes).  For example: we might have swim-lanes for: English, Mathematics, Science, &amp;hellip;&lt;/p&gt;
&lt;p&gt;Ideally, we will try only allow &lt;strong&gt;ONE task&lt;/strong&gt; in your &lt;code&gt;doing&lt;/code&gt; and &lt;code&gt;review&lt;/code&gt; boxes for each swim-lane / class.  &lt;em&gt;(This is called a WIP Limit of 1).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;example_w_swimlane.jpg&#34; alt=&#34;kanban_w_swimlanes&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;tasks&#34;&gt;Tasks&lt;/h2&gt;
&lt;p&gt;Tasks Cards should have critical reminder information on them. Refrain from putting extra information on the card, the card should be clean and simple to read - it is a reminder of work to do NOT a full description of the assignment.&lt;/p&gt;
&lt;p&gt;Here is the critical information I include on a personal Kanban card.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Title&lt;/strong&gt; - Big bold text (upper left corner)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Description&lt;/strong&gt; - a very short reminder of what to do - ideally in 4 to 5 words&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Class&lt;/strong&gt; - in case of confusion, I write the class / swim-lane (lower left corner)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Due Date&lt;/strong&gt; - Big bold Text (lower right corner)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Start Date&lt;/strong&gt; - use this to schedule small tasks of a large project - which can be used to slowly make progress on a large task (I call this smallifying).  This is a very important skill to ensure continued progress on large projects in a timely way.  I put this just above the &lt;code&gt;Due Date&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;see example image of a variety of tasks on a post-it with assignment below include a large task smallified&gt;
&lt;p&gt;Here is an example of a Kanban in use with tasks:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;example_w_tasks.jpg&#34; alt=&#34;kanban_w_tasks&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;p&gt;I like to use A3 paper and small post-it notes to add tasks.  Here is our recommended blank Kanban - where you can write in your classes.  Put your most important classes (in the IB these would be your &lt;strong&gt;High Level&lt;/strong&gt; courses) at the top. Use a timebox on long tasks that need to move forward, but are too big to do in one work session &amp;ndash; this is especially important when you have multiple tasks that need to be accomplished on a give day.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Timebox&lt;/strong&gt; - is a time limit that you won&amp;rsquo;t exceed for a given tasks in order to keep all tasks on schedule.  We suggest 25 to 35 minute timeboxes with small 5 minute breaks between tasks.  Every 4 timeboxes take a longer 15 minute break. This is called the pomodoro technique for full details.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/VFW3Ld7JO0w&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;To best use a Kanban board, you should follow the following ritual:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Prioritize your work&lt;/strong&gt; &amp;ndash; when you sit down to work, spend the first 5 minutes reviewing the Kanban board:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;First assess what in the &lt;em&gt;priority&lt;/em&gt; classes needs to be done in order meet assignment deadlines &lt;em&gt;(for long tasks set a &lt;strong&gt;timebox&lt;/strong&gt; so you make progress but can keep all your other tasks moving too)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Second assess what needs to be started in &lt;em&gt;priority&lt;/em&gt; classes to stay on track with larger projects. If you already have a task in that classes &lt;code&gt;doing&lt;/code&gt; box then schedule that task to be done ASAP so that you can start the next task.  &lt;em&gt;This is important&lt;/em&gt; a common Kanban saying is:_ **START FINISHING TASKS, stop starting unfinished tasks!**&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do your work&lt;/strong&gt; &amp;ndash; respect your priorities and your timeboxes!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;UPDATE YOUR KANBAN&lt;/strong&gt; - End five to ten minutes before your time is up (set an alarm if needed) and &lt;strong&gt;update&lt;/strong&gt; your tasks to their new status boxes.  If you couldn&amp;rsquo;t meet your goals for a task put a smaller colorful post-it on it - as an ALERT.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Address the needs of problem tasks&lt;/strong&gt; &amp;ndash; for all tasks with an ALERT: write emails to get help, or make notes on research needed to do make progress on problem tasks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;REFLECT&lt;/strong&gt; &amp;ndash; Assess what is going well and consider if doing more that will help you be more successful and assess what is hindering you and what you can do differently to get you work done with less stress.  You reflections should result in actions (experiments for a week or so) to help you move more effectively toward your goals.  If your experiment doesn&amp;rsquo;t help, they after the test period try a new experiment.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;
&lt;strong&gt;Dead person&lt;/strong&gt; activities are actions that even a dead person can successfully do.  For example, waiting for someone else to help, not checking twitter in homework time, etc.
&lt;strong&gt;Live person&lt;/strong&gt; activities are action that only live people can successfully accomplish. For example, ask a peer for help, research on the Internet for ideas, go to a help session, replace random twitter checks with Pomodoro Technique (and allow twitter in the 5 minute breaks), etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;h5 id=&#34;kanban&#34;&gt;Kanban&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.personalkanban.com/&#34;&gt;https://www.personalkanban.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://moduscooperandi.com/books-and-classes&#34;&gt;https://moduscooperandi.com/books-and-classes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;pomodoro&#34;&gt;Pomodoro&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://francescocirillo.com/pages/pomodoro-technique&#34;&gt;https://francescocirillo.com/pages/pomodoro-technique&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=VFW3Ld7JO0w&#34;&gt;https://www.youtube.com/watch?v=VFW3Ld7JO0w&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;helpful-books&#34;&gt;Helpful Books&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Kanban - Task Management&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Real-World Kanban: Do Less, Accomplish More with Lean Thinking, by Mattias Skarin.&lt;/li&gt;
&lt;li&gt;Kanban in Action, by Marcus Hammarberg and Joakim SundÃ©n.&lt;/li&gt;
&lt;li&gt;Kanban: Successful Evolutionary Change for Your Technology Business, by David J. Anderson.&lt;/li&gt;
&lt;li&gt;Personal Kanban: Mapping Work - Navigating Life, by Tonianne DeMaria Barry and Jim Benson.&lt;/li&gt;
&lt;li&gt;Kanban and Scrum: Making the Most of Both, by Mattias Skarin and Henrik Kniberg.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Pomodoro - Time Management&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pomodoro Technique Illustrated, by Staffan Noteberg.&lt;/li&gt;
&lt;li&gt;The Pomodoro Technique: Work smarter, not harder, by Francesco Cirillo.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Effective Reflections, Experiments &amp;amp; Problem Solving&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The 5 Elements of Effective Thinking, by Edward B. Burger and Michael Starbird.&lt;/li&gt;
&lt;li&gt;the shibumi strategy: a powerful way to create MEANINGFUL CHANGE, by Matthew E. May.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Effective Goal Setting &amp;amp; Changes - with small easy steps&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Little Bets: How Breakthrough Ideas Emerge from Small Discoveries, by Peter Sims.&lt;/li&gt;
&lt;li&gt;One Small Step Can Change Your Life: The Kaizen Way Paperback, by Robert Maurer Ph.D.&lt;/li&gt;
&lt;li&gt;The Spirit of Kaizen: Creating Lasting Excellence One Small Step at a Time: Creating Lasting Excellence One Small Step at a Time, by Robert Maurer Ph.D.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Webinar Agility by Tim Logan</title>
      <link>https://btihen.me/in_news/tim_logan_ecis_agility_webinar_linkedin/</link>
      <pubDate>Sat, 25 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://btihen.me/in_news/tim_logan_ecis_agility_webinar_linkedin/</guid>
      <description>&lt;p&gt;Tim Logan posted an interesting educational agility video of his ECIS Webinar and used materials developed my Paul Magnuson &amp;amp; me.  He posted his slide deck on Trello.&lt;/p&gt;
&lt;p&gt;Tim Logan&amp;rsquo;s video Intro into his Educational Agility webinar for ECIS.

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/N_3ZU3BINug&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;In case people don&amp;rsquo;t have a linked-in account:
&lt;img src=&#34;tim_logan_ecis_webinar_linkedin.png&#34; alt=&#34;Linked-in Post&#34;&gt;
&lt;a href=&#34;https://www.linkedin.com/feed/update/urn%3Ali%3Aactivity%3A6659793273697120256/&#34;&gt;https://www.linkedin.com/feed/update/urn%3Ali%3Aactivity%3A6659793273697120256/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In case people don&amp;rsquo;t have a trello account:
&lt;img src=&#34;tim_logan_agile_webinar_ecis_trello.png&#34; alt=&#34;Tello Board Slides&#34;&gt;
&lt;a href=&#34;https://trello.com/b/B5qwkjmE/webinar-agility&#34;&gt;https://trello.com/b/B5qwkjmE/webinar-agility&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Demos and Feedback in the Classroom</title>
      <link>https://btihen.me/publication/tieonline_demos_and_collaborative_feedback_in_classroom/</link>
      <pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://btihen.me/publication/tieonline_demos_and_collaborative_feedback_in_classroom/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Build Confidence: Exploration and Student Choice</title>
      <link>https://btihen.me/publication/tieonline_uplift_and_explore_build_confidence/</link>
      <pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://btihen.me/publication/tieonline_uplift_and_explore_build_confidence/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Pull vs Push: Student Centric</title>
      <link>https://btihen.me/publication/tieonline_pull_vs_push/</link>
      <pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://btihen.me/publication/tieonline_pull_vs_push/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Importance of Challenge: Engaged, Deep Learning</title>
      <link>https://btihen.me/publication/tieonline_importance_of_challenge/</link>
      <pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://btihen.me/publication/tieonline_importance_of_challenge/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Roots of Agile for Education</title>
      <link>https://btihen.me/publication/tieonline_roots_of_agile_for_education/</link>
      <pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://btihen.me/publication/tieonline_roots_of_agile_for_education/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Patient Explanations Lead to Good Things</title>
      <link>https://btihen.me/publication/las_spotlight_patient_explanations/</link>
      <pubDate>Wed, 16 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://btihen.me/publication/las_spotlight_patient_explanations/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Getting Agile at School</title>
      <link>https://btihen.me/publication/springer_getting_agile_at_school_chapter/</link>
      <pubDate>Tue, 16 Apr 2019 18:04:29 +0200</pubDate>
      <guid>https://btihen.me/publication/springer_getting_agile_at_school_chapter/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Privacy Policy</title>
      <link>https://btihen.me/privacy/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0100</pubDate>
      <guid>https://btihen.me/privacy/</guid>
      <description>&lt;p&gt;btihen is not tracking any access information on this site.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Terms</title>
      <link>https://btihen.me/terms/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0100</pubDate>
      <guid>https://btihen.me/terms/</guid>
      <description>&lt;p&gt;The materials on this site are licensed and may be used under the &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc/4.0/&#34;&gt;Creative Commons Attribution-NonCommercial 4.0 International License&lt;/a&gt;
&lt;br /&gt;
&lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc/4.0/&#34;&gt;&lt;img alt=&#34;Creative Commons Licence&#34; style=&#34;border-width:0&#34; src=&#34;https://i.creativecommons.org/l/by-nc/4.0/88x31.png&#34; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary:&lt;/h2&gt;
&lt;p&gt;This is a human-readable summary of the &lt;strong&gt;Creative Commons NonCommercial 4.0 International License&lt;/strong&gt; (and not a substitute for) the actual license.&lt;/p&gt;
&lt;h4 id=&#34;you-are-free-to&#34;&gt;You are free to:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Share&lt;/strong&gt; â copy and redistribute the material in any medium or format&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Adapt&lt;/strong&gt; â remix, transform, and build upon the material
for any purpose, even commercially.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The licensor cannot revoke these freedoms as long as you follow the license terms.&lt;/p&gt;
&lt;h4 id=&#34;under-the-following-terms&#34;&gt;Under the following terms:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Attribution&lt;/strong&gt; â You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NonCommercial&lt;/strong&gt; â You may not use the material for commercial purposes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;No additional restrictions&lt;/strong&gt; â You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.&lt;/p&gt;
&lt;h4 id=&#34;notices&#34;&gt;Notices:&lt;/h4&gt;
&lt;p&gt;You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation.&lt;/p&gt;
&lt;p&gt;No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Designed to Float your Boat</title>
      <link>https://btihen.me/publication/ecis_designed_to_float_your_boat_article/</link>
      <pubDate>Tue, 10 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://btihen.me/publication/ecis_designed_to_float_your_boat_article/</guid>
      <description>&lt;iframe allowfullscreen allow=&#34;fullscreen&#34; style=&#34;border:none;width:100%;height:326px;&#34; src=&#34;https://issuu.com/ecischools/docs/globalinsights6&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;Student boat (before 3-D printing)
&lt;img src=&#34;student_katamaran_boat.png&#34; alt=&#34;Student Katamaran Boat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Student boat (with code)
&lt;img src=&#34;student_boat_with_code.png&#34; alt=&#34;Student Katamaran Boat&#34;&gt;&lt;/p&gt;
&lt;p&gt;Student boat (with code)
&lt;img src=&#34;blank_burndown_chart.png&#34; alt=&#34;Blank Burndown Chart&#34;&gt;&lt;/p&gt;
&lt;p&gt;Student Retrospective Guide
&lt;img src=&#34;boat_retrospectives.png&#34; alt=&#34;Student Retrospective Guide&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Robot Gardener</title>
      <link>https://btihen.me/publication/las_spotlight_robot_gardener/</link>
      <pubDate>Thu, 25 May 2017 14:10:13 +0200</pubDate>
      <guid>https://btihen.me/publication/las_spotlight_robot_gardener/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Introducing EDgility</title>
      <link>https://btihen.me/publication/las_laser_introducing_edgility_report_2017/</link>
      <pubDate>Mon, 13 Mar 2017 00:00:00 +0000</pubDate>
      <guid>https://btihen.me/publication/las_laser_introducing_edgility_report_2017/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Agile in Education: Bill Tihen and Paul Magnuson of Leysin American School</title>
      <link>https://btihen.me/in_news/agile_in_education_interview_scrum_alliance/</link>
      <pubDate>Tue, 17 Jan 2017 00:00:00 +0000</pubDate>
      <guid>https://btihen.me/in_news/agile_in_education_interview_scrum_alliance/</guid>
      <description>&lt;p&gt;A discussion with Scrum Alliance on the importance of bringing Agile into Educaion and a few important implementation points.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/cV8UQvNcN9s&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Agile in Education at Leysin American School</title>
      <link>https://btihen.me/in_news/agile_in_education_at_las_interview_agile_amped/</link>
      <pubDate>Thu, 01 Dec 2016 00:00:00 +0000</pubDate>
      <guid>https://btihen.me/in_news/agile_in_education_at_las_interview_agile_amped/</guid>
      <description>&lt;p&gt;How would our education system be different using agile principles and values?&lt;/p&gt;
&lt;p&gt;In this InDepth edition, our conversation focuses around the American School in Leysin, Switzerland, and their experiments over the past 3 yrs in Agile in Education. My guests are Paul Magnuson ( Director of Curriculum &amp;amp; Director of the Middle School) and Bill Tihen ( Director of IT, Teacher, and runs the Makers Space )
Empowering students, making learning visible, and creating life long learners are goals for Paul and Bill as they lead this movement at Leysin.&lt;/p&gt;
&lt;iframe width=&#34;100%&#34; height=&#34;300&#34; scrolling=&#34;no&#34; frameborder=&#34;no&#34; allow=&#34;autoplay&#34; src=&#34;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/290789833&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true&#34;&gt;&lt;/iframe&gt;&lt;div style=&#34;font-size: 10px; color: #cccccc;line-break: anywhere;word-break: normal;overflow: hidden;white-space: nowrap;text-overflow: ellipsis; font-family: Interstate,Lucida Grande,Lucida Sans Unicode,Lucida Sans,Garuda,Verdana,Tahoma,sans-serif;font-weight: 100;&#34;&gt;&lt;a href=&#34;https://soundcloud.com/agileamped&#34; title=&#34;Agile Amped&#34; target=&#34;_blank&#34; style=&#34;color: #cccccc; text-decoration: none;&#34;&gt;Agile Amped&lt;/a&gt; Â· &lt;a href=&#34;https://soundcloud.com/agileamped/agile-in-education-at-leysin-american-school-in-switzerland&#34; title=&#34;Agile in Education at Leysin American School in Switzerland&#34; target=&#34;_blank&#34; style=&#34;color: #cccccc; text-decoration: none;&#34;&gt;Agile in Education at Leysin American School in Switzerland&lt;/a&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Agile Classrooms in the Alps</title>
      <link>https://btihen.me/in_news/agile_classrooms_article_agile_classrooms/</link>
      <pubDate>Tue, 26 May 2015 00:00:00 +0000</pubDate>
      <guid>https://btihen.me/in_news/agile_classrooms_article_agile_classrooms/</guid>
      <description>&lt;p&gt;To help incorporate Agile into their school, they [Paul Magnuson and Bill Tihen] brought in John Miller, a Certified Scrum Coach and Chief Empowerment Officer of Agile Classrooms, for two days of training. The Scrum Alliance has been a big supporter of Johnâs commitment to using Scrum to transform the world of education ever since he unveiled the first classroom to use Scrum at the Atlanta Scrum Gathering in 2010. When the Scrum Alliance, the largest Agile organization in the world, heard of Paul and Billâs desire to implement Scrum for their students, they stepped up to sponsor the event. The Swiss Group of International Schools also co-sponsored the workshop.&lt;/p&gt;
&lt;p&gt;The Agile Classrooms Workshop&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Climate Sensor Poles</title>
      <link>https://btihen.me/in_news/climate_poles_john_harlin_lets_report/</link>
      <pubDate>Thu, 14 May 2015 00:00:00 +0000</pubDate>
      <guid>https://btihen.me/in_news/climate_poles_john_harlin_lets_report/</guid>
      <description></description>
    </item>
    
    <item>
      <title>LETS ClimateCase</title>
      <link>https://btihen.me/publication/las_laser_lets_climate_case_laser_report_2015/</link>
      <pubDate>Thu, 14 May 2015 00:00:00 +0000</pubDate>
      <guid>https://btihen.me/publication/las_laser_lets_climate_case_laser_report_2015/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;climate_case_profile.jpeg&#34; alt=&#34;Climate Case Profile&#34;&gt;
&lt;img src=&#34;climate_case_electronics.jpeg&#34; alt=&#34;Climate Case Electronics&#34;&gt;
&lt;img src=&#34;climate_case_internal.jpeg&#34; alt=&#34;Climate Case Grow Space&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bill Tihen</title>
      <link>https://btihen.me/authors/btihen/_index_original_bio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://btihen.me/authors/btihen/_index_original_bio/</guid>
      <description>&lt;p&gt;Developer, Educator, Meditator and Nature Enthusiast.&lt;/p&gt;
&lt;p&gt;I hold a Masters in Electrical Engineering (with a focus on Materials Science). I also have a ScrumMaster certification.&lt;/p&gt;
&lt;p&gt;I have worked as a robotics designer, teacher, systems administrator and software engineer. My technical work has strongly influenced how I teach: Research and Agile practices have helped me develop a keen interest in the joy of exploring or &amp;lsquo;playful experiments.&amp;rsquo; Agile presents the Plan, Do, Reflect, Adjust loop and I have found that  &amp;lsquo;smallifying&amp;rsquo; large tasks is an effective way to make progress with a large overwhelming project. In fact, taking little exploratory &amp;lsquo;bets&amp;rsquo; / experiments to move forward, helps many people feel safe. When I realized these are also excellent learning methodologies, I realized in addition to content, I need to teach these skills too.&lt;/p&gt;
&lt;p&gt;Over time I have also realized that one of the most important aspects of a classroom (or work environment) is that it is exciting, engaging and generally an uplifting environment.  Or possibly an energy gifting experience. I have found the when students can choose their learning outcomes &amp;amp; goals (within the expectations of the class curriculum) the classroom can offer students these experiences too.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
