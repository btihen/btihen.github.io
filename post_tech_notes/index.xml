<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technical Posts | btihen</title>
    <link>https://btihen.me/post_tech_notes/</link>
      <atom:link href="https://btihen.me/post_tech_notes/index.xml" rel="self" type="application/rss+xml" />
    <description>Technical Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2022</copyright><lastBuildDate>Wed, 12 May 2021 01:01:53 +0200</lastBuildDate>
    <image>
      <url>https://btihen.me/img/btihen_landing_page.png</url>
      <title>Technical Posts</title>
      <link>https://btihen.me/post_tech_notes/</link>
    </image>
    
    <item>
      <title>Lucky Language Inflections - 0.28.0</title>
      <link>https://btihen.me/post_tech_notes/lucky_0_28_0_inflections/</link>
      <pubDate>Wed, 12 May 2021 01:01:53 +0200</pubDate>
      <guid>https://btihen.me/post_tech_notes/lucky_0_28_0_inflections/</guid>
      <description>&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;
&lt;p&gt;It is helpful to be able to configure your cli-tasks to work the same as lucky.
In lucky you can configure the application&amp;rsquo;s behavior / settings in the &lt;code&gt;config&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;For example, Lucky by default will pluralize &lt;code&gt;staff&lt;/code&gt; as &lt;code&gt;staffs&lt;/code&gt; - which is ok if you are talking about shepherd staffs - but not employees.&lt;/p&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;As of Lucky 0.28.0 &lt;code&gt;wordsmith&lt;/code&gt; works well with configuration - adding your own settings.  You simple create an &lt;code&gt;inflector.cr&lt;/code&gt; file in the &lt;code&gt;config&lt;/code&gt; folder.  Here is an example config:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/inflector.cr
# `staff` as in employees - not walking sticks:
Wordsmith::Inflector.inflections.uncountable(&amp;quot;staff&amp;quot;)
Wordsmith::Inflector.inflections.irregular(&amp;quot;person&amp;quot;, &amp;quot;persons&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;when we test our new lucky config with &lt;code&gt;lucky exec&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;lucky exec
# then when vim or nano opens you can enter something like:
require &amp;quot;../../src/app.cr&amp;quot;
include Lucky::TextHelpers
pp pluralize(2, &amp;quot;staff&amp;quot;)
pp pluralize(2, &amp;quot;person&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you will get the expected:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;2 staff&amp;quot;
&amp;quot;2 persons&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;
&lt;p&gt;However, currently, the settings is only used by the lucky application and not the lucky generators (gen.tasks) - which are pre-compiled.  They are pre-compiled on install - BEFORE you even create a config file. Thus the generators generate files that are incompatible with Lucky&amp;rsquo;s configured behavior.&lt;/p&gt;
&lt;p&gt;This is what happens - it generates &lt;code&gt;staffs&lt;/code&gt; files and routes :(&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;lucky gen.resource.browser Staff name:String

Created CreateStaffs::V20210811201213 in ./db/migrations/20210811201213_create_staffs.cr
Generated Staff in ./src/models/staff.cr
Generated SaveStaff in ./src/operations/save_staff.cr
Generated DeleteStaff in ./src/operations/delete_staff.cr
Generated StaffQuery in ./src/queries/staff_query.cr
Generated Staffs::Index in ./src/actions/staffs/index.cr
Generated Staffs::Show in ./src/actions/staffs/show.cr
Generated Staffs::New in ./src/actions/staffs/new.cr
Generated Staffs::Create in ./src/actions/staffs/create.cr
Generated Staffs::Edit in ./src/actions/staffs/edit.cr
Generated Staffs::Update in ./src/actions/staffs/update.cr
Generated Staffs::Delete in ./src/actions/staffs/delete.cr
Generated Staffs::IndexPage in ./src/pages/staffs/index_page.cr
Generated Staffs::ShowPage in ./src/pages/staffs/show_page.cr
Generated Staffs::NewPage in ./src/pages/staffs/new_page.cr
Generated Staffs::EditPage in ./src/pages/staffs/edit_page.cr
Generated Staffs::FormFields in ./src/components/staffs/form_fields.cr
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;(Lucky contributors are considering more elegant solutions)&lt;/p&gt;
&lt;p&gt;With guidance from the lucky team we found a clumsy solution.  Once we understood that the tasks were pre-compiled automatically.  I was able to read how the script worked and noticed it responds to a &lt;code&gt;skip pre-compile&lt;/code&gt; env_var and so we were able to solve it with the following procedure:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# clean up repo of gen.tasks that were problematic
# git clean -fd

# remove previously compiled shards
rm -rf lib &amp;amp;&amp;amp; rm -rf bin

# after trashing all the shard - safest to be sure they are intact (or even updated)
SKIP_LUCKY_TASK_PRECOMPILATION=true shards install # or shards update

# re-run the setup
SKIP_LUCKY_TASK_PRECOMPILATION=true ./script/setup
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now with the first task it will compile the task (a bit slow), but it uses your config file!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky gen.resource.browser Staff name:String

compiling ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we finally get the expected results when we run the task!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Created CreateStaff::V20210812185142 in ./db/migrations/20210812185142_create_staff.cr
Generated Staff in ./src/models/staff.cr
Generated SaveStaff in ./src/operations/save_staff.cr
Generated DeleteStaff in ./src/operations/delete_staff.cr
Generated StaffQuery in ./src/queries/staff_query.cr
Generated Staff::Index in ./src/actions/staff/index.cr
Generated Staff::Show in ./src/actions/staff/show.cr
Generated Staff::New in ./src/actions/staff/new.cr
Generated Staff::Create in ./src/actions/staff/create.cr
Generated Staff::Edit in ./src/actions/staff/edit.cr
Generated Staff::Update in ./src/actions/staff/update.cr
Generated Staff::Delete in ./src/actions/staff/delete.cr
Generated Staff::IndexPage in ./src/pages/staff/index_page.cr
Generated Staff::ShowPage in ./src/pages/staff/show_page.cr
Generated Staff::NewPage in ./src/pages/staff/new_page.cr
Generated Staff::EditPage in ./src/pages/staff/edit_page.cr
Generated Staff::FormFields in ./src/components/staff/form_fields.cr
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Lucky Framework Upgrade</title>
      <link>https://btihen.me/post_tech_notes/lucky_0_28_0_upgrade/</link>
      <pubDate>Mon, 10 May 2021 01:01:53 +0200</pubDate>
      <guid>https://btihen.me/post_tech_notes/lucky_0_28_0_upgrade/</guid>
      <description>&lt;h2 id=&#34;purpose&#34;&gt;Purpose&lt;/h2&gt;
&lt;p&gt;I learned about Lucky improvements (fixes from the minor bugs after my first article) and wanted to test them out.&lt;/p&gt;
&lt;p&gt;The Lucky repo describes the changes to the shards file and the code base too.

&lt;a href=&#34;https://github.com/luckyframework/lucky/blob/master/UPGRADE_NOTES.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/luckyframework/lucky/blob/master/UPGRADE_NOTES.md&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;upgrading&#34;&gt;Upgrading&lt;/h2&gt;
&lt;p&gt;First lets be sure we have a recent crystal version:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;asdf install crystal 1.1.1
asdf global crystal 1.1.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Second, Upgrade the lucky-cli:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# if you don&#39;t already have this
git clone https://github.com/luckyframework/lucky_cli
cd lucky_cli
git fetch
git checkout v0.28.0  # note this does not match the lucky-framework version (0.27.2)!
shards install
crystal build src/lucky.cr
cp lucky /usr/local/bin
cd ..
lucky -v  # hopefully responds with: 0.28.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets be sure we update &lt;code&gt;.tools-available&lt;/code&gt; in the lucky project folder:&lt;/p&gt;
&lt;p&gt;Then (in the project folder - type:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd project_name  # my lucky-project
asdf local crystal 1.1.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets lets update the &lt;code&gt;shards&lt;/code&gt; file to &amp;ndash; according to the upgrade guide we should use the following settings:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# shard.yml
name: animals
version: 0.1.0

targets:
  animals:
    main: src/animals.cr

crystal: &amp;gt;= 1.0.0

dependencies:
  lucky:
    github: luckyframework/lucky
    version: ~&amp;gt; 0.28.0
  authentic:
    github: luckyframework/authentic
    version: ~&amp;gt; 0.8.0
  carbon:
    github: luckyframework/carbon
    version: ~&amp;gt; 0.2.0
  # this should be removed
  # dotenv:
  #   github: gdotdesign/cr-dotenv
  #   version: ~&amp;gt; 0.8.0
  # use this instead - be shure to follow the instructions at (global search and replace is your friend):
  # https://github.com/luckyframework/lucky/blob/master/UPGRADE_NOTES.md
  lucky_env:
    github: luckyframework/lucky_env
    version: ~&amp;gt; 0.1.3
  lucky_task:
    github: luckyframework/lucky_task
    # version: ~&amp;gt; 0.8.0
  jwt:
    github: crystal-community/jwt
    # version: ~&amp;gt; 0.7.3
development_dependencies:
  lucky_flow:
    github: luckyframework/lucky_flow
    # version: ~&amp;gt; 0.7.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now type:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;shards update
shards list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool - it worked!&lt;/p&gt;
&lt;p&gt;Now lets see if your site still works&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;crystal spec
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and start up the project with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lucky dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;while we are at it we should update the yarn / node packages too.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn upgrade
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Lucky Framework with Crystal Language</title>
      <link>https://btihen.me/post_tech_notes/lucky_0_27_project_basics/</link>
      <pubDate>Sun, 02 May 2021 01:01:53 +0200</pubDate>
      <guid>https://btihen.me/post_tech_notes/lucky_0_27_project_basics/</guid>
      <description>&lt;h2 id=&#34;purpose&#34;&gt;Purpose&lt;/h2&gt;
&lt;p&gt;My goal is to have a simple tutorial to understand and use basic Lucky framework features.  I recommend this as a great platform if you work in English and publish in English.&lt;/p&gt;
&lt;p&gt;If internationalization and or other languages and language flexibility are important to you and your work, then I recommend Rails or Phoenix.  If/when internationalization and language flexibility become easier - I&amp;rsquo;ll probably switch to Lucky.&lt;/p&gt;
&lt;h2 id=&#34;why-lucky&#34;&gt;Why Lucky&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Lucky offers all the features I use in Rails - but is type safe and faster than rails.&lt;/li&gt;
&lt;li&gt;Lucky&amp;rsquo;s focus is on run-time stability (its not the fastest Crystal Framework, but it faster than rails).&lt;/li&gt;
&lt;li&gt;The code / structure is well organized.&lt;/li&gt;
&lt;li&gt;The Lucky Discord community is extremely helpful!&lt;/li&gt;
&lt;li&gt;The Docs are generally good when you are investigating a specific component &amp;amp; when that is missing - the codebase can be searched (and the code is clear)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;See: 
&lt;a href=&#34;https://luckyframework.org/guides/getting-started/why-lucky&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://luckyframework.org/guides/getting-started/why-lucky&lt;/a&gt; for a full list of what Lucky aims to improve.&lt;/p&gt;
&lt;p&gt;PS - I didn&amp;rsquo;t try out more advanced features such as file uploads, remote file storage, sending emails, etc.  These are all common in the apps I write.&lt;/p&gt;
&lt;h2 id=&#34;why-not-lucky-027&#34;&gt;Why Not Lucky (0.27)&lt;/h2&gt;
&lt;p&gt;I am hoping that Lucky 1.0 will address much of the following.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I found I had to read a lot of docs (scattered over many locations) &amp;amp; experiment to grock the basic design/mindset what do for common simple things: (like making a field optional and how to adapt a shared / component form)&lt;/li&gt;
&lt;li&gt;There aren&amp;rsquo;t many Stack Overflow or Blogs describing basic usage.&lt;/li&gt;
&lt;li&gt;The docs in some cases are incomplete, misleading or have missing information and are not oriented to getting doing the things a framework beginner needs to know.&lt;/li&gt;
&lt;li&gt;The helper scripts don&amp;rsquo;t help with Relationships - that must be done by hand&lt;/li&gt;
&lt;li&gt;Language support is very hard to accomplish - I was never able to reliably use the inflector.&lt;/li&gt;
&lt;li&gt;Setting up internationalization is time consuming and manual and as far as I can tell possibly not easy to integrate with the inflector.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The language support is a BIGGIE for me - living in a country where we regularly work with multiple language (Rails and/or Phoenix have much better i18n support)!&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t see the lack of Stack Overflow articles as such a big problem since the Lucky Discord group is so helpful.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;This article is a collection of making sense of the following resources&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://luckycasts.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://luckycasts.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://luckyframework.org/guides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://luckyframework.org/guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://onchain.io/blog/lucky_tutorial&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://onchain.io/blog/lucky_tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/andrewmcodes/awesome-lucky&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/andrewmcodes/awesome-lucky&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/stephendolan/lucky_jumpstart&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/stephendolan/lucky_jumpstart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;installing-lucky&#34;&gt;Installing Lucky&lt;/h2&gt;
&lt;p&gt;For more information see: 
&lt;a href=&#34;https://luckyframework.org/guides/getting-started/installing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://luckyframework.org/guides/getting-started/installing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;brew install&lt;/code&gt; of lucky (on a MacOS) is bit broken, but the Linux install technique works well on MacOS!&lt;/p&gt;
&lt;p&gt;First be sure openssl and postgresql are installed and findable:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install openssl postgresql

# and depending on your shell either (if you don&#39;t know which it is safe to do both):
echo &#39;export PKG_CONFIG_PATH=/usr/local/opt/openssl/lib/pkgconfig&#39; &amp;gt;&amp;gt;~/.zshrc
echo &#39;export PKG_CONFIG_PATH=/usr/local/opt/openssl/lib/pkgconfig&#39; &amp;gt;&amp;gt;~/.bash_profile

# IMPORTANT - OPEN a new terminal

# or if you know what shell you are using you can reload it with source!
source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now install (or be sure ASDF is installed). 
&lt;a href=&#34;https://asdf-vm.com/#/core-manage-asdf-vm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://asdf-vm.com/#/core-manage-asdf-vm&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install asdf
# assuming bash
echo -e &amp;quot;\n. $(brew --prefix asdf)/asdf.sh&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile
echo -e &amp;quot;\n. $(brew --prefix asdf)/etc/bash_completion.d/asdf.bash&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile

# or zsh
echo -e &amp;quot;\n. $(brew --prefix asdf)/asdf.sh&amp;quot; &amp;gt;&amp;gt; ${ZDOTDIR:-~}/.zshrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we add asdf plugin for crystal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;asdf plugin-add crystal https://github.com/asdf-community/asdf-crystal.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For both Ruby and Crystal the following is also helpful:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;legacy_version_file = yes&amp;quot; &amp;gt;&amp;gt;~/.asdfrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lucky 0.27 needs Crystal 0.36.1 (not Crystal 1.0.0) - so we install it with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;asdf install crystal 0.36.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I like to the local folder to crystal 0.36.1 (&amp;amp; the node version too) - this will allow use to install and run the lucky-cli tool&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;cyrstal 0.36.1&amp;quot; &amp;gt;&amp;gt; .tool-versions
echo &amp;quot;node 14.16.0&amp;quot; &amp;gt;&amp;gt; .tool-versions
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(but you can also just use: &lt;code&gt;asdf global crystal 0.36.1&lt;/code&gt; - so you don&amp;rsquo;t have to set the crystal version in every file you work in)!&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s install lucky_cli &amp;amp; also lucky&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/luckyframework/lucky_cli
cd lucky_cli
git checkout v0.27.0
shards install

# if this following step fails (you probably forgot to reload your shell after the openssl lib path update)
crystal build src/lucky.cr

# make your compiled lucky_cli available everywhere
mv lucky /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if you check your settings you should get:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lucky -v
# This should return 0.27.0

node -v
# should be 12.x or greater

yarn -v
# should be 1.x or greater

psql --version
# should be 10.x or greater
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;start-a-lucky-project&#34;&gt;Start a Lucky Project&lt;/h2&gt;
&lt;p&gt;Create your new Lucky project with the wizzard (just answer questions) - other options are at: 
&lt;a href=&#34;https://luckyframework.org/guides/getting-started/starting-project&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://luckyframework.org/guides/getting-started/starting-project&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lucky init
cd {project_name}

# update the db settings in: `config/database.cr`

# if this step fails you may have forgotten to reload the shell after updating the openssl path
script/setup

# run lucky with:
lucky dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok lets do an initial commit:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;initial commit after create&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;quick-lucky-test-tip&#34;&gt;Quick Lucky Test Tip&lt;/h2&gt;
&lt;p&gt;Lets quickly test our new config with &lt;code&gt;lucky exec&lt;/code&gt; - type:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lucky exec
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This gives you an edit in your cli and you can type a small amount of code and it will be compiles and print you the results - ie:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;lucky exec
# then when vim or nano opens you can enter something like:

require &amp;quot;../../src/app.cr&amp;quot;

include Lucky::TextHelpers

pp pluralize(2, &amp;quot;human&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and hopefuly you get &lt;code&gt;2 humans&lt;/code&gt; - cool - it works lets snapshot our changes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;language inflection updates and customization&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;scaffold-a-simple-resource&#34;&gt;Scaffold a Simple Resource&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://luckyframework.org/guides/command-line-tasks/built-in&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://luckyframework.org/guides/command-line-tasks/built-in&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now if we try again (we are free to use human again):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lucky gen.resource.browser Human name:String
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets run the migration:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lucky db.migrate

# oops I haven&#39;t create the DB yet
lucky db.create

# now migrate
lucky db.migrate

# start lucky &amp;amp; test
lucky dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now log_in and create humans at the &lt;code&gt;/humans&lt;/code&gt; url&lt;/p&gt;
&lt;p&gt;Cool - lets snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;First simple &#39;Human&#39; resource with scaffold&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-related-model&#34;&gt;Create a Related Model&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.luckyframework.org/guides/database/models#belongs-to&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.luckyframework.org/guides/database/models#belongs-to&lt;/a&gt;

&lt;a href=&#34;https://www.luckyframework.org/guides/database/models#has-many-one-to-many&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.luckyframework.org/guides/database/models#has-many-one-to-many&lt;/a&gt;

&lt;a href=&#34;https://luckyframework.org/guides/database/migrations#associations&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://luckyframework.org/guides/database/migrations#associations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, the Lucky generators don&amp;rsquo;t understand &lt;code&gt;belongs_to&lt;/code&gt; so we will need to do a few extra tweeks &amp;ndash; since we can&amp;rsquo;t do something like human:belongs_to or human:references like with Rails.&lt;/p&gt;
&lt;p&gt;So if we want to scaffold &amp;ldquo;pets&amp;rdquo; now and have them belong to humans (and humans can have many pets) - we first do:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lucky gen.resource.browser Pet name:String breed:String species:String age:Int32 house_trained:Bool
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;rsquo;s setup the relationships:&lt;/p&gt;
&lt;p&gt;First we need to update the migration with the human foreign_key using: &lt;code&gt;add_belongs_to&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So we need to update our pets migration to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/migrations/yyyymmddxxxxxx_create_pets.cr
class CreatePets::V20210502100912 &amp;lt; Avram::Migrator::Migration::V1
  def migrate
    create table_for(Pet) do
      primary_key id : Int64
      add_timestamps
      add name : String
      add breed : String
      add species : String
      add age : Int32
      add house_trained : Bool

      # When the associated human is deleted, their pets are also deleted
      # because we set on_delete: :cascade
      add_belongs_to human : Human, on_delete: :cascade    # relationship - newly added
    end
  end

  def rollback
    drop table_for(Pet)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that the pets database table will is correct - lets update the pet model too.
This is straight-forward we just need to add &lt;code&gt;belongs_to human : Human&lt;/code&gt; in the model file so it changes to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# src/models/pet.cr
class Pet &amp;lt; BaseModel
  table do
    column name : String
    column breed : String     # column breed : String? - makes this field optional
    column species : String
    column age : Int32
    column house_trained : Bool

    belongs_to human : Human  # relationship - newly added
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now we need to add &lt;code&gt;has_many&lt;/code&gt; to the &lt;code&gt;Human&lt;/code&gt; model.  So we change it to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# src/models/human.cr
class Human &amp;lt; BaseModel
  table do
    column name : String

    has_many pets : Pet    # relationship - newly added
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can migrate:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lucky db.migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;lucky-html-and-rootpage-routing&#34;&gt;Lucky HTML and RootPage Routing&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://luckycasts.com/videos/lucky-html-in-crystal&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://luckycasts.com/videos/lucky-html-in-crystal&lt;/a&gt;

&lt;a href=&#34;https://www.luckyframework.org/guides/http-and-routing/routing-and-params#root-page&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.luckyframework.org/guides/http-and-routing/routing-and-params#root-page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If we look in &lt;code&gt;src/actions/home/index.cr&lt;/code&gt; we see:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# src/actions/home/index.cr
class Home::Index &amp;lt; BrowserAction
  include Auth::AllowGuests

  get &amp;quot;/&amp;quot; do
    if current_user?
      redirect Me::Show
    else
      # html Landing::IndexPage
      html Lucky::WelcomePage
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we can see - when we are not logged in &amp;ldquo;/&amp;rdquo; points to &lt;code&gt;Lucky::WelcomePage&lt;/code&gt; or whatever new landing page we make and when logged in we are pointed to the &lt;code&gt;Me::Show&lt;/code&gt; page.&lt;/p&gt;
&lt;p&gt;Let practice adding some &lt;code&gt;html&lt;/code&gt; and add links to our expected resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lsquo;/humans&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;/pets&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So lets change this too and practice lucky html&lt;/p&gt;
&lt;p&gt;We will add our list of resources - &amp;lsquo;pets&amp;rsquo; and &amp;lsquo;humans&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;So from looking at the existing html in &lt;code&gt;src/pages/me/show_page.cr&lt;/code&gt; it&amp;rsquo;s like a combo of haml and JS to create executable blocks with &lt;code&gt;{}&lt;/code&gt; so I created the method: &lt;code&gt;private def resource_links&lt;/code&gt; and tried out two methods of linking - not bad, but I figure it will take a bit of practice with this new format.  I don&amp;rsquo;t know the reason behind this, since almost all web resources will need to be reformatted - but I assume it is pre-compiled and thus fast!&lt;/p&gt;
&lt;p&gt;In the end I created this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# src/pages/me/show_page.cr
class Me::ShowPage &amp;lt; MainLayout
  def content
    h1 &amp;quot;This is your profile:&amp;quot;
    h2 &amp;quot;Email:  #{@current_user.email}&amp;quot;
    resource_links
    helpful_tips
  end

  private def resource_links
    h2 &amp;quot;Available Resources&amp;quot;
    ul do
      li { a &amp;quot;Pet Owners&amp;quot;, href: &amp;quot;/humans&amp;quot; }
      li { link_to_pets }
    end
  end

  private def helpful_tips
    h3 &amp;quot;Next, you may want to:&amp;quot;
    ul do
      li { link_to_authentication_guides }
      li &amp;quot;Modify this page: src/pages/me/show_page.cr&amp;quot;
      li &amp;quot;Change where you go after sign in: src/actions/home/index.cr&amp;quot;
    end
  end

  private def link_to_pets
    a &amp;quot;Pets&amp;quot;, href: &amp;quot;/pets&amp;quot;
  end

  private def link_to_authentication_guides
    a &amp;quot;Check out the authentication guides&amp;quot;,
      href: &amp;quot;https://luckyframework.org/guides/authentication&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;lets test it out:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lucky dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;cool - good enough for now.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;added html links to user_home_page &#39;me&#39;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;seed-files&#34;&gt;Seed Files&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&lt;/a&gt;

&lt;a href=&#34;https://luckyframework.org/guides/database/database-setup#seeding-data&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://luckyframework.org/guides/database/database-setup#seeding-data&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now we can create seed files and be sure our basic relations work:&lt;/p&gt;
&lt;p&gt;Lets test our building a model and the Lucky mechanisms before we get fancy with relationships and in particular polymorphism.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://luckyframework.org/guides/tutorial/new-resource&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://luckyframework.org/guides/tutorial/new-resource&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So we will generate an animal resource - using a full stack generator:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lucky gen.resource.browser Animal nick_name:String species:String
lucky db.migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;rsquo;s create some sample data in &lt;code&gt;tasks/db/seed/sample_data.cr&lt;/code&gt; - via the seed task - from these instructions: 
&lt;a href=&#34;https://luckyframework.org/guides/database/database-setup#seeding-data&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://luckyframework.org/guides/database/database-setup#seeding-data&lt;/a&gt; as our base.&lt;/p&gt;
&lt;p&gt;We will start by using what&amp;rsquo;s used to save when we create new records with incomming data. &lt;code&gt;SaveAnimal.create!(nick_name: &amp;quot;racky coon&amp;quot;)&lt;/code&gt; so now our file will look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# tasks/db/seed/sample_data.cr
require &amp;quot;../../../spec/support/factories/**&amp;quot;

class Db::Seed::SampleData &amp;lt; LuckyTask::Task
  summary &amp;quot;Add sample database records helpful for development&amp;quot;

  def call
    SavePet.create!(nick_name: &amp;quot;racky coon&amp;quot;)

    puts &amp;quot;Done adding sample data&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We test this with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lucky db.seed.sample_data
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;assuming this runs we should be able to view this data in our db (I often use the cli - but you might also want to use: &lt;code&gt;dbgate&lt;/code&gt; 
&lt;a href=&#34;https://dbgate.org/%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dbgate.org/)&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;psql
\l
\c lucky_poly_development
select * from animals;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;cool - lets try a factory too - these are especially help when complex and building relationships, etc:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/support/factories/animal_factory.cr
class AnimalFactory &amp;lt; Avram::Factory
  def initialize
    nick_name &amp;quot;Nick Name&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now lets try using our factory in the seed file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# tasks/db/seed/sample_data.cr
require &amp;quot;../../../spec/support/factories/**&amp;quot;

class Db::Seed::SampleData &amp;lt; LuckyTask::Task
  summary &amp;quot;Add sample database records helpful for development&amp;quot;

  def call
    SaveAnimal.create!(nick_name: &amp;quot;racky coon&amp;quot;, species: &amp;quot;racoon&amp;quot;)

    # using a factory: https://luckyframework.org/guides/testing/creating-test-data#factory-create
    AnimalFactory.create do |factory|
      factory.nick_name(&amp;quot;Dyno&amp;quot;)
      factory.species(&amp;quot;Dog&amp;quot;)
    end

    # a shortcut way to write a block in crystal, see: https://crystal-lang.org/reference/syntax_and_semantics/blocks_and_procs.html#short-one-argument-syntax
    AnimalFactory.create &amp;amp;.nick_name(&amp;quot;ShinÃ©&amp;quot;).species(&amp;quot;cat&amp;quot;)

    puts &amp;quot;Done adding sample data&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test again with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lucky db.seed.sample_data
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sweet, let&amp;rsquo;s snapshot and try more complex stuff!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;add a simple model and seed data in it&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;simple-lucky-forms-in-pages-instead-of-shared&#34;&gt;Simple Lucky Forms (in pages instead of shared)&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://luckycasts.com/videos/component-basics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://luckycasts.com/videos/component-basics&lt;/a&gt;

&lt;a href=&#34;https://luckycasts.com/videos/lucky-html-in-crystal&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://luckycasts.com/videos/lucky-html-in-crystal&lt;/a&gt;

&lt;a href=&#34;https://luckyframework.org/guides/frontend/html-forms&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://luckyframework.org/guides/frontend/html-forms&lt;/a&gt;

&lt;a href=&#34;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&lt;/a&gt;

&lt;a href=&#34;https://luckyframework.org/guides/frontend/html-forms#shared-components&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://luckyframework.org/guides/frontend/html-forms#shared-components&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lets test the web page&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lucky dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and go to the url &lt;code&gt;/pets&lt;/code&gt; and create a &lt;strong&gt;Pet&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We discover we have problems - validation errors.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type mismatches (crystal is strongly typed - but the form generator ignores this - so we need to adjust by hans)&lt;/li&gt;
&lt;li&gt;Required human_id is missing (the generator isn&amp;rsquo;t aware of &lt;code&gt;belongs_to&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I didn&amp;rsquo;t find lots of Documentation or examples on Components, but I did find this article - which got me started on Lucky html and forms:

&lt;a href=&#34;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After I figured out how to update FormComponents I found this: 
&lt;a href=&#34;https://luckycasts.com/videos/component-basics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://luckycasts.com/videos/component-basics&lt;/a&gt; - I&amp;rsquo;ll go back and view this!&lt;/p&gt;
&lt;p&gt;This got me going!  However, one difficulty I had was the Boolean field &lt;code&gt;house_trained&lt;/code&gt; - I tried both Checkboxes and Radio Buttons, but I kept getting &lt;code&gt;overload&lt;/code&gt; errors (which I finally realized were type mis-matches - you can&amp;rsquo;t send text into a Boolean field).  So I settled on a select_list where I can present a tuple with a &amp;ldquo;human readable value&amp;rdquo; and a &amp;ldquo;model value&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;So in the end my first draft form looked like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# src/pages/pets/new_page.cr
class Pets::NewPage &amp;lt; MainLayout
  needs operation : SavePet
  quick_def page_title, &amp;quot;New Pet&amp;quot;

  def content
    h1 &amp;quot;New Pet&amp;quot;
    render_pet_form(operation)
  end

  def render_pet_form(op)
    # comment out the form component for now
    # form_for Pets::Create do
    #   # Edit fields in src/components/pets/form_fields.cr
    #   mount Pets::FormFields, op

    #   submit &amp;quot;Save&amp;quot;, data_disable_with: &amp;quot;Saving...&amp;quot;
    # end

    form_for Pets::Create do
      div do
        label_for op.name
        text_input op.name
      end
      div do
        label_for op.species
        select_input(op.species, class: &amp;quot;custom-select&amp;quot;) do
          select_prompt(&amp;quot;Select&amp;quot;)
          options_for_select(op.species, [{&amp;quot;Cat&amp;quot;, &amp;quot;cat&amp;quot;}, {&amp;quot;Dog&amp;quot;, &amp;quot;dog&amp;quot;}])
        end
      end
      # eventually allow for this to be blank
      # eventually allow a dropdown list to be dependent on species
      div do
        label_for op.breed
        text_input op.breed
      end
      div do
        label_for op.age
        number_input(op.age, class: &amp;quot;custom-input&amp;quot;, min: &amp;quot;0&amp;quot;, max: &amp;quot;99&amp;quot;)
      end
      div do
        label_for op.house_trained
        select_input(op.house_trained, class: &amp;quot;custom-select&amp;quot;) do
          select_prompt(&amp;quot;Select&amp;quot;)
          options_for_select(op.house_trained, [{&amp;quot;yes&amp;quot;, true}, {&amp;quot;No&amp;quot;, false}])
        end
      end
      div do
        label_for op.human_id
        select_input op.human_id do
          options_for_select(op.human_id, humans_for_select)
        end
      end
      submit &amp;quot;Save Pet&amp;quot;
    end
  end

  # find all the humans and create a tuple of the name and id - displayed and passed to model
  private def humans_for_select
    HumanQuery.new.map do |human|
      { human.name, human.id }
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;of course this isn&amp;rsquo;t shared by the &lt;code&gt;edit&lt;/code&gt; page, but it is still helpful to see the Lucky way to create html.&lt;/p&gt;
&lt;p&gt;So after a while I figured out how to revert this code and use SharedForms (I think this is a form of FrontEnd Components).&lt;/p&gt;
&lt;p&gt;Lets test again:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lucky dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool it works as I expect&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;a working &#39;new&#39; html form - not shared&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;shared-web-form---component&#34;&gt;Shared Web Form - Component&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://luckycasts.com/videos/component-basics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://luckycasts.com/videos/component-basics&lt;/a&gt;

&lt;a href=&#34;https://luckyframework.org/guides/frontend/html-forms&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://luckyframework.org/guides/frontend/html-forms&lt;/a&gt;

&lt;a href=&#34;https://luckyframework.org/guides/frontend/html-forms#shared-components&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://luckyframework.org/guides/frontend/html-forms#shared-components&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;With a little more experience with Lucky HTML lets try the component forms again at &lt;code&gt;src/components/pets/form_fields.cr&lt;/code&gt; (so lets revert: &lt;code&gt;src/pages/pets/new_page.cr&lt;/code&gt; back to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# src/pages/pets/new_page.cr
class Pets::NewPage &amp;lt; MainLayout
  needs operation : SavePet
  quick_def page_title, &amp;quot;New Pet&amp;quot;

  def content
    h1 &amp;quot;New Pet&amp;quot;
    render_pet_form(operation)
  end

  def render_pet_form(op)
    form_for Pets::Create do
      # Edit fields in src/components/pets/form_fields.cr
      mount Pets::FormFields, op

      submit &amp;quot;Save&amp;quot;, data_disable_with: &amp;quot;Saving...&amp;quot;
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once I had build the first form and understood the errors - so the same form as a form_component looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# src/components/pets/form_fields.cr
class Pets::FormFields &amp;lt; BaseComponent
  needs operation : SavePet

  def render
    mount Shared::Field, operation.name, &amp;amp;.text_input(autofocus: &amp;quot;true&amp;quot;)
    mount Shared::Field, operation.species do |input_html|
      input_html.select_input append_class: &amp;quot;select-input&amp;quot; do
        select_prompt(&amp;quot;Select&amp;quot;)
        options_for_select operation.species, [{&amp;quot;Dog&amp;quot;, &amp;quot;dog&amp;quot;}, {&amp;quot;Cat&amp;quot;, &amp;quot;cat&amp;quot;}]
      end
    end
    mount Shared::Field, operation.breed
    mount Shared::Field, operation.age, &amp;amp;.number_input(append_class: &amp;quot;custom-input&amp;quot;, min: &amp;quot;0&amp;quot;, max: &amp;quot;99&amp;quot;)
    mount Shared::Field, operation.house_trained do |input_html|
      input_html.select_input append_class: &amp;quot;select-input&amp;quot; do
        select_prompt(&amp;quot;Select&amp;quot;)
        options_for_select operation.house_trained, [{&amp;quot;yes&amp;quot;, true}, {&amp;quot;no&amp;quot;, false}]
      end
    end
    mount Shared::Field, operation.human_id do |input_html|
      input_html.select_input append_class: &amp;quot;select-input&amp;quot; do
        select_prompt(&amp;quot;Select&amp;quot;)
        options_for_select operation.human_id, options_for_humans
      end
    end
  end

  private def options_for_humans
    HumanQuery.new.map do |human|
      { human.name, human.id }
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;the documentation has several examples with: &lt;code&gt;attrs: [:required]&lt;/code&gt; in the form.  This does client side validation (will not even submit the form if empty).  I don&amp;rsquo;t recommend using this generally.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if you don&amp;rsquo;t put anything next to the variable a text input without anything more than the errors are assumed &lt;code&gt;&amp;amp;.text_input()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Lets test again:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lucky dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;cool - lets snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;working shared form component with a variety of types&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;redirect-after-create--update-to-index&#34;&gt;Redirect after Create / Update to Index&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://luckyframework.org/guides/http-and-routing/routing-and-params&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://luckyframework.org/guides/http-and-routing/routing-and-params&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I find it annoying after creating and updating a resource to have to then manually go back to the index page from the show page.&lt;/p&gt;
&lt;p&gt;In lucky the routing/controll happens in the &lt;code&gt;action&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;To change what happens after creating and updating a Pet we simply change &lt;code&gt;src/actions/pets/create.cr&lt;/code&gt; to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# src/actions/pets/create.cr
class Pets::Create &amp;lt; BrowserAction
  post &amp;quot;/pets&amp;quot; do
    SavePet.create(params) do |operation, pet|
      if pet
        flash.success = &amp;quot;The record has been saved&amp;quot;
        html IndexPage, pets: PetQuery.new  # new action (copied from index)
        # redirect Show.with(pet.id)        # old no longer wanted
      else
        flash.failure = &amp;quot;It looks like the form is not valid&amp;quot;
        html NewPage, operation: operation
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And update &lt;code&gt;src/actions/pets/update.cr&lt;/code&gt; is similarly easy:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# src/actions/pets/update.cr
class Pets::Update &amp;lt; BrowserAction
  put &amp;quot;/pets/:pet_id&amp;quot; do
    pet = PetQuery.find(pet_id)
    SavePet.update(pet, params) do |operation, updated_pet|
      if operation.saved?
        flash.success = &amp;quot;The record has been updated&amp;quot;
        html IndexPage, pets: PetQuery.new
        # redirect Show.with(updated_pet.id)
      else
        flash.failure = &amp;quot;It looks like the form is not valid&amp;quot;
        html EditPage, operation: operation, pet: updated_pet
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I appreciate how explicit these are!&lt;/p&gt;
&lt;h2 id=&#34;optional-fields&#34;&gt;Optional Fields&lt;/h2&gt;
&lt;p&gt;Often a &lt;strong&gt;breed&lt;/strong&gt; is unknown - we could just add an &lt;code&gt;unknown&lt;/code&gt; value, but that&amp;rsquo;s silly, lets figure out how to work with unknown / unneeded data and allow nil in our &lt;code&gt;breed&lt;/code&gt; field.&lt;/p&gt;
&lt;p&gt;Since Crystal is strongly typed - one needs to explicitly mark that a field can be nil with &lt;code&gt;?&lt;/code&gt; - you can see the docs here: 
&lt;a href=&#34;https://luckyframework.org/guides/database/models#adding-a-column&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://luckyframework.org/guides/database/models#adding-a-column&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So to make &lt;strong&gt;breed&lt;/strong&gt; optional we will change the pets model to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Pet &amp;lt; BaseModel
  table do
    column name : String
    column species : String
    column breed : String?  # adding `?` makes the field optional (nil-able)
    column age : Int32
    column house_trained : Bool

    # relations
    belongs_to owner : Owner
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when I run lucky - I&amp;rsquo;ll expect to find some errors - (probably in a view saying I need null protecction).  However instead I get:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Unhandled exception: Pet has defined &#39;breed&#39; as nilable (String?), but the database column does not allow nils.
web          |
web          | Either mark the column as required in Pet:
web          |
web          |   # Remove the &#39;?&#39;
web          |   column breed : String
web          |
web          | Or, make the column optional in a migration:
web          |
web          |   â¸ Generate a migration:
web          |
web          |       lucky gen.migration MakePetBreedOptional
web          |
web          |   â¸ Make the column optional:
web          |
web          |       make_optional :pets, :breed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oddly, I don&amp;rsquo;t see anything in the migration Docs &lt;code&gt;https://www.luckyframework.org/guides/database/migrations&lt;/code&gt; about marking a file optional (nor how to make it optional in the original migration).  Since we w&lt;/p&gt;
&lt;p&gt;But lets try:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lucky gen.migration MakePetBreedOptional
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hmm, the error says what to put in the migration, but not the rollback, lets search the luckyframework repos and see what we find:  
&lt;a href=&#34;https://github.com/luckyframework/avram/blob/f676a9a7d2e70d74891ad686039bf393983d0760/src/avram/migrator/statement_helpers.cr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/luckyframework/avram/blob/f676a9a7d2e70d74891ad686039bf393983d0760/src/avram/migrator/statement_helpers.cr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here we see what the options are so lets edit the migration to look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class MakePetBreedOptional::V20210507125901 &amp;lt; Avram::Migrator::Migration::V1
  def migrate
    make_optional :pets, :breed
    # alter table_for(Pet) do
    #   make_optional :breed
    # end
  end

  def rollback
    # query for breed fields that are nil and fill them BEFORE making the field REQUIRED!
    PetQuery.new.breed.is_nil.each do |pet|
      SavePet.update!(pet, breed: &amp;quot;unknown&amp;quot;)
    end
    # this would work too, but might as well let the db do the heavy lifting
    # PetQuery.new.each do |pet|
    #   SavePet.update!(pet, breed: &amp;quot;unknown&amp;quot;) if pet.breed.nil?
    # end

    # simple way of making ONE field required
    make_required :pets, :breed

    # this would be better when changing lots of fields
    # alter table_for(Pet) do
    #   make_required :breed
    # end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OK - lets try again:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lucky dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool it works - lets make a new record - with an null value.&lt;/p&gt;
&lt;p&gt;Lets look at the record within postgresql:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;psql -d pets_development
select * from pets;

 id |       created_at       |       updated_at       | name  | breed | species | age | house_trained | owner_id
----+------------------------+------------------------+-------+-------+---------+-----+---------------+----------
  1 | 2021-05-07 15:23:28+02 | 2021-05-07 15:23:28+02 | Nyima |       | dog     |  11 | t             |        1
\q
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;rsquo;s be sure our rollback works.  Notice - before we make it &lt;code&gt;required&lt;/code&gt; we find records with nil values and fill them &lt;code&gt;unknown&lt;/code&gt;.  An example of adding data logic within a migration can be found at: 
&lt;a href=&#34;https://luckyframework.org/guides/database/migrations#using-fill_existing_with-and-default-values&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://luckyframework.org/guides/database/migrations#using-fill_existing_with-and-default-values&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lucky db.rollback
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OK - good the migration didn&amp;rsquo;t crash - lets check the DB.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;psql -d pets_development
select * from pets;

 id |       created_at       |       updated_at       | name  |  breed  | species | age | house_trained | owner_id
----+------------------------+------------------------+-------+---------+---------+-----+---------------+----------
  1 | 2021-05-07 15:23:28+02 | 2021-05-07 16:28:55+02 | Nyima | unknown | dog     |  11 | t             |        1
\q
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nice it worked.&lt;/p&gt;
&lt;h2 id=&#34;display-validation-errors&#34;&gt;Display Validation Errors&lt;/h2&gt;
&lt;p&gt;If we leave some fields out - Lucky gives us validation errors - all fields appear to be required without explicitly allowing nils - but we don&amp;rsquo;t see them with our default form.  Lets fix that.&lt;/p&gt;
&lt;h2 id=&#34;add-validations&#34;&gt;Add Validations&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s add a few custom validations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;minimal pet_name length&lt;/li&gt;
&lt;li&gt;numeric range&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tests-for-our-validations&#34;&gt;Tests for our Validations&lt;/h2&gt;
&lt;p&gt;Now that we have some logic lets add some tests&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/luckyframework/lucky_flow&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BrowserTesting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pretty-urls&#34;&gt;Pretty URLs&lt;/h2&gt;
&lt;p&gt;Looks interesting and easy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/luckyframework/avram_slugify&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/luckyframework/avram_slugify&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lucky-pubsub&#34;&gt;Lucky PubSub&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/luckyframework/pulsar&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/luckyframework/pulsar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bulma-integration&#34;&gt;Bulma Integration&lt;/h2&gt;
&lt;p&gt;Integrate CSS Frameworks&lt;/p&gt;
&lt;h2 id=&#34;view-components&#34;&gt;View Components&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://luckycasts.com/videos/component-basics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://luckycasts.com/videos/component-basics&lt;/a&gt;

&lt;a href=&#34;https://luckyframework.org/guides/frontend/rendering-html#creating-and-using-components&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://luckyframework.org/guides/frontend/rendering-html#creating-and-using-components&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;tailwind-integration&#34;&gt;Tailwind Integration&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://luckycasts.com/videos/tailwind-css&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://luckycasts.com/videos/tailwind-css&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s make the pages a bit nicer&lt;/p&gt;
&lt;h2 id=&#34;html-to-lucky-formatter&#34;&gt;HTML to Lucky formatter&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://luckyframework.org/html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://luckyframework.org/html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If we want to create some more complex pages with tailwind - lets use the converted to help.&lt;/p&gt;
&lt;h2 id=&#34;dynamic-front-end---selections-dependencies-alpinejs--stimulusjs-&#34;&gt;Dynamic Front-end - Selections Dependencies (AlpineJS / StimulusJS) ?&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://luckycasts.com/videos/stimulus-js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://luckycasts.com/videos/stimulus-js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Make the breed list, dependent on the species list
Lets change the Front-End language on the fly
Lets make the new TailwindUI menu bar have the dynamic features.&lt;/p&gt;
&lt;h2 id=&#34;has-many-through&#34;&gt;Has many through&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.luckyframework.org/guides/database/models#has-many-through-many-to-many&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.luckyframework.org/guides/database/models#has-many-through-many-to-many&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;polymorphic-relationships&#34;&gt;Polymorphic Relationships&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.luckyframework.org/guides/database/models#polymorphic-associations&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.luckyframework.org/guides/database/models#polymorphic-associations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One reason I favor Lucky is the database &lt;code&gt;Avram&lt;/code&gt; supports polymorphic relationships - which seems to come up a lot in my code - so lets see how to get it working and support multiple types:&lt;/p&gt;
&lt;p&gt;Pets -&amp;gt; Cats, Dogs, Horses, etc&lt;/p&gt;
&lt;h2 id=&#34;optional-relations&#34;&gt;Optional Relations&lt;/h2&gt;
&lt;h2 id=&#34;internationalization-i18n&#34;&gt;Internationalization (i18n)&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://luckycasts.com/videos/translations&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://luckycasts.com/videos/translations&lt;/a&gt;

&lt;a href=&#34;https://luckyframework.org/guides/frontend/internationalization&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://luckyframework.org/guides/frontend/internationalization&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;dynamic-i18n-in-front-end&#34;&gt;Dynamic i18n in Front-End?&lt;/h2&gt;
&lt;h2 id=&#34;components-with-scopes&#34;&gt;Components (with scopes)&lt;/h2&gt;
&lt;h2 id=&#34;lucky-code-scopes&#34;&gt;Lucky Code Scopes&lt;/h2&gt;
&lt;h2 id=&#34;resource-authorization&#34;&gt;Resource Authorization&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/stephendolan/pundit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/stephendolan/pundit&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;web-sockets&#34;&gt;Web Sockets&lt;/h2&gt;
&lt;p&gt;For now something like &lt;strong&gt;LiveView&lt;/strong&gt; and &lt;strong&gt;Hotwire&lt;/strong&gt; are not yet integrated into lucky - its build your own.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/cable-cr/cable&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/cable-cr/cable&lt;/a&gt;

&lt;a href=&#34;https://github.com/luckyframework/lucky/issues/554&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/luckyframework/lucky/issues/554&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;deploying-lucky--env&#34;&gt;Deploying Lucky &amp;amp; ENV&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://fullstackstanley.com/read/categories/lucky-framework/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://fullstackstanley.com/read/categories/lucky-framework/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;security-alternatives&#34;&gt;Security (Alternatives)&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/grottopress/shield&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/grottopress/shield&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;message--events---queues&#34;&gt;Message / Events - Queues&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/mosquito-cr/mosquito&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/mperham/sidekiq.cr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sidekiq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/bmulvihill/dispatch&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;InMemory-JobQueue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;language-inflections&#34;&gt;Language Inflections&lt;/h2&gt;
&lt;p&gt;Lucky 0.27.0 has problems using &lt;code&gt;config/inflector.cr&lt;/code&gt; settings (fixed in Lucky 0.28.0).  However, both versions have problems with loading these language configs into the pre-compiled lucky tasks.&lt;/p&gt;
&lt;p&gt;THere&amp;rsquo;s what happens (do a git snapshot):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky gen.resource.browser Human name:String
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OOPS - that generated the plural of &lt;code&gt;Human&lt;/code&gt; as &lt;code&gt;Humen&lt;/code&gt; instead of &lt;code&gt;Humans&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;lets clear all our incorrect files and fix this (if you did a git snapshot previously):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clean -fd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;rsquo;s create a new config file for inflections &lt;code&gt;config/inflector.cr&lt;/code&gt; and enter:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/inflector.cr
require &amp;quot;wordsmith&amp;quot;

# `staff` as in employees - not walking sticks:
Wordsmith::Inflector.inflections.uncountable(&amp;quot;staff&amp;quot;)
Wordsmith::Inflector.inflections.irregular(&amp;quot;human&amp;quot;, &amp;quot;humans&amp;quot;)
Wordsmith::Inflector.inflections.irregular(&amp;quot;person&amp;quot;, &amp;quot;persons&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;when we test our new lucky config with &lt;code&gt;lucky exec&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;lucky exec
# then when vim or nano opens you can enter something like:
require &amp;quot;../../src/app.cr&amp;quot;
include Lucky::TextHelpers
pp pluralize(2, &amp;quot;staff&amp;quot;)
pp pluralize(2, &amp;quot;person&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you will get the expected:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;2 staff&amp;quot;
&amp;quot;2 persons&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Given the tasks are pre-compiled do the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# clean up repo of gen.tasks that were problematic
# git clean -fd

# remove previously compiled shards
rm -rf lib &amp;amp;&amp;amp; rm -rf bin

# after trashing all the shard - safest to be sure they are intact (or even updated)
SKIP_LUCKY_TASK_PRECOMPILATION=true shards install # or shards update

# re-run the setup
SKIP_LUCKY_TASK_PRECOMPILATION=true ./script/setup
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now with the first task it will compile the task (a bit slow), but it uses your config file!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky gen.resource.browser Staff name:String

compiling ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sweet - this works for human - but not people - which is already defined in wordsmith.  The fix for this is to copy the entire wordsmith inflector file, adjust it to your needs and put it in &lt;code&gt;config/inflector.cr&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/luckyframework/wordsmith/blob/master/src/wordsmith/inflections.cr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/luckyframework/wordsmith/blob/master/src/wordsmith/inflections.cr&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/inflector.cr
require &amp;quot;wordsmith&amp;quot;

module Wordsmith
  # its important to clear all existing settings
  Inflector.inflections.clear

  # make adjustments as needed to the original file
  Inflector.inflections.plural(/$/, &amp;quot;s&amp;quot;)
  Inflector.inflections.plural(/s$/i, &amp;quot;s&amp;quot;)

  # etc, etc, etc

  Inflector.inflections.irregular(&amp;quot;human&amp;quot;, &amp;quot;humans&amp;quot;)
  Inflector.inflections.irregular(&amp;quot;person&amp;quot;, &amp;quot;persons&amp;quot;)

  # added staff to the list
  Inflector.inflections.uncountable(%w(equipment information rice money species series fish sheep jeans police staff))
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if we try again we will have the same problem!  We need to remove our binaries and recompile lucky with our need config!  (I lost a lot of time on this detail)! Do this with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rm -rf lib &amp;amp;&amp;amp; rm -rf bin
SKIP_LUCKY_TASK_PRECOMPILATION=true shards install
SKIP_LUCKY_TASK_PRECOMPILATION=true ./script/setup
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can try to create a new Resource again.  In Lucky 0.28.0 this config has gotten better, but the pre-compiled tasks still create confusion.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker Intro using MailCatcher</title>
      <link>https://btihen.me/post_tech_notes/codium_plugins/</link>
      <pubDate>Tue, 03 Nov 2020 01:19:09 +0200</pubDate>
      <guid>https://btihen.me/post_tech_notes/codium_plugins/</guid>
      <description>&lt;p&gt;Need to point Codium to MS extions?  Do the following:&lt;/p&gt;
&lt;h3 id=&#34;like-codium-but-need-a-ms-code-plugin&#34;&gt;&lt;strong&gt;Like Codium but need a MS Code Plugin?&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/37143536/no-extensions-found-when-running-visual-studio-code-from-source&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://stackoverflow.com/questions/37143536/no-extensions-found-when-running-visual-studio-code-from-source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;open:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vim /Applications/VSCodium.app/Contents/Resources/app/product.json&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This can be fixed by adding following to product.json:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;extensionsGallery&amp;quot;: {
    &amp;quot;serviceUrl&amp;quot;: &amp;quot;https://marketplace.visualstudio.com/_apis/public/gallery&amp;quot;,
    &amp;quot;cacheUrl&amp;quot;: &amp;quot;https://vscode.blob.core.windows.net/gallery/index&amp;quot;,
    &amp;quot;itemUrl&amp;quot;: &amp;quot;https://marketplace.visualstudio.com/items&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Web Design Resources</title>
      <link>https://btihen.me/post_tech_notes/web_design_resources/</link>
      <pubDate>Sun, 01 Nov 2020 01:57:16 +0200</pubDate>
      <guid>https://btihen.me/post_tech_notes/web_design_resources/</guid>
      <description>&lt;h2 id=&#34;thesarus-word-finder&#34;&gt;Thesarus (word finder)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.wordhippo.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wordhippo&lt;/a&gt; - finds older and specialty words!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;code-hightlights&#34;&gt;Code hightlights&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://highlightjs.org/usage/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://highlightjs.org/usage/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;docs&#34;&gt;Docs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://plantuml.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://plantuml.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://dbdiagram.io/home&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dbdiagram.io/home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.planttext.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.planttext.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://plantuml.com/ie-diagram&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://plantuml.com/ie-diagram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.quickdatabasediagrams.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.quickdatabasediagrams.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://graphviz.org/doc/info/lang.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://graphviz.org/doc/info/lang.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://modeling-languages.com/uml-tools/#textual&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://modeling-languages.com/uml-tools/#textual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://mamchenkov.net/wordpress/2015/08/20/graphviz-dot-erds-network-diagrams&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://mamchenkov.net/wordpress/2015/08/20/graphviz-dot-erds-network-diagrams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://towardsdatascience.com/drawing-a-uml-diagram-in-the-vs-code-53c2e67deffe&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://towardsdatascience.com/drawing-a-uml-diagram-in-the-vs-code-53c2e67deffe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;logos&#34;&gt;Logos&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://logomakr.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://logomakr.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.freelogodesign.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.freelogodesign.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.namecheap.com/logo-maker/app/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.namecheap.com/logo-maker/app/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://hatchful.shopify.com/onboarding/pick-space&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://hatchful.shopify.com/onboarding/pick-space&lt;/a&gt;\&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://svgx.app/?ref=madewithsvelte.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://svgx.app/?ref=madewithsvelte.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;slides&#34;&gt;Slides&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://zulko.github.io/eaglejs-demo/#/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EagleJS&lt;/a&gt; - Vue Based&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://revealjs.com/installation/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RevealJS&lt;/a&gt; - React Based&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/gnab/remark/wiki&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RemarkJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://glidejs.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GlideJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://marp.app/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Marp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;m often looking for a way to make websites more interesting here are a few resources I use:&lt;/p&gt;
&lt;h2 id=&#34;drawings&#34;&gt;Drawings&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://themeisle.com/blog/free-illustrations/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://themeisle.com/blog/free-illustrations/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://undraw.co/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Undraw&lt;/a&gt; &amp;ndash; free to use drawings in SVG&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.manypixels.co/gallery/?color=50c6e1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;manypixels&lt;/a&gt; - colors are adjustable!&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://stubborn.fun/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;stubborn.fun&lt;/a&gt; - new&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.drawkit.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;drawkit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://stories.freepik.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;stories.freepick&lt;/a&gt; - with attribution&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://illlustrations.co/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;illlustrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://iradesign.io/illustrations&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;iradesign&lt;/a&gt; - can change the colors!&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://absurd.design/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;absurd&lt;/a&gt; - funky stuff&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://icons8.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;icons8&lt;/a&gt; - images, drawings, photos, Icons!&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.humaaans.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;humaaans&lt;/a&gt; - all about people and lots of adjustments&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://grapbox.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grapbox&lt;/a&gt; - images, drawings, photos, Icons!&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.uistore.design/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;uistore&lt;/a&gt; - mix of stuff&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;photos---royalty-free-without-registration&#34;&gt;Photos - royalty free (without registration)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://unsplash.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Unsplash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.pexels.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pexels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://pixabay.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pixabay&lt;/a&gt; - (sometimes check if you are a robot :)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;image-editing---free&#34;&gt;Image Editing - Free&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://apps.apple.com/us/app/seashore&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Seashore Mac Store&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.lib.washington.edu/media/software/help-docs/Seashore_guide.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Seashore Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/robaho/seashore&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Seashore Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.gimp.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gimp&lt;/a&gt; - Mac &amp;amp; Linux&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://affinity.serif.com/en-gb/photo/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Affinity Photo&lt;/a&gt; - paid&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;web-drawing&#34;&gt;Web Drawing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.sketch.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sketch&lt;/a&gt; - straight forward&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://affinity.serif.com/en-gb/designer/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Affinity Desinger&lt;/a&gt; - Paid - but also exports SVG&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;css---nextgen&#34;&gt;CSS - NextGen&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/windicss/windicss&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Windi&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://vite-ruby.netlify.app/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ViteRuby/Rails&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://web-crunch.com/posts/vite-ruby-on-rails-application-template&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vite/Windi/Rails&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/justalever/kickoff_vite_rails&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vite/Windi/Rails6&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/vitejs/awesome-vite#integrations-with-backends&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AwesomeVite.js&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://dev.to/bvalentino/using-viewcomponents-with-actioncable-1kg2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RailsViewComponents&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://dev.to/andy/rails-to-introduce-view-components-3ome&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IntroRailsViewComponents&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://bloggie.io/@kinopyo/viewcomponent-my-attempt-to-answer-what-value-it-brings&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RailsViewComponents&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://medium.flatstack.com/a-component-based-approach-to-writing-views-in-ruby-on-rails-applications-using-view-components-17e262d9ae2b&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RailsViewComponents&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://mindreframer.com/posts/js-bundling-with-instant-live-reload-for-phoenix-and-liveview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vite/Phoenix/Article&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/mindreframer/phx-vite-demo/compare/checkpoint-0...checkpoint-4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vite/Phoenix/DemoRepo&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# learn to build a rails template!
git clone https://github.com/justalever/kickoff_vite_rails.git
rails new project --skip-webpack-install --skip-javascript -m kickoff_vite_rails/template.rb

cd project
bin/rails s
bin/vite dev (in second window or with forman/overmind)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;css&#34;&gt;CSS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://bulma.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bulma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://tailwindcss.com/docs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tailwindcss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://headlessui.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;headlessui&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://tailwindui.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tailwindui&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.tailwindtoolbox.com/starter-components&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tailwindtoolbar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;css--alpinejs--stimulusjs&#34;&gt;CSS / AlpineJS / StimulusJS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.alpinetoolbox.com/tools/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AplineToolbox&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=a_Jkn4hb6kI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Night/DayTailwindCSS&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=L6Jwa7al8os&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ResponsiveNavBarTailwindCSS&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://zaengle.com/blog/building-an-accessible-nav-with-alpine-js-and-tailwind-css&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AccessibleNavWTailwind&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://web-crunch.com/posts/lets-build-tailwind-css-responsive-navbar&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NavBarTailwindCSS&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=VLNOfRIiiYk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vue/Rails6&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=eUedqaHS4RQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vue/Rails6-WebCrunch&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://web-crunch.com/posts/ruby-on-rails-api-vue-js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vue/RailsAPI-WebCrunch&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://medium.com/swlh/how-to-integrate-vue-js-with-rails-6-5bd4c6263b18&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vue/Rails6&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://levelup.gitconnected.com/vue-js-with-rails-6-and-performing-crud-operations-b043ef3691f2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vue/Rails6/LevelUp&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://dev.to/mixed_code/setup-for-vue-and-buefy-in-rails-6-3cng&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vue/Buefy/Rails6&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://dev.to/itachiuchiha/bulma-based-ui-components-for-vuejs-41i4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Buefy-BulmaUI&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;icons&#34;&gt;Icons&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://ionicons.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IonIcons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://heroicons.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HeroIcons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://simpleicons.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SimpleIcons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://feathericons.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FeatherIcons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://themify.me/themify-icons&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;themifyIcons&lt;/a&gt; - good variety and brands too&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://fontawesome.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FontAwesome&lt;/a&gt; - Icons; many are completely free&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://fontawesome.com/icons?d=gallery&amp;amp;q=archive&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FontAwesome6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://thenounproject.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Noun Project&lt;/a&gt; - Icons and photos for all to use (with attribution)&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://primer.style/octicons/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Octicons&lt;/a&gt; - free icons on github&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://glyphicons.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Glyphicons&lt;/a&gt; - Icons in Bootstrap see also: 
&lt;a href=&#34;https://getbootstrap.com/docs/3.3/components/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://getbootstrap.com/docs/3.3/components/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://simpleicons.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SimpleIcons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://devicon.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;devicon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://iconic.app/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;iconic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;db-svelte-tool&#34;&gt;DB Svelte Tool&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://dbgate.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dbgate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;svg-text-logos&#34;&gt;SVG Text Logos&lt;/h2&gt;
&lt;p&gt;Sometimes I find it hard to come up with a good logo, but not a shortname.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Wide larger Logo&lt;/strong&gt; &lt;em&gt;(for Desktop views)&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;svg viewBox=&amp;quot;0 0 240 45&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;&amp;gt;
  &amp;lt;style&amp;gt;
    .heavy { font: bold 30px sans-serif; fill: blue;}
    .small { font: italic 25px sans-serif; fill: green; }
  &amp;lt;/style&amp;gt;
  &amp;lt;text x=&amp;quot;0&amp;quot; y=&amp;quot;35&amp;quot; class=&amp;quot;heavy&amp;quot; fill=&amp;quot;blue&amp;quot;&amp;gt;ED&amp;lt;/text&amp;gt;
  &amp;lt;text x=&amp;quot;41&amp;quot; y=&amp;quot;35&amp;quot; class=&amp;quot;small&amp;quot; fill=&amp;quot;green&amp;quot;&amp;gt;gility&amp;lt;/text&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Small stacked logo&lt;/strong&gt; &lt;em&gt;(for mobile views)&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;svg viewBox=&amp;quot;0 0 45 45&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;&amp;gt;
  &amp;lt;style&amp;gt;
    .heavy { font: bold 28px sans-serif; fill: blue;}
    .small { font: italic 18px sans-serif; fill: green; }
  &amp;lt;/style&amp;gt;
  &amp;lt;text x=&amp;quot;0&amp;quot; y=&amp;quot;22&amp;quot; class=&amp;quot;heavy&amp;quot; fill=&amp;quot;blue&amp;quot;&amp;gt;ED&amp;lt;/text&amp;gt;
  &amp;lt;text x=&amp;quot;0&amp;quot; y=&amp;quot;40&amp;quot; class=&amp;quot;small&amp;quot; fill=&amp;quot;green&amp;quot;&amp;gt;gility&amp;lt;/text&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Github Website with a Custom Domain &amp; SSL</title>
      <link>https://btihen.me/post_tech_notes/github_website_with_custom_domain/</link>
      <pubDate>Sun, 31 May 2020 13:22:48 +0200</pubDate>
      <guid>https://btihen.me/post_tech_notes/github_website_with_custom_domain/</guid>
      <description>&lt;h3 id=&#34;step-0-buy-a-domain-name&#34;&gt;step 0: buy a domain name&lt;/h3&gt;
&lt;p&gt;For these instructions use the (Namecheap)[https://www.namecheap.com/] service to buy your Domain.&lt;/p&gt;
&lt;h3 id=&#34;step-1-point-your-domain-name-at-usernamegithubio-optional&#34;&gt;step 1: point your domain name at: username.github.io (optional)&lt;/h3&gt;
&lt;p&gt;This takes quite a steps and disables https (more steps follow to renable ssl).  This article got me oriented:

&lt;a href=&#34;https://dev.to/rightfrombasics/connecting-namecheap-domain-with-github-pages-3nn6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dev.to/rightfrombasics/connecting-namecheap-domain-with-github-pages-3nn6&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;log into Namecheap&lt;/li&gt;
&lt;li&gt;On the left is a sidebar with &lt;strong&gt;Dashboard&lt;/strong&gt; and the top.  Click on the &lt;strong&gt;Domain List&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Find your domain name and click the &lt;strong&gt;manage&lt;/strong&gt; button on the far right.&lt;/li&gt;
&lt;li&gt;Along the top click on &lt;strong&gt;Advanced DNS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Add your A records to the DNS config.  I typed: &lt;code&gt;dig btihen.github.io&lt;/code&gt; (of course replace with your github website name) and got:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.10.6 &amp;lt;&amp;lt;&amp;gt;&amp;gt; btihen.github.io
;; global options: +cmd
;; Got answer:
;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 28239
;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 512
;; QUESTION SECTION:
;btihen.github.io.		IN	A

;; ANSWER SECTION:
btihen.github.io.	3600	IN	A	185.199.110.153
btihen.github.io.	3600	IN	A	185.199.109.153
btihen.github.io.	3600	IN	A	185.199.108.153
btihen.github.io.	3600	IN	A	185.199.111.153
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So created the following A Records:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type          Host  Value             TTL
A Record      @     185.199.110.153   Automatic
A Record      @     185.199.109.153   Automatic
A Record      @     185.199.108.153   Automatic
A Record      @     185.199.111.153   Automatic
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Then I created a CNAME record:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;type          Host  Value             TTL
CNAME Record  www   btihen.github.io  Automatic
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-2-configure-you-github-site-to-accept-the-domain&#34;&gt;step 2: configure you github site to accept the domain&lt;/h3&gt;
&lt;p&gt;You need to make a file called CNAME in the root of your username.github.io repo and it contents must be your new domain name.&lt;/p&gt;
&lt;p&gt;For example I used:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd public
touch CNAME
echo &#39;btihen.me&#39; &amp;gt;&amp;gt; CNAME
git add .
git commit -m &#39;accept the domain name: btihen.me&#39;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-3-stop-and-check&#34;&gt;step 3: stop and check&lt;/h3&gt;
&lt;p&gt;NOW: &lt;code&gt;http://your-domain-name.com&lt;/code&gt; should work&lt;/p&gt;
&lt;h3 id=&#34;step-4-free-ssl-for-the-domain&#34;&gt;step 4: Free ssl for the domain&lt;/h3&gt;
&lt;p&gt;following the advice from: 
&lt;a href=&#34;https://dev.to/rightfrombasics/adding-ssl-to-your-site-free-1fa7&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dev.to/rightfrombasics/adding-ssl-to-your-site-free-1fa7&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;create a 
&lt;a href=&#34;https://www.cloudflare.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cloudflare&lt;/a&gt; account.&lt;/li&gt;
&lt;li&gt;choose the dns feature&lt;/li&gt;
&lt;li&gt;allow cloudflare to scan your dns records (it should get the same results as when you do: &lt;code&gt;dig username.github.io&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Continue through the cloudflare process &amp;amp; cloudflare will eventually give you 2 nameservers to use.&lt;/li&gt;
&lt;li&gt;Now you can have cloudflare take over your dns &amp;ndash; log into Namecheap&lt;/li&gt;
&lt;li&gt;On the left is a sidebar with &lt;strong&gt;Dashboard&lt;/strong&gt; and the top.  Click on the &lt;strong&gt;Domain List&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Find your domain name and click the &lt;strong&gt;manage&lt;/strong&gt; button on the far right.&lt;/li&gt;
&lt;li&gt;On the top bar choose &lt;strong&gt;Domain&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Find the &lt;strong&gt;Nameservers&lt;/strong&gt; section&lt;/li&gt;
&lt;li&gt;Choose &lt;strong&gt;Custom DNS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Add the tow servers given to you by Cloudflare and save.&lt;/li&gt;
&lt;li&gt;Go back to cloudflare and choose &lt;strong&gt;Full&lt;/strong&gt; end to end encryption&lt;/li&gt;
&lt;li&gt;Choose &lt;strong&gt;Always Use HTTPS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Save and click the &lt;strong&gt;Re-check now&lt;/strong&gt; button.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Unfortunately, now you need to wait for a 1/2 hour or morefor the dns service to transfer from Namecheap to Cloudflare.  Theoretically up to 48 hours (but a 1/2 hour is much more typical).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Academic Content Commands</title>
      <link>https://btihen.me/post_tech_notes/hugo_academic_cheatsheet/</link>
      <pubDate>Sat, 23 May 2020 10:39:21 +0200</pubDate>
      <guid>https://btihen.me/post_tech_notes/hugo_academic_cheatsheet/</guid>
      <description>&lt;h2 id=&#34;from-the-academic-documentation&#34;&gt;From the Academic Documentation&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://sourcethemes.com/academic/docs/managing-content&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;create-a-user&#34;&gt;Create a User&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;hugo new --kind authors authors/firstname_lastname
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;add person&amp;rsquo;s image&lt;/strong&gt; (png or jpg)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp picture.jpg content/authors/firstname_lastname/avatar.jpg
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-blog&#34;&gt;Create a Blog&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;hugo new --kind post post/blog_title
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;images within the article&lt;/strong&gt; - add images to the article folder:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp image.jpg content/post/blog_title/article_image.jpg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and add it to the content using: &lt;code&gt;![kanban](example.jpg)&lt;/code&gt; within the article&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;add a display image&lt;/strong&gt; (png or jpg)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp picture.jpg content/post/blog_title/featured.jpg
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;add-a-publication-reference&#34;&gt;Add a Publication Reference&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;hugo new --kind publication publication/publication_title
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;add a display image&lt;/strong&gt; (png or jpg)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp picture.jpg content/publication/publication_title/featured.jpg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;add a pdf&lt;/strong&gt; (with the same name as the folder) and it will be automatically available&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp picture.pdf content/publication/publication_title/publication_title.pdf
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-project&#34;&gt;Create a Project&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;hugo new --kind project project/project_name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;add a display image&lt;/strong&gt; (png or jpg)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp picture.jpg content/project/project_name/featured.jpg
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-talk&#34;&gt;Create a Talk&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;hugo new --kind talk talk/my-talk-name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Talk Slides&lt;/strong&gt; are a bit more complicated see:

&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://sourcethemes.com/academic/docs/managing-content/#create-slides&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;course-documentation&#34;&gt;Course (Documentation)&lt;/h2&gt;
&lt;p&gt;This is tricky (copy and rename an existing &lt;code&gt;course&lt;/code&gt; and adapt it)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;courses&lt;/code&gt; can be renamed and can have multiple folders (courses) within it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; the &lt;code&gt;algebra_1&lt;/code&gt; folder cannot have any sub-folders. Within an actual course all materials must be within a FLAT hierarchy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Website using Github</title>
      <link>https://btihen.me/post_tech_notes/hugo_academic_website_steps/</link>
      <pubDate>Sat, 16 May 2020 10:39:21 +0200</pubDate>
      <guid>https://btihen.me/post_tech_notes/hugo_academic_website_steps/</guid>
      <description>&lt;h3 id=&#34;step-0-install-hugo&#34;&gt;step 0: install hugo&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install hugo
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-1-create-a-public-username_website-repo&#34;&gt;step 1: create a &lt;strong&gt;public&lt;/strong&gt; &lt;code&gt;username_website&lt;/code&gt; repo&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;ll assume your github account is &lt;code&gt;username&lt;/code&gt; I think this repo needs to be publicly readable (not 100% sure)&lt;/p&gt;
&lt;h3 id=&#34;step-2-clone-the-academic-hugo-locally&#34;&gt;step 2: clone the academic hugo locally&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/sourcethemes/academic-kickstart.git username_website
cd academic_website
git submodule update --init --recursive  # without this the site won&#39;t start correctly
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;be sure you have many files within: &lt;strong&gt;&lt;code&gt;themes/academic&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;step-3-update-gitignore--public-folder&#34;&gt;step 3: Update .gitignore &amp;amp; public folder&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;update &lt;code&gt;.gitignore&lt;/code&gt; remove the line with &lt;code&gt;public&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;be sure there is no &lt;code&gt;public&lt;/code&gt; folder (yet), if there is remove it and all its contents.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;step-4-point-this-repo-to-your-username_website-repo&#34;&gt;step 4: point this repo to your &lt;code&gt;username_website&lt;/code&gt; repo&lt;/h3&gt;
&lt;p&gt;I have found the easiest way to overwrite the source &lt;code&gt;origin&lt;/code&gt; repo is to do this by hand.&lt;/p&gt;
&lt;p&gt;Currently your &lt;code&gt;.git/config&lt;/code&gt; file will currently look like (notice the url referencing: &lt;code&gt;git://github.com/sourcethemes/academic-kickstart.git&lt;/code&gt; - this is what we need to update):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true
[remote &amp;quot;origin&amp;quot;]
	url = git://github.com/sourcethemes/academic-kickstart.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch &amp;quot;master&amp;quot;]
	remote = origin
	merge = refs/heads/master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;change the origin url by hand or by using sed:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed -i.bak -e &#39;s/https:\/\/github.com\/sourcethemes\/academic-kickstart.git/git@github.com:username\/username_website.git/&#39; .git/config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;when your &lt;code&gt;.git/config&lt;/code&gt; file is correct it will look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true
[remote &amp;quot;origin&amp;quot;]
	url = git@github.com:username/username_website.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch &amp;quot;master&amp;quot;]
	remote = origin
	merge = refs/heads/master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now you can push this local repo to your github repo using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push -u origin --all
# git init
# git add .
# git commit -m &amp;quot;Initial commit&amp;quot;
# git push -u origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-5-configure-website-basics&#34;&gt;step 5: configure website basics&lt;/h3&gt;
&lt;h4 id=&#34;5a-set-your-site-name&#34;&gt;5A: Set your site name:&lt;/h4&gt;
&lt;p&gt;in &lt;code&gt;config/_default/config.toml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;find the &lt;code&gt;title&lt;/code&gt; attribute and set it to &lt;code&gt;username&lt;/code&gt; (or whatever is appropriate)&lt;/p&gt;
&lt;h4 id=&#34;5b-pick-a-themes&#34;&gt;5B: Pick a themes&lt;/h4&gt;
&lt;p&gt;from 
&lt;a href=&#34;https://sourcethemes.com/academic/themes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://sourcethemes.com/academic/themes/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in &lt;code&gt;config/_default/config.toml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;find the &lt;code&gt;theme&lt;/code&gt; attribute and set it to your favorite theme color (or leave it as is)&lt;/p&gt;
&lt;h4 id=&#34;5c-site-logo--favicon&#34;&gt;5C: site logo &amp;amp; favicon&lt;/h4&gt;
&lt;p&gt;Put your image files into assets/images:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;logo.png&lt;/code&gt; (the logo on your webpage) file and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;icon.png&lt;/code&gt; (the favicon - icon in the webtab)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can go to &lt;code&gt;https://www.namecheap.com/logo-maker&lt;/code&gt; and make a logo&lt;/p&gt;
&lt;h4 id=&#34;5d-menu-items&#34;&gt;5D: menu items&lt;/h4&gt;
&lt;p&gt;in &lt;code&gt;config/_default/menus.toml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;remove any items you won&amp;rsquo;t use.  In my case this file now looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[main]]
  name = &amp;quot;Posts&amp;quot;
  url = &amp;quot;#posts&amp;quot;
  weight = 20

[[main]]
  name = &amp;quot;About&amp;quot;
  url = &amp;quot;#about&amp;quot;
  weight = 50

[[main]]
  name = &amp;quot;Contact&amp;quot;
  url = &amp;quot;#contact&amp;quot;
  weight = 60
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These will also be the sections on the home page that will be enabled and configured.&lt;/p&gt;
&lt;p&gt;The larger the weight the further to the &lt;strong&gt;right&lt;/strong&gt; the item will be shown.&lt;/p&gt;
&lt;h3 id=&#34;step-6-configure-site-parameters&#34;&gt;step 6: configure site parameters&lt;/h3&gt;
&lt;p&gt;You may want to read through all the params - but the ones listed here are enough to get started.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;site_type&lt;/strong&gt; &amp;ndash; in the file: &lt;code&gt;config/_default/params.toml&lt;/code&gt;: be sure to configure the &lt;code&gt;site_type&lt;/code&gt; variable&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;configure &amp;lsquo;contact details&amp;rsquo;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;if you choose not to add an email, then be sure to set the variable &lt;code&gt;email_form=0&lt;/code&gt; on the &lt;code&gt;content/home/contact.md&lt;/code&gt; file!&lt;/li&gt;
&lt;li&gt;if you choose not to enter an address and coordinates the in the &lt;code&gt;[map]&lt;/code&gt; section set the &lt;code&gt;engine=0&lt;/code&gt; to avoid problems.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;configure social details&lt;/strong&gt; &amp;ndash; optional&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Regional Settings&lt;/strong&gt; &amp;ndash; NOTE: The date display settings seems to have a bug &amp;ndash; so I don&amp;rsquo;t recommend adjusting that.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;step-7-configure-your-homepage&#34;&gt;step 7: configure your homepage&lt;/h3&gt;
&lt;p&gt;At this point I suggest starting &lt;code&gt;hugo server&lt;/code&gt; so you can watch your edits.&lt;/p&gt;
&lt;p&gt;Now go into the folder &lt;code&gt;content/home&lt;/code&gt; and we will adjust or disable the files in this folder.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;disable with: &lt;code&gt;active=false&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;enable with: &lt;code&gt;active=true&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;oder with: &lt;code&gt;weight=20&lt;/code&gt; the bigger the number the further down on the page is show (I suggest you use the same weights used in the menu)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;contact.md&lt;/code&gt;&lt;/strong&gt; - review and see if changes are desired.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;accomplishments.md&lt;/code&gt;&lt;/strong&gt; - (and all other home page sections you decide not to display) change &lt;code&gt;active=true&lt;/code&gt; to &lt;strong&gt;&lt;code&gt;active=false&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;7a-about-page&#34;&gt;7A: &lt;code&gt;about&lt;/code&gt; page&lt;/h4&gt;
&lt;p&gt;I prefer to use the &lt;code&gt;about&lt;/code&gt; page when it is a person&amp;rsquo;s site and the &lt;code&gt;people&lt;/code&gt; page when the site is about a group effort.  So in this case:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new --kind authors authors/author_name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;content/home/about.md&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;change the title to whatever you like: biography, about, etc&amp;hellip;&lt;/li&gt;
&lt;li&gt;change the variable &lt;code&gt;author&lt;/code&gt; to match the name you used to generate you profile above, ie:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;author = &amp;quot;author_name&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;content/authors/author_name/_index.md&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adjust the file so the information is accurate&lt;/li&gt;
&lt;li&gt;below the &lt;code&gt;---&lt;/code&gt; toward the end of the file, add your own free text to the about page.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;content/authors/author_name/avatar.jpeg&lt;/code&gt;&lt;/strong&gt; (png, jpg, etc also work)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add an attractive image to the folder &lt;code&gt;content/authors/author_name/&lt;/code&gt; and name it: &lt;strong&gt;&lt;code&gt;avatar.jpg&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;7b-people-or-team-page&#34;&gt;7B: &lt;code&gt;people&lt;/code&gt; (or Team) page&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;disable &lt;code&gt;content/home/about.md&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mark the &lt;code&gt;active&lt;/code&gt; variable as &lt;code&gt;false&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;active=false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;enable &lt;code&gt;content/home/people.md&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set &lt;code&gt;active=true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;create sub-group names:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[content]
  user_groups = [&amp;quot;Educators&amp;quot;, &amp;quot;Researchers&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or alternatively, use an empty string to create a team without sub-teams:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[content]
  user_groups = [&amp;quot;&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Create the people (authors)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new --kind authors authors/person_name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;content/authors/person_name/_index.md&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add one (or more) &lt;code&gt;user_group&lt;/code&gt; to the person&amp;rsquo;s profile using the &lt;code&gt;user_groups&lt;/code&gt; variable:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;user_groups = [&amp;quot;Educators&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if you used an empty string in &lt;code&gt;people.md&lt;/code&gt; add:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;user_groups = [&amp;quot;&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Edit this file so that the information is accurate&lt;/li&gt;
&lt;li&gt;below the &lt;code&gt;---&lt;/code&gt; toward the end of the file, add your own free text to the about page.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;content/authors/person_name/avatar.jpeg&lt;/code&gt;&lt;/strong&gt; (png, jpg, etc also work)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add an attractive image to the folder &lt;code&gt;content/authors/person_name/&lt;/code&gt; and name it: &lt;strong&gt;&lt;code&gt;avatar.jpg&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;step-8-test-publish-to-usernamegithubio&#34;&gt;step 8: Test publish to &lt;code&gt;username.github.io&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;When you site is good enough to publish then its time to follow the following steps (these MUST be done in order to prevent problems!)&lt;/p&gt;
&lt;h4 id=&#34;8a-public-folder-non-existent&#34;&gt;8A: public folder (non-existent)&lt;/h4&gt;
&lt;p&gt;The first time you do setup for publishing it is important this folder doesn&amp;rsquo;t exist yet and that &lt;code&gt;public&lt;/code&gt; isn&amp;rsquo;t listed in the .gitignore` file&lt;/p&gt;
&lt;h4 id=&#34;8b-git-snapshot&#34;&gt;8B: git snapshot&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;(DO NOT YET GENERATE your website)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Create your git snapshot (very important at this point since the next steps are tricky)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;First draft of homepage&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;8c-make-second-github-repo-usernamegithubio&#34;&gt;8C: make second github repo &lt;strong&gt;&lt;code&gt;username.github.io&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Now make a second &lt;strong&gt;public&lt;/strong&gt; repo (CLICK THE BOX TO INCLUDE A &lt;strong&gt;README&lt;/strong&gt; and/or a &lt;strong&gt;LISENCE&lt;/strong&gt; file!) on github called &lt;strong&gt;&lt;code&gt;username.github.io&lt;/code&gt;&lt;/strong&gt;, this MUST be exactly: &lt;code&gt;username.github.io&lt;/code&gt; for this to work!&lt;/p&gt;
&lt;p&gt;Double check your repo is not empty, but has a &lt;strong&gt;README&lt;/strong&gt; and/or a &lt;strong&gt;LISENCE&lt;/strong&gt; file.&lt;/p&gt;
&lt;p&gt;NOW go to github repo &lt;strong&gt;settings&lt;/strong&gt; and click on &lt;strong&gt;manage access&lt;/strong&gt; and be sure you have permission to at administer (or at least write to this repo) &amp;ndash; probably not so click the &lt;strong&gt;&lt;code&gt;invite teams or people&lt;/code&gt;&lt;/strong&gt; button and add yourself as an admin (an other as needed).&lt;/p&gt;
&lt;h4 id=&#34;8d-clone-usernamegithubio-to-public-within-your-hugo-project&#34;&gt;8D: clone &lt;strong&gt;&lt;code&gt;username.github.io&lt;/code&gt;&lt;/strong&gt; to public (within your Hugo project)&lt;/h4&gt;
&lt;p&gt;now go back into your website code (root folder) and type:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/username/username.github.io.git public
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if you see: &lt;code&gt;warning: You appear to have cloned an empty repository.&lt;/code&gt; &amp;ndash; go back to the repo and create a README file!&lt;/p&gt;
&lt;h4 id=&#34;8e-check-your-permissions&#34;&gt;8E: check your permissions&lt;/h4&gt;
&lt;p&gt;enter you public folder and create an &lt;code&gt;index.html&lt;/code&gt; file and put in very simple html code: &lt;code&gt;&amp;lt;h1&amp;gt;Hello username.github.io&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd public
touch index.html
echo &#39;&amp;lt;h1&amp;gt;Hello username.github.io&amp;lt;/h1&amp;gt;&#39; &amp;gt;&amp;gt; index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now check this in and push it to github.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;test webpage&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point you should see a bunch of message and toward the end you should see a line with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;To github.com:username/username.github.io.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If instead you get the error:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;remote: Permission to peakchallenges/peakchallenges.github.io.git denied to btihen.
fatal: unable to access &#39;https://github.com/peakchallenges/peakchallenges.github.io.git/&#39;: The requested URL returned error: 403
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;go back and check your site permissions.&lt;/p&gt;
&lt;p&gt;If site permissions aren&amp;rsquo;t a problem do the following:&lt;/p&gt;
&lt;p&gt;re-create your website repo &lt;code&gt;username.github.io.git&lt;/code&gt; outside the webcode project.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:username/username.github.io.git
cd username.github.io
echo &#39;&amp;lt;h1&amp;gt;Hello username.github.io - v1&amp;lt;/h1&amp;gt;&#39; &amp;gt;&amp;gt; index.html
git add index.html
git commit -m &amp;quot;update readme and test permissions&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;assuming this works then move this repo into the hugo repo:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rm -rf username_website/public
mv username.github.io username_website/public
cd username_website/public
echo &#39;&amp;lt;h1&amp;gt;Hello username.github.io - v2&amp;lt;/h1&amp;gt;&#39; &amp;gt;&amp;gt; index.html
git commit -am &amp;quot;update readme and test permissions within hugo project&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;8f-check-the-website&#34;&gt;8F: check the website&lt;/h4&gt;
&lt;p&gt;Wait a few minutes and go to the website &lt;code&gt;https://username.github.io&lt;/code&gt; and be sure you see your newly published html page.&lt;/p&gt;
&lt;h3 id=&#34;step-9-configure-public-as-a-submodule&#34;&gt;step 9: configure &lt;code&gt;public&lt;/code&gt; as a &lt;strong&gt;submodule&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Now add the username.github.io repo as a submodule to your website code repo using.  This allows nested projects without confusing git.&lt;/p&gt;
&lt;p&gt;First be sure you are in the hugo root and not the public folder and type:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd public
git submodule add -b master https://github.com/username/username.github.io.git public`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now in &lt;code&gt;.git/modules&lt;/code&gt; you might see a folder called &lt;code&gt;public&lt;/code&gt; (with a bunch of stuff in it) if not simply edit your &lt;code&gt;.git/config&lt;/code&gt; so that after:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[submodule &amp;quot;themes/academic&amp;quot;]
  path = themes/academic
  url = https://github.com/gcushen/hugo-academic.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you see:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[submodule &amp;quot;public&amp;quot;]
  path = public
  url = https://github.com/username/username.github.io.git
  branch = master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can add it by hand or with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;cat &amp;lt;&amp;lt;&amp;quot;EOF&amp;quot; &amp;gt;&amp;gt; git/config
[submodule &amp;quot;public&amp;quot;]
  path = public
  url = https://github.com/username/username.github.io.git
  branch = master
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-10-publish-your-new-hugo-webpage&#34;&gt;step 10: publish your new Hugo webpage:&lt;/h3&gt;
&lt;p&gt;Now to publish the Hugo site you prepared do the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo -d public
cd public
git add .
git commit -m &amp;quot;first webpage content&amp;quot;
git push
# toward the end you should see: `To github.com:username/username.github.io.git`
cd ..
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Follow this proceedure every time you update your site.&lt;/p&gt;
&lt;p&gt;NOTE: BE SURE NOT TO delete the folder &lt;code&gt;public/.git/&lt;/code&gt; or you will need to reconfigure your public submodule.&lt;/p&gt;
&lt;p&gt;now go back to &lt;code&gt;https://username.github.io&lt;/code&gt; and you should see your hugo site!&lt;/p&gt;
&lt;p&gt;(This might take a few minutes &amp;ndash; up to a half-hour &amp;ndash; to publish)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker Intro using MailCatcher</title>
      <link>https://btihen.me/post_tech_notes/docker_intro_with_mail_catcher/</link>
      <pubDate>Tue, 12 May 2020 21:19:09 +0200</pubDate>
      <guid>https://btihen.me/post_tech_notes/docker_intro_with_mail_catcher/</guid>
      <description>&lt;h3 id=&#34;intro&#34;&gt;&lt;strong&gt;Intro&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;It is often helpful to be able to test email sending from an application during development or testing (or even to make testing emails on a staging server possible).&lt;/p&gt;
&lt;p&gt;To do this follow these instructions for a safe convenient way to test and inspect emails sent from an application.&lt;/p&gt;
&lt;h3 id=&#34;setup&#34;&gt;&lt;strong&gt;SETUP&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;First we need to get the repo (or at least the docker file)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# get the mailcatcher repo
git clone git@github.com:sj26/mailcatcher.git

# go into mailcather repo
cd mailcatcher

# configure to use the newest `released` gem version of mailcatcher
sed -i.bu1 &#39;s/FROM ruby:2.5/FROM ruby:2.6/&#39; Dockerfile
sed -i.bu2 &#39;s/ARG VERSION=0.6.5/ARG VERSION=0.7.1/&#39; Dockerfile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Dockerfile should now look like (which is actually all that is actually needed):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM ruby:2.6
MAINTAINER Samuel Cochran &amp;lt;sj26@sj26.com&amp;gt;

ARG VERSION=0.7.1

RUN gem install mailcatcher -v $VERSION

EXPOSE 1025 1080

ENTRYPOINT [&amp;quot;mailcatcher&amp;quot;, &amp;quot;--foreground&amp;quot;]
CMD [&amp;quot;--ip&amp;quot;, &amp;quot;0.0.0.0&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;build-image&#34;&gt;&lt;strong&gt;BUILD IMAGE&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Now you can download the docker image and install the gems into it with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# -t adds repository:tag info -- the &#39;.&#39; at the end is important:
docker build -t btihen/ruby/mailcatcher:ruby_2.6 .
# ...
# should end with something like
# Successfully built 21e0de2bdd68

# now tag it as the **lasted** image with:
docker build -t btihen/ruby/mailcatcher:latest .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now you can see your list of docker images (you should see the starting image/container we just created):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker images
REPOSITORY                 TAG                 IMAGE ID            CREATED             SIZE
btihen/ruby/mailcatcher    latest              21e0de2bdd68        8 minutes ago       870MB
btihen/ruby/mailcatcher    ruby_2.6            21e0de2bdd68        8 minutes ago       870MB
ruby                       2.6                 a98425292e84        2 weeks ago         843MB
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;build-container&#34;&gt;&lt;strong&gt;BUILD CONTAINER&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Now start the docker image using the build image id (&lt;code&gt;-d&lt;/code&gt; allows it to run in the backgroud, &lt;code&gt;-p 1025:1025 -p 1080:1080&lt;/code&gt; opens a connection on ports 1025 &amp;amp; 1080 from localhost to the docker image):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# build a container so we can test our image
docker run -d -p 1025:1025 -p 1080:1080 --name mailcatcher btihen/ruby/mailcatcher:latest

# or if you like ids better
docker run -d -p 1025:1025 -p 1080:1080 --name mailcatcher 21e0de2bdd68

# if you forgot the image-id you can list the images with:
docker images
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;testing-http--smtp&#34;&gt;&lt;strong&gt;TESTING (http &amp;amp; smtp)&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;now you should be able to go to &lt;code&gt;http://localhost:1080&lt;/code&gt; and see the mailcatcher webpage.&lt;/p&gt;
&lt;p&gt;now lets test the smtp side from the cli using these instructions: &lt;code&gt;https://www.shellhacks.com/send-email-smtp-server-command-line/&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# connect to the mail server
$ telnet localhost 1025
# or
$ telnet 127.0.0.1 1025
220 smtp.domain.ext ESMTP Sendmail ?version-number?; ?date+time+gmtoffset?

# declare yourself (IP or DNS)
&amp;gt; HELO local.domain.name
250 smtp.domain.ext Hello local.domain.name [xxx.xxx.xxx.xxx], pleased to meet you

# declare who the email is from:
&amp;gt; MAIL FROM: test@local.domain.name
250 2.1.0 sender@adress.ext... Sender ok

# declare who should get the email:
&amp;gt; RCPT TO: recipient@adress.ext
250 2.1.5 recipient@adress.ext... Recipient ok

# setup the DATA transmission:
 &amp;gt; DATA
354 Enter mail, end with &amp;quot;.&amp;quot; on a line by itself

# type a subject two returns and a message ending with &#39;.&#39; (on its own line):
SUBJECT: Test message

Hello,
this is a TEST message,
please don&#39;t reply.
Thank you.
.

# end the connection
&amp;gt; QUIT
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now check the mail has arrived in mailcatcher at &lt;code&gt;localhost:1080&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Assuming you see the email sent - you can be sure your image &amp;amp; container is setup properly.&lt;/p&gt;
&lt;h3 id=&#34;stopping-exited-container&#34;&gt;&lt;strong&gt;STOPPING (exited) CONTAINER&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;When we are done with mailcatcher we can stop the docker process:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker ps -a
docker kill mailcatcher
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;starting-built-but-exited-containers&#34;&gt;&lt;strong&gt;STARTING BUILT (but exited) CONTAINERS&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;To restart mailcatcher at a later date simply type:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker start mailcatcher&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;sharing-images-once-they-work&#34;&gt;&lt;strong&gt;SHARING IMAGES (once they work)&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# login to the Azure Container Repository
docker login btihen -u username -p xxxxxxxxxxx

# upload the new image
docker push btihen/ruby/mailcatcher
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;retrieving-shared-image&#34;&gt;&lt;strong&gt;RETRIEVING SHARED IMAGE&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;az acr login --name username
az acr repository list --name username --output table

# getting the image
docker pull btihen/ruby/image_name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;containerize the image&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# these are the default local ports - adjust to your needs
docker run -d -p 1025:1025 -p 1080:1080 --name mailcatcher btihen/ruby/mailcatcher:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;start the container&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker start mailcatcher
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;listing-repo-images&#34;&gt;&lt;strong&gt;LISTING Repo IMAGES&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;One-time install&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# if needed install the azure cli
brew update &amp;amp;&amp;amp; brew install azure-cli

# the following may also be needed:
brew update &amp;amp;&amp;amp; brew install python3 &amp;amp;&amp;amp; brew upgrade python3
brew link --overwrite python3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Retrieve the image list&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# login with the azure-cli
az acr login --name username

# list the images
az acr repository list --name username --output table
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;removing-containers&#34;&gt;&lt;strong&gt;REMOVING CONTAINERS&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;when we no longer need mailcatcher we can remove it with (&lt;code&gt;-a&lt;/code&gt; lists running and stopped containers):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker ps -a
docker rm mailcatcher
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;REMOVING IMAGES&lt;/strong&gt;
To fully clean up and remove (images &amp;ndash; after the containers are removed):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker images
REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE
btihen/ruby/mailcatcher  ruby_2.5            21e0de2bdd68        25 minutes ago      870MB
ruby                     2.5                 a98425292e84        2 weeks ago         843MB

$ docker image rm 21e0de2bdd68

$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
ruby                2.5                 a98425292e84        2 weeks ago         843MB
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
