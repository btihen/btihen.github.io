<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | btihen</title>
    <link>https://btihen.github.io/post/</link>
      <atom:link href="https://btihen.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2020</copyright><lastBuildDate>Tue, 12 May 2020 21:19:09 +0200</lastBuildDate>
    <image>
      <url>https://btihen.github.io/images/logo_hu0d53a2a03d4a529abcdd0318d0f2ad50_8175_300x300_fit_lanczos_2.png</url>
      <title>Posts</title>
      <link>https://btihen.github.io/post/</link>
    </image>
    
    <item>
      <title>Docker Intro using MailCatcher</title>
      <link>https://btihen.github.io/post/docker_intro_with_mail_catcher/</link>
      <pubDate>Tue, 12 May 2020 21:19:09 +0200</pubDate>
      <guid>https://btihen.github.io/post/docker_intro_with_mail_catcher/</guid>
      <description>&lt;h3 id=&#34;setup&#34;&gt;&lt;strong&gt;SETUP&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;First we need to get the repo (or at least the docker file)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# get the mailcatcher repo
git clone git@github.com:sj26/mailcatcher.git

# go into mailcather repo
cd mailcatcher

# configure to use the newest `released` gem version of mailcatcher
sed -i.bu1 &#39;s/FROM ruby:2.5/FROM ruby:2.6/&#39; Dockerfile
sed -i.bu2 &#39;s/ARG VERSION=0.6.5/ARG VERSION=0.7.1/&#39; Dockerfile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Dockerfile should now look like (which is actually all that is actually needed):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM ruby:2.6
MAINTAINER Samuel Cochran &amp;lt;sj26@sj26.com&amp;gt;

ARG VERSION=0.7.1

RUN gem install mailcatcher -v $VERSION

EXPOSE 1025 1080

ENTRYPOINT [&amp;quot;mailcatcher&amp;quot;, &amp;quot;--foreground&amp;quot;]
CMD [&amp;quot;--ip&amp;quot;, &amp;quot;0.0.0.0&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;build-image&#34;&gt;&lt;strong&gt;BUILD IMAGE&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Now you can download the docker image and install the gems into it with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# -t adds repository:tag info -- the &#39;.&#39; at the end is important:
docker build -t btihen/mailcatcher:ruby_2.6 .
# ...
# should end with something like
# Successfully built 21e0de2bdd68

# now tag it as the lasted image:
docker build -t garaio.azurecr.io/garaio/mailcatcher:latest .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now you can see your list of docker images (you should see the starting image/container we just created):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker images
REPOSITORY                            TAG                 IMAGE ID            CREATED             SIZE
garaio.azurecr.io/gario/mailcatcher   latest              21e0de2bdd68        8 minutes ago       870MB
garaio.azurecr.io/gario/mailcatcher   ruby_2.6            21e0de2bdd68        8 minutes ago       870MB
ruby                                  2.6                 a98425292e84        2 weeks ago         843MB
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;build-container&#34;&gt;&lt;strong&gt;BUILD CONTAINER&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Now start the docker image using the build image id (&lt;code&gt;-d&lt;/code&gt; allows it to run in the backgroud, &lt;code&gt;-p 1025:1025 -p 1080:1080&lt;/code&gt; opens a connection on ports 1025 &amp;amp; 1080 from localhost to the docker image):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# build a container so we can test our image
docker run -d -p 1025:1025 -p 1080:1080 --name mailcatcher garaio.azurecr.io/garaio/mailcatcher:latest

# or if you like ids better
docker run -d -p 1025:1025 -p 1080:1080 --name mailcatcher 21e0de2bdd68

# if you forgot the image-id you can list the images with:
docker images
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;testing-http--smtp&#34;&gt;&lt;strong&gt;TESTING (http &amp;amp; smtp)&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;now you should be able to go to &lt;code&gt;http://localhost:1080&lt;/code&gt; and see the mailcatcher webpage.&lt;/p&gt;
&lt;p&gt;now lets test the smtp side from the cli using these instructions: &lt;code&gt;https://www.shellhacks.com/send-email-smtp-server-command-line/&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# connect to the mail server
$ telnet localhost 1025
# or
$ telnet 127.0.0.1 1025
220 smtp.domain.ext ESMTP Sendmail ?version-number?; ?date+time+gmtoffset?

# declare yourself (IP or DNS)
&amp;gt; HELO local.domain.name
250 smtp.domain.ext Hello local.domain.name [xxx.xxx.xxx.xxx], pleased to meet you

# declare who the email is from:
&amp;gt; MAIL FROM: test@local.domain.name
250 2.1.0 sender@adress.ext... Sender ok

# declare who should get the email:
&amp;gt; RCPT TO: recipient@adress.ext
250 2.1.5 recipient@adress.ext... Recipient ok

# setup the DATA transmission:
 &amp;gt; DATA
354 Enter mail, end with &amp;quot;.&amp;quot; on a line by itself

# type a subject two returns and a message ending with &#39;.&#39; (on its own line):
SUBJECT: Test message

Hello,
this is a TEST message,
please don&#39;t reply.
Thank you.
.

# end the connection
&amp;gt; QUIT
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now check the mail has arrived in mailcatcher at &lt;code&gt;localhost:1080&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Assuming you see the email sent - you can be sure your image &amp;amp; container is setup properly.&lt;/p&gt;
&lt;h3 id=&#34;stopping-exited-container&#34;&gt;&lt;strong&gt;STOPPING (exited) CONTAINER&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;When we are done with mailcatcher we can stop the docker process:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker ps -a
docker kill mailcatcher
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;starting-built-but-exited-containers&#34;&gt;&lt;strong&gt;STARTING BUILT (but exited) CONTAINERS&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;To restart mailcatcher at a later date simply type:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker start mailcatcher&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;sharing-images-once-they-work&#34;&gt;&lt;strong&gt;SHARING IMAGES (once they work)&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# login to the Azure Container Repository
docker login garaio.azurecr.io -u garaio -p see_keypass_vault

# upload the new image
docker push garaio.azurecr.io/garaio/mailcatcher
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;retrieving-shared-image&#34;&gt;&lt;strong&gt;RETRIEVING SHARED IMAGE&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;az acr login --name garaio
az acr repository list --name garaio --output table

# getting the image
docker pull garaio.azurecr.io/garaio/image_name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;containerize the image&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# these are the default local ports - adjust to your needs
docker run -d -p 1025:1025 -p 1080:1080 --name mailcatcher garaio.azurecr.io/garaio/mailcatcher:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;start the container&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker start mailcatcher
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;listing-garaio-images&#34;&gt;&lt;strong&gt;LISTING GARAIO IMAGES&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;One-time install&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# if needed install the azure cli
brew update &amp;amp;&amp;amp; brew install azure-cli

# the following may also be needed:
brew update &amp;amp;&amp;amp; brew install python3 &amp;amp;&amp;amp; brew upgrade python3
brew link --overwrite python3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Retrieve the image list&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# login with the azure-cli
az acr login --name garaio

# list the images
az acr repository list --name garaio --output table
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;removing-containers&#34;&gt;&lt;strong&gt;REMOVING CONTAINERS&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;when we no longer need mailcatcher we can remove it with (&lt;code&gt;-a&lt;/code&gt; lists running and stopped containers):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker ps -a
docker rm mailcatcher
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;REMOVING IMAGES&lt;/strong&gt;
To fully clean up and remove (images &amp;ndash; after the containers are removed):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
btihen/mailcatcher  ruby_2.5            21e0de2bdd68        25 minutes ago      870MB
ruby                2.5                 a98425292e84        2 weeks ago         843MB

$ docker image rm 21e0de2bdd68

$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
ruby                2.5                 a98425292e84        2 weeks ago         843MB
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Phoenix 1.5 LiveView &amp; PubSub Basics</title>
      <link>https://btihen.github.io/post/phoenix_1_5_live_view_basics/</link>
      <pubDate>Sun, 10 May 2020 17:01:53 +0200</pubDate>
      <guid>https://btihen.github.io/post/phoenix_1_5_live_view_basics/</guid>
      <description>&lt;p&gt;I have been watching Phoenix and Elixir for a while, and the idea of writing dynamic Web Applications without needing a ton of JavaScript is very interesting.  I recently saw this video by Chris McCord:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=MZvmYaFkNJI&amp;amp;feature=youtu.be&#34;&gt;https://www.youtube.com/watch?v=MZvmYaFkNJI&amp;amp;feature=youtu.be&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;which is very cool.  I wanted to learn more and found this Phoenix 1.4 tutorial:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=2bipVjOcvdI&#34;&gt;https://www.youtube.com/watch?v=2bipVjOcvdI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dennisbeatty.com/2019/03/19/how-to-create-a-counter-with-phoenix-live-view.html&#34;&gt;https://dennisbeatty.com/2019/03/19/how-to-create-a-counter-with-phoenix-live-view.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and decided to translate that into Phoenix 1.5. This is what follows.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Since I am just learning the Phoenix Framework and will need to refer to this for my self to remember how to do basic things &amp;ndash; I&amp;rsquo;ve documented every little detail.&lt;/p&gt;
&lt;h3 id=&#34;step-0---setup-environment&#34;&gt;Step 0 - setup environment&lt;/h3&gt;
&lt;p&gt;Setup environment &amp;amp; newest version of elixir:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exenv install 1.10.3
exenv global
exenv local 1.10.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install the 1.5.1 phx_new generator:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mix archive.install hex phx_new 1.5.1&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;step-1-create-a-phoenix-project-with-liveview&#34;&gt;Step 1: Create a Phoenix Project with LiveView&lt;/h3&gt;
&lt;p&gt;Create the project (notice the &lt;code&gt;--live&lt;/code&gt; - that enables LiveView, &lt;code&gt;--no-ecto&lt;/code&gt; - keeps the project smaller since we won&amp;rsquo;t be persisting any data):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mix phx.new counter --no-ecto --live&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;enter project and create init commit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd counter
git init &amp;amp;&amp;amp; git add -A &amp;amp;&amp;amp; git commit -m &amp;quot;init&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-2---simple-counter-page-using-liveview&#34;&gt;Step 2 - simple counter page using LiveView&lt;/h3&gt;
&lt;p&gt;Make a counter_live folder &amp;amp; an index.ex file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir lib/counter_web/live/counter_live
touch lib/counter_web/live/counter_live/index.ex
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add the following contents:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/counter_web/live/counter_live/index.ex
defmodule CounterWeb.CounterLive.Index do
  use CounterWeb, :live_view

  # since we don&#39;t have a db to pull from we initialize on mount
  @impl true
  def mount(_params, _session, socket) do
    {:ok, assign(socket, :val, 0)}
  end

  def render(assigns) do
    ~L&amp;quot;&amp;quot;&amp;quot;
    &amp;lt;h1&amp;gt;Live Counter&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;
      &amp;lt;b&amp;gt;Here is a great complex page&amp;lt;/b&amp;gt;
    &amp;lt;/p&amp;gt;

    &amp;lt;div&amp;gt;
      &amp;lt;h2&amp;gt;The count is: &amp;lt;%= @val %&amp;gt;&amp;lt;/h2&amp;gt;
      &amp;lt;button phx-click=&amp;quot;dec&amp;quot;&amp;gt;-&amp;lt;/button&amp;gt;
      &amp;lt;button phx-click=&amp;quot;inc&amp;quot;&amp;gt;+&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;button phx-click=&amp;quot;clear&amp;quot;&amp;gt;clear&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;p&amp;gt;
      &amp;lt;i&amp;gt;even more awesome content&amp;lt;/i&amp;gt;
    &amp;lt;/p&amp;gt;
    &amp;quot;&amp;quot;&amp;quot;
  end

  # event handler for &amp;lt;button phx-click=&amp;quot;inc&amp;quot;&amp;gt;
  def handle_event(&amp;quot;inc&amp;quot;, _, socket) do
    {:noreply, update(socket, :val, &amp;amp;(&amp;amp;1 + 1))}
  end

  # event handler for &amp;lt;button phx-click=&amp;quot;dec&amp;quot;&amp;gt;
  def handle_event(&amp;quot;dec&amp;quot;, _, socket) do
    {:noreply, update(socket, :val, &amp;amp;(&amp;amp;1 - 1))}
  end

  # event handler for &amp;lt;button phx-click=&amp;quot;clear&amp;quot;&amp;gt;
  def handle_event(&amp;quot;clear&amp;quot;, _, socket) do
    {:noreply, update(socket, :val, &amp;amp;(&amp;amp;1 - &amp;amp;1))}
    # {:noreply, update(socket, :val, 0)} # very slow - why?
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now update the routers (so we can get to the new webpage &amp;ndash; now our app should work:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  scope &amp;quot;/&amp;quot;, CounterWeb do
    pipe_through :browser

    # live &amp;quot;/&amp;quot;, PageLive, :index        # remove this line
    live &amp;quot;/&amp;quot;, CounterLive.Index, :index # add this line
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Start pheonix:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mix phx.server&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Go to:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;localhost:4000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You should now see the website and the counter should function&lt;/p&gt;
&lt;p&gt;Assuming all is good, I&amp;rsquo;ll take a git snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;counter with live update&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-3---running-tests&#34;&gt;Step 3 - Running tests&lt;/h3&gt;
&lt;p&gt;In order to run the tests we type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We see that PageLive test fails.  This is because we replaced this behavior with &lt;code&gt;CounterLive&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To fix this we will create a &lt;strong&gt;CounterLive&lt;/strong&gt; test and delete &lt;strong&gt;PageLive&lt;/strong&gt; test.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rm test/counter_web/live/page_live_text.exs
touch test/counter_web/live/counter_live_text.exs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is the code for our new test: it basically just checks to be sure our Title is on the page:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# test/counter_web/live/counter_live_text.exs
defmodule CounterWeb.CounterLiveTest do
  use CounterWeb.ConnCase

  import CounterWeb.CounterLive.Index

  test &amp;quot;disconnected and connected render&amp;quot;, %{conn: conn} do
    {:ok, page_live, disconnected_html} = live(conn, &amp;quot;/&amp;quot;)
    assert disconnected_html =~ &amp;quot;Live Counter&amp;quot;
    assert render(page_live) =~ &amp;quot;Live Counter&amp;quot;
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can test again: &lt;code&gt;mix test&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now that works, lets take another git snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;counter with live update&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-4----liveview-templates&#34;&gt;Step 4 &amp;ndash; LiveView Templates&lt;/h3&gt;
&lt;p&gt;Create a template file (helpful for complex html pages, but simple to create):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;touch lib/counter_web/live/counter_live/index.html.leex&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now just copy the html (from the render method into this file):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/counter_web/live/counter_live/index.html.leex
&amp;lt;h1&amp;gt;Live Counter&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;
  &amp;lt;b&amp;gt;Here is a great complex page&amp;lt;/b&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;div&amp;gt;
  &amp;lt;h2&amp;gt;The count is: &amp;lt;%= @val %&amp;gt;&amp;lt;/h2&amp;gt;
  &amp;lt;button phx-click=&amp;quot;dec&amp;quot;&amp;gt;-&amp;lt;/button&amp;gt;
  &amp;lt;button phx-click=&amp;quot;inc&amp;quot;&amp;gt;+&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
   &amp;lt;button phx-click=&amp;quot;clear&amp;quot;&amp;gt;clear&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;p&amp;gt;
  &amp;lt;i&amp;gt;even more awesome content&amp;lt;/i&amp;gt;
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now point &lt;code&gt;lib/counter_web/live/counter_live/index.ex&lt;/code&gt; to this file by replacing render with an apply command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  # add this new function
  defp apply_action(socket, :index, _params) do
    socket
  end
  # remove this funtion
  # def render(assigns) do
  #  ~L&amp;quot;&amp;quot;&amp;quot;
  #   ...
  #   &amp;quot;&amp;quot;&amp;quot;
  # end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;code&gt;apply_action&lt;/code&gt; understands the &lt;strong&gt;rest&lt;/strong&gt; verbs such as &lt;code&gt;:new&lt;/code&gt;, &lt;code&gt;:show&lt;/code&gt; etc.&lt;/p&gt;
&lt;p&gt;Now try the app again and it should still work!&lt;/p&gt;
&lt;p&gt;Assuming it still works, I&amp;rsquo;ll take another git snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;counter using a template&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-5---reusable-components--isolation&#34;&gt;Step 5 - Reusable Components (&amp;amp; isolation)&lt;/h3&gt;
&lt;p&gt;This allows complex components to be &lt;strong&gt;reused&lt;/strong&gt; within multiple templates and &lt;strong&gt;isolation&lt;/strong&gt; to keep one&amp;rsquo;s mental scope minimal.&lt;/p&gt;
&lt;p&gt;Create a file for the component:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;touch lib/counter_web/live/counter_live/counter_component.ex&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Move the dynamic html and it&amp;rsquo;s associated functions into this file, it&amp;rsquo;s important to import the live_components into this file using:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;use CounterWeb, :live_component&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In order to encapsulate the events into the component we will also move the event handlers into the component file.&lt;/p&gt;
&lt;p&gt;So this file will now look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/counter_web/live/counter_live/counter_component.ex
defmodule CounterWeb.CounterLive.CounterComponent do
  use CounterWeb, :live_component

  def render(assigns) do
    ~L&amp;quot;&amp;quot;&amp;quot;
    &amp;lt;div&amp;gt;
      &amp;lt;h2&amp;gt;The count is: &amp;lt;%= @val %&amp;gt;&amp;lt;/h2&amp;gt;
      &amp;lt;button phx-click=&amp;quot;dec&amp;quot; phx-target=&amp;quot;&amp;lt;%= @myself %&amp;gt;&amp;quot;&amp;gt;-&amp;lt;/button&amp;gt;
      &amp;lt;button phx-click=&amp;quot;inc&amp;quot; phx-target=&amp;quot;&amp;lt;%= @myself %&amp;gt;&amp;quot;&amp;gt;+&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;button phx-click=&amp;quot;clear&amp;quot; phx-target=&amp;quot;&amp;lt;%= @myself %&amp;gt;&amp;quot;&amp;gt;clear&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;quot;&amp;quot;&amp;quot;
  end

  def handle_event(&amp;quot;inc&amp;quot;, _, socket) do
    {:noreply, update(socket, :val, &amp;amp;(&amp;amp;1 + 1))}
  end

  def handle_event(&amp;quot;dec&amp;quot;, _, socket) do
    {:noreply, update(socket, :val, &amp;amp;(&amp;amp;1 - 1))}
  end

  def handle_event(&amp;quot;clear&amp;quot;, _, socket) do
    # {:noreply, update(socket, :val, 0)} # very slow - why?
    {:noreply, update(socket, :val, &amp;amp;(&amp;amp;1 - &amp;amp;1))}
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice the button tags are slightly more complex&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;button phx-click=&amp;quot;dec&amp;quot; phx-target=&amp;quot;&amp;lt;%= @myself %&amp;gt;&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;the &lt;strong&gt;@myself&lt;/strong&gt; basically informs the event that the handler is within the component.&lt;/p&gt;
&lt;p&gt;Now update the live template to point at the component using:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;%= live_component @socket, CounterWeb.CounterLive.CounterComponent, id: 0, val: @val %&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Also note we need to pass the @val value into the component using:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;id: 0, val: @val&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;its a little wierd, but we need to pass an &lt;strong&gt;id&lt;/strong&gt; even if there is no ecto backed record.&lt;/p&gt;
&lt;p&gt;Now the template file looks like a normal template file again (focused on formating):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/counter_web/live/counter_live/index.ex
defmodule CounterWeb.CounterLive.Index do
  use CounterWeb, :live_view

  # since we don&#39;t have a db to pull from we initialize on mount
  @impl true
  def mount(_params, _session, socket) do
    {:ok, assign(socket, :val, 0)}
  end

  def render(assigns) do
    ~L&amp;quot;&amp;quot;&amp;quot;
    &amp;lt;h1&amp;gt;Live Counter&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;
      &amp;lt;b&amp;gt;Here is a great complex page&amp;lt;/b&amp;gt;
    &amp;lt;/p&amp;gt;

    &amp;lt;%= live_component @socket, CounterWeb.CounterLive.CounterComponent, id: 0, val: @val %&amp;gt;

    &amp;lt;p&amp;gt;
      &amp;lt;i&amp;gt;even more awesome content&amp;lt;/i&amp;gt;
    &amp;lt;/p&amp;gt;
    &amp;quot;&amp;quot;&amp;quot;
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets check that this still works.&lt;/p&gt;
&lt;p&gt;Assuming it still works, I&amp;rsquo;ll make one last git snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;live pages using isolated components - like JS does&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Kanban Usage</title>
      <link>https://btihen.github.io/post/kanban_usage/</link>
      <pubDate>Sun, 03 May 2020 19:25:09 +0200</pubDate>
      <guid>https://btihen.github.io/post/kanban_usage/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Kanban is a visual way to track your tasks and your progress.  Many people find this helpful way to to show yourself, your parents and teachers what work needs to be done.  Ideally, this is done on a large screen, sheet of paper, or whiteboard - so that it is obvious and easily seen as a reminder.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;example.jpg&#34; alt=&#34;kanban&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;status-tracking&#34;&gt;Status Tracking&lt;/h2&gt;
&lt;p&gt;The simplest &lt;code&gt;statuses&lt;/code&gt; would be: &lt;strong&gt;To-Do, Doing, Done&lt;/strong&gt;&lt;/p&gt;
&lt;!-- &lt;see example image&gt; --&gt;
&lt;p&gt;Some teacher often require a draft &lt;code&gt;Review&lt;/code&gt; before final submissions, engineers use a similar column &lt;code&gt;Review&lt;/code&gt; or &lt;code&gt;Demo&lt;/code&gt;.  Generally, this is a good idea to check your work with peers, parents or your teacher before handing in your work &amp;ndash; so we suggest a &lt;code&gt;Review&lt;/code&gt; column before done. So now the statuses would be:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To-Do, Doing, Review, Done&lt;/strong&gt;&lt;/p&gt;
&lt;!-- &lt;see example image&gt; --&gt;
&lt;h2 id=&#34;swim-lanes-tracking-multiple-classes--projects&#34;&gt;Swim-lanes (tracking multiple classes / projects)&lt;/h2&gt;
&lt;p&gt;Ideally when using this technique you keep the number of simultaneous tasks &lt;strong&gt;(WIP)&lt;/strong&gt; to a minimum&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The number of simultaneous tasks is called &lt;code&gt;work-in-progress&lt;/code&gt; or abbreviated as &lt;code&gt;WIP&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Education, unfortunately, expects a lot of simultaneous tasks within a variety of classes.  To address this we can use &lt;code&gt;swim-lanes&lt;/code&gt; to track our priorities with a jumble of independent projects (classes).  For example: we might have swim-lanes for: English, Mathematics, Science, &amp;hellip;&lt;/p&gt;
&lt;p&gt;Ideally, we will try only allow &lt;strong&gt;ONE task&lt;/strong&gt; in your &lt;code&gt;doing&lt;/code&gt; and &lt;code&gt;review&lt;/code&gt; boxes for each swim-lane / class.  &lt;em&gt;(This is called a WIP Limit of 1).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;example_w_swimlane.jpg&#34; alt=&#34;kanban_w_swimlanes&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;tasks&#34;&gt;Tasks&lt;/h2&gt;
&lt;p&gt;Tasks Cards should have critical reminder information on them. Refrain from putting extra information on the card, the card should be clean and simple to read - it is a reminder of work to do NOT a full description of the assignment.&lt;/p&gt;
&lt;p&gt;Here is the critical information I include on a personal Kanban card.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Title&lt;/strong&gt; - Big bold text (upper left corner)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Description&lt;/strong&gt; - a very short reminder of what to do - ideally in 4 to 5 words&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Class&lt;/strong&gt; - in case of confusion, I write the class / swim-lane (lower left corner)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Due Date&lt;/strong&gt; - Big bold Text (lower right corner)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Start Date&lt;/strong&gt; - use this to schedule small tasks of a large project - which can be used to slowly make progress on a large task (I call this smallifying).  This is a very important skill to ensure continued progress on large projects in a timely way.  I put this just above the &lt;code&gt;Due Date&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;see example image of a variety of tasks on a post-it with assignment below include a large task smallified&gt;
&lt;p&gt;Here is an example of a Kanban in use with tasks:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;example_w_tasks.jpg&#34; alt=&#34;kanban_w_tasks&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;p&gt;I like to use A3 paper and small post-it notes to add tasks.  Here is our recommended blank Kanban - where you can write in your classes.  Put your most important classes (in the IB these would be your &lt;strong&gt;High Level&lt;/strong&gt; courses) at the top. Use a timebox on long tasks that need to move forward, but are too big to do in one work session &amp;ndash; this is especially important when you have multiple tasks that need to be accomplished on a give day.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Timebox&lt;/strong&gt; - is a time limit that you won&amp;rsquo;t exceed for a given tasks in order to keep all tasks on schedule.  We suggest 25 to 35 minute timeboxes with small 5 minute breaks between tasks.  Every 4 timeboxes take a longer 15 minute break. This is called the pomodoro technique for full details.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/VFW3Ld7JO0w&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;To best use a Kanban board, you should follow the following ritual:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Prioritize your work&lt;/strong&gt; &amp;ndash; when you sit down to work, spend the first 5 minutes reviewing the Kanban board:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;First assess what in the &lt;em&gt;priority&lt;/em&gt; classes needs to be done in order meet assignment deadlines &lt;em&gt;(for long tasks set a &lt;strong&gt;timebox&lt;/strong&gt; so you make progress but can keep all your other tasks moving too)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Second assess what needs to be started in &lt;em&gt;priority&lt;/em&gt; classes to stay on track with larger projects. If you already have a task in that classes &lt;code&gt;doing&lt;/code&gt; box then schedule that task to be done ASAP so that you can start the next task.  &lt;em&gt;This is important&lt;/em&gt; a common Kanban saying is:_ **START FINISHING TASKS, stop starting unfinished tasks!**&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do your work&lt;/strong&gt; &amp;ndash; respect your priorities and your timeboxes!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;UPDATE YOUR KANBAN&lt;/strong&gt; - End five to ten minutes before your time is up (set an alarm if needed) and &lt;strong&gt;update&lt;/strong&gt; your tasks to their new status boxes.  If you couldn&amp;rsquo;t meet your goals for a task put a smaller colorful post-it on it - as an ALERT.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Address the needs of problem tasks&lt;/strong&gt; &amp;ndash; for all tasks with an ALERT: write emails to get help, or make notes on research needed to do make progress on problem tasks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;REFLECT&lt;/strong&gt; &amp;ndash; Assess what is going well and consider if doing more that will help you be more successful and assess what is hindering you and what you can do differently to get you work done with less stress.  You reflections should result in actions (experiments for a week or so) to help you move more effectively toward your goals.  If your experiment doesn&amp;rsquo;t help, they after the test period try a new experiment.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;
&lt;strong&gt;Dead person&lt;/strong&gt; activities are actions that even a dead person can successfully do.  For example, waiting for someone else to help, not checking twitter in homework time, etc.&lt;br&gt;
&lt;strong&gt;Live person&lt;/strong&gt; activities are action that only live people can successfully accomplish. For example, ask a peer for help, research on the Internet for ideas, go to a help session, replace random twitter checks with Pomodoro Technique (and allow twitter in the 5 minute breaks), etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;h5 id=&#34;kanban&#34;&gt;Kanban&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.personalkanban.com/&#34;&gt;https://www.personalkanban.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://moduscooperandi.com/books-and-classes&#34;&gt;https://moduscooperandi.com/books-and-classes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;pomodoro&#34;&gt;Pomodoro&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://francescocirillo.com/pages/pomodoro-technique&#34;&gt;https://francescocirillo.com/pages/pomodoro-technique&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=VFW3Ld7JO0w&#34;&gt;https://www.youtube.com/watch?v=VFW3Ld7JO0w&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;helpful-books&#34;&gt;Helpful Books&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Kanban - Task Management&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Real-World Kanban: Do Less, Accomplish More with Lean Thinking, by Mattias Skarin.&lt;/li&gt;
&lt;li&gt;Kanban in Action, by Marcus Hammarberg and Joakim SundÃ©n.&lt;/li&gt;
&lt;li&gt;Kanban: Successful Evolutionary Change for Your Technology Business, by David J. Anderson.&lt;/li&gt;
&lt;li&gt;Personal Kanban: Mapping Work - Navigating Life, by Tonianne DeMaria Barry and Jim Benson.&lt;/li&gt;
&lt;li&gt;Kanban and Scrum: Making the Most of Both, by Mattias Skarin and Henrik Kniberg.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Pomodoro - Time Management&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pomodoro Technique Illustrated, by Staffan Noteberg.&lt;/li&gt;
&lt;li&gt;The Pomodoro Technique: Work smarter, not harder, by Francesco Cirillo.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Effective Reflections, Experiments &amp;amp; Problem Solving&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The 5 Elements of Effective Thinking, by Edward B. Burger and Michael Starbird.&lt;/li&gt;
&lt;li&gt;the shibumi strategy: a powerful way to create MEANINGFUL CHANGE, by Matthew E. May.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Effective Goal Setting &amp;amp; Changes - with small easy steps&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Little Bets: How Breakthrough Ideas Emerge from Small Discoveries, by Peter Sims.&lt;/li&gt;
&lt;li&gt;One Small Step Can Change Your Life: The Kaizen Way Paperback, by Robert Maurer Ph.D.&lt;/li&gt;
&lt;li&gt;The Spirit of Kaizen: Creating Lasting Excellence One Small Step at a Time: Creating Lasting Excellence One Small Step at a Time, by Robert Maurer Ph.D.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
