<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rails Posts | btihen</title>
    <link>https://btihen.me/post_ruby_rails/</link>
      <atom:link href="https://btihen.me/post_ruby_rails/index.xml" rel="self" type="application/rss+xml" />
    <description>Rails Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2022</copyright><lastBuildDate>Sat, 12 Mar 2022 01:20:00 +0200</lastBuildDate>
    <image>
      <url>https://btihen.me/img/btihen_landing_page.png</url>
      <title>Rails Posts</title>
      <link>https://btihen.me/post_ruby_rails/</link>
    </image>
    
    <item>
      <title>Rails 7.0 Base Setup</title>
      <link>https://btihen.me/post_ruby_rails/rails_7_0_base_setup/</link>
      <pubDate>Sat, 12 Mar 2022 01:20:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_7_0_base_setup/</guid>
      <description>&lt;h2 id=&#34;update-gems-library&#34;&gt;update GEMS library&lt;/h2&gt;
&lt;p&gt;gem update &amp;ndash;system&lt;/p&gt;
&lt;h2 id=&#34;be-sure-bundler-is-installed&#34;&gt;be sure bundler is installed&lt;/h2&gt;
&lt;p&gt;gem install bundler&lt;/p&gt;
&lt;h2 id=&#34;update-bundler-library&#34;&gt;update Bundler library&lt;/h2&gt;
&lt;p&gt;bundle update &amp;ndash;bundler&lt;/p&gt;
&lt;h2 id=&#34;update-ruby&#34;&gt;update Ruby&lt;/h2&gt;
&lt;p&gt;rbenv install 3.1.1
rbenv global 3.1.1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;or&lt;/strong&gt;
asdf install ruby 3.1.1
asdf global ruby 3.1.1&lt;/p&gt;
&lt;h2 id=&#34;be-sure-you-have-rails-for-your-ruby-version&#34;&gt;be sure you have rails for your ruby version&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem install rails
# or ensure version 7.0 using
gem install rails --version 7.0.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;rails-with-esbuild--css&#34;&gt;Rails with esbuild &amp;amp; css&lt;/h2&gt;
&lt;p&gt;The options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-T&lt;/code&gt; - does not install mini-tests (I like rspec)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-j esbuild&lt;/code&gt; - is the middle ground between using webpacker and import-maps&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--css bulma&lt;/code&gt; - install a css framwork (bulma, tailwind, bootstrap, sass, postcss)&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# default rails (using importmaps)
# rails new slacker_base
# or Bulma
rails new slacker_bulma -j esbuild -T --css bulma
# with Tailwind
# rails new slacker_tail -j esbuild -T --css tailwind
cd slacker
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;install-richtext-editor&#34;&gt;install richtext editor&lt;/h2&gt;
&lt;p&gt;This will also install StimulusJS and ActiveStorage and ActionText altogether&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./bin/rails action_text:install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;otherwise you can install them separately:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ActiveStorage&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bin/rails active_storage:install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Stimulus&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./bin/bundle add stimulus-rails
./bin/bundle install
./bin/rails stimulus:install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Hotwire&lt;/strong&gt;
if you initially used &lt;code&gt;--skip-hotwire&lt;/code&gt; and now want it - type:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./bin/bundle add turbo-rails
./bin/bundle install
./bin/rails turbo:install
./bin/rails turbo:install:redis
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;additional-tooling&#34;&gt;Additional Tooling&lt;/h2&gt;
&lt;p&gt;copy the following into your Gemfile:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;cat &amp;lt;&amp;lt;EOF &amp;gt;&amp;gt;Gemfile
group :test do
  gem &#39;shoulda-matchers&#39; #, &#39;~&amp;gt; 5.0&#39;
end

# allow rspec with feature tests and
group :development, :test do
  gem &#39;factory_bot_rails&#39;
  gem &#39;rspec-rails&#39;
  gem &#39;capybara&#39;
  gem &#39;launchy&#39;
  gem &#39;faker&#39;

  # coverage
  gem &#39;simplecov&#39;

  # security checks
  gem &#39;brakeman&#39;

  # debugging
  # gem &#39;pry&#39;
  gem &#39;pry-rails&#39;
  # stack, up, down, frame n
  gem &#39;pry-stack_explorer&#39; #, &#39;~&amp;gt; 0.6.0&#39;

  # standards
  # gem &#39;standard&#39;, require: false
  gem &#39;rubocop-rails&#39;, require: false

  # sw quality checks
  # gem &#39;skunk&#39;
  # gem &#39;circle-cli&#39;
  # gem &#39;rubycritic&#39;, require: false # uses virtus - discontinued !
end
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;configure-testing&#34;&gt;Configure Testing&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails g rspec:install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Setup Configuation&lt;/strong&gt;
at the top of the spec/rails_helper.rb be sure to have:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;capybara/rails&#39;
require &#39;simplecov&#39;
SimpleCov.start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;at the bottom of spec/rails helper add:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;cat &amp;lt;&amp;lt;EOF &amp;gt;&amp;gt;spec/rails_helper.rb
Shoulda::Matchers.configure do |config|
  config.integrate do |with|
    with.test_framework :rspec
    with.library :rails
  end
end
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;setup-the-database&#34;&gt;Setup the Database&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:drop
bin/rails db:create
bin/rails db:migrate
bin/rails db:seed
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;login-management-as-needed&#34;&gt;Login Management (as needed):&lt;/h2&gt;
&lt;p&gt;Devise is commonly used for login  user management&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bundle add devise
bundle install
rails g devise:install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;**Follow the instruction on printed on the screen or use (
&lt;a href=&#34;https://guides.railsgirls.com/devise&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://guides.railsgirls.com/devise&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&#34;setup-app-structure&#34;&gt;Setup App Structure&lt;/h2&gt;
&lt;p&gt;Lets build a landing page&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails g controller landing index
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;update the routes&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/routes.rb
Rails.application.routes.draw do
  get &#39;landing/index&#39;

  # Defines the root path route (&amp;quot;/&amp;quot;)
  root &amp;quot;landing#index&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;start-rails-dev-mode&#34;&gt;Start Rails (dev-mode)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;In watchmode - like we are accustom&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./bin/dev&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;other options are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;foreman start -f Procfile.dev&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bin/rails s&lt;/code&gt; and &lt;code&gt;yarn build --watch&lt;/code&gt; in separate windows&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;experiments-to-explore&#34;&gt;Experiments to Explore&lt;/h2&gt;
&lt;h3 id=&#34;packwerk&#34;&gt;Packwerk&lt;/h3&gt;
&lt;h3 id=&#34;stimulusjs&#34;&gt;StimulusJS&lt;/h3&gt;
&lt;h3 id=&#34;view-components&#34;&gt;view components&lt;/h3&gt;
&lt;h3 id=&#34;hotwire-turbo&#34;&gt;HotWire (Turbo)&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Bridgetown 1.0 - Ruby Static-Site Orientation</title>
      <link>https://btihen.me/post_ruby_rails/bridgetown_1_x_ruby_static_stite_orientation/</link>
      <pubDate>Sat, 05 Mar 2022 01:57:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/bridgetown_1_x_ruby_static_stite_orientation/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;&lt;strong&gt;Overview&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;I have often wanted to build websites using as much of my Rails knowledge as possible.  Now I can!&lt;/p&gt;
&lt;p&gt;Enter Bridgetown - 
&lt;a href=&#34;https://edge.bridgetownrb.com/docs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://edge.bridgetownrb.com/docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A ruby based (erb, components, etc), author-friendly (markdown pages).&lt;/p&gt;
&lt;p&gt;The newest version 1.0 beta uses esbuild by default (or webpacker) and has several pre-build deploy configurations and a quick and easy way to install TailwindCSS!&lt;/p&gt;
&lt;p&gt;Unfortunately, for some reason I found it a bit hard to assemble the information to create a website that would meet my needs and interests.  So this doc is a quick summary and context that will get you through the next step after &lt;code&gt;getting started&lt;/code&gt;.  My understanding is now that are 3 added aspects&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(&lt;strong&gt;bundled configurations&lt;/strong&gt;)[https://www.bridgetownrb.com/docs/bundled-configurations] are for &lt;code&gt;tool-chain setup&lt;/code&gt;, like deployment configs, tailwindcss, stimulusJS, etc.  And&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plugins&lt;/strong&gt; are for things that will show-up in the &lt;code&gt;output html&lt;/code&gt; like SEO Tags, Sitemaps, etc.&lt;/li&gt;
&lt;li&gt;(&lt;strong&gt;automations&lt;/strong&gt;)[https://www.bridgetownrb.com/docs/automations] An automation script is nothing more than a Ruby code file run in the context of an instance
Unfortunately, I still struggle to find the parts I am looking for, so I am adding the links here (to help my future self).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bridgetown-basics&#34;&gt;&lt;strong&gt;Bridgetown Basics&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Almost everything you will do to generate a website will be done in &lt;code&gt;src&lt;/code&gt; folder&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Resource&lt;/strong&gt; - a file that will generate a webpage&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Front Mater&lt;/strong&gt; - meta info - located at the top of a &amp;lsquo;resource&amp;rsquo; file and is used to assist in webpage generation.  This information is to be used directly in association with this one webpage&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Collection&lt;/strong&gt; - a group of resources that belong together (and can generate a centralized list). This MUST be located in a folder that starts with an &lt;code&gt;_&lt;/code&gt;, for example: &lt;code&gt;src/_posts&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Permalink&lt;/strong&gt; - the way to define the URL for a &amp;lsquo;resource&amp;rsquo; - this is important if you are transferring a website to bridgetown and want to keep the urls the same&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data Files&lt;/strong&gt; - must be located in &lt;code&gt;src/_data&lt;/code&gt; - they define centralized data/information &amp;amp; variables across the entire-webste - options include: YAML, JSON, CSV, TSV &amp;amp; .rb files. Thes are accessed with &lt;code&gt;site.data&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Static Files&lt;/strong&gt; - files that do not contain any front matter. These include images, PDFs, and other un-rendered content. Static files can be searched and accessed in templates with &lt;code&gt;site.static_files&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prototype Pages&lt;/strong&gt; - requires that &lt;code&gt;pagination&lt;/code&gt; is enabled. Prototypes lets you create automatically generated, paginated archives of your content filtered by the search terms you provide.  Often used to create the related content links to tag pages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Templates&lt;/strong&gt; - this is the system used in your layouts and components (you can choose between &lt;code&gt;liquid&lt;/code&gt;, &lt;code&gt;erb&lt;/code&gt; and &lt;code&gt;serbea&lt;/code&gt;) - I&amp;rsquo;ll stick with &lt;code&gt;erb&lt;/code&gt; since that is familiar&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Layouts&lt;/strong&gt; - templates that define how your resource will look.  You have full access to the &lt;strong&gt;front matter&lt;/strong&gt; of the resource, ie &lt;code&gt;resource.data.title&lt;/code&gt; is the &lt;code&gt;title&lt;/code&gt; in the front-matter section of the resource.  The default looks like:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- src/_layouts/default.erb --&amp;gt;
&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&amp;quot;&amp;lt;%= site.locale %&amp;gt;&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;%= render &amp;quot;head&amp;quot;, metadata: site.metadata, title: resource.data.title %&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body class=&amp;quot;&amp;lt;%= resource.data.layout %&amp;gt; &amp;lt;%= resource.data.page_class %&amp;gt;&amp;quot;&amp;gt;
    &amp;lt;%= render Shared::Navbar.new(metadata: site.metadata, resource: resource) %&amp;gt;

    &amp;lt;main&amp;gt;
      &amp;lt;%= yield %&amp;gt;
    &amp;lt;/main&amp;gt;

    &amp;lt;%= render &amp;quot;footer&amp;quot;, metadata: site.metadata %&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Partials&lt;/strong&gt; - these are usually things like the header and footer and are used within &lt;code&gt;layout&lt;/code&gt; pages (same concept as in rails and use the &lt;code&gt;render&lt;/code&gt; call in the above example for default.erb.  This folder starts with the html &lt;code&gt;head&lt;/code&gt; (html language, seo info, etc) and &lt;code&gt;footer&lt;/code&gt; are located.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Components&lt;/strong&gt; - collection of reusable web-components. Here you can include &lt;code&gt;CSS&lt;/code&gt; &amp;amp; &lt;code&gt;JavaScript&lt;/code&gt; files alongside the &lt;code&gt;rb&lt;/code&gt; and &lt;code&gt;erb&lt;/code&gt; files - for example (the default starts with &lt;code&gt;src/_components/shared/navbar.rb&lt;/code&gt; and &lt;code&gt;src/_components/shared/navbar.erb&lt;/code&gt;) - I believe JS and CSS are scoped to the component class defined in the .rb file:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;âââ src
â   âââ _components
â   â   âââ shared
â   â   â   âââ navbar.erb
â   â   â   âââ navbar.js
â   â   â   âââ navbar.rb
â   â   â   âââ navbar.scss
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;templates&lt;/strong&gt; - the language used within the layout (defined by the file extension) - the site default can be configured&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bundled configurations&lt;/strong&gt; - bridgetown has some important configurations that are automated&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;plugins&lt;/strong&gt; - these extend bridgetown&amp;rsquo;s feature set.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;create-a-site&#34;&gt;&lt;strong&gt;Create a Site&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;I listened to the interview about Bridgetown on (Remote Ruby Podcast)[https://remoteruby.transistor.fm/169] so I went and checked it out.  Starting with the (Beta Docs)[https://edge.bridgetownrb.com/docs] - as it has a TailwindCSS installer and lots of excellent deployment setups (in particular Render and Netlify - although I would find Fly.io also interesting)&lt;/p&gt;
&lt;p&gt;So I started by downloading the gem:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem install bridgetown
# gem install bridgetown -N -v 1.0.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I decided to configure it with the &lt;code&gt;erb&lt;/code&gt; but you can leave off &lt;code&gt;-t erb&lt;/code&gt; and use liquid or change erb for serbea templates.  Anyway, I created a new project with &lt;code&gt;erb&lt;/code&gt; using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# simple no options
bridgetown new bridge_tail_site
# it is easier to start with much of the site configured using the options
bridgetown new bridge_tail_site -t erb -c tailwindcss,netlify,stimulus
cd bridge_tail_site
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Running Bridgetown&lt;/strong&gt; in dev-mode (it uses port 4000 - &lt;code&gt;http://localhost:4000&lt;/code&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/bridgetown start
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;creation-explained&#34;&gt;Creation Explained&lt;/h3&gt;
&lt;p&gt;There are 3 main parts to creation and configuration of a bridgetown site:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;template system&lt;/strong&gt; - which language is used to process &lt;code&gt;resources&lt;/code&gt; (the default is set using the &lt;code&gt;-t&lt;/code&gt; flag)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bundled configuration&lt;/strong&gt; - these are important configurations like JS, deployement config and can added with the &lt;code&gt;-c&lt;/code&gt; flag or later with the &lt;code&gt;bin/bridgetown configure [config_name]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Template System&lt;/strong&gt; (-t options)&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.bridgetownrb.com/docs/template-engines&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bridgetownrb.com/docs/template-engines&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Options include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;liquid (default)&lt;/li&gt;
&lt;li&gt;erb (rails default)&lt;/li&gt;
&lt;li&gt;serbea&lt;/li&gt;
&lt;li&gt;haml (not configured as site default)&lt;/li&gt;
&lt;li&gt;slim (not configured as site default)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;this option sets up the default and generators, but at anytime you can use any of the templates by simpling providing the correct extension on the file and Bridgetown will know how to use the file&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Configure Bridgetown&lt;/strong&gt; (-c options)&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.bridgetownrb.com/docs/bundled-configurations#netlify-toml-configuration&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bridgetownrb.com/docs/bundled-configurations#netlify-toml-configuration&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JS &amp;amp; Testing Options&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;turbo (includes websockets)&lt;/li&gt;
&lt;li&gt;stimulus (stimulusjs)&lt;/li&gt;
&lt;li&gt;minitesting&lt;/li&gt;
&lt;li&gt;cypress&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Deploy config options&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;render&lt;/li&gt;
&lt;li&gt;netlify&lt;/li&gt;
&lt;li&gt;vercel&lt;/li&gt;
&lt;li&gt;gh-pages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;if run after the install use:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/bridgetown configure netlify
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;CSS Config&lt;/strong&gt;
options include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tailwindcss (which also installs postcss and purgecss)&lt;/li&gt;
&lt;li&gt;postcss&lt;/li&gt;
&lt;li&gt;purgecss&lt;/li&gt;
&lt;li&gt;bulma (may be coming)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Installing TailwindCSS it was straightforward - once I found the right area. Follow the instructions at 
&lt;a href=&#34;https://www.bridgetownrb.com/docs/bundled-configurations#tailwindcss&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bridgetownrb.com/docs/bundled-configurations#tailwindcss&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/bridgetown configure tailwindcss
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Plugins&lt;/strong&gt; - can only be done AFTER the &lt;code&gt;new&lt;/code&gt; commands.  I&amp;rsquo;ve added these here since I got confused with all the setup options and there is no other clear section to add these.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.bridgetownrb.com/plugins&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bridgetownrb.com/plugins&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Options include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bridgetown-sitemap - 
&lt;a href=&#34;https://github.com/ayushn21/bridgetown-sitemap&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/ayushn21/bridgetown-sitemap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;bridgetown-seo-tag - 
&lt;a href=&#34;https://github.com/bridgetownrb/bridgetown-seo-tag&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/bridgetown-seo-tag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;bridgetown-minify-html - 
&lt;a href=&#34;https://github.com/bt-rb/bridgetown-minify-html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bt-rb/bridgetown-minify-html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;bridgetown-svg-inliner - 
&lt;a href=&#34;https://github.com/ayushn21/bridgetown-svg-inliner&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/ayushn21/bridgetown-svg-inliner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;bridgetown-quick-search - 
&lt;a href=&#34;https://github.com/bridgetownrb/bridgetown-quick-search&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/bridgetown-quick-search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;bridgetown-view-component - 
&lt;a href=&#34;https://github.com/bridgetownrb/bridgetown-view-component&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/bridgetown-view-component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;bridgetown-media-transformation - 
&lt;a href=&#34;https://github.com/julianrubisch/bridgetown-media-transformation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/julianrubisch/bridgetown-media-transformation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Installation looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle add bridgetown-media-transformation -g bridgetown_plugins
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;configure-with-alpinejs&#34;&gt;&lt;strong&gt;Configure with AlpineJS&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Espescially useful if not using stimulus&lt;/p&gt;
&lt;p&gt;It looked good - so I went on to install AlpineJS (using the embedded script method) at 
&lt;a href=&#34;https://alpinejs.dev/essentials/installation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://alpinejs.dev/essentials/installation&lt;/a&gt; - so I went to &lt;code&gt;src/_partials/_head.erb&lt;/code&gt; and added &lt;code&gt;&amp;lt;script defer src=&amp;quot;https://unpkg.com/alpinejs@3.9.0/dist/cdn.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; just before the &lt;code&gt;live_reload_dev_js&lt;/code&gt; tag:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- src/_partials/_head.erb --&amp;gt;
...
&amp;lt;!-- AlpineJS script tag--&amp;gt;
&amp;lt;script defer src=&amp;quot;https://unpkg.com/alpinejs@3.9.0/dist/cdn.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;%= live_reload_dev_js %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then I went to the page &lt;code&gt;src/_components/shared/navbar.erb&lt;/code&gt; to add an example from (AlpineJS Start-here page)[https://alpinejs.dev/start-here]&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div x-data=&amp;quot;{ count: 0 }&amp;quot;&amp;gt;
 &amp;lt;button x-on:click=&amp;quot;count++&amp;quot;
         class=&amp;quot;bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded&amp;quot;&amp;gt;
   Increment
 &amp;lt;/button&amp;gt;
 &amp;lt;span x-text=&amp;quot;count&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool this works!  So I went and created my navbar and footer.&lt;/p&gt;
&lt;h2 id=&#34;adding-a-custom-font-in-css&#34;&gt;&lt;strong&gt;Adding a Custom Font (in CSS)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;We will add the &lt;code&gt;handlee&lt;/code&gt; font as it is distinctive and easy to see that it works (or not).
Let&amp;rsquo;s get it from (Google Webfonts Helper)[https://google-webfonts-helper.herokuapp.com/fonts/handlee?subsets=latin] site.  &lt;strong&gt;This is a convenient site as it has both the font and the CSS needed.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now that you&amp;rsquo;ve downloaded the font, create a new folder in the frontend folder and copy the font into it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p frontend/fonts/handlee
cp ~/Downloads/handlee-v12-latin/* frontend/fonts/handlee/.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now grab the CSS from the Google Webfonts Helper site and copy it into the &lt;code&gt;frontend/styles/index.css&lt;/code&gt; file (I like to put the font css just below the tailwind imports). So the start of index.css looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* frontend/styles/index.css */

/* triggers frontend rebuilds */
@import &amp;quot;jit-refresh.css&amp;quot;;

/* Set up Tailwind imports */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Import Fonts */
@font-face {
  font-family: &#39;Handlee&#39;;
  font-style: normal;
  font-weight: 400;
  src: local(&#39;&#39;),
       url(&#39;../fonts/handlee/handlee-v12-latin-regular.woff2&#39;) format(&#39;woff2&#39;),
       url(&#39;../fonts/handlee/handlee-v12-latin-regular.woff&#39;) format(&#39;woff&#39;);
}
/* ... */
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now within your CSS definitions you can use: &lt;code&gt;font-family: &#39;Handlee&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s try it out - let&amp;rsquo;s add that to the h1 definition in the index.css file - so now that would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* ... */
h1 {
  margin: 1rem 0 3rem;
  text-align: center;
  font-weight: 900;
  font-size: 2.5rem;
  font-family: &#39;Handlee&#39;;
  color: var(--heading-color);
  line-height: 1.2;
}
/* ... */
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Be sure the Title of your homepage is now using the &amp;lsquo;Handlee&amp;rsquo; font.&lt;/p&gt;
&lt;h2 id=&#34;adding-a-custom-font-into-tailwindcss&#34;&gt;&lt;strong&gt;Adding a Custom Font (into TailwindCSS)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Now we need to define this font within TailwindCSS config to have it create a &lt;code&gt;font-handlee&lt;/code&gt; class so we can use this font within our tailwind class definitions.  To do this we will need to update the &lt;code&gt;tailwind.config.js&lt;/code&gt; file to look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.exports = {
  content: [
    &#39;./src/**/*.{html,md,liquid,erb,serb}&#39;,
    &#39;./frontend/javascript/**/*.js&#39;,
  ],
  theme: {
    extend: {
      fontFamily: {
        handlee: [&#39;Handlee&#39;]
      },
    },
  },
  plugins: [],
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s update the default layout to use Handlee for the text within the main body. So lets open &lt;code&gt;src/_layouts/default.erb&lt;/code&gt; and change the &lt;code&gt;main&lt;/code&gt; tag to have the &lt;code&gt;class=&amp;quot;font-handlee&amp;quot;&lt;/code&gt; in it - so now it might look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- ... --&amp;gt;
    &amp;lt;main class=&amp;quot;font-hand&amp;quot;&amp;gt;
      &amp;lt;%= yield %&amp;gt;
    &amp;lt;/main&amp;gt;
&amp;lt;!-- ... --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now both the Title and Body of each page should be using the Handlee font.&lt;/p&gt;
&lt;h2 id=&#34;adding-a-new-top-level-page&#34;&gt;&lt;strong&gt;Adding a new Top-Level Page&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s add a &lt;code&gt;contact&lt;/code&gt; page:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;mkdir src/_pages
cat &amp;lt;&amp;lt;EOF&amp;gt;&amp;gt; src/_pages/contact.md
---
layout: page
title: Contact
---

&amp;lt;h1&amp;gt;Contact Me&amp;lt;/h1&amp;gt;
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if you go to: http://localhost:4000/contact you should see your new page.&lt;/p&gt;
&lt;p&gt;For tidiness I prefer to have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;index.md&lt;/li&gt;
&lt;li&gt;posts.md&lt;/li&gt;
&lt;li&gt;about.md&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;all in the &lt;code&gt;src/_pages&lt;/code&gt; folder&lt;/p&gt;
&lt;h2 id=&#34;adding-an-image&#34;&gt;&lt;strong&gt;Adding an Image&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;So to add an image we need to put it in the &lt;code&gt;src/images&lt;/code&gt; folder:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p /images/posts/welcome_post
cp ~/Desktop/sunrise.jpeg /images/posts/welcome_post/.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;rsquo;s test this in our &lt;strong&gt;navbar&lt;/strong&gt; file &lt;code&gt;src/_components/shared/navbar.erb&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;header&amp;gt;
  &amp;lt;%# &amp;lt;img src=&amp;quot;/images/logo.svg&amp;quot; alt=&amp;quot;Logo&amp;quot; /&amp;gt; %&amp;gt;
  &amp;lt;img src=&amp;quot;/images/posts/welcome/sunrise.jpeg&amp;quot; alt=&amp;quot;Sunrise&amp;quot; /&amp;gt;
&amp;lt;/header&amp;gt;
&amp;lt;!-- ... --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bridgetown uses &lt;strong&gt;Kramdown&lt;/strong&gt; as the Markdown rendering engine.  You can learn more about Kramdown Markdown at: 
&lt;a href=&#34;https://kramdown.gettalong.org/quickref.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://kramdown.gettalong.org/quickref.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s also add it in our sample blog post &lt;code&gt;src/_posts/2022-03-05-welcome-to-bridgetown.md&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---
layout: post
title:  &amp;quot;Your First Post on Bridgetown&amp;quot;
date:   2022-03-05 23:22:30 +0100
categories: updates
---
**Display our image!**

![Sunrise](/images/posts/welcome/sunrise.jpeg)

_Now on to the post_
Youâll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `bridgetown serve`, which launches a web server and auto-regenerates your site when a file is updated.

...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hopefully you see the image:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;once on the page &lt;code&gt;http://localhost:4000/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;twice on the page &lt;code&gt;http://localhost:4000/updates/2022/03/05/welcome-to-bridgetown/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;new-post&#34;&gt;&lt;strong&gt;New post&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;A new page within a dated collection.&lt;/p&gt;
&lt;p&gt;We just need to make a new file with the correct headers.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch src/_posts/playing_with_bridgetown.md
cat &amp;lt;&amp;lt;EOF&amp;gt;&amp;gt;src/_posts/playing_with_bridgetown.md
---
layout: post
title:  &amp;quot;Fun with Bridgetown&amp;quot;
date:   2022-03-07 01:01:01 +0100
categories: ruby
---

## Fun is Rewarding
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if you go to: http://localhost:4000/posts your new page&amp;rsquo;s title should be listed and if you click on it&amp;rsquo;s title you should see the page with the URL: http://localhost:4000/ruby/2022/03/07/playing_with_bridgetown/ - the &lt;code&gt;category&lt;/code&gt; is the first part of the url, then the date, and finally the title.&lt;/p&gt;
&lt;h2 id=&#34;controlling-the-urls-permalinks&#34;&gt;&lt;strong&gt;Controlling the URLs (permalinks)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;This is important since you are likely to need to use specific URLs (in my case, I want the new site to have the same urls as the old site). This is documented at: 
&lt;a href=&#34;https://www.bridgetownrb.com/docs/content/permalinks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bridgetownrb.com/docs/content/permalinks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are several default url formats - I will show you a simple override - using the predefined variables.&lt;/p&gt;
&lt;p&gt;first go to &lt;code&gt;bridgetown.config.yml&lt;/code&gt; and add to the following to end of the file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;collections:
  posts:
    permalink: /blogs/:categories/:name/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lsquo;slug&amp;rsquo; is basically the file-name &amp;amp; categories is defined in the&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;After changing &lt;code&gt;bridgetown.config.yml&lt;/code&gt; you MUST stop bridgetown &lt;code&gt;^c&lt;/code&gt; and start it again &lt;code&gt;bin/bridgetown start&lt;/code&gt;!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;now if you go back to &lt;code&gt;http://localhost:4000/posts&lt;/code&gt; and click on the link for the new post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you should get the url: &lt;code&gt;http://localhost:4000/blogs/ruby/playing_with_bridgetown/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;instead of the (pretty) url: &lt;code&gt;http://localhost:4000/ruby/2022/03/07/playing_with_bridgetown/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;define-a-new-collections&#34;&gt;&lt;strong&gt;Define a New Collections&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Lets assume in addition to publishing your blog - you also want to publish your future presentations and past slides.&lt;/p&gt;
&lt;p&gt;we will start by defining the new collection &amp;lsquo;talks&amp;rsquo; in the &lt;code&gt;bridgetown.config.yml&lt;/code&gt; file - so now the end of the file should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# bridgetown.config.yml
# ...
collections:
  posts:
    permalink: /blogs/:categories/:slug/
  talks:
    output: true
    future: true
    sort_by: date
    sort_direction: descending
    permalink: /presentations/:categories/:slug/
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lsquo;output&amp;rsquo; seems to be required for custom collections (I guess this allows a category to be turned on or offs)&lt;/li&gt;
&lt;li&gt;&amp;lsquo;future&amp;rsquo; true means that if the front-matter has a future date - it will be published anyway&lt;/li&gt;
&lt;li&gt;&amp;lsquo;sort_by&amp;rsquo; allows you to pick a front-matter key and sort by it&lt;/li&gt;
&lt;li&gt;&amp;lsquo;sort_direction&amp;rsquo; is pretty clear - &lt;code&gt;ascending&lt;/code&gt; or &lt;code&gt;descending&lt;/code&gt; are the two choices&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we can create our layout for the new collection:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat &amp;lt;&amp;lt;EOF&amp;gt;&amp;gt; src/_layouts/talks.erb
---
layout: default
---

&amp;lt;h1&amp;gt;&amp;lt;big&amp;gt;TALK Title:&amp;lt;/big&amp;gt; &amp;lt;%= resource.data.title %&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;h2&amp;gt;&amp;lt;big&amp;gt;Topic:&amp;lt;/big&amp;gt; &amp;lt;%= resource.data.categories %&amp;gt;&amp;lt;/h2&amp;gt;
&amp;lt;h3&amp;gt;&amp;lt;big&amp;gt;Date:&amp;lt;/big&amp;gt; &amp;lt;%= resource.data.date %&amp;gt;&amp;lt;/h3&amp;gt;

&amp;lt;%= yield %&amp;gt;

EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This layout loads the default layout and for each talk we will have the &amp;lsquo;title&amp;rsquo;, &amp;lsquo;topic&amp;rsquo; and &amp;lsquo;date&amp;rsquo;!&lt;/p&gt;
&lt;p&gt;Now we will need the index page for this collection that will list all the talks:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;cat &amp;lt;&amp;lt;EOF&amp;gt;&amp;gt; src/_pages/talks.md
---
layout: talks
title: My Presentations
---

&amp;lt;ul&amp;gt;
  &amp;lt;% collections.talks.resources.each do |talk| %&amp;gt;
    &amp;lt;li&amp;gt;
      &amp;lt;a href=&amp;quot;&amp;lt;%= talk.relative_url %&amp;gt;&amp;quot;&amp;gt;&amp;lt;%= talk.data.title %&amp;gt;&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
  &amp;lt;% end %&amp;gt;
&amp;lt;/ul&amp;gt;

If you like a talk, please tweet about it.
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now of course we will need to create a talk page (with a publication date in the past):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;cat &amp;lt;&amp;lt;EOF&amp;gt;&amp;gt;src/_talks/collection_intro.me
---
layout: talks
title:  &amp;quot;Introduction to Bridgetown Collections&amp;quot;
date:   2022-03-05 23:22:30 +0100
categories: websites
---

Learning about collections - in case you want more than simple posts
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets start Bridgetwn and be sure that worked&lt;/p&gt;
&lt;p&gt;Now lets advertise a future talk:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;cat &amp;lt;&amp;lt;EOF&amp;gt;&amp;gt;src/_talks/future-collections.me
---
layout: talks
title:  &amp;quot;The Future Bridgetown&amp;quot;
date:   2222-22-22 22:22:22 +0100
draft:  true
categories: websites
---

The future looks promising
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we should now see 2 talks listed at; &lt;code&gt;http://localhost:4000/talks&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;create-a-draft-post&#34;&gt;&lt;strong&gt;Create a Draft Post&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Without being able to use a future Date - we can simply add &lt;code&gt;&amp;lt;% next if blog.data.draft %&amp;gt;&lt;/code&gt; to our index page&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;---
layout: blog
title: Ruby Blogs
---

&amp;lt;ul&amp;gt;
  &amp;lt;% collections.ruby_blogs.resources.each do |blog| %&amp;gt;
    &amp;lt;% next if blog.data.draft %&amp;gt;
    &amp;lt;li&amp;gt;
      &amp;lt;a href=&amp;quot;&amp;lt;%= blog.relative_url %&amp;gt;&amp;quot;&amp;gt;&amp;lt;%= blog.data.title %&amp;gt;-&amp;lt;%= blog.data.draft %&amp;gt;&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
  &amp;lt;% end %&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now it should skip any file with &lt;code&gt;draft: true&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;prototypes---similar-talks&#34;&gt;&lt;strong&gt;prototypes - Similar Talks&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://edge.bridgetownrb.com/docs/prototype-pages#searching-in-collections&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://edge.bridgetownrb.com/docs/prototype-pages#searching-in-collections&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ve probably seen a section on many webpages with &amp;lsquo;similar&amp;rsquo; articles (which lists articles with the same &lt;code&gt;tag&lt;/code&gt; or &lt;code&gt;category&lt;/code&gt;) - let&amp;rsquo;s set that up for talks.&lt;/p&gt;
&lt;p&gt;First make a few talks with tags and categories.&lt;/p&gt;
&lt;p&gt;Now lets create the pages to define our &amp;lsquo;similar&amp;rsquo; talks:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p src/talks/categories
cat&amp;lt;&amp;lt;EOF&amp;gt;src/talks/categories/categories.html
---
title: Talks about :prototype-term-titleize
prototype:
  term: categories
  collection: talks
---
EOF

mkdir -p src/talks/tags
cat&amp;lt;&amp;lt;EOF&amp;gt;src/talks/tags/tag.html
---
title: Talks about :prototype-term-titleize
prototype:
  term: tag
  collection: talks
---
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;pagination&#34;&gt;&lt;strong&gt;Pagination&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.bridgetownrb.com/docs/prototype-pages&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bridgetownrb.com/docs/prototype-pages&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This required &lt;code&gt;pagination&lt;/code&gt; is enabled (
&lt;a href=&#34;https://www.bridgetownrb.com/docs/content/pagination/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bridgetownrb.com/docs/content/pagination/&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&#34;deploy&#34;&gt;&lt;strong&gt;Deploy&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s now deploy this Webpage (using the &lt;code&gt;configure&lt;/code&gt; command) it is very straightforward!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First, be sure you have pushed your project to github or gitlab - create the repo online and push it with:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;Configured w TailwindCSS and Handlee Font&amp;quot;
git remote add origin git@github.com:gitusername/bridge_tail_site.git
git branch -M main
git push -u origin main
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Second, install the config for your deploy service (in this case &lt;code&gt;netlify&lt;/code&gt;) by typing:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle exec bridgetown configure netlify
git add bin/netlify.sh netlify.toml
git commit -m &amp;quot;add netlify config&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Third, connect your netlify account to the repo you just created.&lt;/li&gt;
&lt;li&gt;Four, click &lt;code&gt;deploy&lt;/code&gt; within the netlify site (if it hasn&amp;rsquo;t already startet) and wait 5-10 mins (yes its kinda slow to deploy) and you should have your new website!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Woo Hoo.&lt;/p&gt;
&lt;h2 id=&#34;what-didnt-work-yet&#34;&gt;What didn&amp;rsquo;t work (yet!)&lt;/h2&gt;
&lt;h4 id=&#34;bridgetown-file-routing&#34;&gt;Bridgetown File Routing&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s try the new File Routing feature described at: 
&lt;a href=&#34;https://edge.bridgetownrb.com/docs/routes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://edge.bridgetownrb.com/docs/routes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First update the &lt;code&gt;Gemfile&lt;/code&gt; - uncomment: &lt;code&gt;gem &amp;quot;bridgetown-routes&amp;quot;, &amp;quot;~&amp;gt; 1.0.0.beta3&amp;quot;, group: :bridgetown_plugins&lt;/code&gt; - now it should look similar to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Gemfile
source &amp;quot;https://rubygems.org&amp;quot;
git_source(:github) { |repo| &amp;quot;https://github.com/#{repo}.git&amp;quot; }

gem &amp;quot;bridgetown&amp;quot;, &amp;quot;~&amp;gt; 1.0.0.beta3&amp;quot;

# Uncomment to add file-based dynamic routing to your project:
gem &amp;quot;bridgetown-routes&amp;quot;, &amp;quot;~&amp;gt; 1.0.0.beta3&amp;quot;, group: :bridgetown_plugins

gem &amp;quot;puma&amp;quot;, &amp;quot;~&amp;gt; 5.5&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to run bundler:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now setup the Roda config &lt;code&gt;server/roda_app.rb&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# server/roda_app.rb
require &amp;quot;bridgetown-routes&amp;quot;

class RodaApp &amp;lt; Bridgetown::Rack::Roda
  # Uncomment to use Bridgetown SSR:
  # plugin :bridgetown_ssr

  # And optionally file-based routing:
  plugin :bridgetown_routes

  route do |r|
    # Load Roda routes in server/routes (and src/_routes via `bridgetown-routes`)
    Bridgetown::Rack::Routes.start! self
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets add:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# ./server/routes/preview.rb

class Routes::Preview &amp;lt; Bridgetown::Rack::Routes
  route do |r|
    r.on &amp;quot;preview&amp;quot; do
      # Our special rendering pathway to preview a page
      # route: /preview/:collection/:path
      r.get String, String do |collection, path|
        item = Bridgetown::Model::Base.find(&amp;quot;repo://#{collection}/#{path}&amp;quot;)

        unless item.content.present?
          next Bridgetown::Model::Base.find(&amp;quot;repo://pages/_pages/404.html&amp;quot;)
            .render_as_resource
            .output
        end

        item
          .render_as_resource
          .output
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets make an index page for this route:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;mkdir -p src/_routes/items
cat &amp;lt;&amp;lt;EOF&amp;gt;src/_routes/items/index.erb
---&amp;lt;%
# route: /items
r.get do
  render_with data: {
    layout: :page,
    title: &amp;quot;Dynamic Items&amp;quot;,
    items: [
      { number: 1, slug: &amp;quot;123-abc&amp;quot; },
      { number: 2, slug: &amp;quot;456-def&amp;quot; },
      { number: 3, slug: &amp;quot;789-xyz&amp;quot; },
    ]
  }
end
%&amp;gt;---

&amp;lt;ul&amp;gt;
  &amp;lt;% resource.data.items.each do |item| %&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/items/&amp;lt;%= item[:slug] %&amp;gt;&amp;quot;&amp;gt;Item #&amp;lt;%= item[:number] %&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;% end %&amp;gt;
&amp;lt;/ul&amp;gt;
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets create the template for items:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;cat &amp;lt;&amp;lt;EOF&amp;gt;&amp;gt;src/_routes/items/[slug].erb
---&amp;lt;%
# route: /items/:slug
r.get do
  item_id, *item_sku = r.params[:slug].split(&amp;quot;-&amp;quot;)
  item_sku = item_sku.join(&amp;quot;-&amp;quot;)

  render_with data: {
    layout: :page,
    title: &amp;quot;Item Page&amp;quot;,
    item_id: item_id,
    item_sku: item_sku
  }
end
%&amp;gt;---

&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Item ID:&amp;lt;/strong&amp;gt; &amp;lt;%= resource.data.item_id %&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Item SKU:&amp;lt;/strong&amp;gt; &amp;lt;%= resource.data.item_sku %&amp;gt;&amp;lt;/p&amp;gt;
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;alpinejs-installed-as-a-module&#34;&gt;AlpineJS installed as a module&lt;/h4&gt;
&lt;p&gt;Not a show stopper but irritates me.&lt;/p&gt;
&lt;p&gt;I tried using the Bridgetown Javascript install instructions at: 
&lt;a href=&#34;https://www.bridgetownrb.com/docs/frontend-assets#javascript&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bridgetownrb.com/docs/frontend-assets#javascript&lt;/a&gt; &amp;amp; also the AlpineJS instructions at: 
&lt;a href=&#34;https://alpinejs.dev/essentials/installation#as-a-module&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://alpinejs.dev/essentials/installation#as-a-module&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am hoping to install AlpineJS as an imported module (so building isn&amp;rsquo;t depending on a web-connection and the code needed is local).  So I tried removing the AplineJS script tag from the header:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- src/_partials/_head.erb --&amp;gt;
...
&amp;lt;!-- AlpineJS script tag--&amp;gt;
&amp;lt;%# &amp;lt;script defer src=&amp;quot;https://unpkg.com/alpinejs@3.9.0/dist/cdn.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; %&amp;gt;
&amp;lt;%= live_reload_dev_js %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then installing alpinejs&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn add alpinejs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and I confirmed that I see the AlpineJS in the node_modules folder.&lt;/p&gt;
&lt;p&gt;Then I import and start AlpineJS in &lt;code&gt;frontend/javascript/index.js&lt;/code&gt; so it looked like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// frontend/javascript/index.js
import &amp;quot;index.css&amp;quot;
import Alpine from &#39;alpinejs&#39;
// Import all JavaScript &amp;amp; CSS files from src/_components
import components from &amp;quot;bridgetownComponents/**/*.{js,jsx,js.rb,css}&amp;quot;

console.info(&amp;quot;Bridgetown is loaded!&amp;quot;)
window.Alpine = Alpine
Alpine.start()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But unfortunately, this doesn&amp;rsquo;t work :( If you know how to make it work, I&amp;rsquo;ll be glad to update this document.&lt;/p&gt;
&lt;p&gt;I have also created a github discussion to hopefully help: 
&lt;a href=&#34;https://github.com/bridgetownrb/bridgetown/discussions/506&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/bridgetown/discussions/506&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;feature-still-to-explore&#34;&gt;Feature still to explore&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Add a Custom Font&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bundle Configs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setup for purging css: (bundle exec bridgetown configure purgecss) - 
&lt;a href=&#34;https://www.bridgetownrb.com/docs/bundled-configurations#purgecss-post-build-hook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bridgetownrb.com/docs/bundled-configurations#purgecss-post-build-hook&lt;/a&gt; - installed by default with Tailwind&lt;/li&gt;
&lt;li&gt;Rails Default JS - (bundle exec bridgetown configure stimulus) - 
&lt;a href=&#34;https://www.bridgetownrb.com/docs/bundled-configurations#stimulus&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bridgetownrb.com/docs/bundled-configurations#stimulus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rails Turbo features: (bundle exec bridgetown configure turbo) - 
&lt;a href=&#34;https://www.bridgetownrb.com/docs/bundled-configurations#turbo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bridgetownrb.com/docs/bundled-configurations#turbo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Animation Transitions: (bundle exec bridgetown configure swup) - 
&lt;a href=&#34;https://www.bridgetownrb.com/docs/bundled-configurations#swupjs-page-transitions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bridgetownrb.com/docs/bundled-configurations#swupjs-page-transitions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Automations&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bulma Configured Site: (bundle exec bridgetown apply 
&lt;a href=&#34;https://github.com/whitefusionhq/bulmatown&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/whitefusionhq/bulmatown&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Cloudinary Configuration: (bundle exec bridgetown apply 
&lt;a href=&#34;https://github.com/bridgetownrb/bridgetown-cloudinary&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/bridgetown-cloudinary&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Netlify Configuration: (bundle exec bridgetown apply 
&lt;a href=&#34;https://github.com/bridgetownrb/automations/netlify.rb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/automations/netlify.rb&lt;/a&gt;) - how is this different from Netlify bundle configure?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Testing&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MiniTests: (bundle exec bridgetown configure minitesting) - 
&lt;a href=&#34;https://www.bridgetownrb.com/docs/testing#use-ruby-and-minitest-to-test-html-directly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bridgetownrb.com/docs/testing#use-ruby-and-minitest-to-test-html-directly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cypres JS Testing: (bundle exec bridgetown apply 
&lt;a href=&#34;https://github.com/ParamagicDev/bridgetown-automation-cypress&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/ParamagicDev/bridgetown-automation-cypress&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Plugins&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SEO Tags (bundle add bridgetown-seo-tag -g bridgetown_plugins): 
&lt;a href=&#34;https://github.com/bridgetownrb/bridgetown-seo-tag&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/bridgetown-seo-tag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Atom Feed (bundle add bridgetown-feed -g bridgetown_plugins): 
&lt;a href=&#34;https://github.com/bridgetownrb/bridgetown-feed&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/bridgetown-feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SVG in HTML inline (bundle add &amp;ldquo;bridgetown-svg-inliner&amp;rdquo; -g bridgetown_plugins): 
&lt;a href=&#34;https://github.com/ayushn21/bridgetown-svg-inliner&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/ayushn21/bridgetown-svg-inliner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Liquid QuickSearch (bundle add bridgetown-quick-search -g bridgetown_plugins): 
&lt;a href=&#34;https://github.com/bridgetownrb/bridgetown-quick-search&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/bridgetown-quick-search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add a SiteMap (bundle add bridgetown-sitemap -g bridgetown_plugins): 
&lt;a href=&#34;https://github.com/ayushn21/bridgetown-sitemap&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/ayushn21/bridgetown-sitemap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Markdown JS (bundle add bridgetown-mdjs -g bridgetown_plugins): 
&lt;a href=&#34;https://github.com/bridgetownrb/bridgetown-mdjs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/bridgetown-mdjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HTML Minify (bundle add bridgetown-minify-html -g bridgetown_plugins): 
&lt;a href=&#34;https://github.com/bt-rb/bridgetown-minify-html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bt-rb/bridgetown-minify-html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Github ViewComponents (bundle add bridgetown-view-component -g bridgetown_plugins): 
&lt;a href=&#34;https://github.com/bridgetownrb/bridgetown-view-component&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/bridgetown-view-component&lt;/a&gt; &amp;ndash; but the docs are here: 
&lt;a href=&#34;https://www.bridgetownrb.com/docs/components/ruby#need-compatibility-with-rails-try-viewcomponent-experimental&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bridgetownrb.com/docs/components/ruby#need-compatibility-with-rails-try-viewcomponent-experimental&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GraphQL Api for Bridgetown (bundle add graphtown -g bridgetown_plugins): 
&lt;a href=&#34;https://github.com/whitefusionhq/graphtown&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/whitefusionhq/graphtown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bulma Starter (bundle exec bridgetown apply 
&lt;a href=&#34;https://github.com/whitefusionhq/bulmatown%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/whitefusionhq/bulmatown)&lt;/a&gt;: 
&lt;a href=&#34;https://github.com/whitefusionhq/bulmatown&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/whitefusionhq/bulmatown&lt;/a&gt; (something went wrong on my first try - and don&amp;rsquo;t use this with tailwindcss :)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Content Management Plugins&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Notable MD Editor (bundle add bridgetown-notable -g bridgetown_plugins): 
&lt;a href=&#34;https://github.com/jamie/bridgetown-notable&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/jamie/bridgetown-notable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Prismic Flat CMS (bin/bridgetown apply 
&lt;a href=&#34;https://github.com/bridgetownrb/bridgetown-prismic%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/bridgetown-prismic)&lt;/a&gt;: 
&lt;a href=&#34;https://github.com/bridgetownrb/bridgetown-prismic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/bridgetown-prismic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This looks promising for people familiar with Rails, we will see how it competes with Astro and the other JAMF Stacks for the general public.&lt;/p&gt;
&lt;p&gt;So far, the only downsides have been:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I am not sure I fully understand the logic of 3 added aspects of additional features - for example why is there a netlify automation and bundle config?&lt;/li&gt;
&lt;li&gt;I have only been able to install AlpineJS as a weblink and not as an included module (If I figure it out I&amp;rsquo;ll update this document and or make a configuration script) - maybe I just need to learn into StimulusJS.&lt;/li&gt;
&lt;li&gt;I would like to use Fly.io too (if I figure it out I&amp;rsquo;ll write a configuration script)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Apparently, Vue, React, Bulma plugin-configuations are comming too.
As well as workflows and deployment for github and gitlab.
This should be interesting and fun.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Passwordless Authentication with Devise</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_x_passwordless_devise_w_global_ids/</link>
      <pubDate>Sat, 18 Dec 2021 01:36:55 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_x_passwordless_devise_w_global_ids/</guid>
      <description>&lt;p&gt;I wrote a little app for a small non-profit group.  Some of them had severe problems with password management - so this article is how I solved that.&lt;/p&gt;
&lt;p&gt;The easiest way to approach this is to use Rails built-in Secure Global IDs, in this way no database migrations are needed.&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;User enters their email-address in a simple form&lt;/li&gt;
&lt;li&gt;If account is found - a link with a token is generated and email is sent&lt;/li&gt;
&lt;li&gt;User is notified that the link is on its way (even if the account is not found and no email is sent)&lt;/li&gt;
&lt;li&gt;When the user follows the link in the email, a session is generated&lt;/li&gt;
&lt;li&gt;Session valid until the session expires or the user logs out (deleting the session).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Since you are using Devise, I will assume you are using it to also manage accounts.  However to keep the code short I will only show what is needed for this one feature.&lt;/p&gt;
&lt;h3 id=&#34;understanding-globalids&#34;&gt;Understanding GlobalIDs&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s start by understanding how Global IDs work&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We start by grabbing a user object and generating a token.&lt;/li&gt;
&lt;li&gt;Next we use the token to retrieve the same user object.
Code to demostrate the usage:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;bin/rails c
user_orig = User.first
# * the `for: &#39;user_auth&#39;` must matching on the receiving end.
# * the `expires_in: 1.hour` can be set for any length of time (default is 30 days)
sgid = user_orig.to_sgid(expires_in: 1.hour, for: &#39;user_auth&#39;)

# now that we have a secured global id, we can generate a token
auth_token = sgid.to_s # token from the Global ID

# should retrieve the user since the token is still valid and the `for:` string matches
user_retrieved = GlobalID::Locator.locate_signed(auth_token, for: &#39;user_auth&#39;)
# try this token again in an hour+ and it should fail!
user_retrieved.id == user_orig.id

# should be nil, since the `for:` string didn&#39;t match
GlobalID::Locator.locate_signed(auth_token, for: &#39;admins_access&#39;).nil?
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;global-ids-for-login&#34;&gt;Global IDs for login&lt;/h3&gt;
&lt;p&gt;To use a Global ID will need a user&amp;rsquo;s email to send it to them and generate a token points to a url that can verify the token and create a session.   So we would need code that looks something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;email = params[:email]
user = User.find_by(email: email)
sgid = user.to_sgid(expires_in: 1.hour, for: &#39;user_auth&#39;)
auth_url = Rails.application.routes.url_helpers
                .auth_user_session_url(auth_token: sgid.to_s)
UserAuthMailer.send_link(user, auth_url).deliver_now
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course we don&amp;rsquo;t have the &lt;code&gt;auth_user_session_url&lt;/code&gt; route and &lt;code&gt;UserAuthMailer.send_link&lt;/code&gt; yet, but we will build that soon.&lt;/p&gt;
&lt;p&gt;To unpack the token and build a session we will need code that looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;auth_token = params[:auth_token]
user = GlobalID::Locator.locate_signed(auth_token, for: &#39;user_auth&#39;)
if user.present?
  sign_in(user) # a devise method
  flash[:notice] = &amp;quot;Welcome back! #{user.email}&amp;quot;
else
  flash[:alert] = &#39;invalid token&#39;
end
redirect_to root_path
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets figure out where all this code goes to integrate with both Rails and Devise.&lt;/p&gt;
&lt;h3 id=&#34;simple-app&#34;&gt;Simple App&lt;/h3&gt;
&lt;p&gt;This code-repo is posted at: 
&lt;a href=&#34;https://github.com/btihen/ruby_kafi_passwordless_devise_code&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/btihen/ruby_kafi_passwordless_devise_code&lt;/a&gt; (actually this has code to demo two methods)&lt;/p&gt;
&lt;p&gt;Create a Rails Project&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails new passwordless_devise_code
cd passwordless_devise_code

bin/rails db:create
bin/rails g controller Landing index
bin/rails g scaffold Pet name species
bin/rails db:migrate

## config/routes.rb
Rails.application.routes.draw do
  resources :pets
  root to: &amp;quot;landing#index&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The landing page and pets should both be fully available.&lt;/p&gt;
&lt;h3 id=&#34;add-the-devise-gem&#34;&gt;Add the Devise Gem&lt;/h3&gt;
&lt;p&gt;User-Controller to manage users:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle add devise
bundle install
bin/rails generate devise:install
bin/rails generate devise User
# update the migration to match any added features
bin/rails db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;devise--rails-config-for-email-and-urls&#34;&gt;Devise / Rails Config for email and URLs&lt;/h3&gt;
&lt;p&gt;Devise and Rails need a few config tweeks to do what we want.  (the example is for development, but when publishing of course production will need the appropriate configs too)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/environments/development.rb
self.default_url_options = { host: &#39;http://localhost:3000&#39; }
config.action_mailer.default_url_options = { host: &#39;localhost&#39;, port: 3000 }

# app/views/layouts/application.html.erb
&amp;lt;p class=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p class=&amp;quot;alert&amp;quot;&amp;gt;&amp;lt;%= alert %&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;require-authentication-to-access-pets&#34;&gt;Require Authentication to access Pets&lt;/h3&gt;
&lt;p&gt;Now lets activate Devise on all pages, except the landing page.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/application_controller.rb
class ApplicationController &amp;lt; ActionController::Base
  before_action :authenticate_user!
end

# app/controllers/landing_controller.rb
class LandingController &amp;lt; ApplicationController
  skip_before_action :authenticate_user!
  def index
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the landing page should be available, but not the pets page.&lt;/p&gt;
&lt;h3 id=&#34;setup-session-authentication&#34;&gt;Setup Session Authentication&lt;/h3&gt;
&lt;p&gt;We are going to need to generate our own DeviseSession controller and add to it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;rails g devise:controllers users -c=sessions

# app/controllers/users/sessions_controller.rb:
class Users::SessionsController &amp;lt; Devise::SessionsController
  def auth_token
    auth_token = params[:auth_token]
    user = GlobalID::Locator.locate_signed(auth_token, for: &#39;user_auth&#39;)
    # if we get a user then we know the secured global ID checked out
    if user.present?
      sign_in(user)
      flash[:notice] = &amp;quot;Welcome back! #{user.email}&amp;quot;
      redirect_to pets_path
    else
      flash[:alert] = &#39;OOPS - something went wrong.&#39;
      redirect_to root_path
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We need to tell Devise and Rails about our new code in the routes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;#config/routes.rb
Rails.application.routes.draw do
  # tell devise about our sessions controller
  devise_for :users, controllers: { sessions: &#39;users/sessions&#39; }
  devise_scope :user do  # tell rails and devise about our new passwordless authorization route
    get &#39;users/auth_token/:auth_token&#39;, as: :auth_user_session, to: &#39;users/sessions#auth_token&#39;
  end
  resources :pets
  root to: &amp;quot;landing#index&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we try this now we will get a password error, since devise always assumes a user MUST have and has entered a password.&lt;/p&gt;
&lt;h3 id=&#34;allow-devise-to-ignore-passwords&#34;&gt;Allow Devise to ignore passwords&lt;/h3&gt;
&lt;p&gt;It is tricky to remove the passwords, but easy to ignore them with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ApplicationRecord
  before_validation :set_password, on: :create

  # don&#39;t require passwords with user_authenticate!
  def password_required?
    false # because we aren&#39;t using passwords
  end
  private
  # set random Devise passwords to keep devise happy
  def set_password
    tmp_passwd = SecureRandom.alphanumeric(30) # the longer the better (more or less)
    self.password = tmp_passwd
    self.password_confirmation = tmp_passwd
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;testing-our-new-model-and-controller&#34;&gt;Testing our new model and controller&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;bin/rails c

# create new devise user (without a known password)
User.create(email: &amp;quot;tester@test.ch&amp;quot;, name: &amp;quot;Tester&amp;quot;)
user = User.last
sgid = user.to_sgid(expires_in: 1.hour, for: &#39;user_auth&#39;)
auth_url = Rails.application.routes.url_helpers
                .auth_user_session_url(auth_token: sgid.to_s)
#                `auth_user_session_url` - matches our route name we set!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Copy this generated url into your browser and you should end up on the &lt;code&gt;pets&lt;/code&gt; page!&lt;/p&gt;
&lt;h3 id=&#34;emailing-our-auth_token&#34;&gt;Emailing our auth_token&lt;/h3&gt;
&lt;p&gt;Now that we know the Auth Token works, lets learn to email them to the appropriate email&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# create the Emailer code with:
bin/rails g mailer UserAuth send_link

# app/mailers/user_auth_mailer.rb
class UserAuthMailer &amp;lt; ApplicationMailer
  def send_url(user, auth_url)
    @user = user
    @url  = auth_url
    @host = Rails.application.config.hosts.first
    mail to: @user.email, subject: &#39;Sign in into #{@host}&#39;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets create the email contents - let&amp;rsquo;s include a greeting, the sending host and of course the auth_url (we will determine later)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;

# app/views/user_auth_mailer/send_url.html.erb
&amp;lt;p&amp;gt;
  Hi &amp;lt;%= @user.email %&amp;gt;,
  &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
  For access to &amp;lt;%= @host %&amp;gt; &amp;lt;%= link_to &amp;quot;Click here&amp;quot;, @url %&amp;gt;
  &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
  or in plain-text: &amp;lt;%= @url %&amp;gt;
&amp;lt;/p&amp;gt;

# app/views/user_auth_mailer/send_url.text.erb
Hi &amp;lt;%= @user.email %&amp;gt;,

For access to &amp;lt;%= @host %&amp;gt; follow this link:
&amp;lt;%= @url %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;test-the-emailer&#34;&gt;Test the emailer&lt;/h3&gt;
&lt;p&gt;Start mailhog and then:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;bin/rails c
user = User.first
sgid = user.to_sgid(expires_in: 1.hour, for: &#39;user_auth&#39;)
auth_url = Rails.application.routes.url_helpers
                .auth_user_session_url(auth_token: sgid.to_s)
UserAuthMailer.send_link(user, auth_url).deliver_now
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now open the mailhog browser tab (or copy the url from the console) and click on the link and pets should open.&lt;/p&gt;
&lt;h3 id=&#34;now-the-hard-devise-strategy-part&#34;&gt;Now the Hard (Devise Strategy) part&lt;/h3&gt;
&lt;p&gt;Now we have all that we need to update Devise with a new Strategy.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;mkdir app/lib/devise
mkdir app/lib/devise/models
mkdir app/lib/devise/strategies
touch app/lib/devise/models/token_authenticatable.rb
touch app/lib/devise/strategies/token_authenticatable.rb

# app/lib/devise/models/passwordless_authenticatable.rb
require Rails.root.join(&#39;app/lib/devise/strategies/token_authenticatable&#39;)
module Devise
  module Models
    module TokenAuthenticatable
      extend ActiveSupport::Concern
    end
  end
end

# app/lib/devise/strategies/token_authenticatable.rb
require &#39;devise/strategies/authenticatable&#39;
require_relative &#39;../../../mailers/user_mailer&#39;

module Devise::Strategies
  class TokenAuthenticatable &amp;lt; Authenticatable
    def authenticate!
      email = params.dig(:user, :email)
      user = User.find_by(email: email)
      if user.present? &amp;amp;&amp;amp; !user.locked_at? # and other restrictions as (depending on what was configured)
        auth_sgid = user.to_sgid(expires_in: 1.hour, for: &#39;user_auth&#39;)
        auth_token = auth_sgid.to_s
        auth_url = Rails.application.routes.url_helpers
                        .auth_user_session_url(login_token: auth_token)
        UserAuthMailer.send_url(user, auth_url).deliver_later
      end
      fail!(&amp;quot;An email was sent to you with an authorization link.&amp;quot;)s
    end
  end
end
Warden::Strategies.add(:token_authenticatable, Devise::Strategies::TokenAuthenticatable)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; this strategy authenticates that the user is allowed to get a token.  The &lt;code&gt;auth&lt;/code&gt; method in sessions_controller - authenticates the token and creates a session.&lt;/p&gt;
&lt;h3 id=&#34;tell-devise-to-use-the-new-strategy&#34;&gt;Tell Devise to use the new Strategy&lt;/h3&gt;
&lt;p&gt;Now we want to move Devise away from its default &lt;code&gt;database_athenticable&lt;/code&gt; to &lt;code&gt;token_authenticable&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So now we need to add &lt;code&gt;:token_authenticatable&lt;/code&gt; to our User model:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/users.rb
class User &amp;lt; ApplicationRecord
  before_validation :set_password, on: :create

  # at this point validatable is basically only checking that the email is valid
  devise :token_authenticatable, :validatable

  def password_required?
    false # because we aren&#39;t using passwords
  end
  private
  # since we aren&#39;t using passwords
  def set_password
    tmp_passwd = SecureRandom.alphanumeric(20)
    self.password = tmp_passwd
    self.password_confirmation = tmp_passwd
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, this isn&amp;rsquo;t enough - devise must know to load this strategy at boot - we do this with by adding the following to the VERY TOP of Devise initializer file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/devise.rb
Devise.add_module(:token_authenticatable, {
  strategy:   true,
  route:      :session,
  controller: :sessions,
  model:      &#39;app/lib/devise/models/token_authenticatable&#39;
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE: if all is good the devise routes should be there (plus our extra one):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;new_user_session      GET     /users/sign_in(.:format)     users/sessions#new
user_session          POST    /users/sign_in(.:format)     users/sessions#create
destroy_user_session  DELETE  /users/sign_out(.:format)    users/sessions#destroy
auth_user_session     GET     /users/auth_token(.:format)  users/sessions#auth_token
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;devise-views-remove-the-passwords&#34;&gt;Devise Views (remove the passwords)&lt;/h3&gt;
&lt;p&gt;Now we need to change the password in the views so we will need to generate the devise views (and configure devise to use scoped views is probably best):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/devise.rb:
config.scoped_views = true

# generate the devise views (to override them)
bin/rails generate devise:views users
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you will need to remove the password field from all the views.  For this project, I will only show the sign_in page:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/users/sessions/new.html.erb
&amp;lt;h2&amp;gt;Log in&amp;lt;/h2&amp;gt;
&amp;lt;%= form_for(resource, as: resource_name, url: user_session_path) do |f| %&amp;gt;
  &amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
    &amp;lt;%= f.label :email %&amp;gt;&amp;lt;br /&amp;gt;
    &amp;lt;%= f.email_field :email, autofocus: true, autocomplete: &amp;quot;email&amp;quot; %&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;% if devise_mapping.rememberable? %&amp;gt;
    &amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
      &amp;lt;%= f.check_box :remember_me %&amp;gt;
      &amp;lt;%= f.label :remember_me %&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;% end %&amp;gt;
  &amp;lt;div class=&amp;quot;actions&amp;quot;&amp;gt;
    &amp;lt;%= f.submit &amp;quot;Log in&amp;quot; %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;
&amp;lt;%= render &amp;quot;users/shared/links&amp;quot; %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;security-note&#34;&gt;Security Note&lt;/h3&gt;
&lt;p&gt;NOTE: I prefer a short sgid key life-spans and longer session-lifespans (both are configurable)&lt;/p&gt;
&lt;p&gt;By default rails sessions have no expiration (until logout) and sgids are valid for a month. I find both of these settings too long. To change this default behavior, you can set the session length with the setting:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/session_store.rb
Rails.application.config.session_store :cookie_store, expire_after: 14.days
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And you saw in the code where the sgid lifespan is defined.&lt;/p&gt;
&lt;h2 id=&#34;test-the-full-flow&#34;&gt;Test the full flow&lt;/h2&gt;
&lt;p&gt;With all that completed you should be able to test the full workflow!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;start rails with: &lt;code&gt;bin/rails s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;start mailhog with: &lt;code&gt;mailhog&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;go to: &lt;code&gt;http://localhost:3000/user/home&lt;/code&gt; (should get redirected to the below URL)&lt;/li&gt;
&lt;li&gt;go to: &lt;code&gt;http://localhost:3000/user/logins&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;enter the &amp;ldquo;
&lt;a href=&#34;mailto:tester@test.ch&#34;&gt;tester@test.ch&lt;/a&gt;&amp;rdquo; email&lt;/li&gt;
&lt;li&gt;Check mailhog for the link &lt;code&gt;http://localhost:8025/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;click the link you should now be on &lt;code&gt;http://localhost:3000/user/home&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Rails GlobalID&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The nice thing about these is that the auto expire - simplifying the code a lot.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/rails/globalid&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/rails/globalid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.magicalruby.com/implementing-magic-links-in-rails/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.magicalruby.com/implementing-magic-links-in-rails/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Token using SecureRandom&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With these you need to create your own expiration and lookup system (more code add a migration), but will work with any framework.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(using uuids) - 
&lt;a href=&#34;https://oozou.com/blog/how-to-implement-passwordless-authentication-in-ruby-on-rails-154&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://oozou.com/blog/how-to-implement-passwordless-authentication-in-ruby-on-rails-154&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(using SecureRandom) - 
&lt;a href=&#34;https://abevoelker.com/skipping-the-database-with-stateless-tokens-a-hidden-rails-gem-and-a-useful-web-technique/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://abevoelker.com/skipping-the-database-with-stateless-tokens-a-hidden-rails-gem-and-a-useful-web-technique/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Devise Options&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Devise Plugin - 
&lt;a href=&#34;https://github.com/abevoelker/devise-passwordless&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/abevoelker/devise-passwordless&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Do it Yourself Devise - 
&lt;a href=&#34;https://dev.to/matiascarpintini/magic-links-with-ruby-on-rails-and-devise-4e3o&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dev.to/matiascarpintini/magic-links-with-ruby-on-rails-and-devise-4e3o&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Do it yourself Devise - 
&lt;a href=&#34;https://www.mintbit.com/blog/passwordless-authentication-in-ruby-on-rails-with-devise&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.mintbit.com/blog/passwordless-authentication-in-ruby-on-rails-with-devise&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Other Options&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;passwordless gem - 
&lt;a href=&#34;https://github.com/mikker/passwordless#token-and-session-expiry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/mikker/passwordless#token-and-session-expiry&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;magic-link gem - 
&lt;a href=&#34;https://github.com/dvanderbeek/magic-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/dvanderbeek/magic-link&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using Sorcery - 
&lt;a href=&#34;https://fullstackheroes.com/rails/sorcery-passwordless-authentication/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://fullstackheroes.com/rails/sorcery-passwordless-authentication/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using Sourcery - 
&lt;a href=&#34;https://www.sitepoint.com/magical-authentication-sorcery/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.sitepoint.com/magical-authentication-sorcery/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(using JWTs) - 
&lt;a href=&#34;https://blog.kiprosh.com/implement-passwordless-authentication-via-magic-link-in-rails-api/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.kiprosh.com/implement-passwordless-authentication-via-magic-link-in-rails-api/&lt;/a&gt;
&lt;strong&gt;Passwordless Security Overview&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://abevoelker.com/skipping-the-database-with-stateless-tokens-a-hidden-rails-gem-and-a-useful-web-technique/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://abevoelker.com/skipping-the-database-with-stateless-tokens-a-hidden-rails-gem-and-a-useful-web-technique/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Sessions&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://api.rubyonrails.org/classes/ActionDispatch/Session/CookieStore.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://api.rubyonrails.org/classes/ActionDispatch/Session/CookieStore.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://blog.saeloun.com/2019/09/12/rails-6-adds-dig-to-actiondispatch-request-session.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.saeloun.com/2019/09/12/rails-6-adds-dig-to-actiondispatch-request-session.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Rails 6.x Auth with MagicLink using SecureRandom Token</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_x_auth_w_magic_links_using_random_token/</link>
      <pubDate>Wed, 22 Sep 2021 16:09:57 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_x_auth_w_magic_links_using_random_token/</guid>
      <description>&lt;p&gt;Passwordless Authentication is very convenient for users and generally as secure as passwords (according to many articles as long as the email access-links are short-lived - as email is not very secure).&lt;/p&gt;
&lt;p&gt;Therefore, after some reading, it seems like a good approach is to make a short-lived link, and then transfer the security to a session.&lt;/p&gt;
&lt;p&gt;I found that there seems to be three simple approaches:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Do it yourself: with a Signed-GlobalID from Rails (self-times out &amp;amp; no migration)&lt;/li&gt;
&lt;li&gt;Do it yourself: with a Stored-Token (adapts to any framework)&lt;/li&gt;
&lt;li&gt;Other Options: Devise Plugin (when using devise) or other Gems&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This article will focus on using Secure Random - since it can work with any Framework (in Rails however, I prefer to use SignedGlobalIDs - see: 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_x_auth_w_magic_links_using_signed_global_id/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://btihen.me/&lt;/a&gt;, since it simplifies the user model and the expiration logic)&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;User enters their email-address in a simple form&lt;/li&gt;
&lt;li&gt;If account is found - a link with a token is generated and email is sent&lt;/li&gt;
&lt;li&gt;User is notified that the link is on its way (even if the account is not found and no email is sent)&lt;/li&gt;
&lt;li&gt;When the user follows the link in the email, a session is generated&lt;/li&gt;
&lt;li&gt;Session valid until the session expires or the user logs out (deleting the session).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; I will be assuming that the account must exist, but you could also just create a new account &lt;em&gt;(consider this option carefully and some limits on account creation per IP address or per hour, etc.  As you could otherwise be flooded with useless, malicious emails!)&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;do-it-yourself&#34;&gt;Do it yourself&lt;/h2&gt;
&lt;p&gt;This is relatively easy to do with built-in Rails security - and I like not being dependent on external code, I&amp;rsquo;ll show a way to do this.  In this case, assume that the accounts are already created (or not).&lt;/p&gt;
&lt;p&gt;If you want to do user registration, confirmation, etc &amp;ndash; then I think it is best to use Devise or some other gem!&lt;/p&gt;
&lt;h3 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h3&gt;
&lt;p&gt;Code repo is posted at: 
&lt;a href=&#34;https://github.com/btihen/magic_token&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/btihen/magic_token&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Create a Rails Project:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails new magic_token
cd magic_token
bin/rails db:create
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now start rails and be sure you get the welcome page at:
&lt;code&gt;http://localhost:3000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Assuming all works well:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;initial commit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-a-landing-page&#34;&gt;Create a Landing Page&lt;/h3&gt;
&lt;p&gt;We will now make a landing page (it will need to be always available):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails g controller landing index --helper false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now lets point the root page to that too - make the routes page look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/routes.rb
Rails.application.routes.draw do
  get &#39;/landing&#39;, to: &#39;landing#index&#39;, as: :landing
  root to: &amp;quot;landing#index&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets check all is well with the routes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails routes | grep landing
# should show
  landing   GET   /landing(:format)   landing#index
     root   GET   /                   landing#index
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(quite likely it will be all spread out)&lt;/p&gt;
&lt;p&gt;Start up rails and be sure we can access these pages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http://localhost:3000/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://localhost:3000/landing&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Feel free to make them look nicer!&lt;/p&gt;
&lt;p&gt;assuming all works well:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;add landing page&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-users-management-page&#34;&gt;Create Users Management Page&lt;/h3&gt;
&lt;p&gt;User-Controller to manage users:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails g scaffold User email:string token:string token_expires_at:datetime --helper false
bin/rails db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets make a few accounts in the seed file (or enter in the console &lt;code&gt;bin/rails c&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/seeds.rb
User.create(email: &#39;test1@test.ch&#39;)
User.create(email: &#39;test2@test.ch&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now run the seed file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:seed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets start Rails&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Go to: &lt;code&gt;http://localhost:3000/users&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now you should see the users &amp;amp; be able to create a few more users.&lt;/p&gt;
&lt;p&gt;Feel free to make the GUI nicer!&lt;/p&gt;
&lt;p&gt;Assuming all is good:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;user management page&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;add-auth-restrictions-to-application-controller&#34;&gt;Add auth restrictions to Application Controller&lt;/h3&gt;
&lt;p&gt;This will allow us to control access to all urls within our app (we will also allow exceptions for a landing page)&lt;/p&gt;
&lt;p&gt;The application controller ensures only authenticated users (with a session) can access pages - with the following code (especially the &lt;code&gt;users_only&lt;/code&gt;, but current_user is also very helpful generally)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/application_controller.rb
class ApplicationController &amp;lt; ActionController::Base
  before_action :users_only

  def current_user
    # `dig` and `find_by` avoid raising an exception w/o a session
    user_id = session.dig(:user_id)
    @current_user ||= User.find_by(id: user_id)
  end

  private

  # code to ensure only logged in users have access to users pages
  def users_only
    if current_user.blank?
      # send to login page to get an access link
      redirect_back(fallback_location: landing_path,
                    :alert =&amp;gt; &amp;quot;Login Required&amp;quot;)
      # # uncomment to send people access link page (when built)
      # redirect_back(fallback_location: new_login_path,
      #               :alert =&amp;gt; &amp;quot;Login Required&amp;quot;)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we should NOT be able to reach our previous pages&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://localhost:3000/&lt;/code&gt;
&lt;code&gt;http://localhost:3000/users&lt;/code&gt;
&lt;code&gt;http://localhost:3000/landing&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now lets allow access to the landing page again - we need to add:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;skip_before_action :users_only&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;to &lt;code&gt;app/controllers/landing_controller.rb&lt;/code&gt; in order to allow unathenticated access.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/landing_controller.rb
class LandingController &amp;lt; ApplicationController
  skip_before_action :users_only
  def index
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming that works:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;restrict access w/exception&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-a-users-homepage&#34;&gt;Create a Users Homepage&lt;/h3&gt;
&lt;p&gt;Now that we have a public home / default page - lets make an authenticed (user) homepage - where we auto-redirect people on login.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails g controller home index --helper false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the routes page with the following (I&amp;rsquo;m not a fan of including the &lt;code&gt;index&lt;/code&gt; in the url)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/routes.rb
Rails.application.routes.draw do
  get &#39;/home&#39;,    to: &#39;home#index&#39;,     as: :home
  resources :users
  get &#39;/landing&#39;, to: &#39;landing#index&#39;,  as: :landing
  root to: &amp;quot;landing#index&amp;quot;
end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets check all is well with the routes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails routes | grep home
# should show
  home  GET   /home(:format)    home#index
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming the routes are correct when we try to go to:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://localhost:3000/home&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;we should end up at (be redirected to):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://localhost:3000/landing&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;assuming this works well:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;restricted user home page&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;optional---setup-a-mail-trap-mailhog&#34;&gt;Optional - setup a mail trap (MailHog)&lt;/h3&gt;
&lt;p&gt;I like to view the emails in a browser to check the look as well as the content, for this quick blog - just viewing the info in the logs is good enough.  However, in case you are interested a quick mini MailHog tutorial (for a Mac):&lt;/p&gt;
&lt;p&gt;Install mailhog:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install mailhog
mailhog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now open &lt;code&gt;config/environments/development.rb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and add the following mail settings (for development):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/environments/development.rb
Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.
  # ...
  # mailhog config
  config.action_mailer.perform_deliveries = true
  config.action_mailer.smtp_settings = { address: &#39;localhost&#39;, port: 1025 }
  # ...
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;at this point you will be able to go to: &lt;code&gt;http://localhost:8025/&lt;/code&gt; and you should see a webpage that looks like a simple mailreader.  In the future, when you send an email from rails it should be available here.&lt;/p&gt;
&lt;h3 id=&#34;create-an-emailer-to-send-access-links&#34;&gt;Create an emailer to send Access-Links&lt;/h3&gt;
&lt;p&gt;We need a way to send the login link - so we will create a login mailer with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails generate mailer Login send_link --helper false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Configure our emailer for our needs to send the login link:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/mailer/login_mailer.rb
class LoginMailer &amp;lt; ApplicationMailer
  def send_link(user, login_url)
    @user = user
    @login_url  = login_url
    host = Rails.application.config.hosts.first

    mail(to: @user.email, subject: &amp;quot;Access-Link for #{host}&amp;quot;)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to create the mailer views to send the url with the access token&lt;/p&gt;
&lt;p&gt;The HTML view:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/login_mailer/send_link.html.erb
&amp;lt;h1&amp;gt;Hi &amp;lt;%= @user.email %&amp;gt;,&amp;lt;/h1&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;&amp;lt;%= @login_url %&amp;gt;&amp;quot;&amp;gt;Access-Link for &amp;lt;%= @host %&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt; &amp;lt;%= @login_url %&amp;gt; &amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;Link is valid for about an hour from &amp;lt;%= DateTime.now %&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The text view:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/login_mailer/send_link.text.erb
Hi &amp;lt;%= @user.email %&amp;gt;,

Access-Link for &amp;lt;%= @host %&amp;gt; is:

&amp;lt;%= @login_url %&amp;gt;

Link is valid for about an hour from &amp;lt;%= DateTime.now %&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again feel free to make these pages more beautiful with CSS (Bulma or Tailwind are my favorites)&lt;/p&gt;
&lt;p&gt;Lets test our mailer with the rail console:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;bin/rails c

# for testing we don&#39;t care much which user we pick
user = User.first
# we will just send a &#39;fake url&#39; - we are just testing our mail sending
url  = &amp;quot;http://localhost:3000/landing&amp;quot;

# we should should now be able to send the mail with:
LoginMailer.send_link(user, url).deliver_later
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you should be able to see that the mail was send from the console output or by going to: &lt;code&gt;http://localhost:8025/&lt;/code&gt; if you are running mailhog and see the email sent.&lt;/p&gt;
&lt;p&gt;Assuming that work:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;Login URL mailer&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-an-session-authorization-controller&#34;&gt;Create an Session Authorization Controller&lt;/h3&gt;
&lt;p&gt;For the session controller we don&amp;rsquo;t need views or anything else so we can just create the controller file directly.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;touch app/controllers/sessions_controller.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class SessionsController &amp;lt; ApplicationController
  skip_before_action :users_only, only: :create

  def create
    token = params[:token].to_s
    # find the user with a matching token and with current-time &amp;lt; token_expired_at
    user = User.where(token: token)
               .where(&#39;users.token_expires_at &amp;gt; (?)&#39;, DateTime.now)
               .first
    if user
      # create the session id for current_user to access
      session[:user_id] = user.id
      # send the user to their homepage (or where erver you prefer)
      redirect_to(home_path, notice: &amp;quot;Welcome back #{user.name}&amp;quot;)
    else
      flash[:alert] = &#39;Oops - a valid login link is required&#39;
      redirect_to(landing_path)
      # when the login request page is built it might make sense to redirect to:
      # redirect_to(new_login_path)
    end
  end

  # allow a user to logout / destroy session if desired
  def destroy
    user = current_user
    if user
      session[:user_id] = nil
      flash[:notice] = &amp;quot;logout successful&amp;quot;
    else
      falsh[:alert] = &amp;quot;Oops, there was a problem&amp;quot;
    end
    redirect_to(landing_path)
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add to routes (I am using a get for the create instead of a post verb - since I don&amp;rsquo;t know of a way to make a text url embed a post verb) - so we will add:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  get &#39;/sessions/:token&#39;, to: &#39;sessions#create&#39;,  as: :create_session
  resources :sessions,    only: [:destroy]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to the routes file:&lt;/p&gt;
&lt;p&gt;Now the routes should look something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/routes.rb
Rails.application.routes.draw do
  # use get to create since I don&#39;t think a text url can create a post
  get &#39;/sessions/:token&#39;, to: &#39;sessions#create&#39;,  as: :create_session
  resources :sessions,    only: [:destroy]
  get &#39;/home&#39;,    to: &#39;home#index&#39;,     as: :home
  resources :users
  get &#39;/landing&#39;, to: &#39;landing#index&#39;,  as: :landing
  root to: &amp;quot;landing#index&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now if we check the session routes we should see something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails routes | grep session
  create_session    GET     /sessions/:token(.:format)   sessions#create
         session    DELETE  /sessions/:id(.:format)      sessions#destroy
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;OPTIONAL:&lt;/strong&gt; by default rails sessions have no expiration, thus are deleted when the browser closes. To change this default behavior, we need to create the file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;touch config/initializers/session_store.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can set the session length (time until a new login is required) with the setting:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/session_store.rb
Rails.application.config.session_store :cookie_store, expire_after: 14.days
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you might want to use 2 weeks or 4 weeks - whatever you and your users are comfortable with before forcing a new login (if unsure - go with a shorter time-frame)&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s setup a user with a known valid token and test our new session controller:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;bin/rails c

user = User.first
# the token length isn&#39;t so important but should be enough to make guessing very hard
user.token = SecureRandom.hex(50)  # be sure to use a url-safe random-generator
# expiration time should be relatively short - email is generally not encrypted
user.token_expires_at = DateTime.now + 1.hour
user.save
user.reload

# generate the URL for the session path
# (we need to give the full rails path to the url_helpers since we don&#39;t have the controller loaded)
url = Rails.application.routes.url_helpers.create_session_url(token: user.token, host: &#39;localhost:3000&#39;)

# copy the above url into the browser
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when we enter the url generated in the email (or click on the link in mailhog), we should be redirected to the &amp;ldquo;home&amp;rdquo; page &lt;code&gt;http://localhost:3000/home&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Assumeing that works:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;session controller (login)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;access-link-generation&#34;&gt;Access-Link Generation&lt;/h3&gt;
&lt;p&gt;We will need to allow the user to request an access-link.&lt;/p&gt;
&lt;h4 id=&#34;login-controller&#34;&gt;Login Controller&lt;/h4&gt;
&lt;p&gt;Now lets create a user login controller:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails g controller Logins new create --helper false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need the Logins Controller login AND be sure to add&lt;/p&gt;
&lt;p&gt;&lt;code&gt;skip_before_action :users_only&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;so this page is always available!&lt;/p&gt;
&lt;p&gt;Also note the code is similar to what we entered previously in the console.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/users/logins_controller.rb
class LoginsController &amp;lt; ApplicationController
  # we need to skip the users only check so this pages can be accessed
  skip_before_action :users_only

  def new
    user = User.new
    render :new, locals: {user: user}
  end

  def create
    email = user_params[:email]

    # we may or may not find a user
    user = User.find_by(email: email)

    # always take the time to calculate token info (discourages email fishing)
    token = SecureRandom.hex(50)
    # besure to use NOW and not NEW!
    token_expires_at = DateTime.now + 1.hour
    token_params = {token: token, token_expires_at: token_expires_at}

    # if we have a user and the update is successful
    if user &amp;amp;&amp;amp; user.update(token_params)
      access_url = create_session_url(token: user.token)
      LoginMailer.send_link(user, access_url).deliver_later
    end

    # # uncomment to add noise to discourage response time monitoring
    # # in order to mine user emails
    # mini_wait = Random.new.rand(10..20) / 1000
    # wait(mini_wait)

    # true or not we state we have sent an access link and redirect to the landing page
    # also prevent email fishing by always returning the same answer
    redirect_to(landing_path, notice: &amp;quot;Access-Link has been sent&amp;quot;)
  end

  private
    # Only allow a list of trusted parameters through.
    def user_params
      params.require(:user).permit(:email)
    end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;  In real projects I tend to put all my business logic in a &lt;code&gt;command&lt;/code&gt; or &lt;code&gt;service&lt;/code&gt; class &amp;ndash; I like skinny models and skinny controllers)&lt;/p&gt;
&lt;p&gt;We need to add the route to the users login_controller with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/routes.rb
Rails.application.routes.draw do
  resources :logins,      only: [:new, :create]
  # use get to create since I don&#39;t think a text url can create a post
  get &#39;/sessions/:token&#39;, to: &#39;sessions#create&#39;,  as: :create_session
  resources :sessions,    only: [:destroy]
  get &#39;/home&#39;,    to: &#39;home#index&#39;,     as: :home
  resources :users
  get &#39;/landing&#39;, to: &#39;landing#index&#39;,  as: :landing
  root to: &amp;quot;landing#index&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now check the routes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails routes | grep logins
# should return
     logins   POST  /logins(.:format)       logins#create
  new_login   GET   /logins/new(.:format)   logins#new
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets go to the new page &lt;code&gt;http://localhost:3000/logins/new&lt;/code&gt; and be sure that we can get access that page.&lt;/p&gt;
&lt;p&gt;Now login into the console and check the user attributes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;bin/rails c
user = User.find_by(email: &#39;test1.test.ch&#39;) # or whatever email you used
user.token # be sure it updated with the same key as in the logs
user.token_expires_at # should be an hour into the future
# if the date is the year 0000 - then you used .new (with an `e`) instead of .now
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming this works:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;login controller&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;login-form&#34;&gt;Login Form&lt;/h4&gt;
&lt;p&gt;Login email form - we only need &lt;code&gt;app/views/logins/new.html.erb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We can delete &lt;code&gt;app/views/logins/create.html.erb&lt;/code&gt; as that just posts to an action and then redirects to our user&amp;rsquo;s home_path&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/ogins/new.html.erb
&amp;lt;%= form_for(user, local: true,
             url: logins_path, # NEW MUST BE PLURAL for POST
             id: &amp;quot;login-form&amp;quot;, class: &amp;quot;user&amp;quot; ) do |form|  %&amp;gt;

  &amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
    &amp;lt;label class=&amp;quot;label&amp;quot;&amp;gt;Email for Access-Link&amp;lt;/label&amp;gt;
    &amp;lt;div class=&amp;quot;control&amp;quot;&amp;gt;
      &amp;lt;%= form.email_field :email,
                            placeholder: &amp;quot;Email&amp;quot;,
                            class: &#39;input&#39; %&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;p class=&amp;quot;help&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;control&amp;quot;&amp;gt;
    &amp;lt;%= form.submit(&amp;quot;Get Access-Link&amp;quot;, class: &amp;quot;button is-success&amp;quot;) %&amp;gt;
  &amp;lt;/div&amp;gt;

&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;PS - I dislike using instance variables (and often use &amp;lsquo;input&amp;rsquo; classes) with my forms - this is why this form looks a little different than standard rails.&lt;/p&gt;
&lt;p&gt;Note I often use Bulma - so here is how I like to format my forms (without Bulma installed the form will be ugly).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s test this code:&lt;/p&gt;
&lt;p&gt;First:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;go to: &lt;code&gt;http:localhost:3000/home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;hopefully your are redirected to: &lt;code&gt;http:localhost:3000/landing&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;go to: &lt;code&gt;http:localhost:3000/logins/new&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;enter a user&amp;rsquo;s email address&lt;/li&gt;
&lt;li&gt;find the login url generated in the email&lt;/li&gt;
&lt;li&gt;enter that login_url in the browser - (ideally click on the link in mailhog - much like a &amp;lsquo;real user&amp;rsquo; would do)&lt;/li&gt;
&lt;li&gt;hopefully you are now redirected to &lt;code&gt;http:localhost:3000/home&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Assuming this works:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;login form and create action with redirect&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;s
Code Repository is at:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rails GlobalID&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The nice thing about these is that the auto expire - simplifying the code and the usermodel.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/rails/globalid&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/rails/globalid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.magicalruby.com/implementing-magic-links-in-rails/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.magicalruby.com/implementing-magic-links-in-rails/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Token using SecureRandom&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With these you need to create your own expiration and lookup system (more code add a migration), but will work with any framework.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(using uuids) - 
&lt;a href=&#34;https://oozou.com/blog/how-to-implement-passwordless-authentication-in-ruby-on-rails-154&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://oozou.com/blog/how-to-implement-passwordless-authentication-in-ruby-on-rails-154&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(using SecureRandom) - 
&lt;a href=&#34;https://abevoelker.com/skipping-the-database-with-stateless-tokens-a-hidden-rails-gem-and-a-useful-web-technique/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://abevoelker.com/skipping-the-database-with-stateless-tokens-a-hidden-rails-gem-and-a-useful-web-technique/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Devise Options&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Devise Plugin - 
&lt;a href=&#34;https://github.com/abevoelker/devise-passwordless&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/abevoelker/devise-passwordless&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Do it Yourself Devise - 
&lt;a href=&#34;https://dev.to/matiascarpintini/magic-links-with-ruby-on-rails-and-devise-4e3o&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dev.to/matiascarpintini/magic-links-with-ruby-on-rails-and-devise-4e3o&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Do it yourself Devise - 
&lt;a href=&#34;https://www.mintbit.com/blog/passwordless-authentication-in-ruby-on-rails-with-devise&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.mintbit.com/blog/passwordless-authentication-in-ruby-on-rails-with-devise&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Other Options&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;passwordless gem - 
&lt;a href=&#34;https://github.com/mikker/passwordless#token-and-session-expiry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/mikker/passwordless#token-and-session-expiry&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;magic-link gem - 
&lt;a href=&#34;https://github.com/dvanderbeek/magic-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/dvanderbeek/magic-link&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using Sorcery - 
&lt;a href=&#34;https://fullstackheroes.com/rails/sorcery-passwordless-authentication/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://fullstackheroes.com/rails/sorcery-passwordless-authentication/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using Sourcery - 
&lt;a href=&#34;https://www.sitepoint.com/magical-authentication-sorcery/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.sitepoint.com/magical-authentication-sorcery/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(using JWTs) - 
&lt;a href=&#34;https://blog.kiprosh.com/implement-passwordless-authentication-via-magic-link-in-rails-api/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.kiprosh.com/implement-passwordless-authentication-via-magic-link-in-rails-api/&lt;/a&gt;
&lt;strong&gt;Passwordless Security Overview&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://abevoelker.com/skipping-the-database-with-stateless-tokens-a-hidden-rails-gem-and-a-useful-web-technique/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://abevoelker.com/skipping-the-database-with-stateless-tokens-a-hidden-rails-gem-and-a-useful-web-technique/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Sessions&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://api.rubyonrails.org/classes/ActionDispatch/Session/CookieStore.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://api.rubyonrails.org/classes/ActionDispatch/Session/CookieStore.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://blog.saeloun.com/2019/09/12/rails-6-adds-dig-to-actiondispatch-request-session.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.saeloun.com/2019/09/12/rails-6-adds-dig-to-actiondispatch-request-session.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Rails 6.x&#43; Auth with MagicLinks using Rails Signed GlobalIDs</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_x_auth_w_magic_links_using_signed_global_id/</link>
      <pubDate>Sun, 19 Sep 2021 01:36:55 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_x_auth_w_magic_links_using_signed_global_id/</guid>
      <description>&lt;p&gt;Passwordless Authentication is very convenient for users and generally as secure as passwords (a good security authentication discussion can be found at: ).&lt;/p&gt;
&lt;p&gt;A good approach is to make a short-lived link, and then transfer the security to a session.&lt;/p&gt;
&lt;p&gt;I found that there seems to be three simple approaches:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Do it yourself: with a Stored-Token (with an expiration date-time)&lt;/li&gt;
&lt;li&gt;Do it yourself: with a Signed-GlobalID from Rails (self-times out &amp;amp; no stored tokens)&lt;/li&gt;
&lt;li&gt;Other Options: other Gems for Devise, Sorcery, or independent gems&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;User enters their email-address in a simple form&lt;/li&gt;
&lt;li&gt;If account is found - a link with a token is generated and email is sent&lt;/li&gt;
&lt;li&gt;User is notified that the link is on its way (even if the account is not found and no email is sent)&lt;/li&gt;
&lt;li&gt;When the user follows the link in the email, a session is generated&lt;/li&gt;
&lt;li&gt;Session valid until the session expires or the user logs out (deleting the session).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; User accounts are assumed to be previously created, and verified.  If you need a full set of features - then your best option is probably to use devise, sorcery or authenticate and use an extension or build your own extension to one of these libraries.  Either way, this article will clarify the basics of passwordless authentication.&lt;/p&gt;
&lt;h3 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h3&gt;
&lt;p&gt;Code Repo is posted at: 
&lt;a href=&#34;https://github.com/btihen/magic_sgid&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/btihen/magic_sgid&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Create a Rails Project&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails new magic_id
cd magic_id
git add .
git commit -m &amp;quot;initial commit on creation&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;User-Controller to manage users:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:create
bin/rails g scaffold User name:string email:string
bin/rails db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets start Rails&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Go to: &lt;code&gt;http://localhost:3000/users&lt;/code&gt; and create a few users - feel free to make the GUI nicer!&lt;/p&gt;
&lt;p&gt;Assuming all is good:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit &amp;quot;user management scaffold&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-a-landing-page&#34;&gt;Create a Landing Page&lt;/h3&gt;
&lt;p&gt;we need a landing / root page to send users when they are not logged in:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails g controller landing index
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now lets point the root page to that too - make the routes page look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/routes.rb
Rails.application.routes.draw do
  get &#39;/landing&#39;, to: &#39;landing#index&#39;, as: :landing
  root to: &amp;quot;landing#index&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I will also remove: &lt;code&gt;app/helpers/landing_helper.rb&lt;/code&gt; with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rm app/helpers/landing_helper.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets check all is well with the routes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails routes | grep landing
# should show
  landing GET /landing(:format) landing#index
     root GET /                 landing#index
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(quite likely it will be all spread out)&lt;/p&gt;
&lt;p&gt;Now the following pages should be available:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http://localhost:3000/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://localhost:3000/landing&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;again feel free to make them look nice.&lt;/p&gt;
&lt;p&gt;assuming all works well:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;create landing page and landing &amp;amp; root route&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-a-user-application-controller-restrict-access&#34;&gt;Create a User Application Controller (restrict access)&lt;/h3&gt;
&lt;p&gt;This will allow us to control access to all urls in the /users paths within our app&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir app/controllers/users
touch app/controllers/users/application_controller.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The application controller ensures only authenticated users (with a session) can access pages in the &lt;code&gt;users&lt;/code&gt; area:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/users/application_controller.rb
class Users::ApplicationController &amp;lt; ApplicationController
  before_action :users_only

  def current_user(user_id = session[:user_id])
    # `try` and `find_by` avoid raising an exception w/o a session
    @current_user ||= User.find_by(id: user_id)
  end

  private

  # code to ensure only logged in users have access to users pages
  def users_only
    # send person to a safe page if not logged in
    if current_user.blank?
      # send to login page to get an access link
      redirect_back(fallback_location: landing_path,
                    :alert =&amp;gt; &amp;quot;Login Required&amp;quot;)
      # once the below page is created we can redirect to here instead
      # redirect_back(fallback_location: new_users_login_path,
      #               :alert =&amp;gt; &amp;quot;Login Required&amp;quot;)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE: if you want all pages protected then put this code in:
&lt;code&gt;app/controllers/application_controller.rb&lt;/code&gt;
and adjust the routes (remove the namespace)!&lt;/p&gt;
&lt;h3 id=&#34;restricted-user-home-page&#34;&gt;Restricted User Home Page&lt;/h3&gt;
&lt;p&gt;we need a landing / root page to send users when they are not logged in:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails g controller users/landing index
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now lets point the root page to that too - make the routes page look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/routes.rb
Rails.application.routes.draw do
  namespace :users do
    get &#39;/&#39;,                as: &#39;root&#39;,         to: &#39;home#index&#39;
    get &#39;/home&#39;,            as: &#39;home&#39;,         to: &#39;home#index&#39;
  end
  get &#39;/landing&#39;, to: &#39;landing#index&#39;, as: :landing
  root to: &amp;quot;landing#index&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Update the controller to use the Users::ApplicationController:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/users/home_controller.rb
class Users::HomeController &amp;lt; Users::ApplicationController
  def index
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I will also remove: &lt;code&gt;app/helpers/users/home_helper.rb&lt;/code&gt; with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rm app/helpers/users/home_helper.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets check all is well with the routes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails routes | grep user
# should show
  users_home GET /users/home(:format) home#index
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(quite likely it will be all spread out)&lt;/p&gt;
&lt;p&gt;Now the following pages should NOT be available:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http://localhost:3000/users&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://localhost:3000/users/home&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and we should be redirected to the landing page.  If you access the home page - then probably the first line is wrong it should be:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Users::HomeController &amp;lt; Users::ApplicationController&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;assuming all works well:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;create restricted user home page&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-an-session-authorization-controller&#34;&gt;Create an Session Authorization Controller&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;touch app/controllers/users/sessions_controller.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Users::SessionsController &amp;lt; Users::ApplicationController
  # before_action :users_only, only: :destroy
  skip_before_action :users_only, only: :create

  def create
    sgid_token = params[:token].to_s
    user = GlobalID::Locator.locate_signed(sgid_token, for: &#39;user_access&#39;)
    if user
      # create the session id for current_user to access
      session[:user_id] = user.id
      redirect_to(users_home_path, notice: &amp;quot;Welcome back #{user.name}&amp;quot;)
    else
      flash[:alert] = &#39;Oops - you need a new login link&#39;
      redirect_to(landing_path)
      # later when created we will redirect to login access link page
      # redirect_to(new_users_login)
    end
  end

  # allow a user to logout / destroy session if desired
  def destroy
    user = current_user
    if user
      session[:user_id] = nil
      flash[:notice] = &amp;quot;logout successful&amp;quot;
    else
      falsh[:alert] = &amp;quot;Oops, there was a problem&amp;quot;
    end
    redirect_to(landing_path)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add to routes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/routes.rb
Rails.application.routes.draw do
  namespace :users do
    get &#39;/&#39;,                as: &#39;root&#39;,         to: &#39;home#index&#39;
    get &#39;/home&#39;,            as: &#39;home&#39;,         to: &#39;home#index&#39;
    # use get to create since I don&#39;t think a text url can create a post
    get &#39;/sessions/:token&#39;, as: &#39;session_create&#39;, to: &#39;sessions#create&#39;
    # allow logout / destroy the session
    resources :sessions,    only: [:destroy]
  end
  get &#39;/landing&#39;, to: &#39;landing#index&#39;, as: :landing
  root to: &amp;quot;landing#index&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To test this go to rails console:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;bin/rails c
# create our own token
user = User.first
global_id = User.find(user.id).to_sgid(expires_in: 1.hour, for: &#39;user_access&#39;)
access_token = global_id.to_s

# check that this global_id works (we should get the same user)
GlobalID::Locator.locate_signed(access_token, for: &#39;user_access&#39;)

# add url helpers to console
include ActionView::Helpers
include ActionView::Helpers::UrlHelper
# generate the URL for the session
Rails.application.routes.url_helpers.users_session_create_url(token: global_id.to_s, host: &#39;locahost:3000&#39;)
# should get something like:
# &amp;quot;http://locahost:3000/users/sessions/BAh7CEkiCGdpZAY6BkVUSSItZ2lkOi8vbWFnaWMtbGlua3MvVXNlci8xP2V4cGlyZXNfaW49MzYwMAY7AFRJIgxwdXJwb3NlBjsAVEkiEHVzZXJfYWNjZXNzBjsAVEkiD2V4cGlyZXNfYXQGOwBUSSIdMjAyMS0wOS0xOVQxNTozNzo0MS4wNjdaBjsAVA==--c948a0a5ccbae391c7ab9c808677fe41da4cbc28&amp;quot;

# copy this url into the browser
# now we be on: `http://localhost:3000/user/` &amp;amp; `http://localhost:3000/user/home`

# if you try again in an hour it should not work!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; by default rails sessions have no expiration, thus are deleted when the browser closes. To change this default behavior, you can set the session length with the setting:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/session_store.rb
Rails.application.config.session_store :cookie_store, expire_after: 14.days
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming all works:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;session controller gives access to users_home&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;access-link-generation&#34;&gt;Access-Link Generation&lt;/h3&gt;
&lt;p&gt;We will need to allow the user to request an access-link.  We will do this with (we won&amp;rsquo;t be generating any models just a controller and a submission form - scaffold_controller does this for us):&lt;/p&gt;
&lt;h4 id=&#34;create-a-mailer-to-send-access-links&#34;&gt;Create a Mailer to send Access-Links&lt;/h4&gt;
&lt;p&gt;We need a way to send the login link - so we will create a login mailer with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails generate mailer Login send_link
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Configure our emailer for our needs with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class LoginMailer &amp;lt; ApplicationMailer
  def send_link(user, login_url)
    @user = user
    @login_url  = login_url
    host = Rails.application.config.hosts.first

    mail(to: @user.email, subject: &amp;quot;Access-Link for #{host}&amp;quot;)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And of course set up the views that contain the contents of the email:
The HTML Version&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/login_mailer/send_link.html.erb
&amp;lt;h1&amp;gt;Hi &amp;lt;%= @user.name %&amp;gt;,&amp;lt;/h1&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;&amp;lt;%= @login_url %&amp;gt;&amp;quot;&amp;gt;Access-Link for &amp;lt;%= @host %&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt; &amp;lt;%= @login_url %&amp;gt; &amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;Link is valid for about an hour from &amp;lt;%= DateTime.now %&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The text version:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/login_mailer/send_link.text.erb
Hi &amp;lt;%= @user.name %&amp;gt;,

Access-Link for &amp;lt;%= @host %&amp;gt; is:

&amp;lt;%= @login_url %&amp;gt;

Link is valid for about an hour from &amp;lt;%= DateTime.now %&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;setup-mailhog-optional&#34;&gt;Setup Mailhog (OPTIONAL)&lt;/h4&gt;
&lt;p&gt;This is optional - technical testing can be done from the log file - but to see what the email formatting looks like this is VERY HELPFUL.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install mailhog
mailhog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Configure Rails to send emails to port 1025 in development (where mailhog listens)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/environments/development.rb
Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.
  # ...
  # mailhog config
  config.action_mailer.perform_deliveries = true
  config.action_mailer.smtp_settings = { address: &#39;localhost&#39;, port: 1025 }
  # ...
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now open - to view:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;open localhost:8025
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;controller&#34;&gt;Controller&lt;/h4&gt;
&lt;p&gt;Now lets create a user login controller:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;touch app/controllers/users/logins_controller.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add the contents of the controller:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/users/logins_controller.rb
class Users::LoginsController &amp;lt; Users::ApplicationController
skip_before_action :users_only

  def new
    user = User.new
    render :new, locals: {user: user}
  end

  def create
    email = user_params[:email]
    ip_address = request.remote_ip
    # the participant might already exist in our db or possimagic_link_url = participants_session_auth_url(token: participant.login_token)bly a new participant
    user = User.find_by(email: email)

    if user
      # create a signed expiring Rails Global ID - this makes LONG tokens, but browswers can handle it
      # all browsers should handle up to 2000 characters.
      # https://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers
      # https://www.geeksforgeeks.org/maximum-length-of-a-url-in-different-browsers/
      global_id = user.to_sgid(expires_in: 1.hour, for: &#39;user_access&#39;)
      access_url = users_session_create_url(token: global_id.to_s)
      LoginMailer.send_link(user, access_url).deliver_later
    else
      # if user isn&#39;t found then grab a user and compute the global_id and url (but don&#39;t send an email)
      # in order to make the time of both paths similar - so people can&#39;t find user emails checking the response times
      # see: https://abevoelker.com/skipping-the-database-with-stateless-tokens-a-hidden-rails-gem-and-a-useful-web-technique/

      global_id = User.first.to_sgid(expires_in: 1.hour, for: &#39;user_access&#39;)
      access_url = user_auth_url(token: global_id.to_s)
    end

    # uncomment to add noise to further make email fishing difficult to time
    # mini_wait = Random.new.rand(10..20) / 1000
    # wait(mini_wait)

    # true or not we state we have sent an access link and redirect to the landing page
    # also prevent email fishing by always returning the same answer
    redirect_to(landing_path, notice: &amp;quot;Access-Link has been sent&amp;quot;)
  end

  private

    # Only allow a list of trusted parameters through.
    def user_params
      params.require(:user).permit(:email)
    end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You can let the GlobalID be valid for however long you want (in hours), but since email isn&amp;rsquo;t very secure, it seems wise to keep this short lived.  The default time is 30.days&lt;/p&gt;
&lt;p&gt;We need to add the route to the users login_controller with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/routes.rb
Rails.application.routes.draw do
  # restricted area (protected by user login - Users::ApplicationController)
  namespace :users do
    get &#39;/&#39;,                as: &#39;root&#39;,         to: &#39;home#index&#39;
    get &#39;/home&#39;,            as: &#39;home&#39;,         to: &#39;home#index&#39;
    # use get to create since I don&#39;t think a text url can create a post
    get &#39;/sessions/:token&#39;, as: &#39;session_create&#39;, to: &#39;sessions#create&#39;
    # allow logout / destroy the session
    resources :sessions,    only: [:destroy]
    # login (generates link and emails to the user)
    resources :logins,      only: [:new, :create]
  end
  get &#39;/landing&#39;, to: &#39;landing#index&#39;, as: :landing
  root to: &amp;quot;landing#index&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now check the routes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails routes | grep users
# should return
     users_logins POST  /users/logins(.:format)     users/logins#create
  new_users_login GET   /users/logins/new(.:format) users/logins#new
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;email--access-link-form&#34;&gt;Email / Access Link form&lt;/h4&gt;
&lt;p&gt;Login email form:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir app/views/users/logins
touch app/views/users/logins/new.html.erb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note I often use Bulma - so here is how I like to format my forms (without Bulma installed the form will be ugly).
Also note, I dislike using instance variables in my form - so this is why the form looks a little extra complicated.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/users/logins/new.html.erb
&amp;lt;%= form_for(user, local: true,
             url: users_logins_path,   # NEW MUST BE PLURAL for POST
             id: &amp;quot;user-login-form&amp;quot;, class: &amp;quot;user&amp;quot; ) do |form|  %&amp;gt;

  &amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
    &amp;lt;label class=&amp;quot;label&amp;quot;&amp;gt;Email for Access-Link&amp;lt;/label&amp;gt;
    &amp;lt;div class=&amp;quot;control&amp;quot;&amp;gt;
      &amp;lt;%= form.email_field :email,
                            placeholder: &amp;quot;Email&amp;quot;,
                            class: &#39;input&#39; %&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;p class=&amp;quot;help&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;control&amp;quot;&amp;gt;
    &amp;lt;%= form.submit(&amp;quot;Get Access-Link&amp;quot;, class: &amp;quot;button is-success&amp;quot;) %&amp;gt;
  &amp;lt;/div&amp;gt;

&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;test-the-full-flow&#34;&gt;Test the full flow&lt;/h2&gt;
&lt;p&gt;using the command line create some users:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;bin/rails c
User.create(email: &amp;quot;tester@test.ch&amp;quot;, name: &amp;quot;Tester&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;start rails with: &lt;code&gt;bin/rails s&lt;/code&gt;
start mailhog with: &lt;code&gt;mailhog&lt;/code&gt;
go to: &lt;code&gt;http://localhost:3000/user/home&lt;/code&gt; (should get redirected to the below URL)
go to: &lt;code&gt;http://localhost:3000/user/logins&lt;/code&gt;
enter the &amp;ldquo;
&lt;a href=&#34;mailto:tester@test.ch&#34;&gt;tester@test.ch&lt;/a&gt;&amp;rdquo; email
Check mailhog for the link &lt;code&gt;http://localhost:8025/&lt;/code&gt;
Click the link you should now be on &lt;code&gt;http://localhost:3000/user/home&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Assuming everything works:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;working magic links using Rails Global ID&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; obviously automated tests are important (both spec and feature tests).&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Rails GlobalID&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The nice thing about these is that the auto expire - simplifying the code a lot.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/rails/globalid&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/rails/globalid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.magicalruby.com/implementing-magic-links-in-rails/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.magicalruby.com/implementing-magic-links-in-rails/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Token using SecureRandom&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With these you need to create your own expiration and lookup system (more code add a migration), but will work with any framework.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(using uuids) - 
&lt;a href=&#34;https://oozou.com/blog/how-to-implement-passwordless-authentication-in-ruby-on-rails-154&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://oozou.com/blog/how-to-implement-passwordless-authentication-in-ruby-on-rails-154&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(using SecureRandom) - 
&lt;a href=&#34;https://abevoelker.com/skipping-the-database-with-stateless-tokens-a-hidden-rails-gem-and-a-useful-web-technique/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://abevoelker.com/skipping-the-database-with-stateless-tokens-a-hidden-rails-gem-and-a-useful-web-technique/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Devise Options&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Devise Plugin - 
&lt;a href=&#34;https://github.com/abevoelker/devise-passwordless&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/abevoelker/devise-passwordless&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Do it Yourself Devise - 
&lt;a href=&#34;https://dev.to/matiascarpintini/magic-links-with-ruby-on-rails-and-devise-4e3o&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dev.to/matiascarpintini/magic-links-with-ruby-on-rails-and-devise-4e3o&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Do it yourself Devise - 
&lt;a href=&#34;https://www.mintbit.com/blog/passwordless-authentication-in-ruby-on-rails-with-devise&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.mintbit.com/blog/passwordless-authentication-in-ruby-on-rails-with-devise&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Other Options&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;passwordless gem - 
&lt;a href=&#34;https://github.com/mikker/passwordless#token-and-session-expiry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/mikker/passwordless#token-and-session-expiry&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;magic-link gem - 
&lt;a href=&#34;https://github.com/dvanderbeek/magic-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/dvanderbeek/magic-link&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using Sorcery - 
&lt;a href=&#34;https://fullstackheroes.com/rails/sorcery-passwordless-authentication/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://fullstackheroes.com/rails/sorcery-passwordless-authentication/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using Sourcery - 
&lt;a href=&#34;https://www.sitepoint.com/magical-authentication-sorcery/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.sitepoint.com/magical-authentication-sorcery/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(using JWTs) - 
&lt;a href=&#34;https://blog.kiprosh.com/implement-passwordless-authentication-via-magic-link-in-rails-api/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.kiprosh.com/implement-passwordless-authentication-via-magic-link-in-rails-api/&lt;/a&gt;
&lt;strong&gt;Passwordless Security Overview&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://abevoelker.com/skipping-the-database-with-stateless-tokens-a-hidden-rails-gem-and-a-useful-web-technique/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://abevoelker.com/skipping-the-database-with-stateless-tokens-a-hidden-rails-gem-and-a-useful-web-technique/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Sessions&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://api.rubyonrails.org/classes/ActionDispatch/Session/CookieStore.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://api.rubyonrails.org/classes/ActionDispatch/Session/CookieStore.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://blog.saeloun.com/2019/09/12/rails-6-adds-dig-to-actiondispatch-request-session.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.saeloun.com/2019/09/12/rails-6-adds-dig-to-actiondispatch-request-session.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Rails 7.0alpha2 Test-drive</title>
      <link>https://btihen.me/post_ruby_rails/rails_7_0_alpha_test_drive/</link>
      <pubDate>Sat, 18 Sep 2021 21:20:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_7_0_alpha_test_drive/</guid>
      <description>&lt;p&gt;I thought it would be fun to test the new alpha version of rails - but I always forget how to do this without upgrading an existing projects.&lt;/p&gt;
&lt;h3 id=&#34;discover-the-rails-pre-release-versions&#34;&gt;Discover the Rails Pre-release versions&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem list rails --remote --prerelease -e
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;ndash;remote - checks the rubygems site - not the locally installed versions
&amp;ndash;prerelease - find pre-release versions
-e - use an exact match (many packages have rails in the name).&lt;/p&gt;
&lt;h3 id=&#34;install-the-rails-alpha-gems&#34;&gt;Install the Rails Alpha Gems&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem install rails --version 7.0.0.alpha2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;this installs a usable local version of rails&lt;/p&gt;
&lt;h3 id=&#34;initailize-a-new-rails-project-with-a-specific-version&#34;&gt;Initailize a new Rails project with a specific version&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails _7.0.0.alpha2_ new magic_links
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now continue as normal!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Squished String Type (Rails 5/6)</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_x_squished_strings_type/</link>
      <pubDate>Thu, 12 Aug 2021 01:11:22 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_x_squished_strings_type/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://discuss.rubyonrails.org/t/database-fields-are-polluted-with-both-nil-and-empty-values-when-submitting-forms/74877/3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://discuss.rubyonrails.org/t/database-fields-are-polluted-with-both-nil-and-empty-values-when-submitting-forms/74877/3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://bitbucket.org/tiu/rails-application-template/src/master/rails/lib/types/type/string.rb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://bitbucket.org/tiu/rails-application-template/src/master/rails/lib/types/type/string.rb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/3879680/how-can-i-make-rails-3-localize-my-date-formats/45743846#45743846&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://stackoverflow.com/questions/3879680/how-can-i-make-rails-3-localize-my-date-formats/45743846#45743846&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lets start by making a sample project (without tests -T):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails new task_cards -T
cd task_cards
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will use a generator to create the structures we need and just focus clean inputs.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails g scaffold Card title:string description:text
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets make our attribute types that cleanup string inputs (we will put them in the a new folder we will call &lt;code&gt;types&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir app/types
touch app/types/string_stripped_type.rb
touch app/types/text_trimmed_type.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To make a string type that removes leading, trailing and duplicate spaces we will use the squish method.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/types/string_squished_type.rb
class StringSquishedType &amp;lt; ActiveRecord::Type::String
  # cast the incomming value for Rails
  def cast(value)
    value.to_s.squish
  end

  # convert the data to what the Database expects
  def serialize(value)
    value.to_s
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since text may want to have newlines and other &lt;code&gt;double&lt;/code&gt; spaces we will only remove (&lt;code&gt;trim&lt;/code&gt;) leading and trailing spaces:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/types/text_trimmed_type.rb
class TextTrimmedType &amp;lt; ActiveRecord::Type::String
  # cast the incomming value for Rails
  def cast(value)
    value.to_s.strip
  end

  # convert the data to what the Database expects
  def serialize(value)
    value.to_s
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To simplify our code we will define short names for our new types &amp;ndash; in the &lt;code&gt;config/initializers&lt;/code&gt; folder we will make a new file called &lt;code&gt;types.rb&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;touch config/initializers/attribute_types.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To make a string type that removes leading, trailing and duplicate spaces we will use the squish method.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/attribute_types.rb
ActiveRecord::Type.register(:string_stripped, StringSquishedType)
ActiveRecord::Type.register(:text_trimmed,    TextTrimmedType)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets add our new virutual data types that we will use in our forms to our model:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/card.rb
class Card &amp;lt; ApplicationRecord
  attribute :title_in,       :string_squished
  # attribute :title_in,       StringSquishedType.new
  attribute :description_in. :text_trimmed,   default: &#39;--&#39;
  # attribute :description_in, TextTrimmedType.new, default: &#39;--&#39;

  validate :title_in, presence: true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;a href=&#34;https://bitbucket.org/tiu/rails-application-template/src/master/rails/lib/types/type/string.rb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://bitbucket.org/tiu/rails-application-template/src/master/rails/lib/types/type/string.rb&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# lib/types/type/string.rb
# frozen_string_literal: true

module Type
  # * +squish+ if true, squish value when casting
  # * +strip+ if true, strip value when casting
  # * +nilify_blank+ if true, set blank value to nil when casting
  class String &amp;lt; ActiveModel::Type::String

    def initialize(precision: nil, limit: nil, scale: nil, strip: false, squish: false, nilify_blank: false)
      @strip = strip
      @squish = squish
      @nilify_blank = nilify_blank
      super(precision: precision, limit: limit, scale: scale)
    end

    def serialize(value)
      super(value)
      apply_options(value)
    end

    private

      def cast_value(value)
        value = super(value)
        apply_options(value)
      end

      def apply_options(value)
        return unless value

        if @squish
          value = value.squish
        elsif @strip
          value = value.strip
        end

        value = nil if @nilify_blank &amp;amp;&amp;amp; value.blank?

        value
      end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;a href=&#34;https://bitbucket.org/tiu/rails-application-template/src/master/rails/lib/types/type/editor_text.rb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://bitbucket.org/tiu/rails-application-template/src/master/rails/lib/types/type/editor_text.rb&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# lib/types/type/editor_text.rb
# frozen_string_literal: true

# Strips out empty spaces that are default on Ckeditor 5
module Type
  class EditorText &amp;lt; ActiveModel::Type::String

    EMPTY_P_TAG_REGEX = %r{\A(&amp;lt;p[^&amp;gt;]*&amp;gt;(\s|&amp;amp;nbsp;|&amp;lt;/?\s?br\s?/?&amp;gt;)*&amp;lt;/?p&amp;gt;)\1*\z}.freeze

    def serialize(value)
      super(value)
      apply_options(value)
    end

    private

      def cast_value(value)
        value = super(value)
        apply_options(value)
      end

      def apply_options(value)
        return if value.nil?

        remove_empty_p_tags(value)
      end

      def remove_empty_p_tags(value)
        value.match?(EMPTY_P_TAG_REGEX) ? nil : value
      end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;a href=&#34;https://bitbucket.org/tiu/rails-application-template/src/master/rails/lib/types/type/token.rb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://bitbucket.org/tiu/rails-application-template/src/master/rails/lib/types/type/token.rb&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# lib/types/type/token.rb
# frozen_string_literal: true

# Represents a user-entered code, like a coupon code, discount code or confirmation number.
# Avoids ambiguous characters that could cause user confusion or apprehension.
module Type
  class Token &amp;lt; ActiveRecord::Type::String

    AMBIGUITIES = [
      %w[B 8],
      %w[D O 0],
      %w[G 6],
      %w[I 1 l],
      %w[S 5],
      %w[Z 2]
    ].flatten.freeze
    CHARACTERS = ([*(&#39;A&#39;..&#39;Z&#39;), *(&#39;0&#39;..&#39;9&#39;)] - AMBIGUITIES).freeze
    LENGTH = 6

    def initialize(precision: nil, limit: nil, scale: nil, length: LENGTH)
      @length = length
      super(precision: precision, limit: limit, scale: scale)
    end

    private

      def cast_value(value)
        if value == :random
          random_number
        elsif value.is_a? ::String
          value = value.upcase
          value if value.chars.all? { |c| c.in? CHARACTERS }
        end
      end

      def random_number
        Array.new(@length) { CHARACTERS.sample }.join
      end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# lib/types/localized_date.rb
# frozen_string_literal: true

# Convert localized date string to Date object. This takes I18n formatted date strings
# (e.g. in form text inputs) and casts them back to Date objects when writing the attribute.
#
# See ActiveModel::Type::Date for original, which attempts to parse the Date string, causing
# the months and days swap if input is in &amp;quot;%m/%d/%Y&amp;quot; format.
#
class LocalizedDate &amp;lt; ActiveRecord::Type::Date

  # Full specifier is: %&amp;lt;flag&amp;gt;&amp;lt;width&amp;gt;&amp;lt;modifier&amp;gt;&amp;lt;conversion&amp;gt;
  FORMAT_STRING_EXPR = /(?&amp;lt;=%)(?&amp;lt;flag&amp;gt;[-_0^#])?(?&amp;lt;width&amp;gt;\d)?/.freeze

  def initialize(format: default_format)
    @format_string = safe_format_string(format)
  end

  # Deserialize db value using Date::DATE_FORMATS[:db]
  def deserialize(value)
    cast_value(value, format: Date::DATE_FORMATS[:db]) unless value.nil?
  end

  private

    def cast_value(value, format: @format_string)
      if value.is_a?(::String)
        return if value.empty?

        Date.strptime(value, format)
      elsif value.respond_to?(:to_date)
        value.to_date
      else
        value
      end
    rescue ArgumentError
      nil
    end

    def default_format
      I18n.translate(&amp;quot;date.formats.default&amp;quot;)
    end

    # Date.strptime doesn&#39;t support flags and width, so remove them.
    # See https://ruby-doc.org/stdlib/libdoc/date/rdoc/Date.html#method-c-strptime
    def safe_format_string(value)
      value.gsub FORMAT_STRING_EXPR, &#39;&#39;
    end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/types.rb
# frozen_string_literal: true

# NOTE: when using custom types with Postgres arrays they must be registered (here) to work.
# When registered, they become a subtype of ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Array
# which handles the array bits before invoking your custom type.
#
#     attribute :links, :link, array: true          # this works, becoming an array subtype
#     attribute :links, Type::Link.new, array: true # this acts like a non-array type
#
# Next, confirm the type with `MyModel.type_for_attribute(:links)`
Dir[Rails.root.join(&#39;lib/types/**/*.rb&#39;)].sort.each { |f| require f }

ActiveRecord::Type.register(:localized_date, LocalizedDate)
ActiveRecord::Type.register(:string, Type::String, override: true)
ActiveRecord::Type.register(:token, Type::Token)

ActiveModel::Type.register(:localized_date, LocalizedDate)
ActiveModel::Type.register(:string, Type::String, override: true)
ActiveModel::Type.register(:token, Type::Token)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/3879680/how-can-i-make-rails-3-localize-my-date-formats/45743846#45743846&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://stackoverflow.com/questions/3879680/how-can-i-make-rails-3-localize-my-date-formats/45743846#45743846&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How Rails Transforms Attributes&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a quick tour of the Rails Attributes API. You can skip this section, but then you won&amp;rsquo;t know how this stuff works. What fun is that?&lt;/p&gt;
&lt;p&gt;Understanding how Rails handles user input for your attribute will let us override only one method instead of making a more complete custom type. It will also help you write better code, since rails&#39; code is pretty good.&lt;/p&gt;
&lt;p&gt;Since you didn&amp;rsquo;t mention a model, I&amp;rsquo;ll assume you have a Post with a :publish_date attribute (some would prefer the name :published_on, but I digress).
What is your type?&lt;/p&gt;
&lt;p&gt;Find out what type :publish_date is. We don&amp;rsquo;t care that it is an instance of Date, we need to know what type_for_attribute returns:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This method is the only valid source of information for anything related to the types of a model&#39;s attributes.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;$ rails c
&amp;gt; post = Post.where.not(publish_date: nil).first
&amp;gt; post.publish_date.class
=&amp;gt; Date
&amp;gt; Post.type_for_attribute(&#39;publish_date&#39;).type
=&amp;gt; :date
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we know the &lt;code&gt;:publish_date&lt;/code&gt; attribute is a &lt;code&gt;:date&lt;/code&gt; type. This is defined by &lt;code&gt;ActiveRecord::Type::Date&lt;/code&gt;, which extends &lt;code&gt;ActiveModel::Type::Date&lt;/code&gt; (ActiveRecord Types are here: 
&lt;a href=&#34;https://api.rubyonrails.org/classes/ActiveRecord/Type.html%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://api.rubyonrails.org/classes/ActiveRecord/Type.html)&lt;/a&gt;, which extends &lt;code&gt;ActiveModel::Type::Value&lt;/code&gt; (ActiveModel Types are here: 
&lt;a href=&#34;https://api.rubyonrails.org/classes/ActiveModel/Type.htmlValue.html%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://api.rubyonrails.org/classes/ActiveModel/Type.htmlValue.html)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;How is user input transformed by &lt;code&gt;ActiveRecord::Type::Date&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;So, when you set &lt;code&gt;:publish_date&lt;/code&gt;, the value is passed to cast, which calls cast_value. Since form input is a String, it will try a &lt;code&gt;fast_string_to_date&lt;/code&gt; then &lt;code&gt;fallback_string_to_date&lt;/code&gt; which uses &lt;code&gt;Date._parse&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re getting lost, don&amp;rsquo;t worry. You don&amp;rsquo;t need to understand rails&#39; code to customize an attribute.
Defining a Custom Type&lt;/p&gt;
&lt;p&gt;Now that we understand how Rails uses the attributes API, we can easily make our own. Just create a custom type to override cast_value to expect localized date strings:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class LocalizedDate &amp;lt; ActiveRecord::Type::Date

  private
    # Convert localized date string to Date object. This takes I18n formatted date strings
    # from user input and casts them back to Date objects.
    def cast_value(value)
      if value.is_a?(::String)
        return if value.empty?
        format = I18n.translate(&amp;quot;date.formats.short&amp;quot;)
        Date.strptime(value, format) rescue nil
      elsif value.respond_to?(:to_date)
        value.to_date
      else
        value
      end
    end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See how I just copied rails&#39; code and made a small tweak. Easy. You might want to improve on this with a call to super and move the :short format to an option or constant.&lt;/p&gt;
&lt;p&gt;Register your type so it can be referenced by a symbol:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/types.rb
ActiveRecord::Type.register(:localized_date, LocalizedDate)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Override the :publish_date type with your custom type:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/post.rb
class Post &amp;lt; ApplicationRecord
  attribute :publish_date, :localized_date
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can use localized values in your form inputs:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/posts/_form.html.erb
&amp;lt;%= form_for(@post) do |f| %&amp;gt;
  &amp;lt;%= f.label :publish_date %&amp;gt;
  &amp;lt;%= f.text_field :publish_date, value: (I18n.localize(value, format: :short) if value.present?) %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Rails 6.x - Framework Agnostic Associations - part 2</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_x_agnostic_associations_3/</link>
      <pubDate>Sun, 30 May 2021 01:57:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_x_agnostic_associations_3/</guid>
      <description>&lt;h2 id=&#34;purpose&#34;&gt;Purpose&lt;/h2&gt;
&lt;p&gt;In the interest of coding Rails in a way to work well with other code bases, I looking at ways to do complex database relations in a framework agnostic way.  In particular, this article will primarily explore Polymorphic Relationships.&lt;/p&gt;
&lt;p&gt;This is the second article in the series.  This article builds on (part 1)[post_ruby_rails/rails_6_x_agnostic_associations_1/]&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;In this case, I want to model a contact list of businesses and people.  Some people will be associated with a company.  Additionally, we will track transactions with each person and business.&lt;/p&gt;
&lt;p&gt;The basic model will then look something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                       âââââââââââââ           âââââââââââââ
                       â           ââ²         â±â           â
      âââââââââââââââââ¼â  Contact  âââââââââââââUserContactâ
      â                â           ââ±         â²â           â
      â                âââââââââââââ           âââââââââââââ
      â                      â¼                      â²ââ±
      â                      â                       â
      â                      â                       â
      â                      â                       â
     â±ââ²                    â±ââ²                      â
âââââââââââââ          âââââââââââââ                 â
â           ââ²         â           â                 â
â Business  âââââââââââ¼â  Person   â                 â
â           ââ±         â           â                 â
âââââââââââââ          âââââââââââââ                 â
     â²ââ±                    â²ââ±                      â
      â                      â                       â
      â                      â                       â
      â                      â                       â
      â                      â¼                      â±ââ²
      â                âââââââââââââ           âââââââââââââ
      â                â           â          â±â           â
      âââââââââââââââââ¼â  Remark   ââ¼âââââââââââ   User    â
                       â           â          â²â           â
                       âââââââââââââ           âââââââââââââ
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;rails-app-and-first-models&#34;&gt;Rails app and first Models&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;    ââââââââââââââ             âââââââââââââ
    â            ââ²          1 â           â
    â  Business  ââââââââââââââ¼â  Person   â
    â-legal_name ââ±0..*        â-full_name â
    ââââââââââââââ             âââââââââââââ
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We discussed/explained in (part 1)[post_ruby_rails/rails_6_x_agnostic_associations_1/]&lt;/p&gt;
&lt;h2 id=&#34;polymorphic-sti---sometime-called-inverse-polymorphic&#34;&gt;Polymorphic (STI) - sometime called inverse polymorphic&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;                   âââââââââââââââ
                   â   Contact   â
                   â  relations* â
                   â+display_nameâ
                   âââââââââââââââ
                          â¼
                          â
          âââââââââââââââââ´âââââââââââââ
          â                            â
         â±ââ²                          â±ââ²
    âââââââââââââââ             âââââââââââââââ
    â  Business   ââ²            â    Person   â
    â -legal_name ââââââââââââââ¼â -full_name  â
    â+display_nameââ±            â+display_nameâ
    âââââââââââââââ             âââââââââââââââ
  + array: supplier, reseller, customer, sales-rep
  * virtual attribute (public method)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We disucssed/explained this in (part 2)[post_ruby_rails/rails_6_x_agnostic_associations_2/]&lt;/p&gt;
&lt;h2 id=&#34;polymorphic-modeling&#34;&gt;Polymorphic Modeling&lt;/h2&gt;
&lt;p&gt;Is a model that can be associated with several different models - serving a similar purpose in all cases.  For example perhaps we would like to leave remarks on our interactions with various other business partners as shown below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;âââââââââââââ          âââââââââââââ
â           ââ²         â           â
â Business  âââââââââââ¼â  Person   â
â           ââ±         â           â
âââââââââââââ          âââââââââââââ
     â²ââ±                    â²ââ±
      â                      â
      â                      â
      â                      â
      â                      â¼
      â                âââââââââââââ           âââââââââââââ
      â                â           â          â±â           â
      âââââââââââââââââ¼â  Remark   ââ¼âââââââââââ   User    â
                       â           â          â²â           â
                       âââââââââââââ           âââââââââââââ
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A Remark could be either associated with either a person or a business - this is called polymorphism.  For ubiquitous things like comments, pictures, etc. this is a common approach.&lt;/p&gt;
&lt;p&gt;The standard rails way - is convenient (only uses 2 columns for any number of models), but lacks a foreign key so the DB can&amp;rsquo;t ensure Data integrity.  For this reason, many other frameworks do not encourage this approach.  So we will use an approach accepted by all frameworks.&lt;/p&gt;
&lt;h3 id=&#34;models-and-relationships&#34;&gt;Models and relationships&lt;/h3&gt;
&lt;p&gt;Lets build the user model first so we have all the models needed by Remark.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;bin/rails g model User email:string:uniq
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s add an email validation to match the DB settings (and case insensitive):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/user.rb
class User &amp;lt; ApplicationRecord
  validates :name, presence: true,
                   uniqueness: { case_sensitive: false }
end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Given the simplicity of this model we can just continue. lets build Remark now.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;bin/rails g model Remark note:text user:references business:references person:references
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Like contact we will need to update the migration to allow null in the Business and Person foreign keys, but not for user.  Then we will update the models too.&lt;/p&gt;
&lt;p&gt;update the migration to ensure we have a note and user, and allow either a business or person associated with each remark:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/migrate/20210530104742_create_remarks.rb
class CreateRemarks &amp;lt; ActiveRecord::Migration[6.1]
  def change
    create_table :remarks do |t|
      t.text :note, null: false

      t.references :business, foreign_key: true
      t.references :person, foreign_key: true
      t.references :user, null: false, foreign_key: true

      t.timestamps
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we will update the User, Business and Person models to know they could have many remarks with &lt;code&gt;has_many :remarks&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/user.rb
class User &amp;lt; ApplicationRecord
  has_many :remarks
  validates :email, presence: true,
                    uniqueness: { case_sensitive: false }
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/person.rb
class Person &amp;lt; ApplicationRecord
  has_one :contact
  has_many :remarks
  belongs_to :business, optional: true

  validates :contact, presence: true
  validates :full_name, presence: true

  def display_name
    full_name
  end

  def employee_count
    nil
  end

  def associated_business_name
    business&amp;amp;.display_name
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/business.rb
class Business &amp;lt; ApplicationRecord
  has_one :contact
  has_many :people
  has_many :remarks

  accepts_nested_attributes_for :contact

  validates :contact, presence: true
  validates :legal_name, presence: true

  def display_name
    legal_name
  end

  def employee_count
    people.count
  end

  def associated_business_name
    &amp;quot;&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the Remark model with the validations to enforce relations:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/remark.rb
class Remark &amp;lt; ApplicationRecord
  belongs_to :user
  belongs_to :person, optional: true
  belongs_to :business, optional: true

  validates :user, presence: true
  validates :note, presence: true
  # validate :validate_remarkable_belongs_to_one_and_only_one_foreign_key

  def remarkable
    business || person
  end

  private

  # exclusive or (XOR) is true if one or the other is true, but both
  # if un-persisted we could get a model w/o an id
  # if persisted we could have a model and an id
  def validate_remarkable_belongs_to_one_and_only_one_foreign_key
    return if (business_id.present? ^ person_id.present?) ||
              (business.present? ^ person.present?)

    # add to base since, some forms may not have the person/business fields
    errors.add :base, &#39;must belong to ONE business or person, but not both&#39;
    # errors.add :remarkable, &#39;must belong to a business or a person&#39;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets be sure this migrates:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets add the following to the end of our seed file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/seed.rb
# We will create a few users
require &#39;securerandom&#39;

10.times do
  username = SecureRandom.alphanumeric(10)  # or use SecureRandom.uuid
  User.create!(email: &amp;quot;#{username}@example.ch&amp;quot;)
end

# Lets add a remark to most People and Business (using a random user)
users = User.all

Person.all.each_with_index do |person, index|
  next if rand(1..3) == 1  # skip one in 3 people

  user = users.sample
  Remark.create!(person: person, user: user,
                note: &amp;quot;some note about #{person.display_name}, by user: #{user.email}&amp;quot;)
end

Business.all.each_with_index do |business, index|
  next if rand(1..4) == 1  # skip one in 4 businesses

  user = users.sample
  Remark.create!(business: business, user: user,
                note: &amp;quot;some note about #{business.display_name}, by user: #{user.email}&amp;quot;)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets check the seed with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:seed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool that works!&lt;/p&gt;
&lt;p&gt;lets snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;polymorphic remark relations created&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;views&#34;&gt;Views&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Comming soon &amp;hellip;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Assuming this works, let&amp;rsquo;s see the &amp;ldquo;/people&amp;rdquo; page:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails s
open localhost:3000/businesses/
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;n1-checks&#34;&gt;N+1 checks&lt;/h3&gt;
&lt;p&gt;Great - lets snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;created an agnostic polymorphic model with data integrity enforced&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;input-forms--building-new-info&#34;&gt;Input Forms (&amp;amp; Building new Info)&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Rails 6.x - Framework Agnostic Associations - part 2</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_x_agnostic_associations_2/</link>
      <pubDate>Sat, 29 May 2021 01:57:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_x_agnostic_associations_2/</guid>
      <description>&lt;h2 id=&#34;purpose&#34;&gt;Purpose&lt;/h2&gt;
&lt;p&gt;In the interest of coding Rails in a way to work well with other code bases, I looking at ways to do complex database relations in a framework agnostic way.  In particular, this article will primarily explore Polymorphic Relationships.&lt;/p&gt;
&lt;p&gt;This is the second article in the series.  This article builds on (part 1)[post_ruby_rails/rails_6_x_agnostic_associations_1/]&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;In this case, I want to model a contact list of businesses and people.  Some people will be associated with a company.  Additionally, we will track transactions with each person and business.&lt;/p&gt;
&lt;p&gt;The basic model will then look something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                       âââââââââââââ           âââââââââââââ
                       â           ââ²         â±â           â
      âââââââââââââââââ¼â  Contact  âââââââââââââUserContactâ
      â                â           ââ±         â²â           â
      â                âââââââââââââ           âââââââââââââ
      â                      â¼                      â²ââ±
      â                      â                       â
      â                      â                       â
      â                      â                       â
     â±ââ²                    â±ââ²                      â
âââââââââââââ          âââââââââââââ                 â
â           ââ²         â           â                 â
â Business  âââââââââââ¼â  Person   â                 â
â           ââ±         â           â                 â
âââââââââââââ          âââââââââââââ                 â
     â²ââ±                    â²ââ±                      â
      â                      â                       â
      â                      â                       â
      â                      â                       â
      â                      â¼                      â±ââ²
      â                âââââââââââââ           âââââââââââââ
      â                â           â          â±â           â
      âââââââââââââââââ¼â  Remark   ââ¼âââââââââââ   User    â
                       â           â          â²â           â
                       âââââââââââââ           âââââââââââââ

                 Created with Monodraw
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;rails-app-and-first-models&#34;&gt;Rails app and first Models&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;    ââââââââââââââ             âââââââââââââ
    â            ââ²          1 â           â
    â  Business  ââââââââââââââ¼â  Person   â
    â-legal_name ââ±0..*        â-full_name â
    ââââââââââââââ             âââââââââââââ
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We discussed / explained in (part 1)[post_ruby_rails/rails_6_x_agnostic_associations_1/]&lt;/p&gt;
&lt;h2 id=&#34;polymorphic-sti---sometime-called-inverse-polymorphic&#34;&gt;Polymorphic (STI) - sometime called inverse polymorphic&lt;/h2&gt;
&lt;p&gt;In this article we will build this structure (a replacement for Rails STI).  Many frameworks will only use columns that can be identified as foreign keys to ensure DB integrity - therefore, we will build this using DB structures that are supported by Rails, Lucky and Phoenix and probably most frameworks.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                   âââââââââââââââ
                   â   Contact   â
                   â  relations* â
                   â+display_nameâ
                   âââââââââââââââ
                          â¼
                          â
          âââââââââââââââââ´âââââââââââââ
          â                            â
         â±ââ²                          â±ââ²
    âââââââââââââââ             âââââââââââââââ
    â  Business   ââ²            â    Person   â
    â -legal_name ââââââââââââââ¼â -full_name  â
    â+display_nameââ±            â+display_nameâ
    âââââââââââââââ             âââââââââââââââ
  + array: supplier, reseller, customer, sales-rep
  * virtual attribute (public method)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A contact could be either a person or a business - but must be one or the other.&lt;/p&gt;
&lt;h3 id=&#34;migration-and-relationships&#34;&gt;Migration and Relationships&lt;/h3&gt;
&lt;p&gt;Rails doesn&amp;rsquo;t have a built-in array migration, so we use string and then we change the migration:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails g scaffold Contact functions:string business:references person:references
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now update the migration to ensure we have a functions as an array &amp;amp; relations as Foreign keys (but optional). Since there we only want/need one of the two foreign_keys at a time they must be nullable and we need to change roles to an array - so now:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/migrate/20210519205042_create_contacts.rb
class CreateContacts &amp;lt; ActiveRecord::Migration[6.1]
  def change
    create_table :contacts do |t|
      t.string :functions, array: true, null: false, default: []
      t.references :business, foreign_key: true
      t.references :person, foreign_key: true

      t.timestamps
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the Contact model with the validations &amp;amp; flexible relations - we also want to be able to refer to the sub-model by one name we will call that &lt;code&gt;contactable&lt;/code&gt; - so now the model will look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/contact.rb
class Contact &amp;lt; ApplicationRecord
  belongs_to :business, optional: true
  belongs_to :person, optional: true

  VALID_FUNCTIONS_LIST = %w(supplier reseller customer sales-rep)

  validate :validate_relationship_functions
  validate :validate_belongs_to_one_and_only_one_foreign_key

  def contactable
    business || person
  end

  private

  # be sure we have the variable, it is an Array &amp;amp; all elements are in the valid list
  def validate_relationship_functions
    return if functions.present? &amp;amp;&amp;amp; functions.is_a?(Array)
              functions.all? { |role| VALID_FUNCTIONS_LIST.include?(role.to_s) }

    errors.add :functions, &amp;quot;must be ONE or MORE of the following options: #{VALID_FUNCTIONS_LIST.join(&#39;,&#39;)}&amp;quot;
  end

  # exclusive or (XOR) is true if one or the other is true, but both
  # if un-persisted we could get a model w/o an id
  # if persisted we could have a model and an id
  def validate_remarkable_belongs_to_one_and_only_one_foreign_key
    return if (business_id.present? ^ person_id.present?) ||
              (business.present? ^ person.present?)

    # add to base since, some forms may not have the person/business fields
    errors.add :base, &#39;must belong to ONE business or person, but not both&#39;
    # errors.add :remarkable, &#39;must belong to a business or a person&#39;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the Person model and relations and enforce every person is a member of the contact list - with a contact role:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/person.rb
class Person &amp;lt; ApplicationRecord
  has_one :contact
  belongs_to :business, optional: true

  validates :contact, presence: true
  validates :full_name, presence: true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the business model and relations and enforce every business is a member of the contact list - with a contact role:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# # app/models/business.rb
class Business &amp;lt; ApplicationRecord
  has_one :contact
  has_many :people

  validates :contact, presence: true
  validates :legal_name, presence: true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets check the seed with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we go to a person or business we can no longer make changes - they need to have an associated Contact.
We&amp;rsquo;ll start by rolling back the last migration and fixing it with (we can use the logic in the seeds to guide us in the Business/Person creation controller):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:rollback
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we need to fix the old relations in the migration (or simply drop the database and reseed it) - but given this is to article is find cross-framework &amp;ndash; &amp;lsquo;real-world&amp;rsquo; techniques - let&amp;rsquo;s be sure the existing records stay useful.  We will assume a business is a supplier, a person associated with a business is a sales-rep, and unassociated people are customers.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/migrate/20210519205042_create_contacts.rb
class CreateContacts &amp;lt; ActiveRecord::Migration[6.1]
  def change
    create_table :contacts do |t|
      t.string :functions, array: true, null: false, default: []
      t.references :business, foreign_key: true
      t.references :person, foreign_key: true

      t.timestamps
    end

    # add a contact for each existing company
    businesses = Business.joins(:people)
                         .group(&#39;businesses.id&#39;)
                         .select(&#39;businesses.*, count(people.id) as people_count&#39;)
    businesses.each do |business|
      functions = if business.people_count &amp;lt; 10
                    [&#39;supplier&#39;]
                  elsif business.people_count &amp;lt; 20
                    [&#39;reseller&#39;]
                  elsif business.people_count &amp;lt; 30
                    [&#39;supplier&#39;, &#39;reseller&#39;]
                  end
      Contact.create!(functions: functions, business: business)
    end

    # add a contact for each existing person
    Person.all.each do |person|
      functions = if person.business
                    [&#39;sales_rep&#39;]
                  else
                    [&#39;customer&#39;]
                  end
      Contact.create!(functions: functions, person: person)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets the existing models now:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OK - we are in business lets update our seed file too:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/seed.rb
# create small business w/o employees
20.times do |num|
  business = Business.create(legal_name: &amp;quot;Business #{num}&amp;quot;,
                             contact: Contact.new(functions: [&#39;supplier&#39;]))
end

# create individuals
20.times do |num|
  person = Person.create(full_name: &amp;quot;Individual #{num}&amp;quot;,
                            contact: Contact.new(functions: [&#39;customer&#39;]))
end

# create big companies with employees
20.times do |bus_num|
  functions = if bus_num &amp;lt; 3
                [&#39;supplier&#39;]
              elsif bus_num&amp;lt; 5
                [&#39;reseller&#39;]
              elsif bus_num &amp;lt; 8
                [&#39;supplier&#39;, &#39;reseller&#39;]
              else
                %w[supplier reseller customer]
              end
  company  = Business.create(legal_name: &amp;quot;Company #{bus_num}&amp;quot;,
                             contact: Contact.new(functions: functions))

  bus_num.times do |emp_num|
    Person.create(full_name: &amp;quot;Employee #{bus_num}-#{emp_num}&amp;quot;,
                  business: company,
                  contact: Contact.new(functions: [&#39;sales-rep&#39;]))
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets check the seed with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:seed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great all works!&lt;/p&gt;
&lt;h3 id=&#34;lets-make-the-index-page-more-useful&#34;&gt;Lets make the index page more useful&lt;/h3&gt;
&lt;p&gt;When we visit the contacts page we would like more than the ids - but we need a unified way to present that info so let&amp;rsquo;s add a display_name so we can show the name of the primary model, if a person we would like to know the associated business if present and if a company we would like the employee_count so we will delegate these to the sub-models.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s update contact first by adding:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  # this references our existing contactable
  delegate :display_name, :associated_business_name, :employee_count,
           to: :contactable

  def contactable
    business || person
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now the contact model will look like (with validations)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/contact.rb
class Contact &amp;lt; ApplicationRecord
  belongs_to :business, optional: true
  belongs_to :person, optional: true

  VALID_FUNCTIONS_LIST = %w(supplier reseller customer sales-rep)

  validate :validate_relationship_functions
  validate :validate_belongs_to_one_and_only_one_foreign_key

  delegate :display_name, :associated_business_name, :employee_count,
           to: :contactable

  def contactable
    business || person
    # would memoize be valuable here?
    # @contactable ||= (business || person)
  end

  private

  # be sure we have the variable, it is an Array &amp;amp; all elements are in the valid list
  def validate_relationship_functions
    return if functions.present? &amp;amp;&amp;amp; functions.is_a?(Array)
              functions.all? { |role| VALID_FUNCTIONS_LIST.include?(role.to_s) }

    errors.add :functions, &amp;quot;must be ONE or MORE of the following options: #{VALID_FUNCTIONS_LIST.join(&#39;,&#39;)}&amp;quot;
  end

  # exclusive or (XOR) is true if one or the other is true, but not when both are true
  # we could get a model (or possibly an id)
  def validate_belongs_to_one_and_only_one_foreign_key
    return if business.present? ^ person.present? ^ business_id.present? ^ person_id.present?

    # add to base since, some forms may not have the person/business fields
    errors.add :base, &#39;must belong to ONE business or person, but not both&#39;
    # errors.add :contactable, &#39;must belong to a business or a person&#39;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets update the models to provide the needed info&lt;/p&gt;
&lt;p&gt;Business now will look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/business.rb
class Business &amp;lt; ApplicationRecord
  has_one :contact
  has_many :people

  validates :contact, presence: true
  validates :legal_name, presence: true

  def display_name
    legal_name
  end

  def employee_count
    people.count
  end

  def associated_business_name
    &amp;quot;&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And person will look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/person.rb
class Person &amp;lt; ApplicationRecord
  has_one :contact
  belongs_to :business, optional: true

  validates :contact, presence: true
  validates :full_name, presence: true

  def display_name
    full_name
  end

  def employee_count
    nil  # person count has no meaning under person
  end

  def associated_business_name
    business&amp;amp;.display_name
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets update the index view to show our new info:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;h1&amp;gt;Contacts&amp;lt;/h1&amp;gt;

&amp;lt;table&amp;gt;
  &amp;lt;thead&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th&amp;gt;Person/Business&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Employee Count&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Contact Name&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Business Name&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Relationships&amp;lt;/th&amp;gt;
      &amp;lt;th colspan=&amp;quot;3&amp;quot;&amp;gt;&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/thead&amp;gt;

  &amp;lt;tbody&amp;gt;
    &amp;lt;% @contacts.each do |contact| %&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= contact.contactable.class.name %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= contact.employee_count %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= contact.display_name %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= contact.associated_business_name %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= contact.functions %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Show&#39;, contact %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Edit&#39;, edit_contact_path(contact) %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Destroy&#39;, contact, method: :delete, data: { confirm: &#39;Are you sure?&#39; } %&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we see another n+1 query - we will fix the main part - but not the employee count this time:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ContactsController &amp;lt; ApplicationController
  def index
    # @contacts = Contact.all
    @contacts = Contact.includes(:business).includes(:person).all
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool now the page is usable (a bit long but we will ignore that)&lt;/p&gt;
&lt;h3 id=&#34;lets-be-sure-we-can-create-new-contacts&#34;&gt;Lets be sure we can create new contacts&lt;/h3&gt;
&lt;p&gt;I usually use an input model (for more flexibility), but for now I will use nested_params.
A few articles on nested params and nested fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=PYYwjTlcoa4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=PYYwjTlcoa4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.pluralsight.com/guides/ruby-on-rails-nested-attributes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.pluralsight.com/guides/ruby-on-rails-nested-attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://levelup.gitconnected.com/rails-nested-forms-in-three-steps-5580f0ad0e&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://levelup.gitconnected.com/rails-nested-forms-in-three-steps-5580f0ad0e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://levelup.gitconnected.com/handling-nested-attributes-with-a-has-many-through-association-with-rails-api-f91729547ea5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://levelup.gitconnected.com/handling-nested-attributes-with-a-has-many-through-association-with-rails-api-f91729547ea5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To start we will tell the contacts model that it can create nested models with do by adding:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  accepts_nested_attributes_for :business
  accepts_nested_attributes_for :person
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;so now now the contact model looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/contact.rb
class Contact &amp;lt; ApplicationRecord
  belongs_to :business, optional: true
  belongs_to :person, optional: true

  accepts_nested_attributes_for :business
  accepts_nested_attributes_for :person

  VALID_FUNCTIONS_LIST = %w(supplier reseller customer sales-rep)

  validate :validate_relationship_functions
  validate :validate_belongs_to_one_and_only_one_foreign_key

  delegate :display_name, :associated_business_name, :employee_count,
           to: :contactable

  def contactable
    business || person
    # would memoize be valuable here?
    # @contactable ||= (business || person)
  end

  private

  # be sure we have the variable, it is an Array &amp;amp; all elements are in the valid list
  def validate_relationship_functions
    return if functions.present? &amp;amp;&amp;amp; functions.is_a?(Array)
              functions.all? { |role| VALID_FUNCTIONS_LIST.include?(role.to_s) }

    errors.add :functions, &amp;quot;must be ONE or MORE of the following options: #{VALID_FUNCTIONS_LIST.join(&#39;,&#39;)}&amp;quot;
  end

  # exclusive or (XOR) is true if one or the other is true, but not when both are true
  # we could get a model (or possibly an id)
  def validate_belongs_to_one_and_only_one_foreign_key
    return if business.present? ^ person.present? ^ business_id.present? ^ person_id.present?

    # add to base since, some forms may not have the person/business fields
    errors.add :base, &#39;must belong to ONE business or person, but not both&#39;
    # errors.add :contactable, &#39;must belong to a business or a person&#39;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the controller we need to create models as part of @contact to allow nested-fields - which feed the nested attributes. to allow the new information in via strong params:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/contacts_controller.rb
  def new
    @contact = Contact.new
    # add empty sub-models for our form
    @contact.person = Person.new
    @contact.business = Business.new
  end

  # update strong params to accept the sub-model attributes
  # sub-models from nested-forms feeding nested_atttributes in the model
  # take the form &amp;lt;model_name&amp;gt;_attributes
  # `functions` is an empty array since it is taking a list of values
  # person_attributes &amp;amp; business_attributes - need to include the list of attributes to accept!
  # so in our case:
  def contact_params
    contact_attribs = params.require(:contact)
                            .permit(functions: [],  # is empty - takes a list of values
                                    person_attributes: [:full_name],  # needs to include the list of attributes to accept
                                    business_attributes: [:legal_name])
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the contact form to tie this all together by adding our nested forms:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  &amp;lt;div class=&amp;quot;field-group&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;Create your Contact: a Person or a Business&amp;lt;/h2&amp;gt;

    &amp;lt;h3&amp;gt;Business&amp;lt;/h3&amp;gt;
    &amp;lt;%= form.fields_for :business, Business.new do |f| %&amp;gt;
      &amp;lt;%= f.label :legal_name %&amp;gt;
      &amp;lt;%= f.text_field :legal_name %&amp;gt;
    &amp;lt;% end %&amp;gt;

    &amp;lt;h3&amp;gt;Person&amp;lt;/h3&amp;gt;
    &amp;lt;%= form.fields_for :person, Person.new do |f| %&amp;gt;
      &amp;lt;%= f.label :full_name %&amp;gt;
      &amp;lt;%= f.text_field :full_name %&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will also need to make the list of possible relationship functions a multi-select - I always forget the format &amp;ndash; so remember BOTH {} are required when using multi-select!!  The first one is for normal drop-down select options &amp;ndash; like include_blank, the second one is where the multi-select must go!&lt;/p&gt;
&lt;p&gt;This looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  &amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
    &amp;lt;%= form.label :functions %&amp;gt;
    &amp;lt;%= form.select :functions,
                    options_for_select(Contact::VALID_FUNCTIONS_LIST,
                                      selected: Contact::VALID_FUNCTIONS_LIST.second),
                                      {}, #{:include_blank =&amp;gt; &#39;None&#39;},
                                      {:multiple =&amp;gt; true, size: 3} %&amp;gt;
  &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;so now the template looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/contacts/_form.html.erb
&amp;lt;%= form_with(model: contact) do |form| %&amp;gt;
  &amp;lt;% if contact.errors.any? %&amp;gt;
  &amp;lt;div id=&amp;quot;error_explanation&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;&amp;lt;%= pluralize(contact.errors.count, &amp;quot;error&amp;quot;) %&amp;gt; prohibited this contact from being saved:&amp;lt;/h2&amp;gt;

    &amp;lt;ul&amp;gt;
      &amp;lt;% contact.errors.each do |error| %&amp;gt;
      &amp;lt;li&amp;gt;&amp;lt;%= error.full_message %&amp;gt;&amp;lt;/li&amp;gt;
      &amp;lt;% end %&amp;gt;
    &amp;lt;/ul&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;% end %&amp;gt;

  &amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
    &amp;lt;%= form.label :functions %&amp;gt;
    &amp;lt;%= form.select :functions,
                    options_for_select(Contact::VALID_FUNCTIONS_LIST,
                                      selected: Contact::VALID_FUNCTIONS_LIST.second),
                                      {}, #{:include_blank =&amp;gt; &#39;None&#39;},
                                      {:multiple =&amp;gt; true, size: 3} %&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;field-group&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;Create your Contact: a Person or a Business&amp;lt;/h2&amp;gt;

    &amp;lt;h3&amp;gt;Business&amp;lt;/h3&amp;gt;
    &amp;lt;%= form.fields_for :business, Business.new do |f| %&amp;gt;
      &amp;lt;%= f.label :legal_name %&amp;gt;
      &amp;lt;%= f.text_field :legal_name %&amp;gt;
    &amp;lt;% end %&amp;gt;

    &amp;lt;h3&amp;gt;Person&amp;lt;/h3&amp;gt;
    &amp;lt;%= form.fields_for :person, Person.new do |f| %&amp;gt;
      &amp;lt;%= f.label :full_name %&amp;gt;
      &amp;lt;%= f.text_field :full_name %&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;actions&amp;quot;&amp;gt;
    &amp;lt;%= form.submit %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when we try &lt;code&gt;/contacts&lt;/code&gt; we notice one more problem - it is always invalid - rails automatically add a leading &amp;quot;&amp;quot; in an array input list :( - so we will have to clean this up in the strong params.  In this case we are working with param objects not a hash so we will do an in-place update (removal of &amp;ldquo;&amp;quot;) using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  contact_attribs[&amp;quot;functions&amp;quot;].reject! {|f| f.blank? }
  contact_attribs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we also need to be sure in our case we only send the params of the business or the person, but not both - since we are only creating one.  So we will remove whichever one is empty - also with an in-place update - using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    # find and set to nil the model without params
    if contact_attribs[&amp;quot;person_attributes&amp;quot;]
      # since we only have one param we can do
      contact_attribs[&amp;quot;person_attributes&amp;quot;] = nil if contact_attribs[&amp;quot;person_attributes&amp;quot;][&amp;quot;full_name&amp;quot;].blank?
    end

    if contact_attribs[&amp;quot;business_attributes&amp;quot;]
      # assuming we had multiple params the test is easier with:
      contact_attribs[&amp;quot;business_attributes&amp;quot;] = nil if contact_attribs[&amp;quot;business_attributes&amp;quot;].to_h.all? {|key,value| value.blank?}
    end

    # remove the nested attributes set to nil so contact will only create the desired associated model
    contact_attribs.reject! {|key, value| value.blank? }
    contact_attribs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now the full controller looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ContactsController &amp;lt; ApplicationController
  before_action :set_contact, only: %i[ show edit update destroy ]

  def index
    # @contacts = Contact.all
    @contacts = Contact.includes(:business).includes(:person).all
  end

  def show
  end

  def new
    @contact = Contact.new
    @contact.person = Person.new
    @contact.business = Business.new
  end

  def edit
  end

  def create
    @contact = Contact.new(contact_params)

    respond_to do |format|
      if @contact.save
        format.html { redirect_to @contact, notice: &amp;quot;Contact was successfully created.&amp;quot; }
        format.json { render :show, status: :created, location: @contact }
      else
        format.html { render :new, status: :unprocessable_entity }
        format.json { render json: @contact.errors, status: :unprocessable_entity }
      end
    end
  end

  def update
    respond_to do |format|
      if @contact.update(contact_params)
        format.html { redirect_to @contact, notice: &amp;quot;Contact was successfully updated.&amp;quot; }
        format.json { render :show, status: :ok, location: @contact }
      else
        format.html { render :edit, status: :unprocessable_entity }
        format.json { render json: @contact.errors, status: :unprocessable_entity }
      end
    end
  end

  def destroy
    @contact.destroy
    respond_to do |format|
      format.html { redirect_to contacts_url, notice: &amp;quot;Contact was successfully destroyed.&amp;quot; }
      format.json { head :no_content }
    end
  end

  private

  # Use callbacks to share common setup or constraints between actions.
  def set_contact
    @contact = Contact.find(params[:id])
  end

  # Only allow a list of trusted parameters through.
  def contact_params
    # update strong params to accept the sub-model attributes
    # sub-models from nested-forms feeding nested_atttributes in the model
    # take the form &amp;lt;model_name&amp;gt;_attributes
    # `functions` is an empty array since it is taking a list of values
    # person_attributes &amp;amp; business_attributes - need to include the list of attributes to accept!
    # so in our case:
    contact_attribs = params.require(:contact)
                            .permit(functions: [],
                                    person_attributes: [:full_name],
                                    business_attributes: [:legal_name])
    # cleanup array - always delivers with [&#39;&#39;] - :(
    # https://stackoverflow.com/questions/51341912/empty-array-value-being-input-with-simple-form-entries

    # easiest way in in-place replacement (given that params is now objects and not a hash), but that always makes me a bit nervous
    # https://stackoverflow.com/questions/20164354/rails-strong-parameters-with-empty-arrays
    # reject and replace in place
    contact_attribs[&amp;quot;functions&amp;quot;].reject! {|f| f.blank? }

    # remove empty model attributes
    # contact_attribs[&amp;quot;person_attributes&amp;quot;].reject {|key,value| value.blank?}
    if contact_attribs[&amp;quot;person_attributes&amp;quot;]
      contact_attribs[&amp;quot;person_attributes&amp;quot;] = nil if contact_attribs[&amp;quot;person_attributes&amp;quot;][&amp;quot;full_name&amp;quot;].blank?
    end

    if contact_attribs[&amp;quot;business_attributes&amp;quot;]
      contact_attribs[&amp;quot;business_attributes&amp;quot;] = nil if contact_attribs[&amp;quot;business_attributes&amp;quot;].to_h.all? {|key,value| value.blank?}
    end

    # have to remove nil attributes for models so nested attributes works correctly
    contact_attribs.reject! {|key, value| value.blank? }

    # return the attributes with the tidied array
    contact_attribs
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now when we try again:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails s
open localhost:3000/contacts/new
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool - it works.  We could now do the same for the &lt;code&gt;/business/new&lt;/code&gt; and &lt;code&gt;/people/new&lt;/code&gt;, but we won&amp;rsquo;t do that here in the article. Lets snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;created person possibly related to the model&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;polymorphic&#34;&gt;Polymorphic&lt;/h2&gt;
&lt;p&gt;In the next article we will explore the following in (part 3)[post_ruby_rails/rails_6_x_agnostic_associations_3/]&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;âââââââââââââ             âââââââââââââ
â           ââ²            â           â
â Business  ââââââââââââââ¼â  Person   â
â           ââ±            â           â
âââââââââââââ             âââââââââââââ
      â¼                         â¼
      â                         â
      ââââââââââââââ¬âââââââââââââ
                   â
                  â±ââ²
             âââââââââââââ
             â           â
             â  Remark   â
             â           â
             âââââââââââââ
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Rails 6.x - Framework Agnostic Associations - part 1</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_x_agnostic_associations_1/</link>
      <pubDate>Wed, 19 May 2021 01:57:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_x_agnostic_associations_1/</guid>
      <description>&lt;h2 id=&#34;purpose&#34;&gt;Purpose&lt;/h2&gt;
&lt;p&gt;In the interest of coding Rails in a way to work well with other code bases, I looking at ways to do complex database relations in a framework agnostic way.  In particular, this article will primarily explore Polymorphic Relationships.&lt;/p&gt;
&lt;p&gt;This is the second article in the series.  This article is followed up with (part 2)[post_ruby_rails/rails_6_x_agnostic_associations_2/]&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;In this case, I want to model a contact list of businesses and people.  Some people will be associated with a company.  Additionally, we will track transactions with each person and business.&lt;/p&gt;
&lt;p&gt;The basic model will then look something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                       âââââââââââââ           âââââââââââââ
                       â           ââ²         â±â           â
      âââââââââââââââââ¼â  Contact  âââââââââââââUserContactâ
      â                â           ââ±         â²â           â
      â                âââââââââââââ           âââââââââââââ
      â                      â¼                      â²ââ±
      â                      â                       â
      â                      â                       â
      â                      â                       â
     â±ââ²                    â±ââ²                      â
âââââââââââââ          âââââââââââââ                 â
â           ââ²         â           â                 â
â Business  âââââââââââ¼â  Person   â                 â
â           ââ±         â           â                 â
âââââââââââââ          âââââââââââââ                 â
     â²ââ±                    â²ââ±                      â
      â                      â                       â
      â                      â                       â
      â                      â                       â
      â                      â¼                      â±ââ²
      â                âââââââââââââ           âââââââââââââ
      â                â           â          â±â           â
      âââââââââââââââââ¼â  Remark   ââ¼âââââââââââ   User    â
                       â           â          â²â           â
                       âââââââââââââ           âââââââââââââ
                    Created with Monodraw
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-default-rails-app&#34;&gt;Create a default Rails app&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails new rails_poly
cd rails_poly
bin/rails db:create
bin/rails db:migrate
git add .
git commit -m &amp;quot;initial commit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;starting-simple---optional-relations&#34;&gt;Starting Simple - optional relations&lt;/h2&gt;
&lt;h3 id=&#34;build-businesses&#34;&gt;Build Businesses&lt;/h3&gt;
&lt;p&gt;Lets start with the simple relationship between businesses and people:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ââââââââââââââ             âââââââââââââ
â            ââ²          1 â           â
â  Business  ââââââââââââââ¼â  Person   â
â-legal_name ââ±0..*        â-full_name â
ââââââââââââââ             âââââââââââââ
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For expedience, I&amp;rsquo;ll use scaffolds:&lt;/p&gt;
&lt;p&gt;Generating a simple business model.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails g scaffold Business legal_name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets adjust the migration to require the business&#39; legal name, by adding &lt;code&gt;null: false&lt;/code&gt; to the name:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/migrate/20210516080420_create_businesses.rb
class CreateBusinesses &amp;lt; ActiveRecord::Migration[6.1]
  def change
    create_table :businesses do |t|
      t.string :legal_name, null: false

      t.timestamps
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we will validate the business&#39; name in the model:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/business.rb
class Business &amp;lt; ApplicationRecord
  validates :legal_name, presence: true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets be sure we can migrate:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;lets use seed to quickly check our models and relations (&amp;amp; get an idea of how to use them):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/seeds.rb
business = Business.create(legal_name: &amp;quot;Business&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets check the seed with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:seed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming this works, let&amp;rsquo;s see the &amp;ldquo;/businesses&amp;rdquo; page:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails s
open localhost:3000/businesses/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great - lets snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;created business model&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;build-people&#34;&gt;Build People&lt;/h3&gt;
&lt;p&gt;Now let&amp;rsquo;s build the person model and its relations to businesses.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails g scaffold Person full_name business:references
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case we want the person to optionally be a member of a business, so lets update the both the models and the migration.  Starting with the migration, we need to remove &lt;code&gt;null: false&lt;/code&gt; in the foreign key, and add that to the name - so it should now look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/migrate/20210516080414_create_people.rb
class CreatePeople &amp;lt; ActiveRecord::Migration[6.1]
  def change
    create_table :people do |t|
      t.string :full_name, null: false
      t.references :company, foreign_key: true

      t.timestamps
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets adjust the person model - we&amp;rsquo;ll make the relation optional with &lt;code&gt;optional: true&lt;/code&gt; and require the name with the validation &lt;code&gt;validates :full_name, presence: true&lt;/code&gt;, so it should now look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/person.rb
class Person &amp;lt; ApplicationRecord
  belongs_to :company, optional: true

  validates :full_name, presence: true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And lets let the Business know it can have lots of people with &lt;code&gt;has_many :people&lt;/code&gt; - now the model will look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/business.rb
class Business &amp;lt; ApplicationRecord
  has_many :people

  validates :legal_name, presence: true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets check the migrations work:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;lets use seed a couple of people too - so it now looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/seed.rb
business = Business.create(legal_name: &amp;quot;Business&amp;quot;)
company = Business.create(legal_name: &amp;quot;Company&amp;quot;)

company.build_person(full_name: &amp;quot;Company Man&amp;quot;)
company.save

person = Person.create(full_name: &amp;quot;Own Person&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets check the seed with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:seed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets check our pages again:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails s
open localhost:3000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets check the index pages&lt;/p&gt;
&lt;p&gt;On the business page it would be nice to see how many employees - so we can update the model with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/business.rb
class Business &amp;lt; ApplicationRecord
  has_many :people

  validates :legal_name, presence: true

  def people_count
    people.count
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now &lt;code&gt;people_count&lt;/code&gt; is added as a virtual attribute (as well as all other business fields because of &lt;code&gt;&#39;businesses.*&lt;/code&gt;) - now we can use in our view using = &lt;code&gt;&amp;lt;td&amp;gt;&amp;lt;%= business.people_count %&amp;gt;&amp;lt;/td&amp;gt;&lt;/code&gt; so now it would look something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/businesses/index.html.erb
&amp;lt;h1&amp;gt;Businesses&amp;lt;/h1&amp;gt;

&amp;lt;table&amp;gt;
  &amp;lt;thead&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th&amp;gt;Legal name&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Employee Count&amp;lt;/th&amp;gt;
      &amp;lt;th colspan=&amp;quot;3&amp;quot;&amp;gt;&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/thead&amp;gt;

  &amp;lt;tbody&amp;gt;
    &amp;lt;% @businesses.each do |business| %&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= business.legal_name %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= business.people_count %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Show&#39;, business %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Edit&#39;, edit_business_path(business) %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Destroy&#39;, business, method: :delete, data: { confirm: &#39;Are you sure?&#39; } %&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and on the &amp;lsquo;/people&amp;rsquo; page it would be nice to see there business name instead of id.&lt;/p&gt;
&lt;p&gt;so in the model:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/model/person.rb
class Person &amp;lt; ApplicationRecord
  belongs_to :business, optional: true

  validates :full_name, presence: true

  def associated_business_name
    business&amp;amp;.legal_name
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and in the index view:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/people/index.html.erb
&amp;lt;table&amp;gt;
  &amp;lt;thead&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th&amp;gt;Full name&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Business&amp;lt;/th&amp;gt;
      &amp;lt;th colspan=&amp;quot;3&amp;quot;&amp;gt;&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/thead&amp;gt;

  &amp;lt;tbody&amp;gt;
    &amp;lt;% @people.each do |person| %&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= person.full_name %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= person.associated_business_name %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Show&#39;, person %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Edit&#39;, edit_person_path(person) %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Destroy&#39;, person, method: :delete, data: { confirm: &#39;Are you sure?&#39; } %&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to show all employees on the business show page we can do:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/businesses/show.html.erb
&amp;lt;p&amp;gt;
  &amp;lt;strong&amp;gt;Legal name:&amp;lt;/strong&amp;gt;
  &amp;lt;%= @business.legal_name %&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;table&amp;gt;
  &amp;lt;thead&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th&amp;gt;Employee&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/thead&amp;gt;
  &amp;lt;tbody&amp;gt;
    &amp;lt;% @business.people.each do |person| %&amp;gt;
    &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;person.full_name&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;/tbody&amp;gt;

&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now lets look for n+1 queries - to do that we will create many records in the seeds file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/seeds.rb
business = Business.create(legal_name: &amp;quot;Business&amp;quot;)
company  = Business.create(legal_name: &amp;quot;Company&amp;quot;)
boss_man = Person.create(full_name: &amp;quot;Company Man&amp;quot;, business: company)
person = Person.create(full_name: &amp;quot;Own Person&amp;quot;)

# larger numbers (look for n+1 lookups)
50.times do |business_number|
  company  = Business.create(legal_name: &amp;quot;Company #{business_number}&amp;quot;)
  business_number.times do |employee_number|
    Person.create(full_name: &amp;quot;Employee #{employee_number}&amp;quot;,
                  business: company)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when we visit &amp;lsquo;/people&amp;rsquo; we see an n+1 (to look up the business to get the business name) - this is an easy fix with a pre-load in the controller - just add &lt;code&gt;.include(:business)&lt;/code&gt; to the query - now the index method will look like&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/people_controller.rb
class PeopleController &amp;lt; ApplicationController

  def index
    @people = Person.include(:business).all
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fix n+1 lookups - for the business employee count is a bit trickier - to avoid lots of look ups we need the db to do the count and add the count as a virtual attribute - this is done with the following query:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/people_controller.rb
class BusinessController &amp;lt; ApplicationController

  def index
    # businesses = Business.all  # (N+1 when using referring to people)
    # select must go last or it gets lost / overwritten
    @businesses = Business.joins(:people)
                          .group(&#39;businesses.id&#39;)
                          .select(&#39;businesses.*, count(people.id) as people_count&#39;)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to avoid confusion - lets rename the method in the class to &lt;code&gt;employee_count&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/business.rb
class Business &amp;lt; ApplicationRecord
  has_many :people

  validates :legal_name, presence: true

  def employee_count
    people.count
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;lets run the seeds again:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:seed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;cool now when we look at the log we just have one query instead of many!&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s make the people form to associate a business by name instead of the id!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/people/_form.html.erb
&amp;lt;%= form_with(model: person) do |form| %&amp;gt;
  &amp;lt;% if person.errors.any? %&amp;gt;
    &amp;lt;div id=&amp;quot;error_explanation&amp;quot;&amp;gt;
      &amp;lt;h2&amp;gt;&amp;lt;%= pluralize(person.errors.count, &amp;quot;error&amp;quot;) %&amp;gt; prohibited this person from being saved:&amp;lt;/h2&amp;gt;

      &amp;lt;ul&amp;gt;
        &amp;lt;% person.errors.each do |error| %&amp;gt;
          &amp;lt;li&amp;gt;&amp;lt;%= error.full_message %&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;% end %&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;% end %&amp;gt;

  &amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
    &amp;lt;%= form.label :full_name %&amp;gt;
    &amp;lt;%= form.text_field :full_name %&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
    &amp;lt;%= form.label :business %&amp;gt;
    &amp;lt;%= form.select :business_id,
                    Business.all.collect { |b| [ b.legal_name, b.id ] },
                    prompt: &amp;quot;Select One&amp;quot;, include_blank: true %&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;actions&amp;quot;&amp;gt;
    &amp;lt;%= form.submit %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great - lets snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;created person related to businesses - w/o n+1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;polymorphic-sti---sometime-called-inverse-polymorphic&#34;&gt;Polymorphic (STI) - sometime called inverse polymorphic&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;          âââââââââââââââââ
          â    Contact    â
          â  (functions)+ â + supplier, reseller, customer, sales-rep
          â(display_name)*â * virtual attribute
          âââââââââââââââââ
                  â¼ 1
     ââââââââââââââ´ââââââââââââââ
    â±ââ² *                    * â±ââ²
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;âââââââââââââââââ          âââââââââââââââââ
â    Business   ââ²       1 â    Person     â
â  (legal_name) â â â â â â¼â  (full_name)  â
â(display_name)&lt;em&gt;ââ± 0..&lt;/em&gt;    â(display_name)*â
âââââââââââââââââ          âââââââââââââââââ&lt;/p&gt;
&lt;p&gt;A contact could be either a person or a business - but must be one or the other.&lt;/p&gt;
&lt;p&gt;This is implemented in (part 2)[post_ruby_rails/rails_6_x_agnostic_associations_2/]&lt;/p&gt;
&lt;h2 id=&#34;polymorphic&#34;&gt;Polymorphic&lt;/h2&gt;
&lt;p&gt;a model associated with several different models - serving a similar purpose in both cases&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ââââââââââââââ          âââââââââââââ
  â            ââ²       1 â           â
  â  Business  â â â â â â¼â  Person   â
  â            ââ± 0..*    â           â
  ââââââââââââââ          âââââââââââââ
        â²ââ± *                * â²ââ±
         âââââââââââââ¬âââââââââââ
                     â¼ 1
             ââââââââââââââââ
             â              â
             â  Transaction â
             â              â
             ââââââââââââââââ
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A contact could be either a person or a business - but must be one or the other.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails g Contact roles:array business:references person:references
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the migration to ensure we have a role provided &amp;amp; relations:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;#
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the Contact model with the validations &amp;amp; flexible relations:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# contact.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the Person model and relations:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# person.rb

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the Business model and relations:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# business.rb

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;lets use seed a couple of people too - so it now looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/seed.rb
business = Business.create(legal_name: &amp;quot;Business&amp;quot;)
company = Business.create(legal_name: &amp;quot;Company&amp;quot;)

company.build_person(full_name: &amp;quot;Company Man&amp;quot;)
company.save

person = Person.create(full_name: &amp;quot;Own Person&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets check the seed with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:seed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming this works, let&amp;rsquo;s see the &amp;ldquo;/people&amp;rdquo; page:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails s
open localhost:3000/businesses/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great - lets snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;created person possibly related to the model&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Rails 6.1 - Hotwire with Lazy Loading</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_1_hotwire_lazy_load_data/</link>
      <pubDate>Sun, 28 Mar 2021 01:57:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_1_hotwire_lazy_load_data/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;As was seen in 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_1_hotwire_flash_messages/&#34;&gt;Using Hotwire with Flash Messages&lt;/a&gt; Hotwire can easily load data - let&amp;rsquo;s do this in a lazy loaded way (after the html is loaded we add data).&lt;/p&gt;
&lt;h2 id=&#34;basic-setup&#34;&gt;Basic Setup&lt;/h2&gt;
&lt;p&gt;Start with the code at the end of: 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_1_hotwire_simple_realtime/&#34;&gt;Using Hotwire in Rails&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;prepare-our-code&#34;&gt;Prepare our code&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s remove the extra Tweet.new load in the controller&amp;rsquo;s index method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/tweets_controller.rb
  def index
    @tweets = Tweet.all.order(created_at: :desc)
    # @tweet = Tweet.new # no longer needed
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now if we try our code we get a null value error (for course).&lt;/p&gt;
&lt;p&gt;So to fix this we need to load the data back in (and restructure our index page a bit).&lt;/p&gt;
&lt;p&gt;Turbo works well if you use the normal templates - so in this case we will use the &lt;code&gt;new&lt;/code&gt; template on the home page to call the new form and get its own data:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/index.html.erb
&amp;lt;h1&amp;gt;Tweets&amp;lt;/h1&amp;gt;
&amp;lt;%= turbo_stream_from &amp;quot;tweets&amp;quot; %&amp;gt;

&amp;lt;h2 class=&amp;quot;mt-3 h4 text-muted&amp;quot;&amp;gt;New Tweet&amp;lt;/h2&amp;gt;
&amp;lt;div class=&amp;quot;card card-body&amp;quot;&amp;gt;
  &amp;lt;%= turbo_frame_tag &amp;quot;new-tweet&amp;quot;, src: new_tweet_path, target: &amp;quot;_top&amp;quot; %&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;h2 class=&amp;quot;mt-3 h4 text-muted&amp;quot;&amp;gt;Tweet Feed&amp;lt;/h2&amp;gt;
&amp;lt;%= turbo_frame_tag &amp;quot;tweets&amp;quot; do %&amp;gt;
  &amp;lt;%= render @tweets %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice the new template is using the dom_id &amp;ldquo;new-tweet&amp;rdquo; and not &amp;ldquo;new_tweet&amp;rdquo;. Also note that this tag has a &lt;code&gt;src:&lt;/code&gt; - that is where it is getting its data source (&amp;amp; view to use) - in this case the &lt;code&gt;new_tweet_path&lt;/code&gt; routes to &lt;code&gt;tweets_controller#new&lt;/code&gt; and that calls the &lt;code&gt;veiw&lt;/code&gt; template.  The final thing to note is the &lt;code&gt;target&lt;/code&gt; - this tells the turbo_tag to look / act outside the contraints of its frame (otherwise we couldn&amp;rsquo;t reach the controller).&lt;/p&gt;
&lt;p&gt;Currently this won&amp;rsquo;t work yet - we need to create a &lt;strong&gt;matching tag&lt;/strong&gt; &amp;ndash; including the &lt;code&gt;target&lt;/code&gt; in the &lt;code&gt;new&lt;/code&gt; template.  So our updated &lt;code&gt;new&lt;/code&gt; template now looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt; app/views/tweets/new.html.erb
&amp;lt;h1&amp;gt;New Tweet&amp;lt;/h1&amp;gt;

&amp;lt;%= turbo_frame_tag &amp;quot;new-tweet&amp;quot;, target: &amp;quot;_top&amp;quot; do %&amp;gt;
  &amp;lt;%= render &#39;form&#39;, tweet: @tweet %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we should have a new form that uses the standard rails data flow within the index - just like the display and edit of individual tweets also uses show and edit templates too.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;The repo where you can find this code in the branch:

&lt;a href=&#34;https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_lazy_load_data&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_lazy_load_data&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rails 6.1 - Hotwire with Modals</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_1_hotwire_modal_form/</link>
      <pubDate>Sat, 20 Mar 2021 18:57:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_1_hotwire_modal_form/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Now that you have the basics of using Hotwire in Rails 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_1_hotwire_simple_realtime/&#34;&gt;Using Hotwire in Rails&lt;/a&gt; - its interesting to try using it in other contexts, inparticular &lt;strong&gt;modals&lt;/strong&gt; are very useful for inputs in Single Page Apps.  So in this Blog we will make the new input form a modal and leave the edit as an in-place form.&lt;/p&gt;
&lt;h2 id=&#34;basic-setup&#34;&gt;Basic Setup&lt;/h2&gt;
&lt;p&gt;Start with the code at the end of: 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_1_hotwire_simple_realtime/&#34;&gt;Using Hotwire in Rails&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;add-jquery-to-bootstrap-setup&#34;&gt;Add jQuery to Bootstrap Setup&lt;/h2&gt;
&lt;p&gt;First we need to ensure we have JS and JQuery (installed with Bootstrap) - so we will simply add the following to the end of our &amp;lt;body&amp;gt; in the &lt;code&gt;application.html.erb&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/layouts/application.html.erb
&amp;lt;body&amp;gt;
  &amp;lt;p id=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;%= yield %&amp;gt;
  &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&amp;quot; integrity=&amp;quot;sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js&amp;quot; integrity=&amp;quot;sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;add-modal-to-index&#34;&gt;Add Modal to Index&lt;/h2&gt;
&lt;p&gt;So we will start by replacing the new-form with a button that toggles the modal.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/index.html.erb
&amp;lt;h1&amp;gt;Tweets&amp;lt;/h1&amp;gt;
&amp;lt;%= turbo_stream_from &amp;quot;tweets&amp;quot; %&amp;gt;

&amp;lt;h2 class=&amp;quot;mt-3 h4 text-muted&amp;quot;&amp;gt;New Tweet&amp;lt;/h2&amp;gt;
&amp;lt;%= render &amp;quot;tweets/modal_new&amp;quot;, tweet: @tweet %&amp;gt;

&amp;lt;h2 class=&amp;quot;mt-3 h4 text-muted&amp;quot;&amp;gt;Tweet Feed&amp;lt;/h2&amp;gt;
&amp;lt;%= turbo_frame_tag &amp;quot;tweets&amp;quot; do %&amp;gt;
  &amp;lt;%= render @tweets %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now lets make a partial that has the modal toggle button and the associated html to enable the modal to function (this code is basically copied from the Bootstrap website):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/_modal_new.html.erb
&amp;lt;%= link_to &amp;quot;#&amp;quot;, class: &#39;btn btn-sm btn-outline-primary&#39;, data: { toggle: &amp;quot;modal&amp;quot;, target: &amp;quot;#tweetModal&amp;quot; } do %&amp;gt;
New Tweet
&amp;lt;% end %&amp;gt;

&amp;lt;div class=&amp;quot;modal fade&amp;quot; id=&amp;quot;tweetModal&amp;quot; tabindex=&amp;quot;-1&amp;quot; aria-labelledby=&amp;quot;exampleModalLabel&amp;quot; aria-hidden=&amp;quot;true&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;modal-dialog&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;modal-content&amp;quot;&amp;gt;
      &amp;lt;%= render &amp;quot;tweets/modal_form&amp;quot;, tweet: tweet %&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice we have a partial for the form still - this is because we have to point turbo at a dom_id within a partial (without doing this we can&amp;rsquo;t get validation errors back into this form).  This is a mix of the Bootstrap example code placed within the rails form.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;#  app/views/tweets/_modal_form.html.erb
&amp;lt;%= form_with(model: tweet, id: dom_id(tweet)) do |form| %&amp;gt;

  &amp;lt;div class=&amp;quot;modal-header&amp;quot;&amp;gt;
    &amp;lt;h5 class=&amp;quot;modal-title&amp;quot;&amp;gt;New Tweet&amp;lt;/h5&amp;gt;
    &amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;close&amp;quot; data-dismiss=&amp;quot;modal&amp;quot; aria-label=&amp;quot;Close&amp;quot;&amp;gt;
      &amp;lt;span aria-hidden=&amp;quot;true&amp;quot;&amp;gt;&amp;amp;times;&amp;lt;/span&amp;gt;
    &amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;modal-body&amp;quot;&amp;gt;
    &amp;lt;% if tweet.errors.any? %&amp;gt;
    &amp;lt;div id=&amp;quot;error_explanation&amp;quot;&amp;gt;
      &amp;lt;h2&amp;gt;&amp;lt;%= pluralize(tweet.errors.count, &amp;quot;error&amp;quot;) %&amp;gt; prohibited this tweet from being saved:&amp;lt;/h2&amp;gt;

      &amp;lt;ul&amp;gt;
        &amp;lt;% tweet.errors.each do |error| %&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;%= error.full_message %&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;% end %&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;% end %&amp;gt;

    &amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
      &amp;lt;%= form.label :body %&amp;gt;
      &amp;lt;%= form.text_area :body %&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;modal-footer&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;actions&amp;quot;&amp;gt;
      &amp;lt;%= form.submit class: &amp;quot;btn btn-sm btn-outline-success&amp;quot; %&amp;gt;
      &amp;lt;%= link_to &amp;quot;Cancel&amp;quot;, tweet, class: &amp;quot;btn btn-sm btn-outline-danger&amp;quot; %&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;

&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;test&#34;&gt;Test&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Modal Opens&lt;/li&gt;
&lt;li&gt;Modal Close Works&lt;/li&gt;
&lt;li&gt;Modal Cancel Works&lt;/li&gt;
&lt;li&gt;Create valid Tweet &amp;ndash; works and broadcasts&lt;/li&gt;
&lt;li&gt;Create invalid Tweet &amp;ndash; Errors go to wrong form (must click cancel or reload)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In fact, if you put the regular form back into the index page you will see that the validation errors show up there.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;misplaced_validation_errors_on_create.png&#34; alt=&#34;validation errors in wrong form&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;fix-validation-errors&#34;&gt;Fix validation errors&lt;/h2&gt;
&lt;p&gt;We fix this like this like a normal form - we change how the controller uses turbo_stream. So instead of pointing to the partial: &amp;ldquo;tweets/form&amp;rdquo; we need to point to &amp;ldquo;tweets/modal_form&amp;rdquo; (the new partial with the form).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/tweets_controller.rb
  def create
    @tweet = Tweet.new(tweet_params)
    respond_to do |format|
      if @tweet.save
        format.html { redirect_to tweets_url, notice: &amp;quot;Tweet was successfully created.&amp;quot; }
        format.json { render :show, status: :created, location: @tweet }
      else
        format.turbo_stream { # route turbo_stream validation errors
                      render turbo_stream: turbo_stream.replace(
                              @tweet, partial: &amp;quot;tweets/modal_form&amp;quot;,
                              locals: { tweet: @tweet}) }
        format.html { render :new, status: :unprocessable_entity }
        format.json { render json: @tweet.errors, status: :unprocessable_entity }
      end
    end
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now all our tests should work.&lt;/p&gt;
&lt;h2 id=&#34;using-turbo-templates&#34;&gt;Using turbo templates&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s refactor - for future flexibility.  We&amp;rsquo;ll create the template.  Since we are using the &lt;code&gt;create&lt;/code&gt; method within the controller - we&amp;rsquo;ll call the file: &lt;code&gt;create.turbo_stream.html.erb&lt;/code&gt; - notice, unsurprisingly it looks what&amp;rsquo;s in the controller.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/create.turbo_stream.erb
&amp;lt;!--             action  dom_id           partial with the dom_id        actual data --&amp;gt;
&amp;lt;%= turbo_stream.replace @tweet, partial: &amp;quot;tweets/modal_form&amp;quot;, locals: { tweet: @tweet } %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can make the controller look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/tweets_controller.rb
  def create
    @tweet = Tweet.new(tweet_params)
    respond_to do |format|
      if @tweet.save
        format.html { redirect_to tweets_url, notice: &amp;quot;Tweet was successfully created.&amp;quot; }
        format.json { render :show, status: :created, location: @tweet }
      else
        format.turbo_stream  # route turbo_stream validation errors
        format.html { render :new, status: :unprocessable_entity }
        format.json { render json: @tweet.errors, status: :unprocessable_entity }
      end
    end
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using the template allows us the flexibilty to make multiple dynamic changes to the page on a create.  This is demonstrated in the post describing using Flash messages with Hotwire.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;The repo where you can find this code in the branch:

&lt;a href=&#34;https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_modal_new_tweet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_modal_new_tweet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The important commit is:

&lt;a href=&#34;https://github.com/btihen/ruby_kafi_hotwire_tweets/commit/0c37fb6071b31d13f4cf3ce2499326893724e131&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/btihen/ruby_kafi_hotwire_tweets/commit/0c37fb6071b31d13f4cf3ce2499326893724e131&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rails 6.1 - Hotwire with StimulusJS</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_1_hotwire_and_stimulusjs/</link>
      <pubDate>Sun, 14 Mar 2021 18:57:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_1_hotwire_and_stimulusjs/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Hotwire only updates dom_ids (usually only within a partial) - so other Frontend needs still need to be met with Javascript.  Rails uses StimulusJS to augment Hotwire.  I 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_1_hotwire_flash_messages/&#34;&gt;Using Hotwire with Flash Messages&lt;/a&gt; we created a new instance of Tweet in the turbo_template and sent that to the form.  (Pretty non-standard) - we can do this even more simply by using JS to clear the form without instantiating a new object.&lt;/p&gt;
&lt;h2 id=&#34;basic-setup&#34;&gt;Basic Setup&lt;/h2&gt;
&lt;p&gt;Start with the code at the end of: 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_1_hotwire_flash_messages/&#34;&gt;Using Hotwire with Flash Messages&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;stimulusjs-to-clear-forms&#34;&gt;StimulusJS to clear forms&lt;/h2&gt;
&lt;p&gt;To enable Flash Messages our create/controller looked like - which seems a little messy - in &lt;code&gt;create&lt;/code&gt; (happy-path) we handle all the updates via the create.turbo_stream.erb template and with validation errors we explicity (in the controller - handle the validation errors)&lt;/p&gt;
&lt;p&gt;So lets start by disabling the code we no longer need in the template:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/create.turbo_stream.erb
&amp;lt;%# turbo_stream.replace &amp;quot;tweet-form&amp;quot;, partial: &amp;quot;tweets/form&amp;quot;, locals: { tweet: Tweet.new } %&amp;gt;
&amp;lt;%# to send a message to the notice partial %&amp;gt;
&amp;lt;%= turbo_stream.append &amp;quot;notice&amp;quot;, partial: &amp;quot;shared/notice&amp;quot;, locals: {notice: &amp;quot;Tweet was successfully created.&amp;quot;} %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So we are only leaving the turbo_stream.append active.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s test here and be sure the new form doesn&amp;rsquo;t clear after making a new tweet.&lt;/p&gt;
&lt;h2 id=&#34;add-a-stimulusjs-controller&#34;&gt;Add a StimulusJS controller&lt;/h2&gt;
&lt;p&gt;We don&amp;rsquo;t need to add / install or configure StimulusJS since Hotwire already handles this.&lt;/p&gt;
&lt;p&gt;So let&amp;rsquo;s create the JS file to clear the form - its quite simple we will just use:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// app/javascript/controllers/reset_form_controller.js
import { Controller } from &amp;quot;stimulus&amp;quot;

export default class extends Controller {
  reset() {
    this.element.reset()
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to tie this to the form we need to go into the form and add the &lt;code&gt;data:&lt;/code&gt; info &amp;ndash; so now our form should start with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/_form.html.erb
&amp;lt;%= form_with(model: tweet, id: dom_id(tweet),
              data: {controller: &amp;quot;reset-form&amp;quot;, action: &amp;quot;turbo:submit-end-&amp;gt;reset-form#reset&amp;quot;}
            ) do |form| %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;code&gt;data&lt;/code&gt; tag ties the stimulus &lt;strong&gt;controller&lt;/strong&gt; &lt;code&gt;reset_form_controller.js&lt;/code&gt; with the &lt;code&gt;reset-form&lt;/code&gt; setting &amp;ndash; notice the html uses a &lt;code&gt;-&lt;/code&gt; when ruby uses &lt;code&gt;_&lt;/code&gt;. On the form &lt;strong&gt;action&lt;/strong&gt; &lt;code&gt;submit-end&lt;/code&gt; then execute (&#39;-&amp;gt;&#39;) in the controller &lt;code&gt;reset-form&lt;/code&gt; the function (&#39;#&#39;) &lt;code&gt;reset&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Fairly straight-forward, but it helps to be aware of the syntax and the differences between Ruby and Javascript.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;The repo where you can find this code in the branch:

&lt;a href=&#34;https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_with_stimulus&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_with_stimulus&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rails 6.1 - Hotwire with Flash Messages</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_1_hotwire_flash_messages/</link>
      <pubDate>Sat, 06 Mar 2021 18:57:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_1_hotwire_flash_messages/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Now that you have the basics of using Hotwire in Rails 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_1_hotwire_simple_realtime/&#34;&gt;Using Hotwire in Rails&lt;/a&gt; - its interesting to try using it in other contexts, inparticular &lt;strong&gt;modals&lt;/strong&gt; are very useful for inputs in Single Page Apps.  So in this Blog we will make the new input form a modal and leave the edit as an in-place form.&lt;/p&gt;
&lt;h2 id=&#34;basic-setup&#34;&gt;Basic Setup&lt;/h2&gt;
&lt;p&gt;Start with the code at the end of: 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_1_hotwire_simple_realtime/&#34;&gt;Using Hotwire in Rails&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;flash-messages-in-partial&#34;&gt;Flash Messages in Partial&lt;/h2&gt;
&lt;p&gt;Remember, turbo_streams requires a dom_id and a partial in order to know where to send / update the HTML it generates &amp;ndash; so let&amp;rsquo;s prepare &lt;code&gt;application.html.erb&lt;/code&gt; so that flash messages use partials.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/layouts/application.html.erb
&amp;lt;body&amp;gt;
  &amp;lt;%= render &amp;quot;shared/notice&amp;quot;, notice: notice %&amp;gt;
  &amp;lt;%= yield %&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and of course we need a partials for notices now (we will keep it very simple):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/shared/_notice.html.erb
&amp;lt;p id=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now we will create a turbo template to handle the flash on create:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/create.turbo_stream.erb
&amp;lt;%# to send a message to the notice partial %&amp;gt;
&amp;lt;!--            action   dom_id         partial with dom_id   data to send in the notice --&amp;gt;
&amp;lt;%= turbo_stream.append &amp;quot;notice&amp;quot;, partial: &amp;quot;shared/notice&amp;quot;, locals: {notice: &amp;quot;Tweet created.&amp;quot;} %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order for the controller and turbo_stream to handle this non-standard action we need to update the create method in the controller with the instructions &lt;code&gt;format.turbo_stream&lt;/code&gt; on a successful create:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/tweets_controller.rb
def create
    @tweet = Tweet.new(tweet_params)

    respond_to do |format|
      if @tweet.save
        format.turbo_stream  # enables flash message on create - via the create template
        format.html { redirect_to tweets_url, notice: &amp;quot;Tweet was successfully created.&amp;quot; }
        format.json { render :show, status: :created, location: @tweet }
      else
        format.turbo_stream { # route turbo validation errors
                      render turbo_stream: turbo_stream.replace(
                              @tweet, partial: &amp;quot;tweets/form&amp;quot;,
                              locals: { tweet: @tweet}) }
        format.html { render :new, status: :unprocessable_entity }
        format.json { render json: @tweet.errors, status: :unprocessable_entity }
      end
    end
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when we test everything works great, except our form no longer clears. We can fix that by adding a second action to the create template (we will send a Tweet.new - there are other approaches too - covered in 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_1_hotwire_and_stimulusjs&#34;&gt;Hotwire and StimulusJS&lt;/a&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/create.turbo_stream.erb
&amp;lt;%# clear form on create - without using JavaScript - by replacing the old Tweet info with Tweet.new %&amp;gt;
&amp;lt;%= turbo_stream.replace &amp;quot;tweet-form&amp;quot;, partial: &amp;quot;tweets/form&amp;quot;, locals: { tweet: Tweet.new } %&amp;gt;
&amp;lt;%# to send a message to the notice partial %&amp;gt;
&amp;lt;%= turbo_stream.append &amp;quot;notice&amp;quot;, partial: &amp;quot;shared/notice&amp;quot;, locals: {notice: &amp;quot;Tweet was successfully created.&amp;quot;} %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;refactor&#34;&gt;Refactor&lt;/h2&gt;
&lt;p&gt;You might have noticed, that we have moved most of our turbo_steam template to the template file, but not the replace for validation errors &amp;ndash; since we already have a &lt;code&gt;replace&lt;/code&gt; command in our template - we will need to leave our specific instructions in the errors as is &amp;ndash; until we clear the form with JS.&lt;/p&gt;
&lt;p&gt;NOTE: now that we are consolidating our template info it might be tempting to add the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;!-- to prepend on create - disabled to avoid double vision when broadcasting --&amp;gt;
&amp;lt;%#%   stream_action   dom_id_target, render_partial,       send_local_variables   %&amp;gt;
&amp;lt;%= turbo_stream.prepend &amp;quot;tweets&amp;quot;, partial: &amp;quot;tweets/tweet&amp;quot;, locals: { tweet: @tweet } %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but don&amp;rsquo;t add the default happy path instructions to the template when a model already has a broadcast after hook - if you add this instruction the person creating a new tweet will see two!&lt;/p&gt;
&lt;h2 id=&#34;flash-after-we-update&#34;&gt;Flash after we update&lt;/h2&gt;
&lt;p&gt;This is now very straight forward we simply add &lt;code&gt;format.turbo_stream&lt;/code&gt; to our save and create an &lt;code&gt;update.turbo_stream.erb&lt;/code&gt; template&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/update.turbo_stream.erb
&amp;lt;%# to send a message to the notice partial %&amp;gt;
&amp;lt;%= turbo_stream.append &amp;quot;notice&amp;quot;, partial: &amp;quot;shared/notice&amp;quot;, locals: {notice: &amp;quot;Tweet was successfully created.&amp;quot;} %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now we can tell the controller to use that:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;#  app/controllers/tweets_controller.rb
  def update
    respond_to do |format|
      if @tweet.update(tweet_params)
        format.turbo_stream
        format.html { redirect_to @tweet, notice: &amp;quot;Tweet was successfully updated.&amp;quot; }
        format.json { render :show, status: :ok, location: @tweet }
      else
        format.html { render :edit, status: :unprocessable_entity }
        format.json { render json: @tweet.errors, status: :unprocessable_entity }
      end
    end
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We don&amp;rsquo;t have to clear the form on update since the &lt;code&gt;edit&lt;/code&gt; template is replaced with the &lt;code&gt;show&lt;/code&gt; template already.  So we are done.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;The repo where you can find this code in the branch:

&lt;a href=&#34;https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_flash_messages&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_flash_messages&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rails 6.1 - Hotwire (Simple Realtime SPA)</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_1_hotwire_simple_realtime/</link>
      <pubDate>Sun, 28 Feb 2021 18:57:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_1_hotwire_simple_realtime/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://hotwire.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hotwire&lt;/a&gt;  is planned to be integrated into Rails 7.x and is already included in the soon to be published book: 
&lt;a href=&#34;https://pragprog.com/titles/nrclient/modern-front-end-development-for-rails/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Modern Front-End Development for Rails: Hotwire, Stimulus, Turbo, and React &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hotwire allows us to build Single Page Apps using Ruby and Rails with nearly NO configuration! It allow very responsive web-applications as it reloads only the parts of the page that change via a socket.  Hotwire using 
&lt;a href=&#34;https://turbo.hotwire.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Turbo&lt;/a&gt; - an evolution of TurboLinks and as such is mobile friendly and in most cases can send the replacement HTML directly from the server to the client with minimal or no client side processing over websockets so there is minimal lag time.&lt;/p&gt;
&lt;p&gt;In this article we convert a seemingly &amp;lsquo;single-page&amp;rsquo; web app that reloads with every request see previous article 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_1_single_page_app_simulate_reloads/&#34;&gt;Tweets - A Single Page Rails App (using reloads)&lt;/a&gt; and convert it into a proper &amp;lsquo;single-page&amp;rsquo; app that only refreshes the aspects that change.  This makes web-pages with lots of data and complexity FAST and feel like native apps.  This is done with Hotwire (using web-sockets).&lt;/p&gt;
&lt;h2 id=&#34;basic-setup&#34;&gt;Basic Setup&lt;/h2&gt;
&lt;p&gt;We will be starting with a basic Tweet Simulator it looks something like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_1st_starting_point.png&#34; alt=&#34;tweet_index_1st&#34;&gt;&lt;/p&gt;
&lt;p&gt;The starting code base can be found at: 
&lt;a href=&#34;https://github.com/btihen/tweet_simulator_rails&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/btihen/tweet_simulator_rails&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The steps to re-create this code can be found at: 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_tweet_single_page_reloads/&#34;&gt;Tweets - A Single Page Rails App (using reloads)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The actual Tweet Hotwire code from this article can be found at:&lt;/p&gt;
&lt;h2 id=&#34;install-and-configure-hotwire&#34;&gt;Install and configure Hotwire&lt;/h2&gt;
&lt;h3 id=&#34;install-hotwire&#34;&gt;Install Hotwire&lt;/h3&gt;
&lt;p&gt;To use hotwire - we need to install it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle add hotwire-rails
bin/rails hotwire:install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The hotwire package is smart enough to install via webpack if that&amp;rsquo;s installed or in the asset pipeline if no webpacker is installed.  This project uses webpack (but it shouldn&amp;rsquo;t matter).&lt;/p&gt;
&lt;p&gt;This also installs Stimulus Javascript and enables redis if not already installed.  Now you should see the following steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stimulus config in: &lt;code&gt;application.js&lt;/code&gt; and setup.&lt;/li&gt;
&lt;li&gt;Turbo install and setup&lt;/li&gt;
&lt;li&gt;Removal of Turbolinks&lt;/li&gt;
&lt;li&gt;Enable Redis gem&lt;/li&gt;
&lt;li&gt;Configure Redis to work with ActionCable (Rails Websockets)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and the output should look something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Appending Stimulus setup code to
      append  app/javascript/packs/application.js
Creating controllers directory
      create  app/javascript/controllers
      create  app/javascript/controllers/hello_controller.js
      create  app/javascript/controllers/index.js
Installing all Stimulus dependencies
         run  yarn add stimulus from &amp;quot;.&amp;quot;
...
â¨  Done in 36.58s.

Install Turbo
         run  yarn add @hotwired/turbo-rails from &amp;quot;.&amp;quot;
...
â¨  Done in 7.40s.

      insert  app/javascript/packs/application.js
Remove Turbolinks
        gsub  Gemfile
         run  bin/bundle from &amp;quot;.&amp;quot;
         run  bin/yarn remove turbolinks from &amp;quot;.&amp;quot;
yarn remove v1.22.10
[1/2] ð  Removing module turbolinks...
...

        gsub  app/javascript/packs/application.js
        gsub  app/javascript/packs/application.js
Enable redis in bundle
        gsub  Gemfile
Switch development cable to use redis
        gsub  config/cable.yml

Turbo successfully installed â¡ï¸
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE: a prerequisite is that you already have Redis (server) installed in your development environment.&lt;/p&gt;
&lt;h3 id=&#34;check-project-config-for-hotwire&#34;&gt;Check Project config for Hotwire&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;References to turbolinks must be removed&lt;/li&gt;
&lt;li&gt;Turbo is installed&lt;/li&gt;
&lt;li&gt;Stimulus is installed&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you have problems you can experiment try adding one or more of the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  &amp;lt;%= yield :head %&amp;gt;
  &amp;lt;%= turbo_include_tags %&amp;gt;
  &amp;lt;%= stimulus_include_tags %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In particular, I found the top two helpful - but this is a new technology - and it is still evolving.  In the end the &lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt; might need to look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;

&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Tweets&amp;lt;/title&amp;gt;
  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt;
  &amp;lt;%= csrf_meta_tags %&amp;gt;
  &amp;lt;%= csp_meta_tag %&amp;gt;

  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css&amp;quot; integrity=&amp;quot;sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;
  &amp;lt;%= stylesheet_link_tag &#39;application&#39;, media: &#39;all&#39; %&amp;gt;
  &amp;lt;%= javascript_pack_tag &#39;application&#39; %&amp;gt;
  &amp;lt;%= yield :head %&amp;gt;
  &amp;lt;%= turbo_include_tags %&amp;gt;
  &amp;lt;%# stimulus_include_tags %&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
  &amp;lt;%= yield %&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check the app is still working and make a git snapshot.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;install and configure hotwire-rails&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;using-hotwire&#34;&gt;Using Hotwire&lt;/h2&gt;
&lt;p&gt;Avoid the page reloads and only update our changes by sending new HTML&lt;/p&gt;
&lt;h3 id=&#34;broadcast-new-tweets-to-all-clients&#34;&gt;Broadcast New Tweets to all Clients&lt;/h3&gt;
&lt;p&gt;To broadcast changes to a client we need to modify the model and add the broadcast command.   A Broadcast &amp;ldquo;tweets&amp;rdquo; sends changes to the turbo_stream (websocket channel) with the same name.
To add the new tweets to the top of the &amp;ldquo;tweets&amp;rdquo; page (frame) we need to use the &lt;code&gt;broadcast_prepend_to&lt;/code&gt; instead of the &lt;code&gt;broadcast_append_to&lt;/code&gt; (which puts new entries at the bottom)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/tweet.rb
class Tweet &amp;lt; ApplicationRecord
  validates :body, presence: true

  # broadcast &amp;quot;tweets&amp;quot; send all changes to the turbo_stream view &amp;quot;tweets&amp;quot;
  # broadcast_prepend_to places new information at the top instead of appending to the bottom
  after_create_commit { broadcast_prepend_to &amp;quot;tweets&amp;quot; }
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order for this model broadcast to work we need to create a place to send it.  We do this in the view via a stream with the command &lt;code&gt;&amp;lt;%= turbo_stream_from &amp;quot;tweets&amp;quot; %&amp;gt;&lt;/code&gt; we also need to tell this &lt;code&gt;stream&lt;/code&gt; where to update &amp;ndash; we do this with the turbo tag of the same name: &lt;code&gt;&amp;lt;%= turbo_frame_tag &amp;quot;tweets&amp;quot; do %&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So lets update our index page :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/index.html.erb
&amp;lt;!-- connects to the backend broadcast (via a channel) --&amp;gt;
&amp;lt;%= turbo_stream_from &amp;quot;tweets&amp;quot; %&amp;gt;

&amp;lt;!-- frame that receives the taged data --&amp;gt;
&amp;lt;%= turbo_frame_tag &amp;quot;tweets&amp;quot; do %&amp;gt;
  &amp;lt;%= render @tweets %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to see our new frames lets update our css to make them visible - lets add a border to our turbo-frames:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;# app/assets/stylesheets/tweets.scss
turbo-frame {
  display: block;
  border: 1px solid green
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s check that our new broadcast feature run: &lt;code&gt;bin/rails s&lt;/code&gt; and open two browser windows point at &lt;code&gt;http://localhost:3000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_2nd_broadcast_new.png&#34; alt=&#34;tweet_index_2nd&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can see in the left window we created a new tweet and it automatically appeared in the right window!  HOW COOL IS THAT!&lt;/p&gt;
&lt;p&gt;Notice that the &amp;ldquo;blue&amp;rdquo; turbo-frame is around all the displayed tweets.&lt;/p&gt;
&lt;p&gt;Lets also take a quick look at the logs - from this transaction:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Started POST &amp;quot;/tweets&amp;quot; for 127.0.0.1 at 2021-02-28 21:12:59 +0100
Processing by TweetsController#create as TURBO_STREAM
  Parameters: {&amp;quot;authenticity_token&amp;quot;=&amp;gt;&amp;quot;[FILTERED]&amp;quot;, &amp;quot;tweet&amp;quot;=&amp;gt;{&amp;quot;body&amp;quot;=&amp;gt;&amp;quot;Fourth Tweet&amp;quot;}, &amp;quot;commit&amp;quot;=&amp;gt;&amp;quot;Create Tweet&amp;quot;}
  TRANSACTION (1.6ms)  BEGIN
  â³ app/controllers/tweets_controller.rb:28:in `block in create&#39;
  Tweet Create (60.1ms)  INSERT INTO &amp;quot;tweets&amp;quot; (&amp;quot;body&amp;quot;, &amp;quot;created_at&amp;quot;, &amp;quot;updated_at&amp;quot;) VALUES ($1, $2, $3) RETURNING &amp;quot;id&amp;quot;  [[&amp;quot;body&amp;quot;, &amp;quot;Fourth Tweet&amp;quot;], [&amp;quot;created_at&amp;quot;, &amp;quot;2021-02-28 20:12:59.221408&amp;quot;], [&amp;quot;updated_at&amp;quot;, &amp;quot;2021-02-28 20:12:59.221408&amp;quot;]]
  â³ app/controllers/tweets_controller.rb:28:in `block in create&#39;
  TRANSACTION (2.4ms)  COMMIT
  â³ app/controllers/tweets_controller.rb:28:in `block in create&#39;
  Rendered tweets/_tweet.html.erb (Duration: 1.7ms | Allocations: 416)
[ActionCable] Broadcasting to tweets: &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;prepend\&amp;quot; target=\&amp;quot;tweets\&amp;quot;&amp;gt;&amp;lt;template&amp;gt;&amp;lt;div class=\&amp;quot;card card-body\&amp;quot;&amp;gt;\n  &amp;lt;div&amp;gt;Fourth Tweet&amp;lt;/div&amp;gt;\n\n  &amp;lt;div class=\&amp;quot;mt-2\&amp;quot;&amp;gt;\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-success\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;post\&amp;quot; href=\&amp;quot;/tweets/7/like\&amp;quot;&amp;gt;Like (0)&amp;lt;/a&amp;gt;\n\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-info\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;post\&amp;quot; href=\&amp;quot;/tweets/7/retweet\&amp;quot;&amp;gt;Retweet (0)&amp;lt;/a&amp;gt;\n\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-primary\&amp;quot; href=\&amp;quot;/tweets/7/edit\&amp;quot;&amp;gt;Edit&amp;lt;/a&amp;gt;\n\n    &amp;lt;a data-confirm=\&amp;quot;Are you sure?\&amp;quot; class=\&amp;quot;btn btn-sm btn-outline-danger\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;delete\&amp;quot; href=\&amp;quot;/tweets/7\&amp;quot;&amp;gt;Destroy&amp;lt;/a&amp;gt;\n  &amp;lt;/div&amp;gt;\n&amp;lt;/div&amp;gt;\n&amp;lt;/template&amp;gt;&amp;lt;/turbo-stream&amp;gt;&amp;quot;
Redirected to http://localhost:3000/tweets
Completed 302 Found in 105ms (ActiveRecord: 64.1ms | Allocations: 5636)

Turbo::StreamsChannel transmitting &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;prepend\&amp;quot; target=\&amp;quot;tweets\&amp;quot;&amp;gt;&amp;lt;template&amp;gt;&amp;lt;div class=\&amp;quot;card card-body\&amp;quot;&amp;gt;\n  &amp;lt;div&amp;gt;Fourth Tweet&amp;lt;/div&amp;gt;\n\n  &amp;lt;div class=\&amp;quot;mt-2\&amp;quot;&amp;gt;\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-success\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;post\&amp;quot; href=\&amp;quot;/tweets/7/like\&amp;quot;&amp;gt;Like (0)&amp;lt;/a&amp;gt;\n\n    &amp;lt;a class=\&amp;quot;btn btn-s... (via streamed from tweets)
Turbo::StreamsChannel transmitting &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;prepend\&amp;quot; target=\&amp;quot;tweets\&amp;quot;&amp;gt;&amp;lt;template&amp;gt;&amp;lt;div class=\&amp;quot;card card-body\&amp;quot;&amp;gt;\n  &amp;lt;div&amp;gt;Fourth Tweet&amp;lt;/div&amp;gt;\n\n  &amp;lt;div class=\&amp;quot;mt-2\&amp;quot;&amp;gt;\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-success\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;post\&amp;quot; href=\&amp;quot;/tweets/7/like\&amp;quot;&amp;gt;Like (0)&amp;lt;/a&amp;gt;\n\n    &amp;lt;a class=\&amp;quot;btn btn-s... (via streamed from tweets)
Started GET &amp;quot;/tweets&amp;quot; for 127.0.0.1 at 2021-02-28 21:12:59 +0100
Processing by TweetsController#index as TURBO_STREAM
  Rendering layout layouts/application.html.erb
  Rendering tweets/index.html.erb within layouts/application
  Rendered tweets/_form.html.erb (Duration: 2.6ms | Allocations: 501)
  Tweet Load (41.8ms)  SELECT &amp;quot;tweets&amp;quot;.* FROM &amp;quot;tweets&amp;quot; ORDER BY &amp;quot;tweets&amp;quot;.&amp;quot;created_at&amp;quot; DESC
  â³ app/views/tweets/index.html.erb:15
  Rendered collection of tweets/_tweet.html.erb [3 times] (Duration: 1.3ms | Allocations: 429)
  Rendered tweets/index.html.erb within layouts/application (Duration: 50.7ms | Allocations: 2283)
[Webpacker] Everything&#39;s up-to-date. Nothing to do
  Rendered layout layouts/application.html.erb (Duration: 75.7ms | Allocations: 7207)
Completed 200 OK in 80ms (Views: 34.9ms | ActiveRecord: 41.8ms | Allocations: 7831)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is a bunch of interesting information, but for now I just want to point out the only thing sent was the new html to display:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[ActionCable] Broadcasting to tweets: &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;prepend\&amp;quot; target=\&amp;quot;tweets\&amp;quot;&amp;gt;&amp;lt;template&amp;gt;&amp;lt;div class=\&amp;quot;card card-body\&amp;quot;&amp;gt;\n  &amp;lt;div&amp;gt;Fourth Tweet&amp;lt;/div&amp;gt;\n\n  &amp;lt;div class=\&amp;quot;mt-2\&amp;quot;&amp;gt;\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-success\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;post\&amp;quot; href=\&amp;quot;/tweets/7/like\&amp;quot;&amp;gt;Like (0)&amp;lt;/a&amp;gt;\n\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-info\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;post\&amp;quot; href=\&amp;quot;/tweets/7/retweet\&amp;quot;&amp;gt;Retweet (0)&amp;lt;/a&amp;gt;\n\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-primary\&amp;quot; href=\&amp;quot;/tweets/7/edit\&amp;quot;&amp;gt;Edit&amp;lt;/a&amp;gt;\n\n    &amp;lt;a data-confirm=\&amp;quot;Are you sure?\&amp;quot; class=\&amp;quot;btn btn-sm btn-outline-danger\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;delete\&amp;quot; href=\&amp;quot;/tweets/7\&amp;quot;&amp;gt;Destroy&amp;lt;/a&amp;gt;\n  &amp;lt;/div&amp;gt;\n&amp;lt;/div&amp;gt;\n&amp;lt;/template&amp;gt;&amp;lt;/turbo-stream&amp;gt;&amp;quot;
Redirected to http://localhost:3000/tweets
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using websockets to send html to the parts of the webpage that need to be updated is very efficient.&lt;/p&gt;
&lt;p&gt;Since the broadcast is at the model level, we can even create a new tweet on the cli and all our web-clients will update:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails c
Tweet.create(body: &amp;quot;CLI tweet appears&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_3rd_broadcast_new_cli.png&#34; alt=&#34;tweet_index_3rd&#34;&gt;&lt;/p&gt;
&lt;p&gt;Lets make a snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;new tweets are broadcast to all clients&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;broadcast-deleted-tweets-to-all-clients&#34;&gt;Broadcast Deleted Tweets to all Clients&lt;/h3&gt;
&lt;p&gt;we need to add another broadcast to the model:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/tweet.rb
class Tweet &amp;lt; ApplicationRecord
  validates :body, presence: true

  # broadcast &amp;quot;tweets&amp;quot; send all changes to the `turbo_stream` view &amp;quot;tweets&amp;quot;
  # `broadcast_prepend_to` places new information at the top instead of appending to the bottom
  after_create_commit { broadcast_prepend_to &amp;quot;tweets&amp;quot; }
  after_destroy_commit { broadcast_remove_to &amp;quot;tweets&amp;quot; }
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But for this to work we will need to create frames around every tweet so we can find and delete the individual tweet to do this we will at a tag to our &lt;code&gt;_tweet&lt;/code&gt; partial.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/_tweet.html.erb
&amp;lt;!-- this tag with `tweet` instead of &#39;tweets&#39; identifies an individual tweet --&amp;gt;
&amp;lt;%= turbo_frame_tag tweet do %&amp;gt;
&amp;lt;div class=&amp;quot;card card-body&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;%= tweet.body %&amp;gt;&amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;mt-2&amp;quot;&amp;gt;
    &amp;lt;%= link_to &amp;quot;Like (#{tweet.likes})&amp;quot;,
                tweet_like_path(tweet),
                method: :post,
                class: &amp;quot;btn btn-sm btn-outline-success&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &amp;quot;Retweet (#{tweet.retweets})&amp;quot;,
                tweet_retweet_path(tweet),
                method: :post,
                class: &amp;quot;btn btn-sm btn-outline-info&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &#39;Edit&#39;, edit_tweet_path(tweet),
                class: &amp;quot;btn btn-sm btn-outline-primary&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &#39;Destroy&#39;, tweet_path(tweet), method: :delete,
                data: { confirm: &#39;Are you sure?&#39; },
                class: &amp;quot;btn btn-sm btn-outline-danger&amp;quot; %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when you should be able to delete a tweet in the middle of the tweets and not reload the entire page index page.  You will notice also that each tweet now has the turbo-frame border.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_4th_delete_broadcast.png&#34; alt=&#34;tweet_index_4th&#34;&gt;&lt;/p&gt;
&lt;p&gt;In the above image you can see we are deleting the 3rd tweet - in the middle of the tweets.  And of course it works in both our web-clients because of the new broadcast and tags we added.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_5th_deleted.png&#34; alt=&#34;tweet_index_5th&#34;&gt;&lt;/p&gt;
&lt;p&gt;Looking at the logs we see that we only send the information that is changing to each client:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Turbo::StreamsChannel transmitting &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;remove\&amp;quot; target=\&amp;quot;tweet_6\&amp;quot;&amp;gt;&amp;lt;/turbo-stream&amp;gt;&amp;quot; (via streamed from tweets)
Turbo::StreamsChannel transmitting &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;remove\&amp;quot; target=\&amp;quot;tweet_6\&amp;quot;&amp;gt;&amp;lt;/turbo-stream&amp;gt;&amp;quot; (via streamed from tweets)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;here is the full transaction:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Started DELETE &amp;quot;/tweets/6&amp;quot; for 127.0.0.1 at 2021-02-28 21:45:44 +0100
Processing by TweetsController#destroy as TURBO_STREAM
  Parameters: {&amp;quot;authenticity_token&amp;quot;=&amp;gt;&amp;quot;[FILTERED]&amp;quot;, &amp;quot;id&amp;quot;=&amp;gt;&amp;quot;6&amp;quot;}
  Tweet Load (5.5ms)  SELECT &amp;quot;tweets&amp;quot;.* FROM &amp;quot;tweets&amp;quot; WHERE &amp;quot;tweets&amp;quot;.&amp;quot;id&amp;quot; = $1 LIMIT $2  [[&amp;quot;id&amp;quot;, 6], [&amp;quot;LIMIT&amp;quot;, 1]]
  â³ app/controllers/tweets_controller.rb:63:in `set_tweet&#39;
  TRANSACTION (0.8ms)  BEGIN
  â³ app/controllers/tweets_controller.rb:53:in `destroy&#39;
  Tweet Destroy (27.4ms)  DELETE FROM &amp;quot;tweets&amp;quot; WHERE &amp;quot;tweets&amp;quot;.&amp;quot;id&amp;quot; = $1  [[&amp;quot;id&amp;quot;, 6]]
  â³ app/controllers/tweets_controller.rb:53:in `destroy&#39;
  TRANSACTION (30.8ms)  COMMIT
  â³ app/controllers/tweets_controller.rb:53:in `destroy&#39;
[ActionCable] Broadcasting to tweets: &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;remove\&amp;quot; target=\&amp;quot;tweet_6\&amp;quot;&amp;gt;&amp;lt;/turbo-stream&amp;gt;&amp;quot;
Redirected to http://localhost:3000/tweets
Completed 302 Found in 234ms (ActiveRecord: 66.0ms | Allocations: 6664)

Turbo::StreamsChannel transmitting &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;remove\&amp;quot; target=\&amp;quot;tweet_6\&amp;quot;&amp;gt;&amp;lt;/turbo-stream&amp;gt;&amp;quot; (via streamed from tweets)
Turbo::StreamsChannel transmitting &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;remove\&amp;quot; target=\&amp;quot;tweet_6\&amp;quot;&amp;gt;&amp;lt;/turbo-stream&amp;gt;&amp;quot; (via streamed from tweets)
Started GET &amp;quot;/tweets&amp;quot; for 127.0.0.1 at 2021-02-28 21:45:44 +0100
Processing by TweetsController#index as TURBO_STREAM
  Rendering layout layouts/application.html.erb
  Rendering tweets/index.html.erb within layouts/application
  Rendered tweets/_form.html.erb (Duration: 1.9ms | Allocations: 501)
  Tweet Load (1.6ms)  SELECT &amp;quot;tweets&amp;quot;.* FROM &amp;quot;tweets&amp;quot; ORDER BY &amp;quot;tweets&amp;quot;.&amp;quot;created_at&amp;quot; DESC
  â³ app/views/tweets/index.html.erb:15
  Rendered collection of tweets/_tweet.html.erb [3 times] (Duration: 1.2ms | Allocations: 528)
  Rendered tweets/index.html.erb within layouts/application (Duration: 10.2ms | Allocations: 2380)
[Webpacker] Everything&#39;s up-to-date. Nothing to do
  Rendered layout layouts/application.html.erb (Duration: 27.4ms | Allocations: 7296)
Completed 200 OK in 31ms (Views: 26.6ms | ActiveRecord: 1.6ms | Allocations: 7918)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s take another snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;broadcast deleted tweets via hotwire&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;edit--updates-to-all-clients&#34;&gt;Edit / Updates to all clients!&lt;/h3&gt;
&lt;p&gt;Turbo unlike Turbo-Links works with Forms as well as links.  This allows us to edit our posts.&lt;/p&gt;
&lt;h4 id=&#34;start-with-the-create-form&#34;&gt;Start with the Create Form&lt;/h4&gt;
&lt;p&gt;Lets start by testing the create form as is with validation errors - if we enter a blank message we should get an error.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_6th_no_frame_validations.png&#34; alt=&#34;tweet_index_6th_no_frame_validations&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now lets put this form in a turbo-frame - since we will need this in a form for edit - lets start with the easy case - new / create - where the form will always be in the same location. Ideally, the &lt;code&gt;turbo_stream_from&lt;/code&gt; definition is before the first &lt;code&gt;turbo_frame_tag&lt;/code&gt;.  Now your index view will look something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/index.html.erb
&amp;lt;p id=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;!-- connects to the backend broadcast (via a channel) --&amp;gt;
&amp;lt;%= turbo_stream_from &amp;quot;tweets&amp;quot; %&amp;gt;

&amp;lt;h1&amp;gt;Tweets&amp;lt;/h1&amp;gt;

&amp;lt;h4&amp;gt;New Tweet&amp;lt;/h4&amp;gt;

&amp;lt;!-- the form needs to be in a frame - otherwise we can&#39;t edit in place --&amp;gt;
&amp;lt;%= turbo_frame_tag &amp;quot;tweet-form&amp;quot; do %&amp;gt;
  &amp;lt;%= render &amp;quot;tweets/form&amp;quot;, tweet: @tweet %&amp;gt;
&amp;lt;% end %&amp;gt;

&amp;lt;h4&amp;gt;Tweet Feed&amp;lt;/h4&amp;gt;

&amp;lt;!-- frame that receives the taged data --&amp;gt;
&amp;lt;%= turbo_frame_tag &amp;quot;tweets&amp;quot; do %&amp;gt;
  &amp;lt;%= render @tweets %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Log file - from the log file we see we are still reloading the page see the line: &lt;code&gt;Tweet Load (83.9ms)  SELECT &amp;quot;tweets&amp;quot;.* FROM &amp;quot;tweets&amp;quot; ORDER BY &amp;quot;tweets&amp;quot;.&amp;quot;created_at&amp;quot;&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Started POST &amp;quot;/tweets&amp;quot; for 127.0.0.1 at 2021-03-01 20:55:34 +0100
Processing by TweetsController#create as TURBO_STREAM
  Parameters: {&amp;quot;authenticity_token&amp;quot;=&amp;gt;&amp;quot;[FILTERED]&amp;quot;, &amp;quot;tweet&amp;quot;=&amp;gt;{&amp;quot;body&amp;quot;=&amp;gt;&amp;quot;&amp;quot;}, &amp;quot;commit&amp;quot;=&amp;gt;&amp;quot;Create Tweet&amp;quot;}
  Rendering layout layouts/application.html.erb
  Rendering tweets/index.html.erb within layouts/application
  Rendered tweets/_form.html.erb (Duration: 4.9ms | Allocations: 1362)
  Tweet Load (83.9ms)  SELECT &amp;quot;tweets&amp;quot;.* FROM &amp;quot;tweets&amp;quot; ORDER BY &amp;quot;tweets&amp;quot;.&amp;quot;created_at&amp;quot; DESC
  â³ app/views/tweets/index.html.erb:23
  Rendered collection of tweets/_tweet.html.erb [4 times] (Duration: 2.0ms | Allocations: 700)
  Rendered tweets/index.html.erb within layouts/application (Duration: 94.0ms | Allocations: 3159)
[Webpacker] Everything&#39;s up-to-date. Nothing to do
  Rendered layout layouts/application.html.erb (Duration: 119.2ms | Allocations: 8006)
Completed 422 Unprocessable Entity in 125ms (Views: 35.9ms | ActiveRecord: 83.9ms | Allocations: 9244)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To fix this we will need the &lt;code&gt;form&lt;/code&gt; to have a tag id - to do this we can update the form with &lt;code&gt;&amp;lt;%= form_with(model: tweet, id: dom_id(tweet)) do |form| %&amp;gt;&lt;/code&gt; - also:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;%= form_with(model: tweet, id: dom_id(tweet)) do |form| %&amp;gt;
&amp;lt;% if tweet.errors.any? %&amp;gt;
&amp;lt;div id=&amp;quot;error_explanation&amp;quot;&amp;gt;
  &amp;lt;h2&amp;gt;&amp;lt;%= pluralize(tweet.errors.count, &amp;quot;error&amp;quot;) %&amp;gt; prohibited this tweet from being saved:&amp;lt;/h2&amp;gt;

  &amp;lt;ul&amp;gt;
    &amp;lt;% tweet.errors.each do |error| %&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;%= error.full_message %&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;

&amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
  &amp;lt;%= form.label :body %&amp;gt;
  &amp;lt;%= form.text_area :body %&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div class=&amp;quot;actions&amp;quot;&amp;gt;
  &amp;lt;%= form.submit %&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But even still we need to the controller how to use the turbo_stream.  There are several ways (with and without a template).  We will start without a tempate (actually the template info is inline) using: &lt;code&gt;format.turbo_stream { render turbo_stream: turbo_stream.replace(@tweet, partial: &amp;quot;tweets/form&amp;quot;, locals: { tweet: @tweet}) }&lt;/code&gt;.  Not the create controller should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/tweets_controller.rb
  def create
    @tweet = Tweet.new(tweet_params)

    respond_to do |format|
      if @tweet.save
        format.html { redirect_to tweets_url, notice: &amp;quot;Tweet was successfully created.&amp;quot; }
        format.json { render :show, status: :created, location: @tweet }
      else
        format.turbo_stream { render turbo_stream: turbo_stream.replace(@tweet, partial: &amp;quot;tweets/form&amp;quot;, locals: { tweet: @tweet}) }
        @tweets = Tweet.all.order(created_at: :desc)
        format.html { render :index, status: :unprocessable_entity }
        format.json { render json: @tweet.errors, status: :unprocessable_entity }
      end
    end
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when we create an invalid message we should see (notice the turbo-frame outline):
&lt;img src=&#34;tweet_index_7th_w_frame_validation.png&#34; alt=&#34;tweet_index_7th_w_frame_validation&#34;&gt;&lt;/p&gt;
&lt;p&gt;When we look at the logs we can confirm we are using the TURBO_STREAM for both directions and NOT reloading the page (no &lt;code&gt;LOAD&lt;/code&gt; in the log):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Started POST &amp;quot;/tweets&amp;quot; for 127.0.0.1 at 2021-03-01 21:22:13 +0100
Processing by TweetsController#create as TURBO_STREAM
  Parameters: {&amp;quot;authenticity_token&amp;quot;=&amp;gt;&amp;quot;[FILTERED]&amp;quot;, &amp;quot;tweet&amp;quot;=&amp;gt;{&amp;quot;body&amp;quot;=&amp;gt;&amp;quot;&amp;quot;}, &amp;quot;commit&amp;quot;=&amp;gt;&amp;quot;Create Tweet&amp;quot;}
  Rendered tweets/_form.html.erb (Duration: 3.0ms | Allocations: 1373)
Completed 200 OK in 7ms (Views: 0.3ms | ActiveRecord: 0.0ms | Allocations: 2641)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that validation errors work again - lets be sure that we can still create a new tweet.&lt;/p&gt;
&lt;p&gt;Assuming all works - lets take a quick snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;new tweet form is hooked into turbo-stream and validations still work&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;?????
Turbo - is clever enough to figure out the routing in the default case and will use its own stream to update the page - however you could also define an explicit stream - something like: &lt;code&gt;format.turbo_stream { render turbo_stream: turbo_stream.prepend(@tweet, locals: { tweet: @tweet}) }&lt;/code&gt; or with &lt;code&gt;format.turbo_stream&lt;/code&gt; and a turbo view &lt;code&gt;app/views/tweets/create.turbo_stream&lt;/code&gt; - containing: &lt;code&gt;&amp;lt;%=  %&amp;gt;&lt;/code&gt;
????&lt;/p&gt;
&lt;h4 id=&#34;in-place-edit&#34;&gt;In-Place Edit&lt;/h4&gt;
&lt;p&gt;In oder to do an in-place edit we will need yet another type of broadcast &lt;code&gt; after_update_commit { broadcast_replace_to &amp;quot;tweets&amp;quot; }&lt;/code&gt;
so our new model will now look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/tweet.rb
class Tweet &amp;lt; ApplicationRecord
  validates :body, presence: true

  # broadcast &amp;quot;tweets&amp;quot; send all changes to the `turbo_stream` view &amp;quot;tweets&amp;quot;
  # `broadcast_prepend_to` places new information at the top instead of appending to the bottom
  after_create_commit { broadcast_prepend_to &amp;quot;tweets&amp;quot; }
  after_destroy_commit { broadcast_remove_to &amp;quot;tweets&amp;quot; }
  after_update_commit { broadcast_replace_to &amp;quot;tweets&amp;quot; }
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now would hope it would all work, but when we click on Edit, the item disappears (and re-appears on reload).
&lt;img src=&#34;tweet_index_8th_broken_edit.png&#34; alt=&#34;tweet_index_8th_broken_edit&#34;&gt;&lt;/p&gt;
&lt;p&gt;Lets look at the logs:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Started GET &amp;quot;/tweets/11/edit&amp;quot; for 127.0.0.1 at 2021-03-03 20:10:53 +0100
Processing by TweetsController#edit as HTML
  Parameters: {&amp;quot;id&amp;quot;=&amp;gt;&amp;quot;11&amp;quot;}
  Tweet Load (0.7ms)  SELECT &amp;quot;tweets&amp;quot;.* FROM &amp;quot;tweets&amp;quot; WHERE &amp;quot;tweets&amp;quot;.&amp;quot;id&amp;quot; = $1 LIMIT $2  [[&amp;quot;id&amp;quot;, 11], [&amp;quot;LIMIT&amp;quot;, 1]]
  â³ app/controllers/tweets_controller.rb:68:in `set_tweet&#39;
  Rendering tweets/edit.html.erb
  Rendered tweets/_form.html.erb (Duration: 2.3ms | Allocations: 676)
  Rendered tweets/edit.html.erb (Duration: 3.8ms | Allocations: 980)
Completed 200 OK in 8ms (Views: 4.5ms | ActiveRecord: 0.7ms | Allocations: 2104)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We see that it loads the tweet and sends it to the edit.html.erb page (which loads the form partial), but we don&amp;rsquo;t see anything but the index page (minus the tweet we wanted to edit).  Unfortunately, Hotwire, doesn&amp;rsquo;t provide an error, it just doesn&amp;rsquo;t find a location to render the edit on our index (since the edit link is within a stream tag) and just replaces our dom_id with nothing.  Here is where Hotwire could provide much better feedback.&lt;/p&gt;
&lt;p&gt;In any case, the fix is straightforward, we need to tell Rails what in the edit page goes into the index page so we can do that with another frame_tag: &lt;code&gt;&amp;lt;%= turbo_frame_tag dom_id(@tweet) do %&amp;gt;&lt;/code&gt; Now the edit.html.erb page should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/edit.html.erb
&amp;lt;h1&amp;gt;Editing Tweet&amp;lt;/h1&amp;gt;

&amp;lt;%= turbo_frame_tag dom_id(@tweet) do %&amp;gt;
  &amp;lt;%= render &#39;form&#39;, tweet: @tweet %&amp;gt;
&amp;lt;% end %&amp;gt;

&amp;lt;%= link_to &#39;Show&#39;, @tweet %&amp;gt; |
&amp;lt;%= link_to &#39;Back&#39;, tweets_path %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE: We don&amp;rsquo;t need to fix the form partial since we did that in the previous &lt;code&gt;new&lt;/code&gt; step with by adding a dom_id tag to the form with: &lt;code&gt;&amp;lt;%= form_with(model: tweet, id: dom_id(tweet)) do |form| %&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_9th_in_place_wo_css.png&#34; alt=&#34;tweet_index_9th_in_place_wo_css&#34;&gt;&lt;/p&gt;
&lt;p&gt;We might notice that the edit page lacks formatting (the form is squished up against the left of our frame).  This is because our tweet partial has a card div but that is lacking when replace the dom_id with the form &amp;ndash; we can easily fix this by adding the CSS to our edit page:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/edit.html.erb
&amp;lt;h1&amp;gt;Editing Tweet&amp;lt;/h1&amp;gt;

&amp;lt;%= turbo_frame_tag dom_id(@tweet) do %&amp;gt;
&amp;lt;div class=&amp;quot;card card-body&amp;quot;&amp;gt;
  &amp;lt;%= render &#39;form&#39;, tweet: @tweet %&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;

&amp;lt;%= link_to &#39;Show&#39;, @tweet %&amp;gt; |
&amp;lt;%= link_to &#39;Back&#39;, tweets_path %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when we reload and try to edit &amp;ndash; we see what we expect:
&lt;img src=&#34;tweet_index_10th_in_place_edit.png&#34; alt=&#34;tweet_index_10th_in_place_edit&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now when we actually do an edit we see it all works as expected.  From the logs we see
it loads the tweet from the db, then the the edit page which loads the frame (this time it actually places it into the dom_id we provided, but unfortunately, we can&amp;rsquo;t see that from the logs)!  And we can see that when we submit the edit &amp;ndash; the tweet model sends out the html patch send to both windows we have open.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Started GET &amp;quot;/tweets/11/edit&amp;quot; for 127.0.0.1 at 2021-03-03 20:34:56 +0100
Processing by TweetsController#edit as HTML
  Parameters: {&amp;quot;id&amp;quot;=&amp;gt;&amp;quot;11&amp;quot;}
  Tweet Load (1.0ms)  SELECT &amp;quot;tweets&amp;quot;.* FROM &amp;quot;tweets&amp;quot; WHERE &amp;quot;tweets&amp;quot;.&amp;quot;id&amp;quot; = $1 LIMIT $2  [[&amp;quot;id&amp;quot;, 11], [&amp;quot;LIMIT&amp;quot;, 1]]
  â³ app/controllers/tweets_controller.rb:68:in `set_tweet&#39;
  Rendering tweets/edit.html.erb
  Rendered tweets/_form.html.erb (Duration: 2.5ms | Allocations: 649)
  Rendered tweets/edit.html.erb (Duration: 3.8ms | Allocations: 985)
Completed 200 OK in 9ms (Views: 5.3ms | ActiveRecord: 1.0ms | Allocations: 2110)

Started PATCH &amp;quot;/tweets/11&amp;quot; for 127.0.0.1 at 2021-03-03 20:35:11 +0100
Processing by TweetsController#update as TURBO_STREAM
  Parameters: {&amp;quot;authenticity_token&amp;quot;=&amp;gt;&amp;quot;[FILTERED]&amp;quot;, &amp;quot;tweet&amp;quot;=&amp;gt;{&amp;quot;body&amp;quot;=&amp;gt;&amp;quot;jump! how high?&amp;quot;}, &amp;quot;commit&amp;quot;=&amp;gt;&amp;quot;Update Tweet&amp;quot;, &amp;quot;id&amp;quot;=&amp;gt;&amp;quot;11&amp;quot;}
  Tweet Load (1.1ms)  SELECT &amp;quot;tweets&amp;quot;.* FROM &amp;quot;tweets&amp;quot; WHERE &amp;quot;tweets&amp;quot;.&amp;quot;id&amp;quot; = $1 LIMIT $2  [[&amp;quot;id&amp;quot;, 11], [&amp;quot;LIMIT&amp;quot;, 1]]
  â³ app/controllers/tweets_controller.rb:68:in `set_tweet&#39;
  TRANSACTION (1.0ms)  BEGIN
  â³ app/controllers/tweets_controller.rb:45:in `block in update&#39;
  Tweet Update (58.8ms)  UPDATE &amp;quot;tweets&amp;quot; SET &amp;quot;body&amp;quot; = $1, &amp;quot;updated_at&amp;quot; = $2 WHERE &amp;quot;tweets&amp;quot;.&amp;quot;id&amp;quot; = $3  [[&amp;quot;body&amp;quot;, &amp;quot;jump! how high?&amp;quot;], [&amp;quot;updated_at&amp;quot;, &amp;quot;2021-03-03 19:35:11.765970&amp;quot;], [&amp;quot;id&amp;quot;, 11]]
  â³ app/controllers/tweets_controller.rb:45:in `block in update&#39;
  TRANSACTION (2.3ms)  COMMIT
  â³ app/controllers/tweets_controller.rb:45:in `block in update&#39;
  Rendered tweets/_tweet.html.erb (Duration: 2.0ms | Allocations: 499)
[ActionCable] Broadcasting to tweets: &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;replace\&amp;quot; target=\&amp;quot;tweet_11\&amp;quot;&amp;gt;&amp;lt;template&amp;gt;&amp;lt;!-- this tag with `tweet` instead of &#39;tweets&#39; identifies an individual tweet --&amp;gt;\n&amp;lt;turbo-frame id=\&amp;quot;tweet_11\&amp;quot;&amp;gt;\n\n&amp;lt;div class=\&amp;quot;card card-body\&amp;quot;&amp;gt;\n  &amp;lt;div&amp;gt;jump! how high?&amp;lt;/div&amp;gt;\n\n  &amp;lt;div class=\&amp;quot;mt-2\&amp;quot;&amp;gt;\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-success\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;post\&amp;quot; href=\&amp;quot;/tweets/11/like\&amp;quot;&amp;gt;Like (0)&amp;lt;/a&amp;gt;\n\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-info\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;post\&amp;quot; href=\&amp;quot;/tweets/11/retweet\&amp;quot;&amp;gt;Retweet (0)&amp;lt;/a&amp;gt;\n\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-primary\&amp;quot; href=\&amp;quot;/tweets/11/edit\&amp;quot;&amp;gt;Edit&amp;lt;/a&amp;gt;\n\n    &amp;lt;a data-confirm=\&amp;quot;Are you sure?\&amp;quot; class=\&amp;quot;btn btn-sm btn-outline-danger\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;delete\&amp;quot; href=\&amp;quot;/tweets/11\&amp;quot;&amp;gt;Destroy&amp;lt;/a&amp;gt;\n  &amp;lt;/div&amp;gt;\n&amp;lt;/div&amp;gt;\n\n&amp;lt;/turbo-frame&amp;gt;&amp;lt;/template&amp;gt;&amp;lt;/turbo-stream&amp;gt;&amp;quot;
Redirected to http://localhost:3000/tweets
Completed 302 Found in 116ms (ActiveRecord: 63.1ms | Allocations: 6308)

Turbo::StreamsChannel transmitting &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;replace\&amp;quot; target=\&amp;quot;tweet_11\&amp;quot;&amp;gt;&amp;lt;template&amp;gt;&amp;lt;!-- this tag with `tweet` instead of &#39;tweets&#39; identifies an individual tweet --&amp;gt;\n&amp;lt;turbo-frame id=\&amp;quot;tweet_11\&amp;quot;&amp;gt;\n\n&amp;lt;div class=\&amp;quot;card card-body\&amp;quot;&amp;gt;\n  &amp;lt;div&amp;gt;jump! how high?&amp;lt;/div&amp;gt;\n\n  &amp;lt;div class=\&amp;quot;mt-2\&amp;quot;&amp;gt;\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn... (via streamed from tweets)
Turbo::StreamsChannel transmitting &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;replace\&amp;quot; target=\&amp;quot;tweet_11\&amp;quot;&amp;gt;&amp;lt;template&amp;gt;&amp;lt;!-- this tag with `tweet` instead of &#39;tweets&#39; identifies an individual tweet --&amp;gt;\n&amp;lt;turbo-frame id=\&amp;quot;tweet_11\&amp;quot;&amp;gt;\n\n&amp;lt;div class=\&amp;quot;card card-body\&amp;quot;&amp;gt;\n  &amp;lt;div&amp;gt;jump! how high?&amp;lt;/div&amp;gt;\n\n  &amp;lt;div class=\&amp;quot;mt-2\&amp;quot;&amp;gt;\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn... (via streamed from tweets)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets add a &lt;code&gt;cancel&lt;/code&gt; button to the form so we don&amp;rsquo;t need to reload the page to stop editing - we can do that with a show link &lt;code&gt;&amp;lt;%= link_to &amp;quot;Cancel&amp;quot;, @tweet, class: &amp;quot;btn btn-sm btn-outline-danger&amp;quot; %&amp;gt;&lt;/code&gt; - so our form would now look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/_form.html.erb
&amp;lt;%= form_with(model: tweet, id: dom_id(tweet)) do |form| %&amp;gt;
&amp;lt;% if tweet.errors.any? %&amp;gt;
&amp;lt;div id=&amp;quot;error_explanation&amp;quot;&amp;gt;
  &amp;lt;h2&amp;gt;&amp;lt;%= pluralize(tweet.errors.count, &amp;quot;error&amp;quot;) %&amp;gt; prohibited this tweet from being saved:&amp;lt;/h2&amp;gt;

  &amp;lt;ul&amp;gt;
    &amp;lt;% tweet.errors.each do |error| %&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;%= error.full_message %&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;

&amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
  &amp;lt;%= form.label :body %&amp;gt;
  &amp;lt;%= form.text_area :body %&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div class=&amp;quot;action&amp;quot;&amp;gt;
  &amp;lt;%= form.submit class: &amp;quot;btn btn-sm btn-outline-success&amp;quot; %&amp;gt;
  &amp;lt;%= link_to &amp;quot;Cancel&amp;quot;, @tweet, class: &amp;quot;btn btn-sm btn-outline-danger&amp;quot; %&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately, now when we hit &lt;code&gt;cancel&lt;/code&gt; - the tweet disappears &amp;ndash; because @tweet points to the show page and our current show page has no turbo_frame with a &lt;code&gt;dom_id&lt;/code&gt;. We can fix this by putting our show page (formatted like the tweet partial wrapped in a frame tag with a dom_id) - like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/show.html.erb
&amp;lt;%= turbo_frame_tag dom_id(@tweet) do %&amp;gt;

&amp;lt;div class=&amp;quot;card card-body&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;%= @tweet.body %&amp;gt;&amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;mt-2&amp;quot;&amp;gt;
    &amp;lt;%= link_to &amp;quot;Like (#{@tweet.likes})&amp;quot;,
                tweet_like_path(@tweet),
                method: :post,
                class: &amp;quot;btn btn-sm btn-outline-success&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &amp;quot;Retweet (#{@tweet.retweets})&amp;quot;,
                tweet_retweet_path(@tweet),
                method: :post,
                class: &amp;quot;btn btn-sm btn-outline-info&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &#39;Edit&#39;, edit_tweet_path(@tweet),
                class: &amp;quot;btn btn-sm btn-outline-primary&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &#39;Destroy&#39;, tweet_path(@tweet), method: :delete,
                data: { confirm: &#39;Are you sure?&#39; },
                class: &amp;quot;btn btn-sm btn-outline-danger&amp;quot; %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, this is a bit silly since this is basically the same as our partial and we have two places to change if we want to adjust our tweet layout &amp;ndash; so we can fix this by using the tweet partial:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/show.html.erb
&amp;lt;%= turbo_frame_tag dom_id(@tweet) do %&amp;gt;
  &amp;lt;%= render @tweet %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works, but renders a tag inside a turbo_frame with the tweet dom_id inside the same turbo_frame with the same dom_id (I only noticed this since I have the css marking all turbo_frames):
&lt;img src=&#34;tweet_index_11th_double_frame.png&#34; alt=&#34;tweet_index_11th_double_frame&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is because the tweet partial also has a dom_id - and show will process whatever it finds &amp;ndash; but only sends whatever is marked by the dom_id.&lt;/p&gt;
&lt;p&gt;This was a little tricky to notice at first without the HTML inspector &amp;ndash; since in show I used the explicit dom_id: &lt;code&gt;&amp;lt;%= turbo_frame_tag @tweet do %&amp;gt;&lt;/code&gt; and in the tweet partial I used the implicit dom_id tag: &lt;code&gt;&amp;lt;%= turbo_frame_tag tweet do %&amp;gt;&lt;/code&gt;.  Unfortunately, for now Rails Turbo provides does not yet provide warnings when you render the same dom_id twice.&lt;/p&gt;
&lt;p&gt;In any case, now it may be clear that the the proper solution is that show should now read like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/show.html.erb
&amp;lt;%= render @tweet %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when you inspect the HTML you will only see one dom_id for each tweet and since turbo only replaces items with the correct tags and ids - it renders the tweet partial now.  This is all a bit tricky to debug, hopefully, with time more errors or logging will be added - but for now, I suggest adding &lt;code&gt;&amp;lt;!-- --&amp;gt;&lt;/code&gt; HTML comments with the name of the file inside each turbo tag to ease debugging &amp;ndash; at least until everything works as wished.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s be sure the validation still works for edit too. Try to submit an empty edit - we should see:
&lt;img src=&#34;tweet_index_12_edit_w_validations.png&#34; alt=&#34;tweet_index_12_edit_w_validations&#34;&gt;
because the form now has a dom_id and the validation errors are sent there.&lt;/p&gt;
&lt;p&gt;If some other route is happening another way to fix this would be to add &lt;code&gt;format.turbo_stream { render turbo_stream: turbo_stream.replace(@tweet, partial: &amp;quot;tweets/form&amp;quot;, locals: { tweet: @tweet}) }&lt;/code&gt; to the controller update method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/tweets_controller.rb
def update
    respond_to do |format|
      if @tweet.update(tweet_params)
        format.html { redirect_to tweets_url, notice: &amp;quot;Tweet was successfully updated.&amp;quot; }
        format.json { render :show, status: :ok, location: @tweet }
      else
        format.turbo_stream { render turbo_stream: turbo_stream.replace(@tweet, partial: &amp;quot;tweets/form&amp;quot;, locals: { tweet: @tweet}) }
        format.html { render :edit, status: :unprocessable_entity }
        format.json { render json: @tweet.errors, status: :unprocessable_entity }
      end
    end
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OK - ideally all functionality in the edit form is now working well!&lt;/p&gt;
&lt;p&gt;Time for another snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;turbo frame now allows in-place edit and cancel edit without reloading&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;likes-and-retweet&#34;&gt;Likes and Retweet&lt;/h3&gt;
&lt;p&gt;I was able to get these special routes / actions to update just the calling browser, but unable to get these to broadcast to all open connections.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;I am particularly fond of the GoRails videos.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://hotwire.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://hotwire.dev/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://turbo.hotwire.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://turbo.hotwire.dev/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/hotwired/hotwire-rails&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/hotwired/hotwire-rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=NtTfYfWAzw0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=NtTfYfWAzw0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=77GvSdc2Pf8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=77GvSdc2Pf8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=NtTfYfWAzw0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=NtTfYfWAzw0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=MRv4XGu6QkY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=MRv4XGu6QkY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://gorails.com/episodes/hotwire-rails?autoplay=1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://gorails.com/episodes/hotwire-rails?autoplay=1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://robrace.dev/build-a-twitter-clone-with-rails-hotwire/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://robrace.dev/build-a-twitter-clone-with-rails-hotwire/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://blog.cloud66.com/taking-rails-to-the-next-level-with-hotwire/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.cloud66.com/taking-rails-to-the-next-level-with-hotwire/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://betterprogramming.pub/hotwire-actiontext-and-rails-6-be025dce7d87&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://betterprogramming.pub/hotwire-actiontext-and-rails-6-be025dce7d87&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Tweets - A Single Page Rails App (using reloads)</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_1_single_page_app_simulate/</link>
      <pubDate>Sat, 20 Feb 2021 18:57:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_1_single_page_app_simulate/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;This article is just to have a base app that stays on the index page.  We will use this as a starting point for a more efficient single page app by updating this project with Hotwire in the next article 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_hotwire_tweet_single_page/&#34;&gt;Tweets - A Rails based Single Page App using Hotwire&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://hotwire.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hotwire&lt;/a&gt; allows us to build Single Page Apps using Ruby and Rails with nearly NO configuration! It allow very responsive web-applications as it reloads only the parts of the page that change via a socket.  Hotwire using 
&lt;a href=&#34;https://turbo.hotwire.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Turbo&lt;/a&gt; - an evolution of TurboLinks and as such is mobile friendly and in most cases can send the replacement HTML directly from the server to the client with minimal or no client side processing over websockets so there is minimal lag time.&lt;/p&gt;
&lt;p&gt;This code can be found at: 
&lt;a href=&#34;https://github.com/btihen/tweet_simulator_rails&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/btihen/tweet_simulator_rails&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;basic-setup&#34;&gt;Basic Setup&lt;/h2&gt;
&lt;h3 id=&#34;create-the-project&#34;&gt;Create the project&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;ll skip Turbolinks since Turbo replaces Turbolinks and also installs Stimulus&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails new tweets -d postgresql -T --skip-turbolinks --skip-spring
cd tweets
git add .
git commit -m &amp;quot;initial commit after creation&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I generally take a lot of git snapshots (and then squash them - so its easy to go back to a known good point if things don&amp;rsquo;t work out).&lt;/p&gt;
&lt;h3 id=&#34;create-a-traditional-rails-tweet-clone&#34;&gt;Create a Traditional Rails Tweet Clone&lt;/h3&gt;
&lt;h4 id=&#34;tweet-model&#34;&gt;Tweet Model&lt;/h4&gt;
&lt;p&gt;We&amp;rsquo;ll scaffold the model to get all the parts we need&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails g scaffold tweet body:text likes:integer retweets:integer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&amp;rsquo;ll update the migration to prevent blanks - make the migration file look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/migrate/yyyymmddHHMMSS_create_tweets.rb
class CreateTweets &amp;lt; ActiveRecord::Migration[6.1]
  def change
    create_table :tweets do |t|
      t.text :body, null: false
      t.integer :likes, null: false, default: 0
      t.integer :retweets, null: false, default: 0

      t.timestamps
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we should be able to successfully create and migrate out database&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:create
bin/rails db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Given the Database restrictions we&amp;rsquo;ll add validations to the model. So now it should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/tweet.rb
class Tweet &amp;lt; ApplicationRecord
  validates :body, presence: true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets also point the root route at our tweets resource - so now it should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/routes.rb
Rails.application.routes.draw do
  resources :tweets
  root to: &amp;quot;tweets#index&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets start up rails and be sure everything works so far:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;go to &lt;code&gt;http://localhost:3000&lt;/code&gt; and make and edit and delete some tweets.&lt;/p&gt;
&lt;p&gt;Assuming it works lets commit these changes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;created tweet scaffold, validations and routes&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;lets-make-this-useable-more-like-a-single-page-app&#34;&gt;Let&amp;rsquo;s make this useable (more like a single page app)&lt;/h4&gt;
&lt;p&gt;Lets start by fixing the following problems:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the create form allows us to choose and edit likes and retweets&lt;/li&gt;
&lt;li&gt;tweets are listed in the opposite order in oldest to newest&lt;/li&gt;
&lt;li&gt;to create a new tweet we need to go to a separate new page&lt;/li&gt;
&lt;li&gt;creating and editing new tweets brings us to a show page (away from our index)&lt;/li&gt;
&lt;li&gt;message, likes, retweets, etc are all listed in one long table row (we&amp;rsquo;ll fix with some bootstrap css)&lt;/li&gt;
&lt;li&gt;likes and retweets are not usable&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As mentioned users shouldn&amp;rsquo;t choose their likes and retweets:
&lt;img src=&#34;tweet_form_1st.png&#34; alt=&#34;tweet_form_1st&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now lets remove likes and retweets from our form:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/_form.html.erb
&amp;lt;%= form_with(model: tweet) do |form| %&amp;gt;
  &amp;lt;% if tweet.errors.any? %&amp;gt;
    &amp;lt;div id=&amp;quot;error_explanation&amp;quot;&amp;gt;
      &amp;lt;h2&amp;gt;&amp;lt;%= pluralize(tweet.errors.count, &amp;quot;error&amp;quot;) %&amp;gt; prohibited this tweet from being saved:&amp;lt;/h2&amp;gt;

      &amp;lt;ul&amp;gt;
        &amp;lt;% tweet.errors.each do |error| %&amp;gt;
          &amp;lt;li&amp;gt;&amp;lt;%= error.full_message %&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;% end %&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;% end %&amp;gt;

  &amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
    &amp;lt;%= form.label :body %&amp;gt;
    &amp;lt;%= form.text_area :body %&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;actions&amp;quot;&amp;gt;
    &amp;lt;%= form.submit %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the form should look like:
&lt;img src=&#34;tweet_form_2nd.png&#34; alt=&#34;tweet_form_2nd&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you made several tweets you&amp;rsquo;ll notice that the tweets are in oldest to newest.
&lt;img src=&#34;tweet_index_1st_oldest.png&#34; alt=&#34;tweet_index_1st&#34;&gt;&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll fix that with the index controller sort order:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/tweets_controller.rb
class TweetsController &amp;lt; ApplicationController
  before_action :set_tweet, only: %i[ show edit update destroy ]

  def index
    @tweets = Tweet.all.order(created_at: :desc)
  end
  ...
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_2nd_newest.png&#34; alt=&#34;tweet_index_2nd&#34;&gt;&lt;/p&gt;
&lt;p&gt;now tweets should be newest to oldest&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s put our create tweet at the top of our index page&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/index.html.erb
&amp;lt;p id=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;h1&amp;gt;Tweets&amp;lt;/h1&amp;gt;

&amp;lt;h4&amp;gt;New Tweet&amp;lt;/h4&amp;gt;
&amp;lt;%= render &amp;quot;tweets/form&amp;quot;, tweet: @tweet %&amp;gt;

&amp;lt;h4&amp;gt;Tweet Feed&amp;lt;/h4&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now when we check out index page again &amp;ndash; oops, we get an error:
&lt;img src=&#34;tweet_index_3rd_error.png&#34; alt=&#34;tweet_index_3rd_error&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;errors&lt;/code&gt; is null because the new instance isn&amp;rsquo;t available we need to add a new tweet to our index page from the controller:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/tweets_controller.rb
class TweetsController &amp;lt; ApplicationController
  before_action :set_tweet, only: %i[ show edit update destroy ]

  def index
    # put newest tweets at the top of the page
    @tweets = Tweet.all.order(created_at: :desc)
    @tweet = Tweet.new
  end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when we view index we should be able to create a tweet on the index page:
&lt;img src=&#34;tweet_index_4th_top.png&#34; alt=&#34;tweet_index_4th&#34;&gt;&lt;/p&gt;
&lt;p&gt;However, after creation we still go to show page and need to navigate back to the index page - lets fix that in the create controller.  We will change the line:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;format.html { redirect_to @tweet, notice: &amp;quot;Tweet was successfully created.&amp;quot; }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;with:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;format.html { redirect_to tweets_url, notice: &amp;quot;Tweet was successfully created.&amp;quot; }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We will have the same problem with update &amp;ndash; so let&amp;rsquo;s fix them both.  Now the controller should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/tweets_controller.rb
  def create
    @tweet = Tweet.new(tweet_params)

    respond_to do |format|
      if @tweet.save
        format.html { redirect_to tweets_url, notice: &amp;quot;Tweet was successfully created.&amp;quot; }
        format.json { render :show, status: :created, location: @tweet }
      else
        format.html { render :new, status: :unprocessable_entity }
        format.json { render json: @tweet.errors, status: :unprocessable_entity }
      end
    end
  end

  def update
    respond_to do |format|
      if @tweet.update(tweet_params)
        format.html { redirect_to tweet_url, notice: &amp;quot;Tweet was successfully updated.&amp;quot; }
        format.json { render :show, status: :ok, location: @tweet }
      else
        format.html { render :edit, status: :unprocessable_entity }
        format.json { render json: @tweet.errors, status: :unprocessable_entity }
      end
    end
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now after we create a new tweet we should &amp;lsquo;stay&amp;rsquo; (it actually reloads - which could be slow if we had many tweets on the page - we will fix this with hotwire) on the index page and see:
&lt;img src=&#34;tweet_index_5th_after_create.png&#34; alt=&#34;tweet_index_5th&#34;&gt;&lt;/p&gt;
&lt;p&gt;OK we are almost there, but we still have rows of tables and not a nice tweet feed look.&lt;/p&gt;
&lt;p&gt;Lets add Bootstrap CSS for some modest beauty (you can copy this file or use the below link to get the newest Bootstrap CSS)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/layout/application.html.erb
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;

&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Tweets&amp;lt;/title&amp;gt;
  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt;
  &amp;lt;%= csrf_meta_tags %&amp;gt;
  &amp;lt;%= csp_meta_tag %&amp;gt;

  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot;
        href=&amp;quot;https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css&amp;quot;
        integrity=&amp;quot;sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l&amp;quot;
        crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;
  &amp;lt;%= stylesheet_link_tag &#39;application&#39;, media: &#39;all&#39; %&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
  &amp;lt;%= yield %&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you can get the newest bootstrap link from: 
&lt;a href=&#34;https://getbootstrap.com/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://getbootstrap.com/docs/&lt;/a&gt; or 
&lt;a href=&#34;https://www.bootstrapcdn.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bootstrapcdn.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now lets make a partial reformat our feed with bootstrap:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/_tweet.html.erb
&amp;lt;div class=&amp;quot;card card-body&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;%= tweet.body %&amp;gt;&amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;mt-2&amp;quot;&amp;gt;
    &amp;lt;%= &amp;quot;Like (#{tweet.likes})&amp;quot; %&amp;gt;

    &amp;lt;%= &amp;quot;Retweet (#{tweet.retweets})&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &#39;Edit&#39;, edit_tweet_path(tweet),
              class: &amp;quot;btn btn-sm btn-success&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &#39;Destroy&#39;, tweet_path(tweet), method: :delete,
              data: { confirm: &#39;Are you sure?&#39; },
              class: &amp;quot;btn btn-sm btn-danger&amp;quot; %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets integrate the tweet partial into the index page:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/index.html.erb
&amp;lt;p id=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;h1&amp;gt;Tweets&amp;lt;/h1&amp;gt;

&amp;lt;h4&amp;gt;New Tweet&amp;lt;/h4&amp;gt;
&amp;lt;%= render &amp;quot;tweets/form&amp;quot;, tweet: @tweet %&amp;gt;

&amp;lt;h4&amp;gt;Tweet Feed&amp;lt;/h4&amp;gt;
&amp;lt;%= render @tweets %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have an app that basically works from the index pages (not yet Edit, but without Hotwire, that&amp;rsquo;s difficult &amp;ndash; see the next article)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_6th_formatted.png&#34; alt=&#34;tweet_index_6th&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take another git snapshot of &amp;lsquo;index&amp;rsquo; reloading app.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;tweet app mostly from the index page&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;activate-likes-and-retweets&#34;&gt;Activate likes and retweets&lt;/h4&gt;
&lt;p&gt;To finish this simple app lets activate Likes and Retweets - we will do this with new controllers since this is an independent action from our tweet itself.  We will use the &lt;code&gt;create&lt;/code&gt; since we are &lt;code&gt;creating&lt;/code&gt; a like or a retweet.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s build the like controller - we will redirect back to the index where we want to stay:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/likes_controller.rb
class LikesController &amp;lt; ApplicationController
  before_action :set_tweet

  def create
    @tweet.increment! :likes
    redirect_to tweets_url
  end

  private

  def set_tweet
    @tweet = Tweet.find(params[:tweet_id])
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now the retweet controller:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/retweets_controller.rb
class RetweetsController &amp;lt; ApplicationController
  before_action :set_tweet

  def create
    @tweet.increment! :retweets
    redirect_to tweets_url
  end

  private

  def set_tweet
    @tweet = Tweet.find(params[:tweet_id])
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These controllers are dependent on the tweet so they are subroutes of a tweet - so lets update our routes to be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/routes.rb
Rails.application.routes.draw do
  resources :tweets do
    resource :like, only: [:create]
    resource :retweet, only: [:create]
  end
  root to: &amp;quot;tweets#index&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets add the connection to controller in our front-end with buttons.  Note we need to use the &lt;code&gt;method: :post&lt;/code&gt; for our like and retweet &lt;code&gt;create&lt;/code&gt; because these are normally &lt;code&gt;posted&lt;/code&gt; by the &lt;code&gt;edit&lt;/code&gt; form.  In this case we want to bypass a form and just update.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/_tweet.html.erb
&amp;lt;div class=&amp;quot;card card-body&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;%= tweet.body %&amp;gt;&amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;mt-2&amp;quot;&amp;gt;
    &amp;lt;%= link_to &amp;quot;Like (#{tweet.likes})&amp;quot;,
                tweet_like_path(tweet),
                method: :post,
                class: &amp;quot;btn btn-sm btn-outline-success&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &amp;quot;Retweet (#{tweet.retweets})&amp;quot;,
                tweet_retweet_path(tweet),
                method: :post,
                class: &amp;quot;btn btn-sm btn-outline-info&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &#39;Edit&#39;, edit_tweet_path(tweet),
                class: &amp;quot;btn btn-sm btn-outline-primary&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &#39;Destroy&#39;, tweet_path(tweet), method: :delete,
                data: { confirm: &#39;Are you sure?&#39; },
                class: &amp;quot;btn btn-sm btn-outline-danger&amp;quot; %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Test that everything works as expected!  Assuming it works - we will take another snapshot.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;likes and retweets enabled and also &#39;stay&#39; on index page&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_7th_likes_retweets.png&#34; alt=&#34;tweet_index_7th&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rails 6.1 with TailwindCSS 2.0 and AlpineJS</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_1_tailwind_2_0_alpinejs/</link>
      <pubDate>Thu, 10 Sep 2020 02:46:07 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_1_tailwind_2_0_alpinejs/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;TailwindCSS is a very flexible CSS framework and makes it easy to customize unique web pages and animations.&lt;/p&gt;
&lt;p&gt;Unfortunately, with Rails its a bit tricky to install and configure with Rails Standards.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TailwindCSS 2.0 expects PostCSS 8 and Rails Webpacker uses PostCSS 7 (for now)&lt;/li&gt;
&lt;li&gt;TailwindCSS 2.0 expects AlpineJS, React or Vue &amp;ndash; by default Rails uses StimulusJS (although you can additionally install AlpineJS)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;rails-setup&#34;&gt;Rails Setup&lt;/h1&gt;
&lt;p&gt;I am assuming you have followed the Rails setup described at: 
&lt;a href=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the end, I feel like its easier / better to use tailwindcss with AlpineJS since that is how it evolved and lots of Internet resources are available for that.&lt;/p&gt;
&lt;h2 id=&#34;install-tailwind-css-20&#34;&gt;Install Tailwind CSS 2.0&lt;/h2&gt;
&lt;h3 id=&#34;tailwind-css-20-install&#34;&gt;Tailwind CSS 2.0 Install&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://tailwindcss.com/docs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://tailwindcss.com/docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Start by installing the tailwindcss compatible with postcss7 (necessary until rails-webpacker updates to postcss8) &amp;ndash; with or without upgrading webpacker the following should work:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn add tailwindcss@latest postcss@latest autoprefixer@latest

# if you get this error: Error: PostCSS plugin tailwindcss requires PostCSS 8. use:
# yarn add tailwindcss@npm:@tailwindcss/postcss7-compat postcss@^7 autoprefixer@^9
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now install AlpineJS (its easier to use AlpineJS with tailwind but Stimulus works too - just need to do it all yourself - alpine and stimulus play well together in Rails).  Add alpine turbo drive adapter so that the AlpineJS effects work even AFTER clicking on a link!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn add alpinejs
yarn add alpine-turbo-drive-adapter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you see something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;arn add aplinejs
error An unexpected error occurred: âhttps://registry.yarnpkg.com/aplinejs: Not foundâ.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then check the spelling of the package(s).&lt;/p&gt;
&lt;p&gt;Now create the tailwind config file&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx tailwindcss init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now config tailwind:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// tailwind.config.js
module.exports = {
  purge: [
    &#39;./app/**/*/*.html.erb&#39;,
    &#39;./app/helpers/**/*/*.rb&#39;,
    &#39;./app/javascript/**/*/*.js&#39;,
    &#39;./app/javascript/**/*/*.vue&#39;,
    &#39;./app/javascript/**/*/*.react&#39;
  ],
  darkMode: false, // or &#39;media&#39; or &#39;class&#39;
  theme: {
    extend: {},
  },
  variants: {
    extend: {},
  },
  plugins: [
    // not needed here ?
    // require(&#39;@tailwindcss/forms&#39;),
  ],
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;tell &lt;code&gt;postcss.config.js&lt;/code&gt; about tailwind:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/* postcss.config.js */
module.exports = {
  plugins: [
    require(&amp;quot;tailwindcss&amp;quot;)(&amp;quot;./tailwind.config.js&amp;quot;),
    require(&amp;quot;postcss-import&amp;quot;),
    require(&amp;quot;postcss-flexbugs-fixes&amp;quot;),
    require(&amp;quot;postcss-preset-env&amp;quot;)({
      autoprefixer: {
        flexbox: &amp;quot;no-2009&amp;quot;,
      },
      stage: 3,
    }),
  ],
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create application.scss&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir app/javascript/stylesheets
touch app/javascript/stylesheets/application.scss
cat &amp;lt;&amp;lt;EOF &amp;gt;app/javascript/stylesheets/application.scss
/* app/javascript/stylesheets/application.scss */
@import &amp;quot;tailwindcss/base&amp;quot;;
@import &amp;quot;tailwindcss/components&amp;quot;;
@import &amp;quot;tailwindcss/utilities&amp;quot;;

/* Add custom CSS here */
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;import tailwind into &lt;code&gt;application.js&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/* app/javascript/packs/application.js */
import Rails from &amp;quot;@rails/ujs&amp;quot;
import &amp;quot;@hotwired/turbo-rails&amp;quot;
import * as ActiveStorage from &amp;quot;@rails/activestorage&amp;quot;
import &amp;quot;channels&amp;quot;

// import alpinejs and its necessary rails adaptation
import &#39;alpine-turbo-drive-adapter&#39;
require(&amp;quot;alpinejs&amp;quot;)

// import tailwind into javascript
import &amp;quot;../stylesheets/application.scss&amp;quot;

Rails.start()
ActiveStorage.start()

import &amp;quot;controllers&amp;quot;

require(&amp;quot;trix&amp;quot;)
require(&amp;quot;@rails/actiontext&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&amp;rsquo;s great to get samples from 
&lt;a href=&#34;https://tailwindui.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://tailwindui.com&lt;/a&gt; (&amp;amp; other places) - USE THE INSPECTOR to copy the HTML (this will copy the AlpineJS settings too) - the standard copy HTML button requires you to add the JS on your own.&lt;/p&gt;
&lt;p&gt;create a navbar:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;touch app/views/layouts/_navbar.html.erb
cat &amp;lt;&amp;lt;EOF &amp;gt;app/views/layouts/_navbar.html.erb
&amp;lt;nav x-data=&amp;quot;{ open: false }&amp;quot; class=&amp;quot;bg-gray-800&amp;quot;&amp;gt;
  &amp;lt;!-- NavBar here --&amp;gt;
&amp;lt;/nav&amp;gt;
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create a footer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;!-- app/views/layouts/_footer.html.erb --&amp;gt;
&amp;lt;footer class=&amp;quot;bg-gray-50&amp;quot; aria-labelledby=&amp;quot;footerHeading&amp;quot;&amp;gt;
  &amp;lt;h2 id=&amp;quot;footerHeading&amp;quot; class=&amp;quot;sr-only&amp;quot;&amp;gt;Company&amp;lt;/h2&amp;gt;
  &amp;lt;div class=&amp;quot;max-w-md mx-auto pt-12 px-4 sm:max-w-7xl sm:px-6 lg:pt-16 lg:px-8&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;xl:grid xl:grid-cols-3 xl:gap-8&amp;quot;&amp;gt;
      Some Footer Info
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;mt-12 border-t border-gray-200 py-8&amp;quot;&amp;gt;
      &amp;lt;p class=&amp;quot;text-base text-gray-400 xl:text-center&amp;quot;&amp;gt;
        &amp;amp;copy; 2020 Company, Inc. All rights reserved.
      &amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/footer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Update the landing page:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;!-- app/views/landing/index.html.erb --&amp;gt;
&amp;lt;!-- landing page here --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;application.html.erb&lt;/code&gt; needs to import the javascript stylesheet and the navbar&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;!-- app/views/layouts/application.html.erb --&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Vivers&amp;lt;/title&amp;gt;
  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt;
  &amp;lt;%= csrf_meta_tags %&amp;gt;
  &amp;lt;%= csp_meta_tag %&amp;gt;

  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://rsms.me/inter/inter.css&amp;quot;&amp;gt;
  &amp;lt;%= stylesheet_link_tag &#39;application&#39;, media: &#39;all&#39; %&amp;gt;
  &amp;lt;%= stylesheet_pack_tag &#39;application&#39;, media: &#39;all&#39; %&amp;gt;
  &amp;lt;%= javascript_pack_tag &#39;application&#39; %&amp;gt;
  &amp;lt;%= yield :head %&amp;gt;
  &amp;lt;%= turbo_include_tags %&amp;gt;
  &amp;lt;%# stimulus_include_tags %&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;div class=&amp;quot;pb-32&amp;quot;&amp;gt;
      &amp;lt;%= render &#39;layouts/navbar&#39; %&amp;gt;
      &amp;lt;header class=&amp;quot;py-10&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;max-w-9xl mx-auto px-4 sm:px-6 lg:px-8&amp;quot;&amp;gt;
          &amp;lt;p class=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;
          &amp;lt;p class=&amp;quot;alert&amp;quot;&amp;gt;&amp;lt;%= alert %&amp;gt;&amp;lt;/p&amp;gt;
          &amp;lt;h1 class=&amp;quot;text-3xl font-bold&amp;quot;&amp;gt;
            Dashboard
          &amp;lt;/h1&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/header&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;main class=&amp;quot;-mt-32&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;max-w-9xl mx-auto pb-12 px-4 sm:px-6 lg:px-8&amp;quot;&amp;gt;
        &amp;lt;%= yield %&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/main&amp;gt;
    &amp;lt;%= render &#39;layouts/footer&#39; %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You may need to want rails with both (to increase reload speed after changes &amp;ndash; but &lt;code&gt;bin/rails s&lt;/code&gt; is enough):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails s
# runnding the following in a separate window tends to speed CSS / JS recompilation
./bin/webpack-dev-server
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;install-tailwind-svg-icons&#34;&gt;Install Tailwind SVG Icons&lt;/h2&gt;
&lt;p&gt;You can embed the Icon directly into the View - downloading from:&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://heroicons.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://heroicons.dev/&lt;/a&gt;

&lt;a href=&#34;https://heroicons.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://heroicons.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However, you can also use a gem and add flexibility:&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/bharget/heroicon&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bharget/heroicon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In gemfile&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &amp;quot;heroicon&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From CLI:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle
rails g heroicon:install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Usage:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;%= heroicon &amp;quot;search&amp;quot; %&amp;gt;
&amp;lt;%= heroicon &amp;quot;search&amp;quot;, variant: :outline %&amp;gt;
&amp;lt;%= heroicon &amp;quot;search&amp;quot;, options: { class: &amp;quot;text-primary-500&amp;quot; } %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or

&lt;a href=&#34;https://github.com/andrewjmead/rails_heroicons/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/andrewjmead/rails_heroicons/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Gemfile&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;rails_heroicons&#39;, &#39;~&amp;gt; 1.0.1&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CLI&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle
gem install rails_heroicons
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Usage:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;%= heroicon(&#39;user&#39;) %&amp;gt;
&amp;lt;%= heroicon(&#39;user&#39;, class_name: &#39;icon icon-large&#39;) %&amp;gt;
&amp;lt;%= heroicon(&#39;user&#39;, style: :outline, class_name: &#39;icon icon-large&#39;) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The classes magically update the SVG embedded using:&lt;/p&gt;
&lt;h3 id=&#34;use-svg-images--icons-in-rails----heroicons-or-zondicons&#34;&gt;USE SVG Images / Icons in Rails &amp;ndash; HeroIcons or ZondIcons&lt;/h3&gt;
&lt;p&gt;Downloaded SVG images in Rails:

&lt;a href=&#34;https://heroicons.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://heroicons.com/&lt;/a&gt;

&lt;a href=&#34;https://heroicons.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://heroicons.dev/&lt;/a&gt;

&lt;a href=&#34;http://www.zondicons.com/icons.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://www.zondicons.com/icons.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OR download the Icons and use the gem:

&lt;a href=&#34;https://github.com/jamesmartin/inline_svg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/jamesmartin/inline_svg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Gemfile:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;inline_svg&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CLI:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle
gem install inline_svg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;USAGE:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Sprockets
inline_svg_tag(file_name, options={})

# Webpacker
inline_svg_pack_tag(file_name, options={})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OR without gem:&lt;/p&gt;
&lt;p&gt;you can embed the SVG directly into rails using:

&lt;a href=&#34;https://dev.to/hslzr/using-inline-svgs-with-rails-3khb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dev.to/hslzr/using-inline-svgs-with-rails-3khb&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;reference-articles&#34;&gt;Reference Articles&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://davidteren.medium.com/tailwindcss-2-0-with-rails-6-1-postcss-8-0-9645e235892d&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://davidteren.medium.com/tailwindcss-2-0-with-rails-6-1-postcss-8-0-9645e235892d&lt;/a&gt;

&lt;a href=&#34;https://web-crunch.com/posts/how-to-install-tailwind-css-2-using-ruby-on-rails&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://web-crunch.com/posts/how-to-install-tailwind-css-2-using-ruby-on-rails&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Install and Configure Rails</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_install_n_configure/</link>
      <pubDate>Thu, 10 Sep 2020 01:46:07 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_install_n_configure/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;To document is mostly for me &amp;ndash; at least until I automate my setup defaults. However, I am glad to share and get ideas from others too.  I will build a little calendar app I use with friends (it&amp;rsquo;s focused on being mobile friendly and easy to use &amp;ndash; not a full featured calendar).&lt;/p&gt;
&lt;h1 id=&#34;rails-setup&#34;&gt;Rails Setup&lt;/h1&gt;
&lt;p&gt;Taken from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://gist.github.com/alxndr/7569551&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://gist.github.com/alxndr/7569551&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.codewithjason.com/rails-integration-tests-rspec-capybara/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.codewithjason.com/rails-integration-tests-rspec-capybara/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://hackernoon.com/how-to-build-awesome-integration-tests-with-capybara-j9333y68&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://hackernoon.com/how-to-build-awesome-integration-tests-with-capybara-j9333y68&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;create-the-project&#34;&gt;create the project:&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# -T - skips tests;              I like rspec
# -d postgresql;                 I like postgresql best for the db
# --skip-spring --skip-listen;   Spring caches and doesn&#39;t notice all changes (even after rails restart)
#                                I have lost several hours not realizing Spring wasn&#39;t seeing my changes

rails new calendar -T -d postgresql --webpack=stimulus --skip-turbolinks --skip-spring

cd calendar

# in some cases you may have serveral bundlers or need to create binstubs
# gem install bundler:2.1.4
# rails app:update:bin
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;update-the-readme-and-initialize-git&#34;&gt;update the README and initialize Git&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;initial commit&amp;quot;
git remote add origin git@gitlab.com:btihen/calendar.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;add-extra-gems-for-this-project&#34;&gt;Add extra Gems for this project&lt;/h2&gt;
&lt;p&gt;add rspec, devise, factory_bot and stimulus_reflex&lt;/p&gt;
&lt;p&gt;Execute the following command (or add to the Gemfile)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;cat &amp;lt;&amp;lt;EOF &amp;gt;&amp;gt; Gemfile
# Project Gems
##############

# FRONT END
###########
gem &amp;quot;hotwire-rails&amp;quot;                # probably not needed as of Rails 7.x
# gem &amp;quot;stimulus_reflex&amp;quot;, &amp;quot;~&amp;gt; 3.3&amp;quot;  # probably superseeded by hotwire-rails

# BACK END
##########
gem &#39;devise&#39;

# DEV / TESTS
#############
group :development, :test do
  gem &#39;awesome_print&#39;        # formats pry (&amp;amp; irb outputs into readable formats)

  gem &#39;pry-rails&#39;
  gem &#39;pry-byebug&#39;           # Adds byebug&#39;s step debugging and stack navigation
  # gem &#39;pry-debugger&#39;       # adds step, continue, etc (alternative to pry-byebug)
  gem &#39;pry-stack_explorer&#39;   # easy stack traces when debugging
  # more pry gems if needed at: https://spin.atomicobject.com/2012/08/06/live-and-let-pry/

  gem &#39;factory_bot_rails&#39;
  gem &#39;faker&#39;

  # gem &#39;rspec-rails&#39;
  gem &#39;capybara&#39;
  gem &#39;rspec-rails&#39;, &#39;~&amp;gt; 4.0.0&#39;

  # lets spring work with rspec
  gem &#39;spring-commands-rspec&#39;
end

group :test do
  # easier tests (inside rspec)
  gem &#39;shoulda-matchers&#39;

  # cucumber can test emails (rspec too?)
  # gem &#39;email_spec&#39;

  # code coverage
  gem &#39;simplecov&#39;
  gem &#39;simplecov-console&#39;
end
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;now-uncomment-a-few-gems-in-the-original-gemfile&#34;&gt;Now uncomment a few Gems in the Original Gemfile&lt;/h2&gt;
&lt;p&gt;Uncomment the following to ensure ActionText and Stimulus Refelx (work properly).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gem &#39;image_processing&#39;, &#39;~&amp;gt; 1.2&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;is needed by Active Storage (ActionText needs Active Storage)&lt;/p&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gem &#39;redis&#39;, &#39;~&amp;gt; 4.0&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;is needed by Stimulus Reflex (which uses Action Channels) to manage WebSockets&lt;/p&gt;
&lt;h2 id=&#34;install-and-configure-base-gems&#34;&gt;Install and configure base gems&lt;/h2&gt;
&lt;p&gt;now run:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bundle install&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;to install all the new gems and create a &lt;code&gt;Gemfile.lock&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;install-activestorage-and-actiontext&#34;&gt;Install ActiveStorage and ActionText&lt;/h2&gt;
&lt;p&gt;run the following commands:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# bundle exec rails webpacker:install
# bundle exec rails webpacker:install:stimulus
bundle exec rails active_storage:install
bundle exec rails action_text:install
bin/rails hotwire:install
bin/rails g devise:install
bin/rails g rspec:install
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;rspec-config-files&#34;&gt;Rspec: Config Files&lt;/h2&gt;
&lt;h3 id=&#34;create-needed-folders-for-our-config&#34;&gt;Create needed folders for our config&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir spec/features

# a place to put test helper code
mkdir spec/support
mkdir spec/support/features
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;rspec-config-file-specrails_helperrb&#34;&gt;Rspec Config file &lt;code&gt;spec/rails_helper.rb&lt;/code&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;To enable integration tests with rspec add: &lt;code&gt;require &#39;capybara/rspec&#39;&lt;/code&gt; below &lt;code&gt;require &#39;rspec/rails&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To load Test helper code add: &lt;code&gt;Dir[Rails.root.join(&amp;quot;spec/support/**/*.rb&amp;quot;)].each { |file| require file }&lt;/code&gt; below &lt;code&gt;require &#39;capybara/rspec&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;just after the ActiveRecord config and before RSpec.configure block add:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.register_driver :selenium_chrome do |app|
  Capybara::Selenium::Driver.new(app, browser: :chrome)
end
Capybara.javascript_driver = :selenium_chrome
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Add the FactoryBot config in the section with:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.configure do |config|
  # ...

  # support for Factory Bot
  config.include FactoryBot::Syntax::Methods

  # setup devise login helpers in Rspec
  config.include Devise::Test::IntegrationHelpers, type: :request

  # allows us for force session logouts (im feature tests)
  config.include Warden::Test::Helpers
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;finally at the end of the file add support for shoulda matchers with:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Shoulda::Matchers.configure do |config|
  config.integrate do |with|
    with.test_framework :rspec
    with.library :rails
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOW &lt;code&gt;spec/rails_helper.rb&lt;/code&gt; should look like (its long, sometimes the full context is clearer):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# This file is copied to spec/ when you run &#39;rails generate rspec:install&#39;
require &#39;spec_helper&#39;
ENV[&#39;RAILS_ENV&#39;] ||= &#39;test&#39;
require File.expand_path(&#39;../config/environment&#39;, __dir__)
# Prevent database truncation if the environment is production
abort(&amp;quot;The Rails environment is running in production mode!&amp;quot;) if Rails.env.production?
require &#39;rspec/rails&#39;
# Add additional requires below this line. Rails is not loaded until this point!

# enables integration/feature tests using rspec
require &#39;capybara/rspec&#39;

# loads custom helper test code
Dir[Rails.root.join(&amp;quot;spec/support/**/*.rb&amp;quot;)].each { |file| require file }
# or you could use:
# Dir[Rails.root.join(&#39;spec&#39;, &#39;support&#39;, &#39;**&#39;, &#39;*.rb&#39;)].sort.each { |f| require f }

# Checks for pending migrations and applies them before tests are run.
# If you are not using ActiveRecord, you can remove these lines.
begin
  ActiveRecord::Migration.maintain_test_schema!
rescue ActiveRecord::PendingMigrationError =&amp;gt; e
  puts e.to_s.strip
  exit 1
end

# configure capybara integration tests
Capybara.register_driver :selenium_chrome do |app|
  Capybara::Selenium::Driver.new(app, browser: :chrome)
end
Capybara.javascript_driver = :selenium_chrome

RSpec.configure do |config|
  # Remove this line if you&#39;re not using ActiveRecord or ActiveRecord fixtures
  config.fixture_path = &amp;quot;#{::Rails.root}/spec/fixtures&amp;quot;

  # If you&#39;re not using ActiveRecord, or you&#39;d prefer not to run each of your
  # examples within a transaction, remove the following line or assign false
  # instead of true.
  config.use_transactional_fixtures = true

  # You can uncomment this line to turn off ActiveRecord support entirely.
  # config.use_active_record = false

  # RSpec Rails can automatically mix in different behaviours to your tests
  # based on their file location, for example enabling you to call `get` and
  # `post` in specs under `spec/controllers`.
  #
  # You can disable this behaviour by removing the line below, and instead
  # explicitly tag your specs with their type, e.g.:
  #
  #     RSpec.describe UsersController, type: :controller do
  #       # ...
  #     end
  #
  # The different available types are documented in the features, such as in
  # https://relishapp.com/rspec/rspec-rails/docs
  config.infer_spec_type_from_file_location!

  # Filter lines from Rails gems in backtraces.
  config.filter_rails_from_backtrace!
  # arbitrary gems may also be filtered via:
  # config.filter_gems_from_backtrace(&amp;quot;gem name&amp;quot;)

  # support for Factory Bot
  config.include FactoryBot::Syntax::Methods

  # setup devise login helpers in Rspec (login helpers)
  config.include Devise::Test::IntegrationHelpers, type: :request

  # allows us for force session logouts (im feature tests)
  config.include Warden::Test::Helpers
end

Shoulda::Matchers.configure do |config|
  config.integrate do |with|
    with.test_framework :rspec
    with.library :rails
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;create--test-a-landing-page&#34;&gt;Create / Test a landing page&lt;/h1&gt;
&lt;p&gt;A simple config test before we setup devise (authentication).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Generate a page&lt;/strong&gt; &amp;ndash; I don&amp;rsquo;t (generally) use helpers nor contoller or view specs - so I&amp;rsquo;ll create the landing page using the following generator:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails g controller Landing index --no-helper --no-assets --no-controller-specs --no-view-specs
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;Update Routes&lt;/strong&gt; &lt;code&gt;config/routes.rb&lt;/code&gt; with:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  get &#39;landing/index&#39;
  root to: &amp;quot;landing#index&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;Add Hidden Test Content&lt;/strong&gt; to simplify testing add:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;p hidden id=&#39;landing_index&#39;&amp;gt;Landing Index&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Request test:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/requests/landing_request_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &amp;quot;Landings&amp;quot;, type: :request do

  describe &amp;quot;GET /index&amp;quot; do
    it &amp;quot;returns http success&amp;quot; do
      get &amp;quot;/landing/index&amp;quot;
      expect(response).to have_http_status(:success)

      expect(response.body).to include(&amp;quot;&amp;lt;p hidden id=&#39;landing_index&#39;&amp;gt;Landing Index&amp;lt;/p&amp;gt;&amp;quot;)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Feature Test (to be sure they are working too)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/features/landing_page_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &#39;Landing Page Works without a login&#39;, type: :feature do
  scenario &#39;Visit landing Page&#39; do
    visit root_path

    page_tag = find(&#39;p#landing_index&#39;, text: &#39;Landing Index&#39;, visible: false)
    expect(page_tag).to be_truthy
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Test and commit&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rake db:migrate
bundle exec rspec
git add .
git commit -m &amp;quot;rspec: unit and feature tests configured and landing page works&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;config-hotwire&#34;&gt;Config Hotwire&lt;/h3&gt;
&lt;p&gt;Ensure the  In the end the &lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt; looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;

&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Tweets&amp;lt;/title&amp;gt;
  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt;
  &amp;lt;%= csrf_meta_tags %&amp;gt;
  &amp;lt;%= csp_meta_tag %&amp;gt;

  &amp;lt;!-- Bootstrap 4 if interested
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css&amp;quot; integrity=&amp;quot;sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;
  --&amp;gt;
  &amp;lt;%= stylesheet_link_tag &#39;application&#39;, media: &#39;all&#39; %&amp;gt;
  &amp;lt;%= javascript_pack_tag &#39;application&#39; %&amp;gt;
  &amp;lt;%= yield :head %&amp;gt;
  &amp;lt;%= turbo_include_tags %&amp;gt;
  &amp;lt;%# stimulus_include_tags %&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
  &amp;lt;p class=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;p class=&amp;quot;alert&amp;quot;&amp;gt;&amp;lt;%= alert %&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;%= yield %&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;devise--user-config&#34;&gt;Devise / User Config&lt;/h3&gt;
&lt;p&gt;Configure dev email for devise:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/environments/development.rb:
  config.action_mailer.default_url_options = { host: &#39;localhost&#39;, port: 3000 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create the user and migration&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails g devise user
# if you will make a custom login (probably needed to look nice)
# rails g devise:views
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Adjust the migration:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class DeviseCreateUsers &amp;lt; ActiveRecord::Migration[6.1]
  def change
    create_table :users do |t|
      ## Database authenticatable
      t.string :email,              null: false, default: &amp;quot;&amp;quot;
      t.string :encrypted_password, null: false, default: &amp;quot;&amp;quot;

      ## Recoverable
      t.string   :reset_password_token
      t.datetime :reset_password_sent_at

      ## Rememberable
      t.datetime :remember_created_at

      ## Trackable
      t.integer  :sign_in_count, default: 0, null: false
      t.datetime :current_sign_in_at
      t.datetime :last_sign_in_at
      t.string   :current_sign_in_ip
      t.string   :last_sign_in_ip

      ## Confirmable
      # t.string   :confirmation_token
      # t.datetime :confirmed_at
      # t.datetime :confirmation_sent_at
      # t.string   :unconfirmed_email # Only if using reconfirmable

      ## Lockable
      # t.integer  :failed_attempts, default: 0, null: false # Only if lock strategy is :failed_attempts
      # t.string   :unlock_token # Only if unlock strategy is :email or :both
      # t.datetime :locked_at

      t.timestamps null: false
    end

    add_index :users, :email,                unique: true
    add_index :users, :reset_password_token, unique: true
    # add_index :users, :confirmation_token,   unique: true
    # add_index :users, :unlock_token,         unique: true
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Route file should now look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rails.application.routes.draw do
  devise_for :users
  get &#39;landing/index&#39;
  root to: &amp;quot;landing#index&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will update the user model with password complexity validation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ApplicationRecord
  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable
  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :validatable

  validate :password_complexity

  def password_complexity
    # Regexp extracted from https://stackoverflow.com/questions/19605150/regex-for-password-must-contain-at-least-eight-characters-at-least-one-number-a
    return if password.blank? || password =~ /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&amp;amp;*-]).{10,70}$/

    errors.add :password, &#39;Complexity requirement not met. Length should be 10-70 characters and include: 1 uppercase, 1 lowercase, 1 digit and 1 special character&#39;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create the user Factory (which also uses Faker):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/factories/users.rb
FactoryBot.define do
  factory :user do
    email       { Faker::Internet.safe_email }  # probably need to add index for uniqueness
    password    { Faker::Internet.password(min_length: 10, max_length: 50, mix_case: true, special_characters: true) }
  end
  trait :invalid do
    email       { Faker::Internet.username }
    password    { &amp;quot;hoi&amp;quot; }
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create the user spec (uses FactoryBot &amp;amp; Shoulda):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/models/user_spec.rb
require &#39;rails_helper&#39;

RSpec.describe User, type: :model do
  describe &amp;quot;Factory with&amp;quot; do

    context &amp;quot;default parameters&amp;quot; do
      it &amp;quot;creates a valid model&amp;quot; do
        user = FactoryBot.build :user
        expect(user.valid?).to be_truthy
      end
    end

    context &amp;quot;invalid parameters&amp;quot; do
      it &amp;quot;fails model validation&amp;quot; do
        user = FactoryBot.build :user, :invalid
        expect(user.valid?).to be_falsey
      end
    end
  end

  context &amp;quot;ActiveRecord / DB Tests&amp;quot; do
    it { should have_db_column(:email) }
    it { should have_db_index(:email).unique }
  end

  context &amp;quot;ActiveModel / Validations&amp;quot; do
    it &amp;quot;detects a bad email&amp;quot; do
      user = FactoryBot.build :user, email: &amp;quot;bill&amp;quot;
      expect(user.valid?).to be_falsey
      expect(user.errors.messages[:email]).to match_array [&amp;quot;is invalid&amp;quot;]
    end
    it &amp;quot;detects a non-compliant password&amp;quot; do
      user = FactoryBot.build :user, password: &amp;quot;hoi&amp;quot;
      expect(user.valid?).to be_falsey
      expect(user.errors.messages[:password]).to match_array [&amp;quot;is too short (minimum is 6 characters)&amp;quot;,
                                                              &amp;quot;Complexity requirement not met. Length should be 10-70 characters and include: 1 uppercase, 1 lowercase, 1 digit and 1 special character&amp;quot;]
    end
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;test-setup-and-commit-when-green&#34;&gt;Test setup and commit when green:&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rake db:migrate
bundle exec rspec
git add .
git commit -m &amp;quot;devise configured, FactoryBot, Faker and Shoulda working&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-user-landing--profile-page-autoredirect&#34;&gt;create user landing / profile page (autoredirect)&lt;/h2&gt;
&lt;h2 id=&#34;test-restricted-logins&#34;&gt;Test restricted logins&lt;/h2&gt;
&lt;p&gt;a basic login feature test might look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;rails_helper&#39;

RSpec.describe &#39;Users Login&#39;, type: :feature do
  let(:user)  { FactoryBot.create :user }
  after :each do
    Warden.test_reset!
  end
  describe &#39;user logs in successfully&#39; do
    scenario &#39;and is redirected to user home page&#39; do
      user_log_in(user)
      expect(current_path).to eql(auth_user_root_path)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;install-fonts--icons&#34;&gt;Install Fonts / Icons&lt;/h2&gt;
&lt;h3 id=&#34;fontawesome-good-with-bulma&#34;&gt;Fontawesome (Good with Bulma)&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://kelishrestha.medium.com/how-to-install-font-awesome-with-yarn-in-rails-6-0-c2506543c13d&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://kelishrestha.medium.com/how-to-install-font-awesome-with-yarn-in-rails-6-0-c2506543c13d&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn add @fortawesome/fontawesome-free
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update application.scss&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;$fa-font-path: &#39;@fortawesome/fontawesome-free/webfonts&#39;;
@import &#39;@fortawesome/fontawesome-free/scss/fontawesome&#39;;
@import &#39;@fortawesome/fontawesome-free/scss/solid&#39;;
@import &#39;@fortawesome/fontawesome-free/scss/regular&#39;;
@import &#39;@fortawesome/fontawesome-free/scss/brands&#39;;
@import &#39;@fortawesome/fontawesome-free/scss/v4-shims&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update application.js&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;import &amp;quot;@fortawesome/fontawesome-free/js/all&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or via cdn: vhttps://fontawesome.com/how-to-use/customizing-wordpress/snippets/setup-cdn-webfont
add to &lt;code&gt;application.html.erb&lt;/code&gt; ()&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1&amp;quot;&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot;
      href=&amp;quot;https://pro.fontawesome.com/releases/v5.10.0/css/all.css&amp;quot;
      integrity=&amp;quot;sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p&amp;quot;
      crossorigin=&amp;quot;anonymous&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;install-bulma-a-css-framework-if-desired&#34;&gt;Install BULMA: a CSS Framework (if desired)&lt;/h2&gt;
&lt;p&gt;Bulma is a relatively new CSS framework. It feels like a light, streamlined alternative to Bootstrap. Bulma doesnât include any JavaScript at all. This means some stuff just wonât work out of the box. For example, the burger menu wonât toggle without a little JavaScript help. Weâll get to that later.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn add bulma
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Open app/javascript/packs/application.js and add the following to the top:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import &#39;../styles&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create app/javascript/styles.scss:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@import &#39;~bulma/bulma&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;customize bulma by adding to the top of &lt;code&gt;styles.scss&lt;/code&gt; file: 
&lt;a href=&#34;https://stackoverflow.com/questions/48809328/bulma-navbar-breakpoint&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://stackoverflow.com/questions/48809328/bulma-navbar-breakpoint&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@import &amp;quot;~bulma/sass/utilities/initial-variables.sass&amp;quot;;
$navbar-breakpoint: $tablet;
@import &amp;quot;~bulma/bulma.sass&amp;quot;;
@import &#39;~bulma/bulma&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;choices are: $desktop (default 960px), $tablet (769px), $widescreen (1152px), $fullhd (1344px)
variable defaults: 
&lt;a href=&#34;https://bulma.io/documentation/customize/variables/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://bulma.io/documentation/customize/variables/&lt;/a&gt;
variables that can be set: 
&lt;a href=&#34;https://bulma-customizer.bstash.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://bulma-customizer.bstash.io&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;a-sample-bulma-navbar&#34;&gt;A sample Bulma navbar&lt;/h3&gt;
&lt;p&gt;Open app/views/layouts/application.html.erb and add the following just above the yield line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;%= render &#39;layouts/navbar&#39; %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create app/views/layouts/_navbar.html.erb:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
  &amp;lt;nav class=&amp;quot;navbar&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;navbar-brand&amp;quot;&amp;gt;
      &amp;lt;a class=&amp;quot;navbar-item&amp;quot; href=&amp;quot;#&amp;quot;&amp;gt;
        &amp;lt;img src=&amp;quot;https://bulma.io/images/bulma-logo.png&amp;quot; width=&amp;quot;112&amp;quot; height=&amp;quot;28&amp;quot;&amp;gt;
      &amp;lt;/a&amp;gt;
      &amp;lt;div class=&amp;quot;navbar-burger burger&amp;quot; data-target=&amp;quot;main-nav&amp;quot;&amp;gt;
        &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;
        &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;
        &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div id=&amp;quot;main-nav&amp;quot; class=&amp;quot;navbar-menu&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;navbar-start&amp;quot;&amp;gt;
        &amp;lt;%= link_to root_url, class: &#39;navbar-item&#39; do %&amp;gt;
          &amp;lt;span class=&amp;quot;icon&amp;quot;&amp;gt;
            &amp;lt;i class=&amp;quot;far fa-gem&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
          &amp;lt;/span&amp;gt;
          &amp;lt;span&amp;gt;Home&amp;lt;/span&amp;gt;
        &amp;lt;% end %&amp;gt;
        &amp;lt;%= link_to home_about_url, class: &#39;navbar-item&#39; do %&amp;gt;
          &amp;lt;span class=&amp;quot;icon&amp;quot;&amp;gt;
            &amp;lt;i class=&amp;quot;far fa-star&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
          &amp;lt;/span&amp;gt;
          &amp;lt;span&amp;gt;About&amp;lt;/span&amp;gt;
        &amp;lt;% end %&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/nav&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is basically copied from the Bulma examples. It is a basic nav bar with two menu items; Home and About.&lt;/p&gt;
&lt;p&gt;We now have all the pieces in place and can start wiring up our Stimulus controllers.&lt;/p&gt;
&lt;p&gt;Create a Stimulus controller
To keep this example simple, weâre going to create a single controller which weâll attach to the body tag in the main layout. This controller will be responsible for rendering the Font Awesome icons (as described in a previous post) as well as handling our Bulma burger menu.&lt;/p&gt;
&lt;p&gt;Create app/javascript/controllers/main_controller.js:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import fontawesome from &#39;@fortawesome/fontawesome&#39;
import icons from &#39;@fortawesome/fontawesome-free-regular&#39;
import { Controller } from &#39;stimulus&#39;
export default class extends Controller {
  initialize() {
    fontawesome.library.add(icons)
  }
  connect() {
    fontawesome.dom.i2svg()

    // Get all &amp;quot;navbar-burger&amp;quot; elements
    var $navbarBurgers = Array.prototype.slice.call(document.querySelectorAll(&#39;.navbar-burger&#39;), 0);

    // Check if there are any navbar burgers
    if ($navbarBurgers.length &amp;gt; 0) {

      // Add a click event on each of them
      $navbarBurgers.forEach(function ($el) {
        $el.addEventListener(&#39;click&#39;, function () {

          // Get the target from the &amp;quot;data-target&amp;quot; attribute
          var target = $el.dataset.target;
          var $target = document.getElementById(target);

          // Toggle the class on both the &amp;quot;navbar-burger&amp;quot; and the &amp;quot;navbar-menu&amp;quot;
          $el.classList.toggle(&#39;is-active&#39;);
          $target.classList.toggle(&#39;is-active&#39;);

        });
      });
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This controller imports the icons from Font Awesome when initialize is called. Every time connect is called it renders the icons and then searches for navbar burgers to attach the appropriate click events on.&lt;/p&gt;
&lt;p&gt;Connect the controller
Now we want to connect the body tag to our controller using an HTML5 data attribute.&lt;/p&gt;
&lt;p&gt;Open &lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt; and add the following attribute to the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;body data-controller=&amp;quot;main&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now it should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/layouts/application.html.erb
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;

&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Tweets&amp;lt;/title&amp;gt;
  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt;
  &amp;lt;%= csrf_meta_tags %&amp;gt;
  &amp;lt;%= csp_meta_tag %&amp;gt;

  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css&amp;quot; integrity=&amp;quot;sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;
  &amp;lt;%= stylesheet_link_tag &#39;application&#39;, media: &#39;all&#39; %&amp;gt;
  &amp;lt;%= javascript_pack_tag &#39;application&#39; %&amp;gt;
  &amp;lt;%= yield :head %&amp;gt;
  &amp;lt;%= turbo_include_tags %&amp;gt;
  &amp;lt;%# stimulus_include_tags %&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body data-controller=&amp;quot;main&amp;quot;&amp;gt;
  &amp;lt;%= render &#39;layouts/navbar&#39; %&amp;gt;
  &amp;lt;p class=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;p class=&amp;quot;alert&amp;quot;&amp;gt;&amp;lt;%= alert %&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;%= yield %&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;a href=&#34;https://blackninjadojo.com/css/bulma/2019/02/27/how-to-create-a-layout-for-your-rails-application-using-bulma.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blackninjadojo.com/css/bulma/2019/02/27/how-to-create-a-layout-for-your-rails-application-using-bulma.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;discourgaged---no-longer-necessary&#34;&gt;Discourgaged - no longer necessary:&lt;/h3&gt;
&lt;p&gt;If you plan to user database_cleaner &amp;ndash; then also see this article to finish your config:&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://medium.com/@amliving/my-rails-rspec-set-up-6451269847f9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://medium.com/@amliving/my-rails-rspec-set-up-6451269847f9&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rails Devise User Model with Roles</title>
      <link>https://btihen.me/post_ruby_rails/rails_devise_users_namespaced/</link>
      <pubDate>Fri, 10 Jul 2020 20:45:51 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_devise_users_namespaced/</guid>
      <description>&lt;h2 id=&#34;configure-devise-for-multiple-types-of-accounts&#34;&gt;Configure devise (for multiple types of accounts)&lt;/h2&gt;
&lt;p&gt;install the devise engine:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails generate devise:install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now follow the basic setup config &amp;ndash; add to &lt;code&gt;config/environments/development.rb&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.action_mailer.default_url_options = { host: &#39;localhost&#39;, port: 3000 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;add notifications to the layout for devise in &lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt; just above &lt;code&gt;&amp;lt;%= yeild %&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;p class=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p class=&amp;quot;alert&amp;quot;&amp;gt;&amp;lt;%= alert %&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now create one or more models for devise:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails g devise:views
rails generate devise user
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the routes to put the login in separate routes in &lt;code&gt;config/routes.rb&lt;/code&gt; - make the routes look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  devise_for :users,  path: &#39;users&#39;  # http://localhost:3000/users/sign_in
  devise_for :admins, path: &#39;admins&#39; # http://localhost:3000/admins/sign_in
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;turn on scoped views (since login forms can be different) in &lt;code&gt;config/initializers/devise.rb&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.scoped_views = true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create the scoped views: (instead of: rails g devise:views) do:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails g devise:views users/devise
rails g devise:views admins/devise
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now we should open these migrations and uncomment any added fields we use - I generally like to use most of the fields:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# frozen_string_literal: true

class DeviseCreateAdmins &amp;lt; ActiveRecord::Migration[6.0]
  def change
    create_table :admins do |t|
      ## Database authenticatable
      t.string :email,              null: false, default: &amp;quot;&amp;quot;
      t.string :encrypted_password, null: false, default: &amp;quot;&amp;quot;

      ## Recoverable
      t.string   :reset_password_token
      t.datetime :reset_password_sent_at

      ## Rememberable
      t.datetime :remember_created_at

      ## Trackable
      t.integer  :sign_in_count, default: 0, null: false
      t.datetime :current_sign_in_at
      t.datetime :last_sign_in_at
      t.inet     :current_sign_in_ip
      t.inet     :last_sign_in_ip

      ## Confirmable
      t.string   :confirmation_token
      t.datetime :confirmed_at
      t.datetime :confirmation_sent_at
      t.string   :unconfirmed_email # Only if using reconfirmable

      ## Lockable
      t.integer  :failed_attempts, default: 0, null: false # Only if lock strategy is :failed_attempts
      t.string   :unlock_token # Only if unlock strategy is :email or :both
      t.datetime :locked_at

      t.timestamps null: false
    end

    add_index :admins, :email,                unique: true
    add_index :admins, :reset_password_token, unique: true
    add_index :admins, :confirmation_token,   unique: true
    add_index :admins, :unlock_token,         unique: true
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and adjust the &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;admin&lt;/code&gt; models too and turn on the features we want or need. We will go into detail later, for now I will just add trackable to the models:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ApplicationRecord
  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable
  devise :database_authenticatable, :registerable, :trackable,
         :recoverable, :rememberable, :validatable
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and of course migrate too.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create custome controllers for each sessions - this also allows the users to have different fields and features:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails generate devise:controllers users/devise
rails generate devise:controllers admins/devise
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;configure the routes to point to these new controllers:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  # http://localhost:3000/users/sign_in
  devise_for :users,  path: &#39;users&#39;,
                      controllers: {
                        sessions:      &#39;users/devise/sessions&#39;,
                        passwords:     &#39;users/devise/passwords&#39;,
                        registrations: &#39;users/devise/registrations&#39;
                      }
  # http://localhost:3000/admins/sign_in
  devise_for :admins, path: &#39;admins&#39;,
                      controllers: {
                        sessions:      &#39;admins/devise/sessions&#39;,
                        passwords:     &#39;admins/devise/passwords&#39;,
                        registrations: &#39;admins/devise/registrations&#39;
                      }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now the routes should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bin/rails routes
                     Prefix Verb   URI Pattern                        Controller#Action
           new_user_session GET    /users/sign_in(.:format)           users/sessions#new
               user_session POST   /users/sign_in(.:format)           users/sessions#create
       destroy_user_session DELETE /users/sign_out(.:format)          users/sessions#destroy
          new_user_password GET    /users/password/new(.:format)      users/passwords#new
         edit_user_password GET    /users/password/edit(.:format)     users/passwords#edit
              user_password PATCH  /users/password(.:format)          users/passwords#update
                            PUT    /users/password(.:format)          users/passwords#update
                            POST   /users/password(.:format)          users/passwords#create
   cancel_user_registration GET    /users/cancel(.:format)            user/registrations#cancel
      new_user_registration GET    /users/sign_up(.:format)           user/registrations#new
     edit_user_registration GET    /users/edit(.:format)              user/registrations#edit
          user_registration PATCH  /users(.:format)                   user/registrations#update
                            PUT    /users(.:format)                   user/registrations#update
                            DELETE /users(.:format)                   user/registrations#destroy
                            POST   /users(.:format)                   user/registrations#create
          new_admin_session GET    /admins/sign_in(.:format)          admin/sessions#new
              admin_session POST   /admins/sign_in(.:format)          admin/sessions#create
      destroy_admin_session DELETE /admins/sign_out(.:format)         admin/sessions#destroy
         new_admin_password GET    /admins/password/new(.:format)     admin/passwords#new
        edit_admin_password GET    /admins/password/edit(.:format)    admin/passwords#edit
             admin_password PATCH  /admins/password(.:format)         admin/passwords#update
                            PUT    /admins/password(.:format)         admin/passwords#update
                            POST   /admins/password(.:format)         admin/passwords#create
  cancel_admin_registration GET    /admins/cancel(.:format)           admin/registrations#cancel
     new_admin_registration GET    /admins/sign_up(.:format)          admin/registrations#new
    edit_admin_registration GET    /admins/edit(.:format)             admin/registrations#edit
         admin_registration PATCH  /admins(.:format)                  admin/registrations#update
                            PUT    /admins(.:format)                  admin/registrations#update
                            DELETE /admins(.:format)                  admin/registrations#destroy
                            POST   /admins(.:format)                  admin/registrations#create
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;lets make logged in home pages (for the user and admin)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails g controller users/home index --no-helper --no-assets --no-controller-specs --no-view-specs
rails g controller admins/home index --no-helper --no-assets --no-controller-specs --no-view-specs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now lets update our routes to ponit to these pages if the user is logged in add the following belos the deivse_for commands&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rails.application.routes.draw do
  # http://localhost:3000/admins/sign_in
  devise_for :admins, path: &#39;admins&#39;,
                      controllers: {
                        sessions:      &#39;admins/devise/sessions&#39;,
                        passwords:     &#39;admins/devise/passwords&#39;,
                        registrations: &#39;admins/devise/registrations&#39;
                      }
  # http://localhost:3000/umdzes/sign_in
  devise_for :umdzes, path: &#39;umdzes&#39;,
                      controllers: {
                        sessions:      &#39;umdzes/devise/sessions&#39;,
                        passwords:     &#39;umdzes/devise/passwords&#39;,
                        registrations: &#39;umdzes/devise/registrations&#39;
                      }
  # http://localhost:3000/patrons/sign_in
  devise_for :patrons,  path: &#39;patrons&#39;,
                      controllers: {
                        sessions:      &#39;patrons/devise/sessions&#39;,
                        passwords:     &#39;patrons/devise/passwords&#39;,
                        registrations: &#39;patrons/devise/registrations&#39;
                      }

  authenticated :patron do
    root &#39;patrons/home#index&#39;,     as: :auth_patron_root
  end
  authenticated :umdze do
    root &#39;umdzes/home#index&#39;,      as: :auth_umdze_root
  end
  authenticated :admin do
    root &#39;admins/home#index&#39;, as: :auth_admin_root
  end


  namespace :admins do
    get &#39;home/index&#39;
    # resource  :home_page,        only: [:index]
  end
  get &#39;/admins&#39;, to: &#39;admins/home#index&#39;, as: :admins

  namespace :umdzes do
    get &#39;home/index&#39;
    # resource  :home_page,        only: [:index]
  end
  get &#39;/umdzes&#39;, to: &#39;umdzes/home#index&#39;, as: :umdzes

  namespace :patrons do
    get &#39;home/index&#39;
    # resource  :home_page,        only: [:index]
  end
  get &#39;/patrons&#39;, to: &#39;patrons/home#index&#39;, as: :patrons

  get &#39;/landing&#39;, to: &#39;landing#index&#39;, as: :landing
  get &#39;landing/index&#39;
  root to: &amp;quot;landing#index&amp;quot;
end

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;now-lets-make-applicationcontrollers-for-each-namespace--enforce-authentication&#34;&gt;now lets make ApplicationControllers for each namespace &amp;amp; enforce authentication&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;touch app/controllers/admins/application_controller.rb
cat &amp;lt;&amp;lt; EOF &amp;gt; app/controllers/admins/application_controller.rb
class Admins::ApplicationController &amp;lt; ApplicationController
  before_action :authenticate_admin!

  private

  def this_user
    current_admin
  end
end
EOF

touch app/controllers/umdzes/application_controller.rb
cat &amp;lt;&amp;lt; EOF &amp;gt; app/controllers/umdzes/application_controller.rb
class Umdzes::ApplicationController &amp;lt; ApplicationController
  before_action :authenticate_umdze!, unless: :allowed_access

  private

  def allowed_access
    current_admin
  end

  def this_user
    current_umdze || current_admin
  end
end
EOF

touch app/controllers/patrons/application_controller.rb
cat &amp;lt;&amp;lt; EOF &amp;gt; app/controllers/patrons/application_controller.rb
class Patrons::ApplicationController &amp;lt; ApplicationController
  before_action :authenticate_patron!, unless: :allowed_access

  private
  def allowed_access
    current_umdze || current_admin
  end

  def this_user
    current_patron || current_umdze || current_admin
  end
end
EOF

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;now-we-will-inhert-from-these-new-controllers-and-enforce-limits&#34;&gt;now we will inhert from these new controllers and enforce limits&lt;/h1&gt;
&lt;p&gt;now lets require these pages to have authenticated the correct user type:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/admins/home_controller.rb
class Admins::HomeController &amp;lt; Admins::ApplicationController
  def index
  end
end

# app/controllers/umdzes/home_controller.rb
class Umdzes::HomeController &amp;lt; Umdzes::ApplicationController
  def index
  end
end

# app/controllers/patrons/home_controller.rb
class Patrons::HomeController &amp;lt; Patrons::ApplicationController
  def index
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;now-prevent-student-and-admin-accounts-from-cross-visits-during-testing-or-whatever&#34;&gt;Now prevent student and admin accounts from cross visits (during testing, or whatever)&lt;/h2&gt;
&lt;p&gt;create this new file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;touch app/controllers/concerns/accessible.rb
cat &amp;lt;&amp;lt; EOF &amp;gt; app/controllers/concerns/accessible.rb
module Accessible
  extend ActiveSupport::Concern
  included do
    before_action :check_user
  end

  protected
  def check_user
    if current_admin
      flash.clear
      # The authenticated admin root path can be defined in your routes.rb in: devise_scope :admin do...
      redirect_to(auth_admin_root_path) and return
    elsif current_umdze
      flash.clear
      # The authenticated admin root path can be defined in your routes.rb in: devise_scope :admin do...
      redirect_to(auth_umdze_root_path) and return
    elsif current_patron
      flash.clear
      # The authenticated user root path can be defined in your routes.rb in: devise_scope :user do...
      redirect_to(auth_partron_root_path) and return
    end
  end
end
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;use-this-accessible-concern&#34;&gt;use this accessible concern&lt;/h2&gt;
&lt;p&gt;Now add &lt;code&gt;include Accessible&lt;/code&gt; in the appropriate controllers:&lt;/p&gt;
&lt;p&gt;Note:
You must skip_before_action for the destroy action in each SessionsController to prevent the redirect to happen before the sign out occurs.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# eg. ../controllers/admins/sessions_controller.rb
class Admins::SessionsController &amp;lt; Devise::SessionsController
 include Accessible
 skip_before_action :check_user, only: :destroy
 # ...
end

# eg. ../controllers/admins/registrations_controller.rb
You must also skip_before_action for the edit, update, destroy, and cancel actions in each RegistrationsController to allow current users to edit and cancel their own accounts. Otherwise they will be redirected before they can reach these pages.

class Admins::RegistrationsController &amp;lt; Devise::RegistrationsController
 include Accessible
 skip_before_action :check_user, except: [:new, :create]
 # ...
end

# eg. ../controllers/umdzes/sessions_controller.rb
class Umdzes::SessionsController &amp;lt; Devise::SessionsController

 include Accessible
 skip_before_action :check_user, only: :destroy
 # ...
end

# eg. ../controllers/umdzes/registrations_controller.rb
class Umdzes::RegistrationsController &amp;lt; Devise::RegistrationsController

 include Accessible
 skip_before_action :check_user, except: [:new, :create]
 # ...
end

# eg. ../controllers/patrons/sessions_controller.rb
class Patrons::SessionsController &amp;lt; Devise::SessionsController

 include Accessible
 skip_before_action :check_user, only: :destroy
 # ...
end

# eg. ../controllers/patrons/registrations_controller.rb
class Patrons::RegistrationsController &amp;lt; Devise::RegistrationsController

 include Accessible
 skip_before_action :check_user, except: [:new, :create]
 # ...
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;now-lets-give-the-patron-account-a-usernames&#34;&gt;now lets give the patron account a usernames&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/heartcombo/devise/wiki/How-To%3A-Allow-users-to-sign-in-with-something-other-than-their-email-address&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/heartcombo/devise/wiki/How-To%3A-Allow-users-to-sign-in-with-something-other-than-their-email-address&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails generate migration add_username_to_patrons username:string:uniq
rails generate migration add_umdzes_name_to_umdzes fullname:string
rails generate migration add_admins_name_to_admins fullname:string

# now update the new migration to look like:
class AddUsernamToPatrons &amp;lt; ActiveRecord::Migration[6.0]
  def change
    # username is key not email - in fact we don&#39;t want an email
    rename_column :patrons, :email, :username
  end
end

class AddFullnameToUmdzes &amp;lt; ActiveRecord::Migration[6.0]
  def change
    add_column :umdzes, :umdzes_name, :string, null: false
  end
end

class AddFullnameToAdmins &amp;lt; ActiveRecord::Migration[6.0]
  def change
    add_column :admins, :admins_name, :string, null: false
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;update-the-models&#34;&gt;update the models&lt;/h2&gt;
&lt;p&gt;now we need to go to the models and make the following updates:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/admin.rb
class Admin &amp;lt; ApplicationRecord
  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable
  devise  :database_authenticatable, :trackable, # :registerable,
          :rememberable, :validatable #, :recoverable

  validates :email, uniqueness: true
  validates :admins_name, presence: true
end

# app/models/umdze.rb
class Umdze &amp;lt; ApplicationRecord
  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable
  devise  :database_authenticatable, :trackable, # :registerable,
          :rememberable, :validatable #, :recoverable

  validates :email, uniqueness: true
  validates :umdzes_name, presence: true
end


# app/models/patrons.rb
class Patron &amp;lt; ApplicationRecord
  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable
  devise  :database_authenticatable, :trackable, # :registerable,
          :rememberable, :validatable, # :recoverable
          :authentication_keys =&amp;gt; [:username]

  validates :username, uniqueness: true
  # make the email field optional
  # validates :email, uniqueness: true

  def email_required?
    false
  end

  def email_changed?
    false
  end

  # use this instead of email_changed? for Rails = 5.1.x
  def will_save_change_to_email?
    false
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now we can safely migrate &lt;code&gt;bundle exec rails db:migrate&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;lets-test-our-logins&#34;&gt;lets test our logins&lt;/h2&gt;
&lt;p&gt;lets create some common feature test code:&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://forum.upcase.com/t/rspec-support-vs-helpers/4986&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://forum.upcase.com/t/rspec-support-vs-helpers/4986&lt;/a&gt;

&lt;a href=&#34;https://thoughtbot.com/blog/rspec-integration-tests-with-capybara&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://thoughtbot.com/blog/rspec-integration-tests-with-capybara&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/support/features/session_helpers.rb
module Features
  module SessionHelpers
    # def patron_sign_up(username:, password:)
    #   visit new_patron_registration_path
    #   expect(page).to have_button(&#39;Sign up&#39;)
    #   fill_in &#39;Username&#39;, with: username
    #   fill_in &#39;Password&#39;, with: password
    #   click_button &#39;Sign up&#39;
    # end
    def patron_log_in(patron = nil)
      patron = FactoryBot.create :patron if patron.nil?
      visit new_patron_session_path
      expect(page).to have_button(&#39;Log in&#39;)
      fill_in &#39;Username&#39;, with: patron.username
      fill_in &#39;Password&#39;, with: patron.password
      click_on &#39;Log in&#39;
    end

    # def umdze_sign_up(email:, password:)
    #   visit new_umdze_registration_path
    #   expect(page).to have_button(&#39;Sign up&#39;)
    #   fill_in &#39;Email&#39;, with: email
    #   fill_in &#39;Password&#39;, with: password
    #   click_button &#39;Sign up&#39;
    # end
    def umdze_log_in(umdze = nil)
      umdze = FactoryBot.create :umdze if umdze.nil?
      visit new_admin_session_path
      expect(page).to have_button(&#39;Log in&#39;)
      fill_in &#39;Email&#39;, with: admin.email
      fill_in &#39;Password&#39;, with: admin.password
      click_on &#39;Log in&#39;
    end

    # def admin_sign_up(email:, password:)
    #   visit new_admin_registration_path
    #   expect(page).to have_button(&#39;Sign up&#39;)
    #   fill_in &#39;Email&#39;, with: email
    #   fill_in &#39;Password&#39;, with: password
    #   click_button &#39;Sign up&#39;
    # end
    def admin_log_in(admin = nil)
      admin = FactoryBot.create :admin if admin.nil?
      visit new_admin_session_path
      expect(page).to have_button(&#39;Log in&#39;)
      fill_in &#39;Email&#39;, with: admin.email
      fill_in &#39;Password&#39;, with: admin.password
      click_on &#39;Log in&#39;
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are not allowing registrations, so that code is commented out.  However, we see we must configure our factories for this code to work.&lt;/p&gt;
&lt;p&gt;Lets tell rspec how to access this code in feature tests:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/support/features.rb
RSpec.configure do |config|
  config.include Features::SessionHelpers, type: :feature
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;lets-create-test-for-our-devise-model-factories&#34;&gt;Lets create test for our devise model factories:&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/models/patron_spec.rb
require &#39;rails_helper&#39;

RSpec.describe User, type: :model do
  describe &amp;quot;factory functions&amp;quot; do
    it &amp;quot;generates a valid user&amp;quot; do
      model = FactoryBot.build :user
      expect(model.valid?).to be true
    end
    it &amp;quot;saves a valid user&amp;quot; do
      model = FactoryBot.build :user
      expect(model.save).to be_truthy
    end
  end

  describe &amp;quot;DB settings&amp;quot; do
    it { have_db_index(:email) }
    it { is_expected.to have_db_column(:encrypted_password) }
  end
end

# spec/models/admin_spec.rb
require &#39;rails_helper&#39;

RSpec.describe Admin, type: :model do
  describe &amp;quot;factory functions&amp;quot; do
    it &amp;quot;generates a valid admin&amp;quot; do
      model = FactoryBot.build :admin
      expect(model.valid?).to be true
    end
    it &amp;quot;saves a valid admin&amp;quot; do
      model = FactoryBot.build :admin
      expect(model.save).to be_truthy
    end
  end

  describe &amp;quot;DB settings&amp;quot; do
    it { have_db_index(:email) }
    it { is_expected.to have_db_column(:encrypted_password) }
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;be sure these fail - run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rspec spec/models/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to configure the factories so all is working:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/factories/patrons.rb
FactoryBot.define do
  factory :user do
    sequence(:email)      { |n| &amp;quot;#{Faker::Internet.email}&amp;quot;.split(&#39;@&#39;).join(&amp;quot;#{n}@&amp;quot;) }
    password              { &#39;LetM3-InNow&#39; }
    password_confirmation { &#39;LetM3-InNow&#39; }
    # enable this if using confirmable
    # confirmed_at { Date.today }
  end
end

# spec/factories/umdzes.rb
FactoryBot.define do
  factory :umdze do
    sequence(:email)      { |n| &amp;quot;#{Faker::Internet.email}&amp;quot;.split(&#39;@&#39;).join(&amp;quot;#{n}@&amp;quot;) }
    password              { &#39;LetM3-InNow!&#39; }
    password_confirmation { &#39;LetM3-InNow!&#39; }
    umdzes_name           { &amp;quot;#{Faker::Name.first_name} #{Faker::Name.last_name}&amp;quot; }
    # enable this if using confirmable
    # confirmed_at          { Date.today }
  end
end

# spec/factories/admins.rb
FactoryBot.define do
  factory :admin do
    sequence(:email)      { |n| &amp;quot;#{Faker::Internet.email}&amp;quot;.split(&#39;@&#39;).join(&amp;quot;#{n}@&amp;quot;) }
    password              { &#39;LetM3-InNow!&#39; }
    password_confirmation { &#39;LetM3-InNow!&#39; }
    admins_name           { &amp;quot;#{Faker::Name.first_name} #{Faker::Name.last_name}&amp;quot; }
    # enable this if using confirmable
    # confirmed_at          { Date.today }
  end
end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;be sure these pass now - run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rspec spec/models/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we are ready to test devise and our restricted access to the users home page:&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.madetech.com/blog/feature-testing-with-rspec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.madetech.com/blog/feature-testing-with-rspec&lt;/a&gt;

&lt;a href=&#34;https://thoughtbot.com/blog/rspec-integration-tests-with-capybara&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://thoughtbot.com/blog/rspec-integration-tests-with-capybara&lt;/a&gt;

&lt;a href=&#34;https://github.com/heartcombo/devise/wiki/How-To:-Test-with-Capybara&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/heartcombo/devise/wiki/How-To:-Test-with-Capybara&lt;/a&gt;

&lt;a href=&#34;https://radavis.github.io/sign-in-out-test-helpers-for-and-devise-and-capybara/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://radavis.github.io/sign-in-out-test-helpers-for-and-devise-and-capybara/&lt;/a&gt;

&lt;a href=&#34;https://www.vanderpol.net/2014/10/07/rspec-integration-tests-devise-user-registration/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.vanderpol.net/2014/10/07/rspec-integration-tests-devise-user-registration/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/features/users/user_signup_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &#39;Users Home Page&#39;, type: :feature do
  # note user is NOT created in DB!
  let(:user)  { FactoryBot.build :user }
  after :each do
    Warden.test_reset!
  end
  describe &#39;user is not signed-up&#39; do
    scenario &#39;user signs-up on registration page&#39; do
      user_sign_up(email: user.email, password: user.password)
      expect(current_path).to eql(users_home_path)
    end
  end
end


# spec/features/users/user_login_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &#39;Users Login&#39;, type: :feature do
  let(:user)  { FactoryBot.create :user }
  after :each do
    Warden.test_reset!
  end
  describe &#39;user logs in successfully&#39; do
    scenario &#39;and is redirected to user home page&#39; do
      user_log_in(user)
      expect(current_path).to eql(auth_user_root_path)
    end
  end
end


# spec/features/users_home_page_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &#39;Users Home Page&#39;, type: :feature do
  let(:user)    { FactoryBot.create :user }
  after :each do
    # force a logout (clear warden info) after each test
    Warden.test_reset!
  end
  describe &#39;user is not authenticated&#39; do
    scenario &#39;user is redirected to user login before access to user home&#39; do
      visit users_home_path
      expect(current_path).to eql(new_user_session_path)
    end
  end
  describe &#39;user is already authenticated&#39; do
    before    { user_log_in(user) }
    scenario &#39;user gets direct access to the user homepage&#39; do
      visit users_home_path
      expect(page).to have_current_path(users_home_path)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and test to be sure admin can log in too:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/features/admins/admin_login_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &#39;Users Login&#39;, type: :feature do
  after :each do
    Warden.test_reset!
  end
  scenario &#39;logs in successfully and is redirected to user home page&#39; do
    admin_log_in
    expect(current_path).to eql(auth_admin_root_path)
  end
end


# spec/features/admins/admin_signup_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &#39;Admin Signup&#39;, type: :feature do
  # IMPORTANT is NOT created in DB!
  let(:admin)  { FactoryBot.build :admin }
  after :each do
    Warden.test_reset!
  end
  describe &#39;admin is not signed-up&#39; do
    scenario &#39;admin registers&#39; do
      admin_sign_up(email: admin.email, password: admin.password)
      expect(page).to have_current_path(admins_home_path)
    end
  end
end


# spec/features/admins/admins_home_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &#39;Admins Home&#39;, type: :feature do
  let(:admin)  { FactoryBot.create :admin }
  after :each do
    Warden.test_reset!
  end
  describe &#39;un-authenticated&#39; do
    scenario &#39;attempts to access admins home page is redirected to user login&#39; do
      visit admins_home_path
      expect(current_path).to eql(new_admin_session_path)
    end
  end
  describe &#39;already authenticated&#39; do
    before    { admin_log_in(admin) }
    scenario &#39;gets access to the user homepage&#39; do
      visit admins_home_path
      expect(current_path).to eql(admins_home_path)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;before we wrap up - we need to fix our request specs - now that we added login restrictions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/requests/users/home_request_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &amp;quot;Patron::Homes&amp;quot;, type: :request do

  let(:patron)   { FactoryBot.create :patron }

  describe &amp;quot;GET /index&amp;quot; do
    context &amp;quot;NOT logged in&amp;quot; do
      after do
        sign_out patron
      end
      it &amp;quot;home as &#39;/patrons&#39; page is NOT accessible&amp;quot; do
        get &amp;quot;/patrons&amp;quot;
        expect(response).to have_http_status(:redirect)
        # to login
      end
      it &amp;quot;home as &#39;patron_home_path&#39; page is NOT accessible&amp;quot; do
        get patrons_home_path
        expect(response).to have_http_status(:redirect)
      end
      it &amp;quot;home as &#39;auth_patron_root_path&#39; page is NOT accessible&amp;quot; do
        get auth_patron_root_path
        expect(response).to have_http_status(:success)
        # here we need page match for different root routes
      end
    end

    context &amp;quot;logged in&amp;quot; do
      before do
        sign_in patron
      end
      after do
        sign_out patron
      end
      it &amp;quot;home as &#39;/patrons&#39; page is accessible&amp;quot; do
        get &amp;quot;/patrons&amp;quot;
        expect(response).to have_http_status(:success)
      end
      it &amp;quot;home as &#39;patrons_home_path&#39; page is accessible&amp;quot; do
        get patrons_home_path
        expect(response).to have_http_status(:success)
      end
      it &amp;quot;home as &#39;auth_patron_root_path&#39; page is accessible&amp;quot; do
        get auth_patron_root_path
        expect(response).to have_http_status(:success)
      end
    end
  end
end

# spec/requests/umdze/home_request_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &amp;quot;Umdze::Homes&amp;quot;, type: :request do
  let(:umdze)   { FactoryBot.create :umdze }

  describe &amp;quot;GET /index&amp;quot; do
    context &amp;quot;NOT logged in&amp;quot; do
      after do
        sign_out umdze
      end
      it &amp;quot;home as &#39;/umdzes&#39; page is NOT accessible&amp;quot; do
        get &amp;quot;/umdzes&amp;quot;
        expect(response).to have_http_status(:redirect)
        # to login
      end
      it &amp;quot;home as &#39;umdzes_home_path&#39; page is NOT accessible&amp;quot; do
        get umdzes_home_path
        expect(response).to have_http_status(:redirect)
      end
      it &amp;quot;home as &#39;auth_umdze_root_path&#39; page is NOT accessible&amp;quot; do
        get auth_umdze_root_path
        expect(response).to have_http_status(:success)
        # here we need page match for different root routes
      end
    end

    context &amp;quot;logged in&amp;quot; do
      before do
        sign_in umdze
      end
      after do
        sign_out umdze
      end
      it &amp;quot;home as &#39;/umdzes&#39; page is accessible&amp;quot; do
        get &amp;quot;/umdzes&amp;quot;
        expect(response).to have_http_status(:success)
      end
      it &amp;quot;home as &#39;umdzes_home_path&#39; page is accessible&amp;quot; do
        get umdzes_home_path
        expect(response).to have_http_status(:success)
      end
      it &amp;quot;home as &#39;auth_umdze_root_path&#39; page is accessible&amp;quot; do
        get auth_umdze_root_path
        expect(response).to have_http_status(:success)
      end
    end
  end
end

# spec/requests/admins/dashboard_request_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &amp;quot;Admins::Dashboards&amp;quot;, type: :request do

  let(:admin)   { FactoryBot.create :admin }

  describe &amp;quot;GET /index&amp;quot; do
    context &amp;quot;NOT logged in&amp;quot; do
      it &amp;quot;home as &#39;/admins&#39; page is NOT accessible&amp;quot; do
        get &amp;quot;/admins&amp;quot;
        expect(response).to have_http_status(:redirect)
      end
      it &amp;quot;home as &#39;admins_home_path&#39; page is NOT accessible&amp;quot; do
        get admins_home_path
        expect(response).to have_http_status(:redirect)
      end
      it &amp;quot;home as &#39;auth_admin_root_path&#39; page is NOT accessible&amp;quot; do
        get auth_admin_root_path
        expect(response).to have_http_status(:success)
        # here we need page match for different root routes
      end
    end

    context &amp;quot;logged in&amp;quot; do
      before do
        sign_in admin
      end
      after do
        sign_out admin
      end
      it &amp;quot;home as &#39;/admins&#39; page is accessible&amp;quot; do
        get &amp;quot;/admins&amp;quot;
        expect(response).to have_http_status(:success)
      end
      it &amp;quot;home as &#39;admins_home_path&#39; page is accessible&amp;quot; do
        get admins_home_path
        expect(response).to have_http_status(:success)
      end
      it &amp;quot;home as &#39;auth_admin_root_path&#39; page is accessible&amp;quot; do
        get auth_admin_root_path
        expect(response).to have_http_status(:success)
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;run the tests and be sure all is green - if so, now is a good time to make a commit!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;rspec and devise configured and tests green&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
