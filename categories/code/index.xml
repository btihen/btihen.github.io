<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code | btihen</title>
    <link>https://btihen.me/categories/code/</link>
      <atom:link href="https://btihen.me/categories/code/index.xml" rel="self" type="application/rss+xml" />
    <description>Code</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2021</copyright><lastBuildDate>Sun, 02 May 2021 01:01:53 +0200</lastBuildDate>
    <image>
      <url>https://btihen.me/img/btihen_landing_page.png</url>
      <title>Code</title>
      <link>https://btihen.me/categories/code/</link>
    </image>
    
    <item>
      <title>Shared Schedule</title>
      <link>https://btihen.me/projects/mobile_calendar/</link>
      <pubDate>Fri, 06 Nov 2020 01:34:47 +0200</pubDate>
      <guid>https://btihen.me/projects/mobile_calendar/</guid>
      <description>&lt;p&gt;An opensource mobile friendly simple calendar to simplify scheduling for non-profits.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lucky Framework with Crystal Language</title>
      <link>https://btihen.me/post_crystal/lucky_0_27/</link>
      <pubDate>Sun, 02 May 2021 01:01:53 +0200</pubDate>
      <guid>https://btihen.me/post_crystal/lucky_0_27/</guid>
      <description>&lt;p&gt;~/devel/learning/crystal_frameworks/lucky/brews&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/stephendolan/lucky_jumpstart/&#34;&gt;https://github.com/stephendolan/lucky_jumpstart/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;why-lucky&#34;&gt;Why Lucky&lt;/h2&gt;
&lt;p&gt;Lucky offers all the features I use in Rails - but is type safe and faster than rails.  Lucky&amp;rsquo;s focus is on stability (its not the fastest Crystal Framework, but it focuses on preventing run-time problems).  See: &lt;a href=&#34;https://luckyframework.org/guides/getting-started/why-lucky&#34;&gt;https://luckyframework.org/guides/getting-started/why-lucky&lt;/a&gt; for a full list of what Lucky aims to improve.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;This article is a collection of making sense of the following resources&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://luckycasts.com/&#34;&gt;https://luckycasts.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://luckyframework.org/guides&#34;&gt;https://luckyframework.org/guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://onchain.io/blog/lucky_tutorial&#34;&gt;https://onchain.io/blog/lucky_tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/andrewmcodes/awesome-lucky&#34;&gt;https://github.com/andrewmcodes/awesome-lucky&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&#34;&gt;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My goal is to have a simple tutorial for important basic features and orientation of the Lucky Framework - for myself and students I work with.&lt;/p&gt;
&lt;h2 id=&#34;installing-lucky&#34;&gt;installing Lucky&lt;/h2&gt;
&lt;p&gt;For more information see: &lt;a href=&#34;https://luckyframework.org/guides/getting-started/installing&#34;&gt;https://luckyframework.org/guides/getting-started/installing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;brew install&lt;/code&gt; of lucky (on a MacOS) is bit broken, but the Linux install also works well on MacOS!&lt;/p&gt;
&lt;p&gt;First be sure openssl and postgresql are installed and findable:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install openssl postgresql

# and depending on your shell either (if you don&#39;t know which it is safe to do both):
echo &#39;export PKG_CONFIG_PATH=/usr/local/opt/openssl/lib/pkgconfig&#39; &amp;gt;&amp;gt;~/.zshrc
echo &#39;export PKG_CONFIG_PATH=/usr/local/opt/openssl/lib/pkgconfig&#39; &amp;gt;&amp;gt;~/.bash_profile

# IMPORTANT - OPEN a new terminal

# or if you know what shell you are using you can reload it with source!
source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now install (or be sure ASDF is installed). &lt;a href=&#34;https://asdf-vm.com/#/core-manage-asdf-vm&#34;&gt;https://asdf-vm.com/#/core-manage-asdf-vm&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install asdf
# assuming bash
echo -e &amp;quot;\n. $(brew --prefix asdf)/asdf.sh&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile
echo -e &amp;quot;\n. $(brew --prefix asdf)/etc/bash_completion.d/asdf.bash&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile

# or zsh
echo -e &amp;quot;\n. $(brew --prefix asdf)/asdf.sh&amp;quot; &amp;gt;&amp;gt; ${ZDOTDIR:-~}/.zshrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we add asdf plugin for crystal:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;asdf plugin-add crystal https://github.com/asdf-community/asdf-crystal.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For both Ruby and Crystal the following is also helpful:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &amp;quot;legacy_version_file = yes&amp;quot; &amp;gt;&amp;gt;~/.asdfrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lucky 0.27 needs Crystal 0.36.1 (not Crystal 1.0.0) - so we install it with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;asdf install crystal 0.36.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I like to the local folder to crystal 0.36.1 (&amp;amp; the node version too) - this will allow use to install and run the lucky-cli tool&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &amp;quot;cyrstal 0.36.1&amp;quot; &amp;gt;&amp;gt; .tool-versions
echo &amp;quot;node 14.16.0&amp;quot; &amp;gt;&amp;gt; .tool-versions
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(but you can also just use: &lt;code&gt;asdf global crystal 0.36.1&lt;/code&gt; - so you don&amp;rsquo;t have to set the crystal version in every file you work in)!&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s install lucky_cli &amp;amp; also lucky&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/luckyframework/lucky_cli
cd lucky_cli
git checkout v0.27.0
shards install

# if this following step fails (you probably forgot to reload your shell after the openssl lib path update)
crystal build src/lucky.cr

# make your compiled lucky_cli available everywhere
mv lucky /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if you check your settings you should get:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky -v
# This should return 0.27.0

node -v
# should be 12.x or greater

yarn -v
# should be 1.x or greater

psql --version
# should be 10.x or greater
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;start-a-lucky-project&#34;&gt;Start a Lucky Project&lt;/h2&gt;
&lt;p&gt;Create your new Lucky project with the wizzard (just answer questions) - other options are at: &lt;a href=&#34;https://luckyframework.org/guides/getting-started/starting-project&#34;&gt;https://luckyframework.org/guides/getting-started/starting-project&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky init
cd {project_name}

# update the db settings in: `config/database.cr`

# if this step fails you may have forgotten to reload the shell after updating the openssl path
script/setup

# run lucky with:
lucky dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok lets do an initial commit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;initial commit after create&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;language-inflections&#34;&gt;Language Inflections&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s make a little silly Human and Pets database/webpage:&lt;/p&gt;
&lt;p&gt;The simplest way to generate is with: &lt;code&gt;lucky gen.resource.browser&lt;/code&gt; its basically the same as &lt;code&gt;rails g scaffold&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So lets get started:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky gen.resource.browser Human name:String
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OOPS - that generated the plural of &lt;code&gt;Human&lt;/code&gt; as &lt;code&gt;Humen&lt;/code&gt; instead of &lt;code&gt;Humans&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;lets clear all our incorrect files and fix this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clean -fd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;rsquo;s create a new config file for inflections &lt;code&gt;config/inflect.cr&lt;/code&gt; and enter:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# this probably isn&#39;t necessary for very long - but for now it is needed.
Wordsmith::Inflector.inflections.irregular(&amp;quot;human&amp;quot;, &amp;quot;humans&amp;quot;)

# I like using persons (also a dictionary word) over people, to do this we need
# - first we have to remove the original setting by doing:
Wordsmith::Inflector.inflections.plurals.delete(/(p)erson$/i)
# - now we can override the original with our preference
Wordsmith::Inflector.inflections.irregular(&amp;quot;person&amp;quot;, &amp;quot;persons&amp;quot;)

# if using `staff` as in human staff - then also add staff to uncountable:
Wordsmith::Inflector.inflections.uncountable(%w(staff))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/luckyframework/wordsmith/blob/master/src/wordsmith/inflections.cr&#34;&gt;https://github.com/luckyframework/wordsmith/blob/master/src/wordsmith/inflections.cr&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# config/inflector.cr
module Wordsmith
  Inflector.inflections.clear

  Inflector.inflections.plural(/$/, &amp;quot;s&amp;quot;)
  Inflector.inflections.plural(/s$/i, &amp;quot;s&amp;quot;)

  # etc, etc, etc

  Inflector.inflections.irregular(&amp;quot;human&amp;quot;, &amp;quot;humans&amp;quot;)
  Inflector.inflections.irregular(&amp;quot;person&amp;quot;, &amp;quot;persons&amp;quot;)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if we try again we will have the same problem!  We need to remove our binaries and recompile lucky with our need config!  (I lost a lot of time on this detail)! Do this with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rm -rf lib &amp;amp;&amp;amp; rm -rf bin &amp;amp;&amp;amp; shards update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can try to create a new Resource again.&lt;/p&gt;
&lt;h2 id=&#34;quick-lucky-test-tip&#34;&gt;Quick Lucky Test Tip&lt;/h2&gt;
&lt;p&gt;Lets quickly test our new config wiht &lt;code&gt;lucky exec&lt;/code&gt; - type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky exec
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This gives you an edit in your cli and you can type a small amount of code and it will be compiles and print you the results - ie:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky exec
# then when vim or nano opens you can enter something like:

require &amp;quot;../../src/app.cr&amp;quot;

include Lucky::TextHelpers

pp pluralize(2, &amp;quot;human&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and hopefuly you get &lt;code&gt;2 humans&lt;/code&gt; - cool - it works lets snapshot our changes.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;language inflection updates and customization&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;scaffold-a-simple-resource&#34;&gt;Scaffold a Simple Resource&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://luckyframework.org/guides/command-line-tasks/built-in&#34;&gt;https://luckyframework.org/guides/command-line-tasks/built-in&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now if we try again (we are free to use human again):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky gen.resource.browser Human name:String
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets run the migration:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky db.migrate

# oops I haven&#39;t create the DB yet
lucky db.create

# now migrate
lucky db.migrate

# start lucky &amp;amp; test
lucky dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now log_in and create humans at the &lt;code&gt;/humans&lt;/code&gt; url&lt;/p&gt;
&lt;p&gt;Cool - lets snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;First simple &#39;Human&#39; resource with scaffold&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-related-model&#34;&gt;Create a Related Model&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luckyframework.org/guides/database/models#belongs-to&#34;&gt;https://www.luckyframework.org/guides/database/models#belongs-to&lt;/a&gt;
&lt;a href=&#34;https://www.luckyframework.org/guides/database/models#has-many-one-to-many&#34;&gt;https://www.luckyframework.org/guides/database/models#has-many-one-to-many&lt;/a&gt;
&lt;a href=&#34;https://luckyframework.org/guides/database/migrations#associations&#34;&gt;https://luckyframework.org/guides/database/migrations#associations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, the Lucky generators don&amp;rsquo;t understand &lt;code&gt;belongs_to&lt;/code&gt; so we will need to do a few extra tweeks &amp;ndash; since we can&amp;rsquo;t do something like human:belongs_to or human:references like with Rails.&lt;/p&gt;
&lt;p&gt;So if we want to scaffold &amp;ldquo;pets&amp;rdquo; now and have them belong to humans (and humans can have many pets) - we first do:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky gen.resource.browser Pet name:String breed:String species:String age:Int32 house_trained:Bool
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;rsquo;s setup the relationships:&lt;/p&gt;
&lt;p&gt;First we need to update the migration with the human foreign_key using: &lt;code&gt;add_belongs_to&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So we need to update our pets migration to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# db/migrations/yyyymmddxxxxxx_create_pets.cr
class CreatePets::V20210502100912 &amp;lt; Avram::Migrator::Migration::V1
  def migrate
    create table_for(Pet) do
      primary_key id : Int64
      add_timestamps
      add name : String
      add breed : String
      add species : String
      add age : Int32
      add house_trained : Bool

      # When the associated human is deleted, their pets are also deleted
      # because we set on_delete: :cascade
      add_belongs_to human : Human, on_delete: :cascade    # relationship - newly added
    end
  end

  def rollback
    drop table_for(Pet)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that the pets database table will is correct - lets update the pet model too.
This is straight-forward we just need to add &lt;code&gt;belongs_to human : Human&lt;/code&gt; in the model file so it changes to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# src/models/pet.cr
class Pet &amp;lt; BaseModel
  table do
    column name : String
    column breed : String
    column species : String
    column age : Int32
    column house_trained : Bool

    belongs_to human : Human     # relationship - newly added
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now we need to add &lt;code&gt;has_many&lt;/code&gt; to the &lt;code&gt;Human&lt;/code&gt; model.  So we change it to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# src/models/human.cr
class Human &amp;lt; BaseModel
  table do
    column name : String

    has_many pets : Pet    # relationship - newly added
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can migrate:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky db.migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;lucky-html-and-rootpage-routing&#34;&gt;Lucky HTML and RootPage Routing&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://luckycasts.com/videos/lucky-html-in-crystal&#34;&gt;https://luckycasts.com/videos/lucky-html-in-crystal&lt;/a&gt;
&lt;a href=&#34;https://www.luckyframework.org/guides/http-and-routing/routing-and-params#root-page&#34;&gt;https://www.luckyframework.org/guides/http-and-routing/routing-and-params#root-page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If we look in &lt;code&gt;src/actions/home/index.cr&lt;/code&gt; we see:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# src/actions/home/index.cr
class Home::Index &amp;lt; BrowserAction
  include Auth::AllowGuests

  get &amp;quot;/&amp;quot; do
    if current_user?
      redirect Me::Show
    else
      # html Landing::IndexPage
      html Lucky::WelcomePage
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we can see - when we are not logged in &amp;ldquo;/&amp;rdquo; points to &lt;code&gt;Lucky::WelcomePage&lt;/code&gt; or whatever new landing page we make and when logged in we are pointed to the &lt;code&gt;Me::Show&lt;/code&gt; page.&lt;/p&gt;
&lt;p&gt;Let practice adding some &lt;code&gt;html&lt;/code&gt; and add links to our expected resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lsquo;/humans&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;/pets&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So lets change this too and practice lucky html&lt;/p&gt;
&lt;p&gt;We will add our list of resources - &amp;lsquo;pets&amp;rsquo; and &amp;lsquo;humans&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;So from looking at the existing html in &lt;code&gt;src/pages/me/show_page.cr&lt;/code&gt; it&amp;rsquo;s like a combo of haml and JS to create executable blocks with &lt;code&gt;{}&lt;/code&gt; so I created the method: &lt;code&gt;private def resource_links&lt;/code&gt; and tried out two methods of linking - not bad, but I figure it will take a bit of practice with this new format.  I don&amp;rsquo;t know the reason behind this, since almost all web resources will need to be reformatted - but I assume it is pre-compiled and thus fast!&lt;/p&gt;
&lt;p&gt;In the end I created this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# src/pages/me/show_page.cr
class Me::ShowPage &amp;lt; MainLayout
  def content
    h1 &amp;quot;This is your profile:&amp;quot;
    h2 &amp;quot;Email:  #{@current_user.email}&amp;quot;
    resource_links
    helpful_tips
  end

  private def resource_links
    h2 &amp;quot;Available Resources&amp;quot;
    ul do
      li { a &amp;quot;Pet Owners&amp;quot;, href: &amp;quot;/humans&amp;quot; }
      li { link_to_pets }
    end
  end

  private def helpful_tips
    h3 &amp;quot;Next, you may want to:&amp;quot;
    ul do
      li { link_to_authentication_guides }
      li &amp;quot;Modify this page: src/pages/me/show_page.cr&amp;quot;
      li &amp;quot;Change where you go after sign in: src/actions/home/index.cr&amp;quot;
    end
  end

  private def link_to_pets
    a &amp;quot;Pets&amp;quot;, href: &amp;quot;/pets&amp;quot;
  end

  private def link_to_authentication_guides
    a &amp;quot;Check out the authentication guides&amp;quot;,
      href: &amp;quot;https://luckyframework.org/guides/authentication&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;lets test it out:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;cool - good enough for now.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;added html links to user_home_page &#39;me&#39;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;seed-files&#34;&gt;Seed Files&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&#34;&gt;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&lt;/a&gt;
&lt;a href=&#34;https://luckyframework.org/guides/database/database-setup#seeding-data&#34;&gt;https://luckyframework.org/guides/database/database-setup#seeding-data&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now we can create seed files and be sure our basic relations work:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and run the seeds with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;simple-lucky-forms-in-pages-instead-of-shared&#34;&gt;Simple Lucky Forms (in pages instead of shared)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://luckycasts.com/videos/component-basics&#34;&gt;https://luckycasts.com/videos/component-basics&lt;/a&gt;
&lt;a href=&#34;https://luckycasts.com/videos/lucky-html-in-crystal&#34;&gt;https://luckycasts.com/videos/lucky-html-in-crystal&lt;/a&gt;
&lt;a href=&#34;https://luckyframework.org/guides/frontend/html-forms&#34;&gt;https://luckyframework.org/guides/frontend/html-forms&lt;/a&gt;
&lt;a href=&#34;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&#34;&gt;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&lt;/a&gt;
&lt;a href=&#34;https://luckyframework.org/guides/frontend/html-forms#shared-components&#34;&gt;https://luckyframework.org/guides/frontend/html-forms#shared-components&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lets test the web page&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and go to the url &lt;code&gt;/pets&lt;/code&gt; and create a &lt;strong&gt;Pet&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We discover we have problems - validation errors.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type mismatches (crystal is strongly typed - but the form generator ignores this - so we need to adjust by hans)&lt;/li&gt;
&lt;li&gt;Required human_id is missing (the generator isn&amp;rsquo;t aware of &lt;code&gt;belongs_to&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I didn&amp;rsquo;t find lots of Documentation or examples on Components, but I did find this article - which got me started on Lucky html and forms:
&lt;a href=&#34;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&#34;&gt;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After I figured out how to update FormComponents I found this: &lt;a href=&#34;https://luckycasts.com/videos/component-basics&#34;&gt;https://luckycasts.com/videos/component-basics&lt;/a&gt; - I&amp;rsquo;ll go back and view this!&lt;/p&gt;
&lt;p&gt;This got me going!  However, one difficulty I had was the Boolean field &lt;code&gt;house_trained&lt;/code&gt; - I tried both Checkboxes and Radio Buttons, but I kept getting &lt;code&gt;overload&lt;/code&gt; errors (which I finally realized were type mis-matches - you can&amp;rsquo;t send text into a Boolean field).  So I settled on a select_list where I can present a tuple with a &amp;ldquo;human readable value&amp;rdquo; and a &amp;ldquo;model value&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;So in the end my first draft form looked like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# src/pages/pets/new_page.cr
class Pets::NewPage &amp;lt; MainLayout
  needs operation : SavePet
  quick_def page_title, &amp;quot;New Pet&amp;quot;

  def content
    h1 &amp;quot;New Pet&amp;quot;
    render_pet_form(operation)
  end

  def render_pet_form(op)
    # comment out the form component for now
    # form_for Pets::Create do
    #   # Edit fields in src/components/pets/form_fields.cr
    #   mount Pets::FormFields, op

    #   submit &amp;quot;Save&amp;quot;, data_disable_with: &amp;quot;Saving...&amp;quot;
    # end

    form_for Pets::Create do
      div do
        label_for op.name
        text_input op.name
      end
      div do
        label_for op.species
        select_input(op.species, class: &amp;quot;custom-select&amp;quot;) do
          select_prompt(&amp;quot;Select&amp;quot;)
          options_for_select(op.species, [{&amp;quot;Cat&amp;quot;, &amp;quot;cat&amp;quot;}, {&amp;quot;Dog&amp;quot;, &amp;quot;dog&amp;quot;}])
        end
      end
      # eventually allow for this to be blank
      # eventually allow a dropdown list to be dependent on species
      div do
        label_for op.breed
        text_input op.breed
      end
      div do
        label_for op.age
        number_input(op.age, class: &amp;quot;custom-input&amp;quot;, min: &amp;quot;0&amp;quot;, max: &amp;quot;99&amp;quot;)
      end
      div do
        label_for op.house_trained
        select_input(op.house_trained, class: &amp;quot;custom-select&amp;quot;) do
          select_prompt(&amp;quot;Select&amp;quot;)
          options_for_select(op.house_trained, [{&amp;quot;yes&amp;quot;, true}, {&amp;quot;No&amp;quot;, false}])
        end
      end
      div do
        label_for op.human_id
        select_input op.human_id do
          options_for_select(op.human_id, humans_for_select)
        end
      end
      submit &amp;quot;Save Pet&amp;quot;
    end
  end

  # find all the humans and create a tuple of the name and id - displayed and passed to model
  private def humans_for_select
    HumanQuery.new.map do |human|
      { human.name, human.id }
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;of course this isn&amp;rsquo;t shared by the &lt;code&gt;edit&lt;/code&gt; page, but it is still helpful to see the Lucky way to create html.&lt;/p&gt;
&lt;p&gt;So after a while I figured out how to revert this code and use SharedForms (I think this is a form of FrontEnd Components).&lt;/p&gt;
&lt;p&gt;Lets test again:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool it works as I expect&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;a working &#39;new&#39; html form - not shared&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;shared-web-form---component&#34;&gt;Shared Web Form - Component&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://luckycasts.com/videos/component-basics&#34;&gt;https://luckycasts.com/videos/component-basics&lt;/a&gt;
&lt;a href=&#34;https://luckyframework.org/guides/frontend/html-forms&#34;&gt;https://luckyframework.org/guides/frontend/html-forms&lt;/a&gt;
&lt;a href=&#34;https://luckyframework.org/guides/frontend/html-forms#shared-components&#34;&gt;https://luckyframework.org/guides/frontend/html-forms#shared-components&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;With a little more experience with Lucky HTML lets try the component forms again at &lt;code&gt;src/components/pets/form_fields.cr&lt;/code&gt; (so lets revert: &lt;code&gt;src/pages/pets/new_page.cr&lt;/code&gt; back to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# src/pages/pets/new_page.cr
class Pets::NewPage &amp;lt; MainLayout
  needs operation : SavePet
  quick_def page_title, &amp;quot;New Pet&amp;quot;

  def content
    h1 &amp;quot;New Pet&amp;quot;
    render_pet_form(operation)
  end

  def render_pet_form(op)
    form_for Pets::Create do
      # Edit fields in src/components/pets/form_fields.cr
      mount Pets::FormFields, op

      submit &amp;quot;Save&amp;quot;, data_disable_with: &amp;quot;Saving...&amp;quot;
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once I had build the first form and understood the errors - so the same form as a form_component looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# src/components/pets/form_fields.cr
class Pets::FormFields &amp;lt; BaseComponent
  needs operation : SavePet

  def render
    mount Shared::Field, operation.name, &amp;amp;.text_input(autofocus: &amp;quot;true&amp;quot;)
    mount Shared::Field, operation.species do |input_html|
      input_html.select_input append_class: &amp;quot;select-input&amp;quot; do
        select_prompt(&amp;quot;Select&amp;quot;)
        options_for_select operation.species, [{&amp;quot;Dog&amp;quot;, &amp;quot;dog&amp;quot;}, {&amp;quot;Cat&amp;quot;, &amp;quot;cat&amp;quot;}]
      end
    end
    mount Shared::Field, operation.breed
    mount Shared::Field, operation.age, &amp;amp;.number_input(append_class: &amp;quot;custom-input&amp;quot;, min: &amp;quot;0&amp;quot;, max: &amp;quot;99&amp;quot;)
    mount Shared::Field, operation.house_trained do |input_html|
      input_html.select_input append_class: &amp;quot;select-input&amp;quot; do
        select_prompt(&amp;quot;Select&amp;quot;)
        options_for_select operation.house_trained, [{&amp;quot;yes&amp;quot;, true}, {&amp;quot;no&amp;quot;, false}]
      end
    end
    mount Shared::Field, operation.human_id do |input_html|
      input_html.select_input append_class: &amp;quot;select-input&amp;quot; do
        select_prompt(&amp;quot;Select&amp;quot;)
        options_for_select operation.human_id, options_for_humans
      end
    end
  end

  private def options_for_humans
    HumanQuery.new.map do |human|
      { human.name, human.id }
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;the documentation has several examples with: &lt;code&gt;attrs: [:required]&lt;/code&gt; in the form.  This does client side validation (will not even submit the form if empty).  I don&amp;rsquo;t recommend using this generally.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if you don&amp;rsquo;t put anything next to the variable a text input without anything more than the errors are assumed &lt;code&gt;&amp;amp;.text_input()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Lets test again:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;cool - lets snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;working shared form component with a variety of types&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;redirect-after-create--update-to-index&#34;&gt;Redirect after Create / Update to Index&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://luckyframework.org/guides/http-and-routing/routing-and-params&#34;&gt;https://luckyframework.org/guides/http-and-routing/routing-and-params&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I find it annoying after creating and updating a resource to have to then manually go back to the index page from the show page.&lt;/p&gt;
&lt;p&gt;In lucky the routing/controll happens in the &lt;code&gt;action&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;To change what happens after creating and updating a Pet we simply change &lt;code&gt;src/actions/pets/create.cr&lt;/code&gt; to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# src/actions/pets/create.cr
class Pets::Create &amp;lt; BrowserAction
  post &amp;quot;/pets&amp;quot; do
    SavePet.create(params) do |operation, pet|
      if pet
        flash.success = &amp;quot;The record has been saved&amp;quot;
        html IndexPage, pets: PetQuery.new  # new action (copied from index)
        # redirect Show.with(pet.id)        # old no longer wanted
      else
        flash.failure = &amp;quot;It looks like the form is not valid&amp;quot;
        html NewPage, operation: operation
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And update &lt;code&gt;src/actions/pets/update.cr&lt;/code&gt; is similarly easy:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# src/actions/pets/update.cr
class Pets::Update &amp;lt; BrowserAction
  put &amp;quot;/pets/:pet_id&amp;quot; do
    pet = PetQuery.find(pet_id)
    SavePet.update(pet, params) do |operation, updated_pet|
      if operation.saved?
        flash.success = &amp;quot;The record has been updated&amp;quot;
        html IndexPage, pets: PetQuery.new
        # redirect Show.with(updated_pet.id)
      else
        flash.failure = &amp;quot;It looks like the form is not valid&amp;quot;
        html EditPage, operation: operation, pet: updated_pet
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I appreciate how explicit these are!&lt;/p&gt;
&lt;h2 id=&#34;optional-fields&#34;&gt;Optional Fields&lt;/h2&gt;
&lt;p&gt;Often a &lt;strong&gt;breed&lt;/strong&gt; is unknown - we could just add an &lt;code&gt;unknown&lt;/code&gt; value, but that&amp;rsquo;s silly, lets figure out how to work with unknown / unneeded data and allow nil in our &lt;code&gt;breed&lt;/code&gt; field.&lt;/p&gt;
&lt;p&gt;Since Crystal is strongly typed - one needs to explicitly mark that a field can be nil with &lt;code&gt;?&lt;/code&gt; - you can see the docs here: &lt;a href=&#34;https://luckyframework.org/guides/database/models#adding-a-column&#34;&gt;https://luckyframework.org/guides/database/models#adding-a-column&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So to make &lt;strong&gt;breed&lt;/strong&gt; optional we will change the pets model to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Pet &amp;lt; BaseModel
  table do
    column name : String
    column species : String
    column breed : String?  # adding `?` makes the field optional (nil-able)
    column age : Int32
    column house_trained : Bool

    # relations
    belongs_to owner : Owner
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when I run lucky - I&amp;rsquo;ll expect to find some errors - (probably in a view saying I need null protecction).  However instead I get:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Unhandled exception: Pet has defined &#39;breed&#39; as nilable (String?), but the database column does not allow nils.
web          |
web          | Either mark the column as required in Pet:
web          |
web          |   # Remove the &#39;?&#39;
web          |   column breed : String
web          |
web          | Or, make the column optional in a migration:
web          |
web          |   â¸ Generate a migration:
web          |
web          |       lucky gen.migration MakePetBreedOptional
web          |
web          |   â¸ Make the column optional:
web          |
web          |       make_optional :pets, :breed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oddly, I don&amp;rsquo;t see anything in the migration Docs &lt;code&gt;https://www.luckyframework.org/guides/database/migrations&lt;/code&gt; about marking a file optional (nor how to make it optional in the original migration).  Since we w&lt;/p&gt;
&lt;p&gt;But lets try:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky gen.migration MakePetBreedOptional
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hmm, the error says what to put in the migration, but not the rollback, lets search the luckyframework repos and see what we find:  &lt;a href=&#34;https://github.com/luckyframework/avram/blob/f676a9a7d2e70d74891ad686039bf393983d0760/src/avram/migrator/statement_helpers.cr&#34;&gt;https://github.com/luckyframework/avram/blob/f676a9a7d2e70d74891ad686039bf393983d0760/src/avram/migrator/statement_helpers.cr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here we see what the options are so lets edit the migration to look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class MakePetBreedOptional::V20210507125901 &amp;lt; Avram::Migrator::Migration::V1
  def migrate
    make_optional :pets, :breed
    # alter table_for(Pet) do
    #   make_optional :breed
    # end
  end

  def rollback
    # query for breed fields that are nil and fill them BEFORE making the field REQUIRED!
    PetQuery.new.breed.is_nil.each do |pet|
      SavePet.update!(pet, breed: &amp;quot;unknown&amp;quot;)
    end
    # this would work too, but might as well let the db do the heavy lifting
    # PetQuery.new.each do |pet|
    #   SavePet.update!(pet, breed: &amp;quot;unknown&amp;quot;) if pet.breed.nil?
    # end

    # simple way of making ONE field required
    make_required :pets, :breed

    # this would be better when changing lots of fields
    # alter table_for(Pet) do
    #   make_required :breed
    # end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OK - lets try again:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool it works - lets make a new record - with an null value.&lt;/p&gt;
&lt;p&gt;Lets look at the record within postgresql:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;psql -d pets_development
select * from pets;

 id |       created_at       |       updated_at       | name  | breed | species | age | house_trained | owner_id
----+------------------------+------------------------+-------+-------+---------+-----+---------------+----------
  1 | 2021-05-07 15:23:28+02 | 2021-05-07 15:23:28+02 | Nyima |       | dog     |  11 | t             |        1
\q
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;rsquo;s be sure our rollback works.  Notice - before we make it &lt;code&gt;required&lt;/code&gt; we find records with nil values and fill them &lt;code&gt;unknown&lt;/code&gt;.  An example of adding data logic within a migration can be found at: &lt;a href=&#34;https://luckyframework.org/guides/database/migrations#using-fill_existing_with-and-default-values&#34;&gt;https://luckyframework.org/guides/database/migrations#using-fill_existing_with-and-default-values&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky db.rollback
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OK - good the migration didn&amp;rsquo;t crash - lets check the DB.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
psql -d pets_development
select * from pets;

 id |       created_at       |       updated_at       | name  |  breed  | species | age | house_trained | owner_id
----+------------------------+------------------------+-------+---------+---------+-----+---------------+----------
  1 | 2021-05-07 15:23:28+02 | 2021-05-07 16:28:55+02 | Nyima | unknown | dog     |  11 | t             |        1
\q
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nice it worked.&lt;/p&gt;
&lt;h2 id=&#34;display-validation-errors&#34;&gt;Display Validation Errors&lt;/h2&gt;
&lt;p&gt;If we leave some fields out - Lucky gives us validation errors - all fields appear to be required without explicitly allowing nils - but we don&amp;rsquo;t see them with our default form.  Lets fix that.&lt;/p&gt;
&lt;h2 id=&#34;add-validations&#34;&gt;Add Validations&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s add a few custom validations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;minimal pet_name length&lt;/li&gt;
&lt;li&gt;numeric range&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tests-for-our-validations&#34;&gt;Tests for our Validations&lt;/h2&gt;
&lt;p&gt;Now that we have some logic lets add some tests&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/luckyframework/lucky_flow&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BrowserTesting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pretty-urls&#34;&gt;Pretty URLs&lt;/h2&gt;
&lt;p&gt;Looks interesting and easy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/luckyframework/avram_slugify&#34;&gt;https://github.com/luckyframework/avram_slugify&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lucky-pubsub&#34;&gt;Lucky PubSub&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/luckyframework/pulsar&#34;&gt;https://github.com/luckyframework/pulsar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bulma-integration&#34;&gt;Bulma Integration&lt;/h2&gt;
&lt;p&gt;Integrate CSS Frameworks&lt;/p&gt;
&lt;h2 id=&#34;view-components&#34;&gt;View Components&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://luckycasts.com/videos/component-basics&#34;&gt;https://luckycasts.com/videos/component-basics&lt;/a&gt;
&lt;a href=&#34;https://luckyframework.org/guides/frontend/rendering-html#creating-and-using-components&#34;&gt;https://luckyframework.org/guides/frontend/rendering-html#creating-and-using-components&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;tailwind-integration&#34;&gt;Tailwind Integration&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://luckycasts.com/videos/tailwind-css&#34;&gt;https://luckycasts.com/videos/tailwind-css&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s make the pages a bit nicer&lt;/p&gt;
&lt;h2 id=&#34;html-to-lucky-formatter&#34;&gt;HTML to Lucky formatter&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://luckyframework.org/html&#34;&gt;https://luckyframework.org/html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If we want to create some more complex pages with tailwind - lets use the converted to help.&lt;/p&gt;
&lt;h2 id=&#34;dynamic-front-end---selections-dependencies-alpinejs--stimulusjs-&#34;&gt;Dynamic Front-end - Selections Dependencies (AlpineJS / StimulusJS) ?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://luckycasts.com/videos/stimulus-js&#34;&gt;https://luckycasts.com/videos/stimulus-js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Make the breed list, dependent on the species list
Lets change the Front-End language on the fly
Lets make the new TailwindUI menu bar have the dynamic features.&lt;/p&gt;
&lt;h2 id=&#34;has-many-through&#34;&gt;Has many through&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luckyframework.org/guides/database/models#has-many-through-many-to-many&#34;&gt;https://www.luckyframework.org/guides/database/models#has-many-through-many-to-many&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;polymorphic-relationships&#34;&gt;Polymorphic Relationships&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luckyframework.org/guides/database/models#polymorphic-associations&#34;&gt;https://www.luckyframework.org/guides/database/models#polymorphic-associations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One reason I favor Lucky is the database &lt;code&gt;Avram&lt;/code&gt; supports polymorphic relationships - which seems to come up a lot in my code - so lets see how to get it working and support multiple types:&lt;/p&gt;
&lt;p&gt;Pets -&amp;gt; Cats, Dogs, Horses, etc&lt;/p&gt;
&lt;h2 id=&#34;optional-relations&#34;&gt;Optional Relations&lt;/h2&gt;
&lt;h2 id=&#34;internationalization-i18n&#34;&gt;Internationalization (i18n)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://luckycasts.com/videos/translations&#34;&gt;https://luckycasts.com/videos/translations&lt;/a&gt;
&lt;a href=&#34;https://luckyframework.org/guides/frontend/internationalization&#34;&gt;https://luckyframework.org/guides/frontend/internationalization&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;dynamic-i18n-in-front-end&#34;&gt;Dynamic i18n in Front-End?&lt;/h2&gt;
&lt;h2 id=&#34;components-with-scopes&#34;&gt;Components (with scopes)&lt;/h2&gt;
&lt;h2 id=&#34;lucky-code-scopes&#34;&gt;Lucky Code Scopes&lt;/h2&gt;
&lt;h2 id=&#34;resource-authorization&#34;&gt;Resource Authorization&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/stephendolan/pundit&#34;&gt;https://github.com/stephendolan/pundit&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;web-sockets&#34;&gt;Web Sockets&lt;/h2&gt;
&lt;p&gt;For now something like &lt;strong&gt;LiveView&lt;/strong&gt; and &lt;strong&gt;Hotwire&lt;/strong&gt; are not yet integrated into lucky - its build your own.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cable-cr/cable&#34;&gt;https://github.com/cable-cr/cable&lt;/a&gt;
&lt;a href=&#34;https://github.com/luckyframework/lucky/issues/554&#34;&gt;https://github.com/luckyframework/lucky/issues/554&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;deploying-lucky--env&#34;&gt;Deploying Lucky &amp;amp; ENV&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://fullstackstanley.com/read/categories/lucky-framework/&#34;&gt;https://fullstackstanley.com/read/categories/lucky-framework/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;security-alternatives&#34;&gt;Security (Alternatives)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/grottopress/shield&#34;&gt;https://github.com/grottopress/shield&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;message--events---queues&#34;&gt;Message / Events - Queues&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/mosquito-cr/mosquito&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/mperham/sidekiq.cr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sidekiq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/bmulvihill/dispatch&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;InMemory-JobQueue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Phoenix 1.5 authentication with POW</title>
      <link>https://btihen.me/post_elixir_phoenix/phoenix_1_5_authentication_pow/</link>
      <pubDate>Sun, 25 Apr 2021 01:01:53 +0200</pubDate>
      <guid>https://btihen.me/post_elixir_phoenix/phoenix_1_5_authentication_pow/</guid>
      <description>&lt;h2 id=&#34;auth&#34;&gt;Auth&lt;/h2&gt;
&lt;p&gt;Auth with POW&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=hnD0Z0LGMIk&#34;&gt;https://www.youtube.com/watch?v=hnD0Z0LGMIk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.skcript.com/svr/using-bamboo-to-send-emails-in-phoenix/&#34;&gt;https://www.skcript.com/svr/using-bamboo-to-send-emails-in-phoenix/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kabisa.nl/tech/real-world-phoenix-lets-auth-some-users/&#34;&gt;https://www.kabisa.nl/tech/real-world-phoenix-lets-auth-some-users/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-1/&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-1/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&#34;&gt;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kabisa.nl/tech/real-world-phoenix-sign-up-flow-spa-style-with-liveview/&#34;&gt;https://www.kabisa.nl/tech/real-world-phoenix-sign-up-flow-spa-style-with-liveview/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@andreichernykh/phoenix-simple-authentication-authorization-in-step-by-step-tutorial-form-dc93ea350153&#34;&gt;https://medium.com/@andreichernykh/phoenix-simple-authentication-authorization-in-step-by-step-tutorial-form-dc93ea350153&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;POW and LiveViews&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.to/oliverandrich/how-to-connect-pow-and-live-view-in-your-phoenix-project-1ga1&#34;&gt;https://dev.to/oliverandrich/how-to-connect-pow-and-live-view-in-your-phoenix-project-1ga1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Auth with auth.gen&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://elixircasts.io/using-phx_gen_auth-for-phoenix-authentication&#34;&gt;https://elixircasts.io/using-phx_gen_auth-for-phoenix-authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-phx-gen-auth-part-1/&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-phx-gen-auth-part-1/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-phx-gen-auth-part-2/&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-phx-gen-auth-part-2/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fullstackphoenix.com/tutorials/combining-authentication-solutions-with-guardian-and-phx-gen-auth&#34;&gt;https://fullstackphoenix.com/tutorials/combining-authentication-solutions-with-guardian-and-phx-gen-auth&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Auth with PubSub&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://curiosum.dev/blog/elixir-phoenix-liveview-messenger-part-3&#34;&gt;https://curiosum.dev/blog/elixir-phoenix-liveview-messenger-part-3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Auth with Email&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hex.pm/packages/bamboo&#34;&gt;https://hex.pm/packages/bamboo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hexdocs.pm/bamboo_smtp/readme.html&#34;&gt;https://hexdocs.pm/bamboo_smtp/readme.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://elixircasts.io/sending-email-with-bamboo-part-1&#34;&gt;https://elixircasts.io/sending-email-with-bamboo-part-1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://elixircasts.io/sending-email-with-bamboo-part-2&#34;&gt;https://elixircasts.io/sending-email-with-bamboo-part-2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devato.com/post/use-bamboo-to-send-email-in-phoenix&#34;&gt;https://devato.com/post/use-bamboo-to-send-email-in-phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kabisa.nl/tech/real-world-phoenix-lets-send-some-emails/&#34;&gt;https://www.kabisa.nl/tech/real-world-phoenix-lets-send-some-emails/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&#34;&gt;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;General Auth Principles
&lt;a href=&#34;https://nithinbekal.com/posts/phoenix-authentication/&#34;&gt;https://nithinbekal.com/posts/phoenix-authentication/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;mail-in-test-env&#34;&gt;Mail in Test Env&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mailhog/MailHog&#34;&gt;https://github.com/mailhog/MailHog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mailcatcher.me/&#34;&gt;https://mailcatcher.me/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Pow has the advantage that it updates security patches &amp;ndash; since its a well maintained library.&lt;/p&gt;
&lt;p&gt;This repo can be found at: &lt;a href=&#34;https://github.com/btihen/phoenix_1_5_pow_auth_config&#34;&gt;https://github.com/btihen/phoenix_1_5_pow_auth_config&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Get the latest version from: &lt;a href=&#34;https://hex.pm/packages/pow&#34;&gt;https://hex.pm/packages/pow&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{:pow, &amp;quot;~&amp;gt; 1.0&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install the dependency:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix deps.get
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install POW:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix pow.install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets verify all is good with the install:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix deps.compile
mix help | grep pow
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now hopefully you see some new &lt;code&gt;pow&lt;/code&gt; commands&lt;/p&gt;
&lt;h2 id=&#34;configure-pow&#34;&gt;Configure Pow&lt;/h2&gt;
&lt;p&gt;There are three files you&amp;rsquo;ll need to configure first before you can use Pow.&lt;/p&gt;
&lt;p&gt;First, append this to &lt;code&gt;config/config.exs&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config :fare, :pow,
  user: Fare.Users.User,
  repo: Fare.Repo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, add &lt;code&gt;Pow.Plug.Session&lt;/code&gt; plug to &lt;code&gt;lib/fare_web/endpoint.ex&lt;/code&gt; after &lt;code&gt;plug Plug.Session&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;defmodule FareWeb.Endpoint do
  use Phoenix.Endpoint, otp_app: :fare   # add this line HERE!

  # ...

  plug Plug.Session, @session_options
  plug Pow.Plug.Session, otp_app: :fare  # add this line HERE!
  plug FareWeb.Router
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Last, update &lt;code&gt;lib/fare_web/router.ex&lt;/code&gt; with the Pow routes - this first time we need to do a little extra config:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  pipeline :api do
    plug :accepts, [&amp;quot;json&amp;quot;]
  end
  scope &amp;quot;/&amp;quot;, MyAppWeb do
    pipe_through [:browser, :protected]

    # Add your protected routes here
  end

  scope &amp;quot;/&amp;quot;, MyAppWeb do
    pipe_through :browser

    live &amp;quot;/&amp;quot;, PageLive, :index
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Should now look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  pipeline :api do
    plug :accepts, [&amp;quot;json&amp;quot;]
  end

  pipeline :protected do
    plug Pow.Plug.RequiredAuthentication,
          error_handler: Pow.Phoenix.PlugErrorHandler
  end

  scope &amp;quot;/&amp;quot; do
    pipe_through :browser

    pow_routes()
  end

  scope &amp;quot;/&amp;quot;, MyAppWeb do
    pipe_through [:browser, :protected]

    # Add your protected routes here
    resources &amp;quot;/tasks&amp;quot;, TaskController
  end

  scope &amp;quot;/&amp;quot;, MyAppWeb do
    pipe_through :browser

    live &amp;quot;/&amp;quot;, PageLive, :index
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets check the routes - that all is well configured:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.routes | grep pow
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hopefully you see some new pow routes.&lt;/p&gt;
&lt;p&gt;Now we can migrate to create our users table:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix ecto.migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if we start phoenix:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and open phoenix: &lt;code&gt;localhost:4000&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;pow-user-links&#34;&gt;POW user Links&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-1/&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Notice there is no menu option to login - lets build a simple signup/signin/logout link.&lt;/p&gt;
&lt;p&gt;In root.html.eex find &lt;code&gt;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://hexdocs.pm/phoenix/overview.html&amp;quot;&amp;gt;Get Started&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/code&gt; and we will replace it with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;            &amp;lt;%= if Pow.Plug.current_user(@conn) do %&amp;gt;
              &amp;lt;li&amp;gt;
                &amp;lt;%= link &amp;quot;#{@current_user.email}&amp;quot;, to: Routes.pow_registration_path(@conn, :edit) %&amp;gt;
              &amp;lt;/li&amp;gt;
              &amp;lt;li&amp;gt;
                &amp;lt;%= link &amp;quot;Sign-out&amp;quot;, to: Routes.pow_session_path(@conn, :delete), method: :delete %&amp;gt;
              &amp;lt;/li&amp;gt;
            &amp;lt;% else %&amp;gt;
              &amp;lt;li&amp;gt;&amp;lt;%= link &amp;quot;Sign-in&amp;quot;, to: Routes.pow_session_path(@conn, :new) %&amp;gt;&amp;lt;/li&amp;gt;
              &amp;lt;li&amp;gt;&amp;lt;%= link &amp;quot;Register&amp;quot;, to: Routes.pow_registration_path(@conn, :new) %&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now reload and try it out:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;you should be able to register&lt;/li&gt;
&lt;li&gt;sign-out&lt;/li&gt;
&lt;li&gt;sign in&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;customizable-login-pages&#34;&gt;Customizable Login pages&lt;/h2&gt;
&lt;p&gt;Generate the pages to customize with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix pow.phoenix.gen.templates
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now be sure to change the config in &lt;code&gt;config/confix.ex&lt;/code&gt; from:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config :my_app, :pow,
  user: MyApp.Users.User,
  repo: Fare.Repo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config :my_app, :pow,
  user: MyApp.Users.User,
  repo: MyApp.Repo,
  web_module: MyAppWeb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Without updating the config the newly generated pages won&amp;rsquo;t be used!&lt;/p&gt;
&lt;p&gt;The new templates to modify are found in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lib/fare_web/templates/pow/registration&lt;/code&gt; &amp;amp;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lib/fare_web/templates/pow/session&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now make a small change to the pages to ensure all works.&lt;/p&gt;
&lt;h2 id=&#34;create-a-restricted-user-page&#34;&gt;Create a restricted user page&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=hnD0Z0LGMIk&#34;&gt;https://www.youtube.com/watch?v=hnD0Z0LGMIk&lt;/a&gt;
&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-1/&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Create a normal html page first:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.gen.html Tasks Task tasks description:string completed:boolean
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;BE SURE TO PUT the new route in the &lt;code&gt;protected&lt;/code&gt; area of the routes file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/fare_web/router.ex
  scope &amp;quot;/&amp;quot;, MyAppWeb do
    pipe_through [:browser, :protected]

    # Add your protected routes here
    resources &amp;quot;/tasks&amp;quot;, TaskController
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now of course run the migration:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix ecto.migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now &lt;code&gt;/tasks&lt;/code&gt; should only be availble to signed in users.  Be sure you are logged out and cannot get to the &lt;code&gt;/tasks&lt;/code&gt; route (and infact are redirected to sign-in). And once logged in the page works as expected.&lt;/p&gt;
&lt;h2 id=&#34;extensions&#34;&gt;Extensions&lt;/h2&gt;
&lt;h3 id=&#34;persistent-login-sessions-remember-me&#34;&gt;Persistent Login Sessions (Remember me)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Currently every time the user closes the browser they are logged out - the login cookie doesn&amp;rsquo;t persist - most users would like the option to change this - with a &lt;code&gt;remember me&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;in &lt;code&gt;config/config.exs&lt;/code&gt; change the &lt;code&gt;:pow&lt;/code&gt; config to look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config :my_app, :pow,
  user: MyApp.Users.User,
  repo: MyApp.Repo,
  web_module: MyAppWeb,
  # add the following two lines
  extensions: [PowPersistentSession],
  controller_callbacks: Pow.Extension.Phoenix.ControllerCallbacks
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in &lt;code&gt;/lib/my_app_web/endpoint.ex&lt;/code&gt; we need to add the persistent cookie setting immediately after the &lt;code&gt;Pow.Plug.Session&lt;/code&gt; plug and before the routing &lt;code&gt;MyAppWeb.Router&lt;/code&gt; plug &amp;ndash; now the end of the endpoint file should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  # enable Pow session based authentication
  plug Pow.Plug.Session, otp_app: :warehouse
  # enable Pow persistent sessions
  plug PowPersistentSession.Plug.Cookie
  # routing plug
  plug MyAppWeb.Router
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;just above the login button on the &lt;code&gt;sign-in&lt;/code&gt; page add the following check-box:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/fare_web/templates/pow/session/new.html.eex
  &amp;lt;%= label f, :persistent_session, &amp;quot;Remember me&amp;quot; %&amp;gt;
  &amp;lt;%= checkbox f, :persistent_session %&amp;gt;

  &amp;lt;div&amp;gt;
    &amp;lt;%= submit &amp;quot;Sign in&amp;quot; %&amp;gt;
  &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;restart Phoenix with: &lt;code&gt;mix phx.server&lt;/code&gt; and now you should be able to close your browser and re-open the link and stay logged in if the &lt;code&gt;remember-me&lt;/code&gt; is clicked.&lt;/p&gt;
&lt;h2 id=&#34;after-logout---go-to-landing-page-after-hook-routing&#34;&gt;After Logout - go to Landing Page (After Hook Routing)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One little annoying thing is that when we logout we go to the sign-in page instead of the landing page.  We can fix that by adding a call_back_route - you can find all the callback routes at: &lt;a href=&#34;https://github.com/danschultzer/pow/blob/master/lib/pow/phoenix/routes.ex&#34;&gt;https://github.com/danschultzer/pow/blob/master/lib/pow/phoenix/routes.ex&lt;/a&gt; - we will use: the &lt;code&gt;after_sign_out_path&lt;/code&gt; callback.&lt;/p&gt;
&lt;p&gt;To do this we will make a new &lt;code&gt;pow.routes&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch lib/warehouse_web/pow/routes.ex
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add the following contents:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt; EOF&amp;gt; lib/my_app_web/pow/routes.ex
defmodule MyAppWeb.Pow.Routes do
  use Pow.Phoenix.Routes
  alias MyAppWeb.Router.Helpers, as: Routes

  def after_sign_out_path(conn), do: Routes.page_path(conn, :index)
end
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now finally update &lt;code&gt;config/confix.exs&lt;/code&gt; by adding &lt;code&gt;routes_backend: MyAppWeb.Pow.Routes&lt;/code&gt; to the &lt;code&gt;:pow&lt;/code&gt; config so now it would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config :my_app, :pow,
  user: MyApp.Users.User,
  repo: MyApp.Repo,
  web_module: MyAppWeb,
  extensions: [PowPersistentSession],
  controller_callbacks: Pow.Extension.Phoenix.ControllerCallbacks,
  routes_backend: MyAppWeb.Pow.Routes    # add this line
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming all works we will snapshot now!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;on logout go to landing page&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;password-reset-and-email-confirmation&#34;&gt;Password Reset and Email Confirmation&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/pow-auth/pow_assent&#34;&gt;https://github.com/pow-auth/pow_assent&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=hnD0Z0LGMIk&#34;&gt;https://www.youtube.com/watch?v=hnD0Z0LGMIk&lt;/a&gt;
&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The following are the possible extensions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PowResetPassword&lt;/li&gt;
&lt;li&gt;PowEmailConfirmation&lt;/li&gt;
&lt;li&gt;PowPersistentSession&lt;/li&gt;
&lt;li&gt;PowInvitation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s start with password reset and email confirmation.&lt;/p&gt;
&lt;p&gt;First we need to do a migration:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix pow.extension.ecto.gen.migrations --extension PowResetPassword --extension PowEmailConfirmation
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now update the phoenix config &lt;code&gt;config/config.ex&lt;/code&gt; again from:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config :my_app, :pow,
  user: MyApp.Users.User,
  repo: MyApp.Repo,
  web_module: MyAppWeb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config :my_app, :pow,
  user: MyApp.Users.User,
  repo: MyApp.Repo,
  web_module: MyAppWeb,
  extensions: [PowPersistentSession, PowResetPassword, PowEmailConfirmation],
  controller_callbacks: Pow.Extension.Phoenix.ControllerCallbacks
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now update the &lt;code&gt;LIB_PATH/users/user.ex&lt;/code&gt; file from:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;defmodule Fare.Users.User do
  use Ecto.Schema
  use Pow.Ecto.Schema

  schema &amp;quot;users&amp;quot; do
    pow_user_fields()

    timestamps()
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;defmodule MyApp.Users.User do
  use Ecto.Schema
  use Pow.Ecto.Schema
  use Pow.Extension.Ecto.Schema,
      extensions: [PowResetPassword, PowEmailConfirmation]

  schema &amp;quot;users&amp;quot; do
    pow_user_fields()

    timestamps()
  end

  def changeset(user_or_changeset, attrs) do
    user_or_changeset
    |&amp;gt; pow_changeset(attrs)
    |&amp;gt; pow_extension_changeset(attrs)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And of course the routes &lt;code&gt;WEB_PATH/router.ex&lt;/code&gt; too - at the top of the file add:
so it looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;defmodule MyAppWeb.Router do
  use MyAppWeb, :router
  use Pow.Phoenix.Router
  use Pow.Extension.Phoenix.Router,
      extensions: [PowResetPassword, PowEmailConfirmation]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And in the pow routes config change from:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  scope &amp;quot;/&amp;quot; do
    pipe_through :browser

    pow_routes()
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  scope &amp;quot;/&amp;quot; do
    pipe_through :browser

    pow_routes()
    pow_extension_routes()
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now finally, we need can update any views needed by POW&amp;rsquo;s new extensions with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix pow.extension.phoenix.gen.templates --extension PowResetPassword --extension PowEmailConfirmation
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can update the sign-in page with a reset password button.  We will add the following, to the end of &lt;code&gt;lib/fare_web/templates/pow/session/new.html.eex&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;|
&amp;lt;span&amp;gt;
&amp;lt;%= link &amp;quot;Reset Password&amp;quot;, to: Routes.pow_reset_password_reset_password_path(@conn, :new) %&amp;gt;
&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets be sure we can link to reset password view.&lt;/p&gt;
&lt;p&gt;First we will do our migration:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix ecto.migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now to to sign-in and see if the reset password link works.
Cool it does, but it we try to use it - it complains it needs email back-end setup.&lt;/p&gt;
&lt;h2 id=&#34;email-backend&#34;&gt;Email backend&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&#34;&gt;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First we will create a mailer function in: &lt;code&gt;lib/my_app_web/pow/pow_mailer.ex&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir lib/my_app_web/pow/
touch lib/my_app_web/pow/pow_mailer.ex
cat &amp;lt;&amp;lt;EOF &amp;gt; lib/my_app_web/pow/pow_mailer.ex
defmodule FareWeb.Pow.Mailer do
  use Pow.Phoenix.Mailer

  require Logger

  @impl true
  def cast(%{user: user, subject: subject, text: text, html: html}) do
    # Forward Struct to logger - disable/remove when Bamboo configured
    %{to: user.email, subject: subject, text: text, html: html}
  end

  @impl true
  def process(email) do
    # log email sent
    Logger.debug(&amp;quot;E-mail sent: #{inspect email}&amp;quot;)
  end
end
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now that we have an email template we need to tell pow about the mailer with the config: &lt;code&gt;mailer_backend: MyAppWeb.Pow.Mailer&lt;/code&gt; in &lt;code&gt;config/config.exs&lt;/code&gt; so change to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# config for pow - user authentication
config :my_app, :pow,
  user: MyApp.Users.User,
  repo: MyApp.Repo,
  web_module: MyAppWeb,
  mailer_backend: MyAppWeb.Pow.Mailer,  # add this
  extensions: [PowPersistentSession, PowResetPassword, PowEmailConfirmation],
  controller_callbacks: Pow.Extension.Phoenix.ControllerCallbacks
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now generate the POW mail templates - with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix pow.extension.phoenix.mailer.gen.templates --extension PowResetPassword --extension PowEmailConfirmation
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Phoenix also needs to know about the mailer templates we will generate so add to &lt;code&gt;lib/my_app_web.ex&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  def mailer_view do
    quote do
      use Phoenix.View, root: &amp;quot;lib/my_app_web/templates&amp;quot;,
                        namespace: MyAppWeb

      use Phoenix.HTML
    end
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the final config change in &lt;code&gt;config/config.ex&lt;/code&gt; to access our new templates:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# config for pow - user authentication
config :fare, :pow,
  user: Fare.Users.User,
  repo: Fare.Repo,
  web_module: MyAppWeb,
  web_mailer_module: MyAppWeb,          # add this to access the templates
  mailer_backend: MyAppWeb.Pow.Mailer,
  extensions: [PowPersistentSession, PowResetPassword, PowEmailConfirmation],
  controller_callbacks: Pow.Extension.Phoenix.ControllerCallbacks
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if we resart phoenix and test out reset link - we should see in the logs &amp;lsquo;a pretend sent email&amp;rsquo; - something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[debug] E-mail sent: %{html: &amp;quot;&amp;lt;h3&amp;gt;Hi,&amp;lt;/h3&amp;gt;\n&amp;lt;p&amp;gt;Please use the following link to reset your password:&amp;lt;/p&amp;gt;\n&amp;lt;p&amp;gt;&amp;lt;a href=\&amp;quot;http://localhost:4000/reset-password/SFMyNTY.MTJkNDliZWItZTg2My00ZDM3LTg2YzgtYzE5MDdjMDk5ODgz.kFRCfvdOSeEnupbbujdAKoaCuMXXk91qzZCUMrB43mw\&amp;quot;&amp;gt;http://localhost:4000/reset-password/SFMyNTY.MTJkNDliZWItZTg2My00ZDM3LTg2YzgtYzE5MDdjMDk5ODgz.kFRCfvdOSeEnupbbujdAKoaCuMXXk91qzZCUMrB43mw&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;\n&amp;lt;p&amp;gt;You can disregard this email if you didn&amp;amp;#39;t request a password reset.&amp;lt;/p&amp;gt;&amp;quot;, subject: &amp;quot;Reset password link&amp;quot;, text: &amp;quot;Hi,\n\nPlease use the following link to reset your password:\n\nhttp://localhost:4000/reset-password/SFMyNTY.MTJkNDliZWItZTg2My00ZDM3LTg2YzgtYzE5MDdjMDk5ODgz.kFRCfvdOSeEnupbbujdAKoaCuMXXk91qzZCUMrB43mw\n\nYou can disregard this email if you didn&#39;t request a password reset.\n&amp;quot;, to: &amp;quot;btihen@gmail.com&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;copy the link out of the email in the log:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost:4000/reset-password/SFMyNTY.MTJkNDliZWItZTg2My00ZDM3LTg2YzgtYzE5MDdjMDk5ODgz.kFRCfvdOSeEnupbbujdAKoaCuMXXk91qzZCUMrB43mw
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;into the browser - type a new password and try to login.&lt;/p&gt;
&lt;p&gt;Assuming all works we will snapshot now!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;pow configured to send emails - no sender yet&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;after-logout---go-to-landing-page-after-hook-routing-1&#34;&gt;After Logout - go to Landing Page (After Hook Routing)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One little annoying thing is that when we logout we go to the sign-in page instead of the landing page.  We can fix that by adding a call_back_route - you can find all the callback routes at: &lt;a href=&#34;https://github.com/danschultzer/pow/blob/master/lib/pow/phoenix/routes.ex&#34;&gt;https://github.com/danschultzer/pow/blob/master/lib/pow/phoenix/routes.ex&lt;/a&gt; - we will use: the &lt;code&gt;after_sign_out_path&lt;/code&gt; callback.&lt;/p&gt;
&lt;p&gt;To do this we will make a new &lt;code&gt;pow.routes&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch lib/warehouse_web/pow/routes.ex
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add the following contents:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt; EOF&amp;gt; lib/my_app_web/pow/routes.ex
defmodule MyAppWeb.Pow.Routes do
  use Pow.Phoenix.Routes
  alias MyAppWeb.Router.Helpers, as: Routes

  def after_sign_out_path(conn), do: Routes.page_path(conn, :index)
end
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now finally update &lt;code&gt;config/confix.exs&lt;/code&gt; by adding &lt;code&gt;routes_backend: MyAppWeb.Pow.Routes&lt;/code&gt; to the &lt;code&gt;:pow&lt;/code&gt; config so now it would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config :my_app, :pow,
  user: MyApp.Users.User,
  repo: MyApp.Repo,
  web_module: MyAppWeb,
  web_mailer_module: MyAppWeb,
  mailer_backend: MyAppWeb.Pow.Mailer,
  routes_backend: MyAppWeb.Pow.Routes,  # Add this line
  controller_callbacks: Pow.Extension.Phoenix.ControllerCallbacks,
  extensions: [PowPersistentSession, PowResetPassword, PowEmailConfirmation]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming all works we will snapshot now!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;on logout go to landing page&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;configure-email-bamboo-with-pow&#34;&gt;Configure Email BAMBOO with POW&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hexdocs.pm/bamboo/readme.html&#34;&gt;https://hexdocs.pm/bamboo/readme.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kabisa.nl/tech/real-world-phoenix-lets-send-some-emails/&#34;&gt;https://www.kabisa.nl/tech/real-world-phoenix-lets-send-some-emails/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&#34;&gt;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Use Bamboo to do the mailing find the new versions at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hex.pm/packages/bamboo&#34;&gt;https://hex.pm/packages/bamboo&lt;/a&gt;
Add to &lt;code&gt;mix.exs&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;    {:bamboo, &amp;quot;~&amp;gt; 2.1&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;get the new dependency:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix deps.get
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the Test Config we need to configure bamboo with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# config/test.exs
config :my_app, MyApp.Mailer,
  adapter: Bamboo.TestAdapter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the Dev Config lets setup the in-memory email config&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# config/dev.exs
config :fare, FareWeb.Pow.Mailer,
  adapter: Bamboo.LocalAdapter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When using &lt;code&gt;Bamboo.LocalAdapter&lt;/code&gt; in dev mode we can view the email (without digging through the log file) using &lt;code&gt;Bamboo.EmailPreviewPlug&lt;/code&gt; - we set this up with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if Mix.env == :dev do
  forward &amp;quot;/sent_emails&amp;quot;, Bamboo.EmailPreviewPlug
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;rsquo;s setup our mailer to use Bamboo - we will edit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/my_app_web/pow/pow_mailer.ex
defmodule MyAppWeb.Pow.Mailer do
  use Pow.Phoenix.Mailer

  # ADDED to use Bamboo
  use Bamboo.Mailer, otp_app: :fare  # Bamboo needs to know the supervisor
  import Bamboo.Email                # provides access to the Bamboo&#39;s methods

  require Logger

  @impl true
  def cast(%{user: user, subject: subject, text: text, html: html}) do
    # ADDED when Bamboo is configured
    new_email(
      to: user.email,
      from: &amp;quot;reading-list@example.com&amp;quot;,
      subject: subject,
      html_body: html,
      text_body: text
    )
  end

  @impl true
  def process(email) do
    # ADDED when Bamboo is configured
    deliver_now(email)

    # check email functionality and contents
    Logger.debug(&amp;quot;E-mail sent: #{inspect email}&amp;quot;)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s register a new account (or reset a password).
Now we can see the sent email at: http://localhost/sent_emails (in dev mode)&lt;/p&gt;
&lt;h2 id=&#34;bamboo-adapters---smtp-config-production-ideas&#34;&gt;Bamboo Adapters - SMTP Config (Production Ideas)&lt;/h2&gt;
&lt;p&gt;Available adapters are listed at: &lt;a href=&#34;https://hexdocs.pm/bamboo/readme.html#available-adapters&#34;&gt;https://hexdocs.pm/bamboo/readme.html#available-adapters&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Given the number of adapters - here we will configure just SMTP (and learn to trap it while testing)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.kabisa.nl/tech/real-world-phoenix-lets-send-some-emails/&#34;&gt;https://www.kabisa.nl/tech/real-world-phoenix-lets-send-some-emails/&lt;/a&gt;
&lt;a href=&#34;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&#34;&gt;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Use Bamboo to do the mailing find the new versions at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hex.pm/packages/bamboo&#34;&gt;https://hex.pm/packages/bamboo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hex.pm/packages/bamboo_smtp&#34;&gt;https://hex.pm/packages/bamboo_smtp&lt;/a&gt;
Add to &lt;code&gt;mix.exs&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;    {:bamboo, &amp;quot;~&amp;gt; 2.1&amp;quot;},
    {:bamboo_smtp, &amp;quot;~&amp;gt; 2.1&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now install and setup up: &lt;a href=&#34;https://github.com/mailhog/&#34;&gt;https://github.com/mailhog/&lt;/a&gt; (on a MacOS) simply install with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install mailhog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and run mailhog with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mailhog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or if you want mailhog running all the time in the background you can type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  brew services start mailhog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or you can use: or &lt;a href=&#34;https://mailcatcher.me/&#34;&gt;https://mailcatcher.me/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;These serivices  - listen on &lt;code&gt;localhost:1025&lt;/code&gt; and you can view the email at: http://localhost:8025&lt;/p&gt;
&lt;p&gt;now configure the mail service (in &lt;code&gt;config/dev.exs&lt;/code&gt;) to use Mailhog or Mailcather with Phoenix by adding:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# config/dev.exs
config :my_app, MyAppWeb.Pow.Mailer,
  adapter: Bamboo.SMTPAdapter,
  server: &amp;quot;localhost&amp;quot;,
  port: 1025
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In production it might look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# config/config.exs
config :my_app, MyApp.Mailer,
  adapter: Bamboo.SMTPAdapter,
  server: &amp;quot;smtp.domain&amp;quot;,
  hostname: &amp;quot;your.domain&amp;quot;,
  port: 1025,
  username: &amp;quot;your.name@your.domain&amp;quot;, # or {:system, &amp;quot;SMTP_USERNAME&amp;quot;}
  password: &amp;quot;pa55word&amp;quot;, # or {:system, &amp;quot;SMTP_PASSWORD&amp;quot;}
  tls: :if_available, # can be `:always` or `:never`
  allowed_tls_versions: [:&amp;quot;tlsv1&amp;quot;, :&amp;quot;tlsv1.1&amp;quot;, :&amp;quot;tlsv1.2&amp;quot;], # or {:system, &amp;quot;ALLOWED_TLS_VERSIONS&amp;quot;} w/ comma seprated values (e.g. &amp;quot;tlsv1.1,tlsv1.2&amp;quot;)
  ssl: false, # can be `true`
  retries: 1,
  no_mx_lookups: false, # can be `true`
  auth: :if_available # can be `:always`. If your smtp relay requires authentication set it to `:always`.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you will need to start your mail-trap (in a separate cli terminal):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mailhog
# or `mailcather`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when you register a new account or change a password you can see the email at:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost:8025
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;customizing---pow-flash-messages&#34;&gt;Customizing - POW Flash messages&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Create a new module for our messages.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch lib/my_app_web/pow/messages.ex
cat &amp;lt;&amp;lt;EOF&amp;gt;&amp;gt;lib/my_app_web/pow/messages.ex
defmodule MyAppWeb.Pow.Messages do
  use Pow.Phoenix.Messages
  use Pow.Extension.Phoenix.Messages,  # add extensions in use
    extensions: [PowResetPassword, PowEmailConfirmation]

  import MyAppWeb.Gettext

  # PowMessages - functions defined:
  # https://hexdocs.pm/pow/Pow.Phoenix.Messages.html#summary
  # https://github.com/danschultzer/pow/blob/master/lib/pow/phoenix/messages.ex
  def signed_in(_conn), do: gettext(&amp;quot;Welcome back.&amp;quot;)
  def signed_out(_conn), do: gettext(&amp;quot;Signed out successfullly.&amp;quot;)
  def user_not_authenticated(_conn), do: gettext(&amp;quot;You need to sign in to see this page.&amp;quot;)

  # PowResetPassword - functions defined:
  # https://github.com/danschultzer/pow/blob/master/lib/extensions/reset_password/phoenix/messages.ex
  def invalid_token(_conn), do: &amp;quot;The reset token has expired.&amp;quot;
  def password_has_been_reset(_conn), do: &amp;quot;The password has been updated.&amp;quot;
  def email_has_been_sent(_conn), do: &amp;quot;An email with reset instructions has been sent to you.&amp;quot;

  # PowEmailConfirmation - functions defined:
  # https://github.com/danschultzer/pow/blob/master/lib/extensions/email_confirmation/phoenix/messages.ex
  def email_has_been_confirmed(_conn), do: &amp;quot;The email address has been confirmed.&amp;quot;
  def email_confirmation_failed(_conn), do: &amp;quot;The email address couldn&#39;t be confirmed.&amp;quot;
  def email_confirmation_required(_conn), do: &amp;quot;You need to confirm your e-mail with the link e-mailed to you.&amp;quot;
end
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To be able to use this module we need to tell our config about it - so we update &lt;code&gt;config/config.exs&lt;/code&gt; with &lt;code&gt;messages_backend: FareWeb.Pow.Messages&lt;/code&gt; - so now it looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config :fare, :pow,
  user: Fare.Users.User,
  repo: Fare.Repo,
  web_module: FareWeb,
  web_mailer_module: FareWeb,
  mailer_backend: Fare.Pow.Mailer,
  routes_backend: FareWeb.Pow.Routes,
  messages_backend: FareWeb.Pow.Messages,  # Add this line
  controller_callbacks: Pow.Extension.Phoenix.ControllerCallbacks,
  extensions: [PowPersistentSession, PowResetPassword, PowEmailConfirmation]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you should see your custom messages!&lt;/p&gt;
&lt;p&gt;let&amp;rsquo;s snapshot this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;allow POW to send custom / i18n messages&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;configure-to-allow-3rd-parties---google-apple-github-etc&#34;&gt;Configure to allow 3rd Parties - Google, Apple, Github, etc.&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/pow-auth/pow_assent&#34;&gt;https://github.com/pow-auth/pow_assent&lt;/a&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=hnD0Z0LGMIk&#34;&gt;https://www.youtube.com/watch?v=hnD0Z0LGMIk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First add to the mix file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    # third party auth
    {:pow_assent, &amp;quot;~&amp;gt; 0.4.10&amp;quot;},
    # recommended for SSL validation with :httpc adapter
    {:certifi, &amp;quot;~&amp;gt; 2.4&amp;quot;},
    {:ssl_verify_fun, &amp;quot;~&amp;gt; 1.1&amp;quot;},
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and of course: &lt;code&gt;mix deps.get&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and install with: &lt;code&gt;mix pow_assent.install&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and now configure &lt;code&gt;lib/fare/users/user.ex&lt;/code&gt; after &lt;code&gt;use Pow.Ecto.Schema&lt;/code&gt; add &lt;code&gt;use PowAssent.Ecto.Schema&lt;/code&gt; so now the top of this file should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/fare/users/user.ex
defmodule Fare.Users.User do
  use Ecto.Schema
  use Pow.Ecto.Schema
  use PowAssent.Ecto.Schema  # added in this step
  use Pow.Extension.Ecto.Schema,
      extensions: [PowResetPassword, PowEmailConfirmation]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At the top of the &lt;code&gt;lib/fare_web/router.ex&lt;/code&gt; file after &lt;code&gt;use PowAssent.Phoenix.Router&lt;/code&gt; add &lt;code&gt;use PowAssent.Phoenix.Router&lt;/code&gt; - now the top of this file should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/fare_web/router.ex
defmodule MyAppWeb.Router do
  use MyAppWeb, :router
  use Pow.Phoenix.Router
  use PowAssent.Phoenix.Router
  use Pow.Extension.Phoenix.Router,
      extensions: [PowResetPassword, PowEmailConfirmation]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now after the last pipelines add a new &lt;code&gt;pipeline&lt;/code&gt; and its &lt;code&gt;scope&lt;/code&gt; - its a copy of the &lt;code&gt;:browser&lt;/code&gt; pipeline - without &lt;code&gt;:protect_from_forgery&lt;/code&gt; since that conflicts with &lt;strong&gt;OAuth&lt;/strong&gt; &amp;amp; after &lt;code&gt;pow_routes()&lt;/code&gt; add &lt;code&gt;pow_assent_routes()&lt;/code&gt; so now this section of the routes looks like (when Phoenix is configured for LiveView):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  pipeline :skip_csrf_protection do
    plug :accepts, [&amp;quot;html&amp;quot;]
    plug :fetch_session
    plug :fetch_live_flash
    plug :put_root_layout, {FareWeb.LayoutView, :root}
    # plug :protect_from_forgery     # conflicts with oauth
    plug :put_secure_browser_headers
  end

  scope &amp;quot;/&amp;quot; do
    pipe_through :skip_csrf_protection

    # this adds new pow routes
    pow_assent_authorization_post_callback_routes()
  end

  scope &amp;quot;/&amp;quot; do
    pipe_through :browser

    pow_routes()
    pow_assent_routes()    # newly added
    pow_extension_routes()
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember to run the new migrations with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix ecto.migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Generate the PowAssent template too (the page when using this where the user add username and OAuth password from remote site):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix pow_assent.phoenix.gen.templates
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;setup-remote-oauth-providers-github---for-now&#34;&gt;Setup remote OAuth providers (Github - for now)&lt;/h3&gt;
&lt;p&gt;Go to:
&lt;a href=&#34;https://github.com/settings/applications/new&#34;&gt;https://github.com/settings/applications/new&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Enter an &lt;strong&gt;Application name&lt;/strong&gt; and enter the &lt;strong&gt;Homepage url&lt;/strong&gt; as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost:4000/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the &lt;strong&gt;Authorization callback&lt;/strong&gt; (for our dev environment) as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost:4000/auth/github/callback
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Configure Github Credential Secrets&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hexdocs.pm/elixir/Application.html&#34;&gt;https://hexdocs.pm/elixir/Application.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devato.com/post/handling-environment-variables-in-phoenix&#34;&gt;https://devato.com/post/handling-environment-variables-in-phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/44510403/phoenix-import-module-into-config&#34;&gt;https://stackoverflow.com/questions/44510403/phoenix-import-module-into-config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/30995743/how-to-get-a-variable-value-from-environment-files-in-phoenix&#34;&gt;https://stackoverflow.com/questions/30995743/how-to-get-a-variable-value-from-environment-files-in-phoenix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First update &lt;code&gt;.gitignore&lt;/code&gt; with the line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;**/*.secret.exs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then add in our case the &lt;code&gt;dev.secrets.exs&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch config/dev.secret.exs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you get your &lt;strong&gt;Client ID&lt;/strong&gt; and &lt;strong&gt;Client secrets&lt;/strong&gt; you can configure  &lt;code&gt;config/dev.secret.exs&lt;/code&gt; with the following config:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import Config

config :my_app, :pow_assent,
  providers: [
    github: [
      client_id: &amp;quot;REPLACE_WITH_CLIENT_ID&amp;quot;,
      client_secret: &amp;quot;REPLACE_WITH_CLIENT_SECRET&amp;quot;,
      strategy: Assent.Strategy.Github
    ]
  ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now at the END of &lt;code&gt;config/dev.exs&lt;/code&gt; add the line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import_config &amp;quot;dev.secret.exs&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now at the end of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lib/my_app_web/templates/pow/registration/edit.html.eex&lt;/code&gt; (edit profile),&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lib/my_app_web/templates/pow/registration/new.html.eex&lt;/code&gt; (register),&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lib/fare_web/templates/pow/session/new.html.eex&lt;/code&gt; (sign-in)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;add the following comprehension to list all the configured OAuth log-in links:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;%=
  for link &amp;lt;- PowAssent.Phoenix.ViewHelpers.provider_links(@conn),
      do: content_tag(:span, link)
%&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;pow readme: &lt;a href=&#34;https://hexdocs.pm/pow/README.html&#34;&gt;https://hexdocs.pm/pow/README.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;video tutorial: &lt;a href=&#34;https://www.youtube.com/watch?v=hnD0Z0LGMIk&#34;&gt;https://www.youtube.com/watch?v=hnD0Z0LGMIk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;add pubsub &lt;a href=&#34;https://curiosum.dev/blog/elixir-phoenix-liveview-messenger-part-3&#34;&gt;https://curiosum.dev/blog/elixir-phoenix-liveview-messenger-part-3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;add email to pow: &lt;a href=&#34;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&#34;&gt;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-1/&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-1/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Phoenix LiveView - Simple Real-Time SPA</title>
      <link>https://btihen.me/post_elixir_phoenix/phoenix_1_5_liveview_simple_realtime/</link>
      <pubDate>Sat, 10 Apr 2021 17:01:53 +0200</pubDate>
      <guid>https://btihen.me/post_elixir_phoenix/phoenix_1_5_liveview_simple_realtime/</guid>
      <description>&lt;p&gt;Here is a quick example of how to create a very simple &amp;ldquo;real-time&amp;rdquo;-&amp;ldquo;single-page-app&amp;rdquo; using phoenix-liveview.  This provides the same functionality to as 
&lt;a href=&#34;post_ruby_rails/rails_6_1_hotwire_simple_realtime&#34;&gt;Realtime Rails with Hotwire&lt;/a&gt; - in order to compare.&lt;/p&gt;
&lt;p&gt;The repo can be found here: &lt;a href=&#34;https://github.com/btihen/live-tweets&#34;&gt;https://github.com/btihen/live-tweets&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;create--config-a-project&#34;&gt;create / config a project&lt;/h2&gt;
&lt;p&gt;First we will creat the folder / project location&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir tweets
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we will tell it which software to use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch tweets/.tool-versions
cat &amp;lt;&amp;lt;EOF &amp;gt;&amp;gt;tweets/.tool-versions
erlang 23.3.1
elixir 1.11.4-otp-23
nodejs lts-Fermium
Postgres 13.2
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-new-phoenix-project&#34;&gt;Create a new Phoenix Project&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&#34;&gt;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now you can simply do:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.new tweets --live
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will now get the message:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The directory /Users/btihen/Dropbox/devel/marpori/tweets already exists. Are you sure you want to continue? [Yn]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Say &lt;code&gt;Y&lt;/code&gt; yes.
Say &lt;code&gt;Y&lt;/code&gt; yes again when you see:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Fetch and install dependencies? [Yn]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This can take a few minutes - when done, enter the directory and setup.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd tweets
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Adjust the DB settings as needed in: &lt;code&gt;config/dev.exs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Create the database and lets see if default tests work and we get the start page.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix ecto.create
mix test
mix phx.server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;assuming all is good lets snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init
git add .
git commit -m &amp;quot;initial setup commit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code commit can be seen at: &lt;a href=&#34;https://github.com/btihen/live-tweets/commit/2eb9016371db3210eaf3a1cb35e4066e3b67bdbe&#34;&gt;https://github.com/btihen/live-tweets/commit/2eb9016371db3210eaf3a1cb35e4066e3b67bdbe&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;create-our-tweet-model&#34;&gt;create our tweet model&lt;/h2&gt;
&lt;p&gt;Create this with the generator (notice we are using &lt;code&gt;mix phx.gen.live&lt;/code&gt; not &lt;code&gt;mix phx.gen.html&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.gen.live Messages Post posts body:text
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Change migration to require data - add &lt;code&gt;null: false&lt;/code&gt; to our field so it now looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# priv/repo/migrations/20210418084643_create_posts.exs
defmodule Tweets.Repo.Migrations.CreatePosts do
  use Ecto.Migration

  def change do
    create table(:posts) do
      add :body, :text, null: false

      timestamps()
    end

  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets update the routes as described by the generator - in &lt;code&gt;lib/tweets_web/router.ex&lt;/code&gt; so the section that looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  scope &amp;quot;/&amp;quot;, TweetsWeb do
    pipe_through :browser

    live &amp;quot;/&amp;quot;, PageLive, :index
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;should be change to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  scope &amp;quot;/&amp;quot;, TweetsWeb do
    pipe_through :browser

    # live &amp;quot;/&amp;quot;, PageLive, :index
    live &amp;quot;/&amp;quot;, PostLive.Index, :index
    live &amp;quot;/posts&amp;quot;, PostLive.Index, :index
    live &amp;quot;/posts/new&amp;quot;, PostLive.Index, :new
    live &amp;quot;/posts/:id/edit&amp;quot;, PostLive.Index, :edit

    live &amp;quot;/posts/:id&amp;quot;, PostLive.Show, :show
    live &amp;quot;/posts/:id/show/edit&amp;quot;, PostLive.Show, :edit
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now check our field &lt;code&gt;body&lt;/code&gt; is required in validations &amp;ndash; in our changeset.  We see &lt;code&gt;validate_required([:body])&lt;/code&gt; in the file: &lt;code&gt;lib/tweets/messages/post.ex&lt;/code&gt; - so we are all set.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  def changeset(post, attrs) do
    post
    |&amp;gt; cast(attrs, [:body])
    |&amp;gt; validate_required([:body])
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So it time to migrate &amp;amp; test:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix ecto.migrate
mix test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hmm - the tests generator and html use different html standards: to make the tests pass test that phoenix returns &lt;code&gt;can&amp;amp;#39;t be blank&lt;/code&gt; instead of &lt;code&gt;can&amp;amp;apos;t be blank&lt;/code&gt; in &lt;code&gt;test/tweets_web/live/post_live_test.exs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;also change: &lt;code&gt;&amp;quot;Welcome to Phoenix!&amp;quot;&lt;/code&gt; to &lt;code&gt;&amp;quot;Listing Posts&amp;quot;&lt;/code&gt; in &lt;code&gt;test/tweets_web/live/page_live_test.exs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now lets see how our new SPA works:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It works, but we want to list the most recent tweets at the top of the page &amp;ndash; let&amp;rsquo;s investigate &amp;ndash; open &lt;code&gt;lib/tweets_web/live/post_live/index.ex&lt;/code&gt; we see in the &lt;code&gt;mount&lt;/code&gt; command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/tweets_web/live/post_live/index.ex
  def mount(_params, _session, socket) do
    {:ok, assign(socket, :posts, list_posts())}
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It uses &lt;code&gt;list_posts()&lt;/code&gt; to get the list - so let&amp;rsquo;s change this function.&lt;/p&gt;
&lt;p&gt;Open: &lt;code&gt;lib/tweets/messages.ex&lt;/code&gt; and change:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/tweets/messages.ex
  def list_posts do
    Repo.all(Post)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/tweets/messages.ex
 def list_posts do
    Post
      |&amp;gt; order_by(desc: :inserted_at)
      |&amp;gt; Repo.all
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool now our SPA works like we want &amp;ndash; but it isn&amp;rsquo;t real-time between two users / browsers.&lt;/p&gt;
&lt;p&gt;This code can be seen at: &lt;a href=&#34;https://github.com/btihen/live-tweets/commit/3f432d7c06d974f9c2349937a35e391dedeb2ad6&#34;&gt;https://github.com/btihen/live-tweets/commit/3f432d7c06d974f9c2349937a35e391dedeb2ad6&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;broadcast-changes-with-pubsub&#34;&gt;Broadcast changes with Pubsub&lt;/h2&gt;
&lt;p&gt;Phoenix uses Websockets to do &lt;code&gt;real-time&lt;/code&gt; communication.  In our &amp;ldquo;context&amp;rdquo; we will create our &lt;code&gt;channel&lt;/code&gt; - the pipeline that the socket uses to send information back and forth to various &amp;ldquo;subscribers&amp;rdquo; - viewers of our page.&lt;/p&gt;
&lt;h3 id=&#34;setup-the-messages-channel&#34;&gt;Setup the &amp;ldquo;Messages&amp;rdquo; Channel&lt;/h3&gt;
&lt;p&gt;We go into: &lt;code&gt;lib/tweets/messages.ex&lt;/code&gt; and at the top of the file add the Broadcast Setup:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/tweets/messages.ex
defmodule Tweets.Messages do
  @moduledoc &amp;quot;&amp;quot;&amp;quot;
  The Messages context.
  &amp;quot;&amp;quot;&amp;quot;

  import Ecto.Query, warn: false
  alias Tweets.Repo
  alias Tweets.Messages.Post

  # Setup Broadcasting
  @topic inspect(__MODULE__)

  def subscribe do
    Phoenix.PubSub.subscribe(Tweets.PubSub, @topic)
  end

  def notify_subscribers({:ok, post}, event) do
    posts = list_posts()
    Phoenix.PubSub.broadcast(Tweets.PubSub, @topic, {__MODULE__, event, posts})
    {:ok, post}
  end

  def notify_subscribers({:error, post}, event) do
    {:error, post}
  end
  # Setup Broadcasting
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets quickly review this new code:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@topic inspect(__MODULE__)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;makes @topic named &lt;code&gt;Tweets.Messages&lt;/code&gt; - but if we change the module name it changes @topic too.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;subscribe&lt;/code&gt; function - allows us to register our index page with channel created automatically by LiveView.&lt;/p&gt;
&lt;p&gt;We have two &lt;code&gt;notify_subscribers&lt;/code&gt; because we will call these after we do our DB actions - writing to the DB could fail or succeed.  If we have success then we will update all subscribers and the last line tuple passes the results of the interaction back to the actual user.   (Of course we don&amp;rsquo;t need to notify when the DB transaction fails, we only need to pass the message back to the user).&lt;/p&gt;
&lt;h3 id=&#34;subscribing-to-the-messages-channel&#34;&gt;Subscribing to the &amp;lsquo;Messages&amp;rsquo; Channel&lt;/h3&gt;
&lt;p&gt;Now that we have &lt;code&gt;notify_subscribers&lt;/code&gt; that broadcasts &lt;code&gt;Phoenix.PubSub.broadcast(Tweets.PubSub, @topic, {__MODULE__, event, posts})&lt;/code&gt; we need a way to subscribe to this channel and receive these messages in all our index pages.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/tweets_web/live/post_live/index.ex
defmodule TweetsWeb.PostLive.Index do
  use TweetsWeb, :live_view

  alias Tweets.Messages
  alias Tweets.Messages.Post

  @impl true
  def mount(_params, _session, socket) do
    # register with the channel if connection to LiveView
    if connected?(socket), do: Messages.subscribe()
    {:ok, assign(socket, :posts, list_posts())}
  end

  @impl true
  def handle_info({Messages, &amp;quot;posts-changed&amp;quot;, posts}, socket) do
    socket = assign(socket, :posts, posts)
    {:noreply, socket}
  end
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The important changes are to &lt;strong&gt;subscribe to the channel&lt;/strong&gt; we we have subscribed to our Websocket we do this in the &lt;code&gt;mount&lt;/code&gt; function with &lt;code&gt;if connected?(socket), do: Messages.subscribe()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now we need a way to &lt;strong&gt;recieve information from the channel&lt;/strong&gt; this is done with the &lt;code&gt;handle_info&lt;/code&gt; function - so we will simply take the new list of posts and update the socket and index will take care of the rest &amp;ndash; automatically!&lt;/p&gt;
&lt;h3 id=&#34;sending-messages-to-the-channel&#34;&gt;Sending Messages to the Channel&lt;/h3&gt;
&lt;p&gt;So now to activate our changes - we need to send to the channel via &lt;code&gt;notify_subscribers&lt;/code&gt; when we successfully change something in the Messages &amp;ldquo;post&amp;rdquo; context.  To do this we will make small changes to the create_post, update_post and delete_post functions.  We will add &lt;code&gt;notify_subscribers({status, post}, &amp;quot;posts-changed&amp;quot;)&lt;/code&gt; to the end of each function.  Since we only defined one event &lt;code&gt;&amp;quot;posts-changed&amp;quot;&lt;/code&gt; in our index page &lt;code&gt;handle_info&lt;/code&gt; function &amp;ndash; we will hard-code that into our &lt;code&gt;notify_subscribers&lt;/code&gt; call&lt;/p&gt;
&lt;p&gt;So our simple DB calls in Messages currently looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/tweets/messages.ex
  def create_post(attrs \\ %{}) do
    %Post{}
      |&amp;gt; Post.changeset(attrs)
      |&amp;gt; Repo.insert()
  end

  def update_post(%Post{} = post, attrs) do
    post
      |&amp;gt; Post.changeset(attrs)
      |&amp;gt; Repo.update()
  end

  def delete_post(%Post{} = post) do
    Repo.delete(post)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now becomes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/tweets/messages.ex
  def create_post(attrs \\ %{}) do
    {status, post} = %Post{}
                      |&amp;gt; Post.changeset(attrs)
                      |&amp;gt; Repo.insert()
    notify_subscribers({status, post}, &amp;quot;posts-changed&amp;quot;)
  end

  def update_post(%Post{} = post, attrs) do
    {status, post} = post
                      |&amp;gt; Post.changeset(attrs)
                      |&amp;gt; Repo.update()
    notify_subscribers({status, post}, &amp;quot;posts-changed&amp;quot;)
  end

  def delete_post(%Post{} = post) do
    {status, post} = post
                      |&amp;gt; Repo.delete()
    notify_subscribers({status, post}, &amp;quot;posts-changed&amp;quot;)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: in-order to pass the DB transaction information back to the user, we need to capture that information with the tuple: &lt;code&gt;{status, post}&lt;/code&gt; - which notify_subscribers will pass back and will be returned to the user - the returns values will be either &lt;code&gt;{:ok, post}&lt;/code&gt; or &lt;code&gt;{:error, post_changeset}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s be sure we didn&amp;rsquo;t break anything and run our tests again:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ideally, all is still good so lets try our updated app now:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now any changes we make should be seen all users.&lt;/p&gt;
&lt;p&gt;Cool, lets snapshot this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout -b liveview_spa_broadcast_with_pubsub
git add .
git commit -m &amp;quot;add realtime broadcast to all users&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code can be seen at: &lt;a href=&#34;https://github.com/btihen/live-tweets/commit/32c179e05cae68c5a2a6d49f54bf5a8dcf4d4dac&#34;&gt;https://github.com/btihen/live-tweets/commit/32c179e05cae68c5a2a6d49f54bf5a8dcf4d4dac&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;In my mind this is far simpler to setup as a single page app - using the LiveView generator and a little more work to add broadcasting than in Rails.  Converting a Standard Phoenix HTML page to LiveView however is considerably more difficult than Converting a Standard Rails page to Hotwire.  I also find adding advanced features much more straight-forward in LiveView - as you write the event_handlers in you liveview pages and it is very clear what is happening.  In rails you need to know what is happening without being able to see the code.  I also like that LiveView - when it can&amp;rsquo;t find an event - you get lots of errors.  This is very helpful.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Phoenix 1.5 PETAL Stack Setup - w/ asdf</title>
      <link>https://btihen.me/post_elixir_phoenix/phoenix_1_5_petal_setup_with_asdf/</link>
      <pubDate>Sat, 10 Apr 2021 01:01:53 +0200</pubDate>
      <guid>https://btihen.me/post_elixir_phoenix/phoenix_1_5_petal_setup_with_asdf/</guid>
      <description>&lt;p&gt;I have been enjoying the tools associated with Elixir and exploring the frontend. LiveView helps make that more intuitive and when that isn&amp;rsquo;t enough, AlpineJS is a lightweight JS tool with a similar syntax as Vue.&lt;/p&gt;
&lt;h2 id=&#34;install-asdf---and-required-software&#34;&gt;Install asdf - and required software&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://thinkingelixir.com/install-elixir-using-asdf/&#34;&gt;https://thinkingelixir.com/install-elixir-using-asdf/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cogini.com/blog/using-asdf-with-elixir-and-phoenix/&#34;&gt;https://www.cogini.com/blog/using-asdf-with-elixir-and-phoenix/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&#34;&gt;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On a Mac I used Homebrew:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install asdf
echo -e &#39;\n. $(brew --prefix asdf)/asdf.sh&#39; &amp;gt;&amp;gt; ~/.bash_profile
echo -e &#39;\n. $(brew --prefix asdf)/etc/bash_completion.d/asdf.bash&#39; &amp;gt;&amp;gt; ~/.bash_profile
source ~/.bash_profile  # (or open a new terminal)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can install asdf software packages:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;asdf plugin-add erlang
asdf plugin-add elixir
asdf plugin-add nodejs
asdf plugin-add Postgres
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you need to install the desired versions (usually the newest) - currently:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;asdf list all erlang
asdf install erlang 23.3.1

# note the elixir version otp must match the erlang version!
asdf list all elixir
asdf install elixir 1.11.4-otp-23

# asdf install elixir 1.11.4-otp-24
# if you mismatch elixir with erlang you will get errors like:
# {&amp;quot;init terminating in do_boot&amp;quot;,{undef,[{elixir,start_cli,[],[]},{init,start_em,1,[]},{init,do_boot,3,[]}]}}

asdf list all nodejs
asdf install nodejs lts-fermium

asdf list all Postgres
asdf install Postgres 13.2
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;get-the-newest-phoenix-hex-package&#34;&gt;Get the newest Phoenix Hex Package&lt;/h2&gt;
&lt;p&gt;Once you have established you have the requrements - the download the newest version of Phoenix (go to: &lt;a href=&#34;https://hexdocs.pm/phoenix/installation.html#phoenix&#34;&gt;https://hexdocs.pm/phoenix/installation.html#phoenix&lt;/a&gt; to see the newest version) - at the time of this writing its 1.5.8 - be sure its installed using:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix archive.install hex phx_new 1.5.8
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create--config-a-project&#34;&gt;create / config a project&lt;/h2&gt;
&lt;p&gt;First we will creat the folder / project location&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir fenix
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we will tell it which software to use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch fenix/.tool-versions
cat &amp;lt;&amp;lt;EOF &amp;gt;&amp;gt;fenix/.tool-versions
erlang 23.3.1
elixir 1.11.4-otp-23
Postgres 13.2
nodejs lts-Fermium
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-new-phoenix-project&#34;&gt;Create a new Phoenix Project&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&#34;&gt;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now you can simply do:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.new fenix --live
cd fenix
mix ecto.create
mix phx.server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;assuming all is good lets configure git:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init
git add .
git commit -m &amp;quot;initial Phoneix install with LiveView&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;install--test-alpine-js&#34;&gt;install &amp;amp; test Alpine JS&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://underjord.io/getting-started-with-petal.html&#34;&gt;https://underjord.io/getting-started-with-petal.html&lt;/a&gt;
&lt;a href=&#34;https://dockyard.com/blog/2020/12/21/optimizing-user-experience-with-liveview&#34;&gt;https://dockyard.com/blog/2020/12/21/optimizing-user-experience-with-liveview&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd assets
npm install alpinejs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now change &lt;code&gt;app.js&lt;/code&gt; is to require our new setup:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# assets/js/app.js
// .. after the app.scss import add:
import Alpine from &amp;quot;alpinejs&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;still in &lt;code&gt;assets/js/app.js&lt;/code&gt; find&lt;code&gt;:&lt;/code&gt;let liveSocket = new LiveSocket(&amp;quot;/live&amp;quot;, Socket, {params: {_csrf_token: csrfToken}})`&lt;/p&gt;
&lt;p&gt;and change to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let liveSocket =
    new LiveSocket(&amp;quot;/live&amp;quot;,
                    Socket,
                    { params: {_csrf_token: csrfToken},
                      dom: {
                        onBeforeElUpdated(from, to){
                          if(from.__x){ Alpine.clone(from.__x, to) }
                        }
                    } }
                  )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;TEST by adding to the end of: &lt;code&gt;lib/fenix_web/live/page_live.html.leex&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;section&amp;gt;
  &amp;lt;h2&amp;gt;Alpine JS Installed&amp;lt;/h2&amp;gt;
  &amp;lt;div x-data=&amp;quot;{name:&#39;&#39;}&amp;quot;&amp;gt;
    &amp;lt;label for=&amp;quot;name&amp;quot;&amp;gt;Name:&amp;lt;/label&amp;gt;
    &amp;lt;input id=&amp;quot;name&amp;quot; type=&amp;quot;text&amp;quot; x-model=&amp;quot;name&amp;quot; /&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;br&amp;gt;&amp;lt;b&amp;gt;&amp;lt;em&amp;gt;Output:&amp;lt;/em&amp;gt;&amp;lt;/b&amp;gt; &amp;lt;span x-text=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test with:
&lt;code&gt;mix phx.server&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;when typing the name should appear below!&lt;/p&gt;
&lt;p&gt;let&amp;rsquo;s snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;phoenix with alpine js&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;integrating-tailwind-into-phoenix&#34;&gt;Integrating Tailwind into phoenix&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix&#34;&gt;https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix&lt;/a&gt;
&lt;a href=&#34;https://fullstackphoenix.com/tutorials/get-started-with-tailwind-in-phoenix&#34;&gt;https://fullstackphoenix.com/tutorials/get-started-with-tailwind-in-phoenix&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This source gives several options - here we install with &lt;code&gt;postcss-import&lt;/code&gt; (for components from the beginning):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd assets
npm install tailwindcss postcss autoprefixer postcss-loader@4.2  postcss-import --save-dev

touch postcss.config.js
cat &amp;lt;&amp;lt;EOF &amp;gt; postcss.config.js
module.exports = {
  plugins: {
    &amp;quot;postcss-import&amp;quot;: {},
    tailwindcss: {},
    autoprefixer: {}
  }
}
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now open: &lt;code&gt;assets/webpack.config.js&lt;/code&gt; and find:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
	test: /\.[s]?css$/,
	use: [
		MiniCssExtractPlugin.loader,
		&#39;css-loader&#39;,
		&#39;sass-loader&#39;,
	],
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;change too (add &lt;code&gt;&#39;postcss-loader&#39;&lt;/code&gt; between &lt;code&gt;&#39;css-loader&#39;&lt;/code&gt; &amp;amp; &lt;code&gt;&#39;sass-loader&#39;&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
	test: /\.[s]?css$/,
	use: [
		MiniCssExtractPlugin.loader,
		&#39;css-loader&#39;,
		&#39;postcss-loader&#39;,
		&#39;sass-loader&#39;,
	],
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now initialize tailwind config with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npx tailwindcss init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;this creates the file &lt;code&gt;tailwind.config.js&lt;/code&gt; we will replace the &lt;code&gt;purge: [],&lt;/code&gt; section with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;purge: [
    &#39;../lib/**/*.ex&#39;,
    &#39;../lib/**/*.leex&#39;,
    &#39;../lib/**/*.eex&#39;,
    &#39;./js/**/*.js&#39;
  ],
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the fill will look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;module.exports = {
  purge: [
    &#39;../lib/**/*.ex&#39;,
    &#39;../lib/**/*.leex&#39;,
    &#39;../lib/**/*.eex&#39;,
    &#39;./js/**/*.js&#39;
  ],
  darkMode: false, // or &#39;media&#39; or &#39;class&#39;
  theme: {
    extend: {},
  },
  variants: {
    extend: {},
  },
  plugins: [],
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now in &lt;code&gt;assets/package.json&lt;/code&gt; find:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;quot;scripts&amp;quot;: {
    &amp;quot;deploy&amp;quot;: &amp;quot;webpack --mode production&amp;quot;,
    &amp;quot;watch&amp;quot;: &amp;quot;webpack --mode development --watch&amp;quot;
  },
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and change this to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;quot;scripts&amp;quot;: {
    &amp;quot;deploy&amp;quot;: &amp;quot;NODE_ENV=production webpack --mode production&amp;quot;,
    &amp;quot;watch&amp;quot;: &amp;quot;webpack --mode development --watch&amp;quot;
  },
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we will create a file for our custom styles the &lt;code&gt;assets/css/custom-style.css&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# assuming you are still in the assets directory on the cli
touch css/custom-styles.css
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s also create our a custom component (we will make buttons for a counter to be sure tailwind and aplineJS are playing well together):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# assuming you are still in the assets directory on the cli
mkdir css/components
touch css/components/buttons.css
cat &amp;lt;&amp;lt;EOF &amp;gt; css/components/buttons.css
@layer components {
  .btn-redish {
    @apply bg-red-300 hover:bg-red-600 text-blue-800 font-bold py-2 px-4 rounded;
  }
  .btn-greenish {
    @apply bg-green-300 hover:bg-green-600 text-blue-800 font-bold py-2 px-4 rounded;
  }
}
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now will will configure Phoenix to load Tailwind, our custom-styles and our custom-components &amp;ndash; DO THIS AT THE TOP OF the file &lt;code&gt;assets/css/app.scss&lt;/code&gt; (@imports must be before all else):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* Import tailwind - with postcss-import installed */
@import &amp;quot;tailwindcss/base&amp;quot;;
@import &amp;quot;tailwindcss/components&amp;quot;;
@import &amp;quot;tailwindcss/utilities&amp;quot;;

/* custom styles - put after base imports! */
@import &amp;quot;./custom-styles.css&amp;quot;;

/* import custom components */
@import &amp;quot;./components/buttons.css&amp;quot;;

/* default phoenix styles - eventually remove */
@import &amp;quot;./phoenix.css&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;add a test html from tailwind to the end of: &lt;code&gt;lib/fenix_web/live/page_live.html.leex&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;section class=&amp;quot;grid grid-cols-1 gap-4&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;h2 class=&amp;quot;text-red-500 text-5xl font-bold text-center&amp;quot;&amp;gt;Tailwind CSS with AlpineJS&amp;lt;/h2&amp;gt;
    &amp;lt;p class=&amp;quot;mt-5 font-bold text-center&amp;quot;&amp;gt;Red Title with Colored Counter Buttons&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;mt-10 flex justify-center&amp;quot; x-data=&amp;quot;{ count: 0 }&amp;quot;&amp;gt;
    &amp;lt;button class=&amp;quot;btn-redish&amp;quot; x-on:click=&amp;quot;count--&amp;quot;&amp;gt;Decrement&amp;lt;/button&amp;gt;
    &amp;lt;code&amp;gt;count: &amp;lt;/code&amp;gt;&amp;lt;code x-text=&amp;quot;count&amp;quot;&amp;gt;&amp;lt;/code&amp;gt;
    &amp;lt;button class=&amp;quot;btn-greenish&amp;quot; x-on:click=&amp;quot;count++&amp;quot;&amp;gt;Increment&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when we start the server with &lt;code&gt;mix phx.server&lt;/code&gt; we should have a centered / red title and colored buttons on our counter.&lt;/p&gt;
&lt;p&gt;now lets snapshot our PETAL setup:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;Tailwind installed&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=o4Prej0wIZA&#34;&gt;https://www.youtube.com/watch?v=o4Prej0wIZA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.pthompson.org/alpine-js-and-liveview&#34;&gt;http://blog.pthompson.org/alpine-js-and-liveview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix&#34;&gt;https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fullstackphoenix.com/tutorials/get-started-with-tailwind-in-phoenix&#34;&gt;https://fullstackphoenix.com/tutorials/get-started-with-tailwind-in-phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fullstackphoenix.com/tutorials/combine-phoenix-liveview-with-alpine-js&#34;&gt;https://fullstackphoenix.com/tutorials/combine-phoenix-liveview-with-alpine-js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/mindvalley-technology/how-to-add-tailwindcss-to-your-phoenix-project-e2250ad31ace&#34;&gt;https://medium.com/mindvalley-technology/how-to-add-tailwindcss-to-your-phoenix-project-e2250ad31ace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://thinkingelixir.com/podcast-episodes/021-tailwind-css-alpine-js-and-liveview-with-patrick-thompson/&#34;&gt;https://thinkingelixir.com/podcast-episodes/021-tailwind-css-alpine-js-and-liveview-with-patrick-thompson/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Phoenix 1.5 Blog with Comments</title>
      <link>https://btihen.me/post_elixir_phoenix/phoenix_1_5_blog_w_comments/</link>
      <pubDate>Fri, 10 Jul 2020 09:43:51 +0200</pubDate>
      <guid>https://btihen.me/post_elixir_phoenix/phoenix_1_5_blog_w_comments/</guid>
      <description>&lt;h2 id=&#34;purpose&#34;&gt;Purpose&lt;/h2&gt;
&lt;p&gt;This article builds on the existing article: &lt;a href=&#34;https://btihen.me/post_tech/phoenix_1_5_blog_intro/&#34;&gt;https://btihen.me/post_tech/phoenix_1_5_blog_intro/&lt;/a&gt; and adds nested relationships and has_many_through.&lt;/p&gt;
&lt;h2 id=&#34;now-lets-create-comments-a-has-many-through-for-users&#34;&gt;now lets create comments (a has many through for users)&lt;/h2&gt;
&lt;p&gt;we will use &lt;code&gt;mix phx.gen.context&lt;/code&gt; this time since we will use the posts page to add comments.  We will use the context generator since we don&amp;rsquo;t need any views or templates generated.  Answer &lt;code&gt;Y&lt;/code&gt; to the question about the context already existing.  We could create to API files within the Context before the one file gets too large, but we will skip that.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.gen.context Blogs Comment comments message:text post_id:references:posts  user_id:references:users
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;update-relationships&#34;&gt;Update Relationships&lt;/h2&gt;
&lt;p&gt;We need to create the relationships and update the migration to delete comments when post is deleted:&lt;/p&gt;
&lt;p&gt;Now lets create the relationship between posts and comments:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs/comment.ex
efmodule FeenixIntro.Blogs.Comment do
  use Ecto.Schema
  import Ecto.Changeset
  alias FeenixIntro.Blogs.Post
  alias FeenixIntro.Accounts.User

  @required_fields [:user_id, :post_id, :message]

  schema &amp;quot;comments&amp;quot; do
    # remove these
    # field :post_id, :id
    # field :user_id, :id
    # add these:
    belongs_to(:user, User)
    belongs_to(:post, Post)

    field :message, :string

    timestamps()
  end

  @doc false
  def changeset(comment, attrs) do
    comment
    |&amp;gt; cast(attrs, @required_fields)
    |&amp;gt; validate_required(@required_fields)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets update posts relationship to comments:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs/post.ex
  # ...
  alias FeenixIntro.Blogs.Comment
  # ...
  schema &amp;quot;posts&amp;quot; do
    # ...
    # add this
    has_many(:comments, Comment)
  # ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could do the same &lt;code&gt;has_many&lt;/code&gt; relationship with users - but its not needed.  It is unlikely we would want to look-up all a user&amp;rsquo;s comments outside the context of a Blog.&lt;/p&gt;
&lt;h2 id=&#34;update-migration-to-delete-sub-resource-when-top-resource-is-deleted&#34;&gt;Update Migration to delete sub-resource when top-resource is deleted&lt;/h2&gt;
&lt;p&gt;To create the rails equivalent of dependent_delete we change the migration to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# priv/repo/migrations/20200704161651_create_comments.exs
      # ...
      # replce
      # add :post_id, references(:posts, on_delete: :nothing)
      # add :user_id, references(:users, on_delete: :nothing)
      # with
      add :post_id, references(:posts, on_delete: :delete_all), null: false
      add :user_id, references(:users, on_delete: :delete_all), null: false
      # ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we should be able to migrate:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix ecto.migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Start simple with the seed file&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Lets add a comment to our prebuild posts:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# priv/repo/seeds.exs
# ...
# add the alias to keep things short
alias FeenixIntro.Blogs.Comment

# ...
# this ensures all we have all the correct fields:
Repo.insert!(%Comment{user_id: dog.id, post_id: post1.id, message: &amp;quot;woof&amp;quot; })

# this also checks the relationships
post2
|&amp;gt; Ecto.build_assoc(:comments)
|&amp;gt; Comment.changeset(%{user_id: dog.id, post_id: post2.id, message: &amp;quot;BARK&amp;quot; })
|&amp;gt; Repo.insert!()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets run the seed and see if all is working:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix run priv/repo/seeds.exs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nice lets make a quick git snapshot before we work on the html aspects&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;Comments added as a resource and relationship to Posts established&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;preload-comments-within-get_post&#34;&gt;Preload comments within get_post&lt;/h2&gt;
&lt;p&gt;To show the comments within a post we will need to preload the comments &amp;ndash; this is done by adding &lt;code&gt;Repo.preload(:comments)&lt;/code&gt; to our function: &lt;code&gt;def get_post!(id)&lt;/code&gt; &amp;ndash; however, we will also want to display the comment&amp;rsquo;s author &amp;ndash; so we need to do a nested preload with: &lt;code&gt;Repo.preload([comments: [:user]])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So now this function looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs.ex
def get_post!(id) do
    Post
    |&amp;gt; Repo.get!(id)
    |&amp;gt; Repo.preload(:user)
    |&amp;gt; Repo.preload([comments: [:user]])
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This can actually be shortened to (this will be helpful later):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lib/feenix_intro/blogs.ex
def get_post!(id) do
    Post
    |&amp;gt; Repo.get!(id)
    |&amp;gt; Repo.preload([:user, comments: [:user]])
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;display-the-comments-within-the-post-show&#34;&gt;Display the comments within the Post show&lt;/h2&gt;
&lt;p&gt;Now that we have updated the get_post! to preload comments we can display the comments too by adding to the end of our post&amp;rsquo;s - show template:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/templates/post/show.html.eex

# ...
&amp;lt;table&amp;gt;
  &amp;lt;thead&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th&amp;gt;Comment Author&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Message&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/thead&amp;gt;
  &amp;lt;tbody&amp;gt;
    &amp;lt;%= for comment &amp;lt;- @post.comments do %&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= comment.user.name %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= comment.message %&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;

&amp;lt;span&amp;gt;&amp;lt;%= link &amp;quot;Edit&amp;quot;, to: Routes.post_path(@conn, :edit, @post) %&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span&amp;gt;&amp;lt;%= link &amp;quot;Back&amp;quot;, to: Routes.post_path(@conn, :index) %&amp;gt;&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Start the server &lt;code&gt;mix phx.server&lt;/code&gt; and be sure this works&lt;/p&gt;
&lt;p&gt;Assuming it works, lets commit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;display comments and comment author on post show page&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;creating-comments-as-a-nested-resource&#34;&gt;Creating Comments (as a nested resource)&lt;/h2&gt;
&lt;p&gt;Since we have added comments within the Blogs context and they are associated with a post - it makes sense to create and display comments as a nested resource.  To set this up lets change our routes file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/router.ex
# ...
  scope &amp;quot;/&amp;quot;, FeenixIntroWeb do
    pipe_through :browser

    get &amp;quot;/&amp;quot;, PageController, :index
    resources &amp;quot;/users&amp;quot;, UserController

    # replace this line:
    # resources &amp;quot;/posts&amp;quot;, PostController
    # with:
    resources &amp;quot;/posts&amp;quot;, PostController do
      resources &amp;quot;/comments&amp;quot;, CommentController, only: [:create]
    end
  end
  # ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means we will be able to create a comment only within the context of an existing post (seems reasonable) &amp;ndash; more actions can be added later such as &lt;code&gt;edit&lt;/code&gt; or &lt;code&gt;delete&lt;/code&gt; possibly.&lt;/p&gt;
&lt;p&gt;This also means we need to display our comments within the context of existing posts (the best place for this is the &lt;code&gt;show&lt;/code&gt; - where all the details of the post are shown).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create the controller we just defined - we will need to make a new file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/controllers/comment_controller.ex
defmodule FeenixIntroWeb.CommentController do
  use FeenixIntroWeb, :controller

  alias FeenixIntro.Blogs

  def create(conn, %{&amp;quot;post_id&amp;quot; =&amp;gt; post_id, &amp;quot;comment&amp;quot; =&amp;gt; comment_params}) do
    # define the post we are nested within
    post = Blogs.get_post!(post_id)

    # create our new comment and handle (success or failure)
    case Blogs.create_comment(post, comment_params) do
      {:ok, _comment} -&amp;gt;
        conn
        |&amp;gt; put_flash(:info, &amp;quot;Comment created&amp;quot;)
        |&amp;gt; redirect(to: Routes.post_path(conn, :show, post))

      # TODO: return to form and show errors
      {:error, _changeset} -&amp;gt;
        conn
        |&amp;gt; put_flash(:error, &amp;quot;Comment creation failed&amp;quot;)
        |&amp;gt; redirect(to: Routes.post_path(conn, :show, post))
    end
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: at the moment we don&amp;rsquo;t handle errors, and allow those to be fixed.  We will get to that in a second step.&lt;/p&gt;
&lt;p&gt;We need to update the function &lt;code&gt;create_comment&lt;/code&gt; in order to work as a nested resource:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#  @doc &amp;quot;&amp;quot;&amp;quot;
  Creates a comment.

  ## Examples
      # also update our function docs
      # replace
      # iex&amp;gt; create_comment(%{field: value})
      # with
      iex&amp;gt; create_comment(post, %{field: value})
      {:ok, %Comment{}}

      # replace:
      # iex&amp;gt; create_comment(%{field: bad_value})
      # with:
      iex&amp;gt; create_comment(post, %{field: bad_value})
      {:error, %Ecto.Changeset{}}

  &amp;quot;&amp;quot;&amp;quot;
  # replace
  # def create_comment(attrs \\ %{}) do
  #   %Comment{}
  #   |&amp;gt; Comment.changeset(attrs)
  #   |&amp;gt; Repo.insert()
  # end

  # with (this uses the passed in post and creates an association with the new comment)
  def create_comment(%Post{} = post, attrs \\ %{}) do
    post
    |&amp;gt; Ecto.build_assoc(:comments)
    |&amp;gt; Comment.changeset(attrs)
    |&amp;gt; Repo.insert()
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to create a new Comment &lt;strong&gt;form&lt;/strong&gt; the &lt;code&gt;show&lt;/code&gt; function will need to borrow from a typical &lt;code&gt;new&lt;/code&gt; function and send and empty struct (changeset) for the form &amp;ndash; lets start by updating the PostController show function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/controllers/post_controller.ex
  # ...
  alias FeenixIntro.Blogs.Comment

  def show(conn, %{&amp;quot;id&amp;quot; =&amp;gt; id}) do
    post = Blogs.get_post!(id)
    users = Accounts.list_users()
    # replace:
    # render(conn, &amp;quot;show.html&amp;quot;, post: post, users: users)

    # with: This allows us to add comments on the Post show form!
    comment_changeset = Blogs.change_comment(%Comment{})
    render(conn, &amp;quot;show.html&amp;quot;, post: post, users: users,
                              comment_changeset: comment_changeset)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have an empty changeset for the form - we can add the form to the show page with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/templates/post/show.html.eex
# ...
&amp;lt;h3&amp;gt;Add a Comment&amp;lt;/h3&amp;gt;
&amp;lt;%= form_for @comment_changeset, Routes.post_comment_path(@conn, :create, @post), fn form -&amp;gt; %&amp;gt;

  &amp;lt;%= label form, &amp;quot;Author&amp;quot; %&amp;gt;
  &amp;lt;%= select form, :user_id, Enum.map(@users, &amp;amp;{&amp;amp;1.name, &amp;amp;1.id}) %&amp;gt;
  &amp;lt;%= error_tag form, :user %&amp;gt;

  &amp;lt;%= label form, :message %&amp;gt;
  &amp;lt;%= textarea form, :message %&amp;gt;
  &amp;lt;%= error_tag form, :message %&amp;gt;

  &amp;lt;div&amp;gt;
    &amp;lt;%= submit &amp;quot;Save&amp;quot;%&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s try this out with: &lt;code&gt;mix phx.server&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;assuming all works as expected let&amp;rsquo;s make another git commit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;comment creation as a nested resource within posts&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;handle-input-errors&#34;&gt;Handle Input Errors&lt;/h2&gt;
&lt;p&gt;Prevent empty strings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/32784008/phoenix-render-template-of-other-folder&#34;&gt;https://stackoverflow.com/questions/32784008/phoenix-render-template-of-other-folder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;lets add a minimum message legth to comments:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs/comment.ex
  def changeset(comment, attrs) do
    comment
    |&amp;gt; cast(attrs, @required_fields)
    |&amp;gt; validate_required(@required_fields)
    |&amp;gt; validate_length(:message, min: 3)
  end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, change the controller to prep the data just like a post &lt;code&gt;show&lt;/code&gt; and send the changeset - with the errors. &lt;code&gt;|&amp;gt; put_view(FeenixIntroWeb.PostView)&lt;/code&gt; is how we redirect to other external views as of Phoenix 1.5.1:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/controllers/comment_controller.ex
  # add the alias
  alias FeenixIntro.Accounts

  # ...

  def create(conn, %{&amp;quot;post_id&amp;quot; =&amp;gt; post_id, &amp;quot;comment&amp;quot; =&amp;gt; comment_params}) do
    # ...

      # replace:
      # {:error, _changeset} -&amp;gt;
      #   conn
      #   |&amp;gt; put_flash(:error, &amp;quot;Comment creation failed, please fix the errors&amp;quot;)
      #   |&amp;gt; redirect(to: Routes.post_path(conn, :show, post))

      # with:
      {:error, %Ecto.Changeset{} = changeset} -&amp;gt;
        users = Accounts.list_users()
        conn
        |&amp;gt; put_flash(:error, &amp;quot;Comment creation failed, please fix the errors&amp;quot;)
        |&amp;gt; put_view(FeenixIntroWeb.PostView)   # as of Phoenix 1.5.1
        |&amp;gt; render(&amp;quot;show.html&amp;quot;, post: post, users: users, comment_changeset: changeset)
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming this works make a new git commit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;handle comment creation errors&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;flexible-preloading&#34;&gt;Flexible preloading&lt;/h2&gt;
&lt;p&gt;You may have noticed the pre-loading is hard-coded &amp;ndash; in this case it is ok, but might not always be good.  Here is a flexible alternative:&lt;/p&gt;
&lt;p&gt;We can update / replace the following functions with the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs.ex
  def list_posts(opts \\ [:user]) do
    preloads = Keyword.get(opts, :preloads, [])
    Post
    |&amp;gt; Repo.all()
    |&amp;gt; Repo.preload(preloads)
  end

  def get_post!(id, opts \\ [:user, comments: [:user]]) do
    preloads = Keyword.get(opts, :preloads, [])
    Post
    |&amp;gt; Repo.get!(id)
    |&amp;gt; Repo.preload(preloads)
  end

  def get_comment!(id, opts \\ [:user]) do
    preloads = Keyword.get(opts, :preloads, [])
    Comment
    |&amp;gt; Repo.get!(id)
    |&amp;gt; Repo.preload(preloads)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now we can change our show post controller to look like - so that we can use this flexibility:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/controllers/post_controller.ex
  # ...

  def index(conn, _params) do
    # posts = Blogs.list_posts()
    preloads = [:user]
    posts = Blogs.list_posts(preloads: preloads)
    render(conn, &amp;quot;index.html&amp;quot;, posts: posts)
  end

  def new(conn, _params) do
    users = Accounts.list_users()
    changeset = Blogs.change_post(%Post{})
    render(conn, &amp;quot;new.html&amp;quot;, changeset: changeset, users: users)
  end

  # ...

  def show(conn, %{&amp;quot;id&amp;quot; =&amp;gt; id}) do
    # post = Blogs.get_post!(id)
    preloads = [:user, comments: [:user]]
    post = Blogs.get_post!(id, preloads: preloads)
    users = Accounts.list_users()
    # This allows us to add comments on the Post show form!
    comment_changeset = Blogs.change_comment(%Comment{})
    render(conn, &amp;quot;show.html&amp;quot;, post: post,
                              users: users,
                              comment_changeset: comment_changeset)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have the flexibilty to preload or not depending on what we want to do,&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Phoenix 1.5 Blog Intro</title>
      <link>https://btihen.me/post_elixir_phoenix/phoenix_1_5_blog_intro/</link>
      <pubDate>Sat, 04 Jul 2020 13:06:29 +0200</pubDate>
      <guid>https://btihen.me/post_elixir_phoenix/phoenix_1_5_blog_intro/</guid>
      <description>&lt;h2 id=&#34;purpose&#34;&gt;Purpose&lt;/h2&gt;
&lt;p&gt;This article creates a basic web application backed by a database and creates a few relationships.  I&amp;rsquo;ll use the mix generator commands to make this process quick and easy.  In step two we will add a graphql api.&lt;/p&gt;
&lt;h2 id=&#34;topics-covered&#34;&gt;Topics Covered&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;create a project&lt;/li&gt;
&lt;li&gt;create a resource&lt;/li&gt;
&lt;li&gt;dropdown list of a collection&lt;/li&gt;
&lt;li&gt;pre-load/display sub-reources&lt;/li&gt;
&lt;li&gt;create a has_many relationship&lt;/li&gt;
&lt;li&gt;create a belongs_to relationship&lt;/li&gt;
&lt;li&gt;delete has_many sub-resources when top resource is deleted&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;getting-started---create-an-app&#34;&gt;Getting Started - create an app&lt;/h2&gt;
&lt;p&gt;find the most recent phoenix version:
&lt;a href=&#34;https://github.com/phoenixframework/phoenix/releases&#34;&gt;https://github.com/phoenixframework/phoenix/releases&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix archive.install hex phx_new 1.5.3
mix phx.new feenix_intro
cd feenix_intro
mix ecto.create
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test with: &lt;code&gt;mix phx.server&lt;/code&gt; and go to &lt;code&gt;http://localhost:4000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Ideally you see a the Phoenix Start Page.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create a git snapshot&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init &amp;amp;&amp;amp; git add -A &amp;amp;&amp;amp; git commit -m &amp;quot;init&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-contexts&#34;&gt;Create Contexts&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Context helps us create areas of code isolation and creates an API for other contexts to use&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In our case we will need a Blogs and Accounts (better would have been Authors) context&lt;/p&gt;
&lt;p&gt;Blogs will have the posts and comments and Accounts will have the user and login credentials and user relationships (why not)?  To see the full documentation on Contexts see: &lt;a href=&#34;https://hexdocs.pm/phoenix/contexts.html&#34;&gt;https://hexdocs.pm/phoenix/contexts.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We will generate two resources and Contexts (and add more later) - lets start with users who will post their blogs (users will be within the Accounts context and posts will be within the Blogs context):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.gen.html Accounts User users name:string email:string username:string:unique
mix phx.gen.html Blogs Post posts title:string body:text user_id:references:users
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice we can generate unique fields with &lt;code&gt;:unique&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And we can generate relationships (foriegn keys) with &lt;code&gt;references&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now that we have generated our code - we need to make a few updates:&lt;/p&gt;
&lt;p&gt;First: we need to update our routes in the scope area to look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/ideas_web/router.ex
  scope &amp;quot;/&amp;quot;, FeenixIntroWeb do
    pipe_through :browser

    get &amp;quot;/&amp;quot;, PageController, :index
    resources &amp;quot;/users&amp;quot;, UserController
    resources &amp;quot;/posts&amp;quot;, PostController
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE: the API&amp;rsquo;s for our Contexts &lt;code&gt;Accounts&lt;/code&gt; and &lt;code&gt;Blogs&lt;/code&gt; is in &lt;code&gt;lib/feenix_intro/accounts.ex&lt;/code&gt; and &lt;code&gt;lib/feenix_intro/blogs/post.ex&lt;/code&gt; respectively - as we add more info into these contexts these files will get long!  &lt;strong&gt;Ideally you will always interact with the Context API and not the Repo directly this will help create much more managable code.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;define-the-has_many-relationship&#34;&gt;Define the has_many relationship&lt;/h2&gt;
&lt;p&gt;Before we migrate we need to define the relationships:&lt;/p&gt;
&lt;p&gt;so we update the users with a has_many relationship to posts&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/accounts/user.ex
defmodule FeenixIntro.Accounts.User do
  use Ecto.Schema
  import Ecto.Changeset
  alias FeenixIntro.Blogs.Post

  @required_fields [:name, :email, :username]

  schema &amp;quot;users&amp;quot; do
    has_many(:posts, Post)

    field :name, :string
    field :email, :string
    field :username, :string

    timestamps()
  end

  @doc false
  def changeset(user, attrs) do
    user
    |&amp;gt; cast(attrs, @required_fields)
    |&amp;gt; validate_required(@required_fields)
    |&amp;gt; unique_constraint(:username)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you skip the alias, then &lt;code&gt;has_many&lt;/code&gt; needs to be written as: &lt;code&gt;has_many(:posts, FeenixIntro.Blogs.Post)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;define-the-belongs_to-relationship&#34;&gt;Define the belongs_to relationship&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; replace the &lt;code&gt;field :user_id, :id&lt;/code&gt; with &lt;code&gt;belongs_to(:user, User)&lt;/code&gt; &amp;ndash; you CAN&amp;rsquo;T have both!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs/post.ex
defmodule FeenixIntro.Blogs.Post do
  use Ecto.Schema
  import Ecto.Changeset
  alias FeenixIntro.Blogs.Post
  alias FeenixIntro.Accounts.User

  @required_fields [:user_id, :title, :body]

  schema &amp;quot;posts&amp;quot; do
    belongs_to(:user, User)

    # field :user_id, :id
    field :body, :string
    field :title, :string

    timestamps()
  end

  @doc false
  def changeset(post, attrs) do
    post
    |&amp;gt; cast(attrs, @required_fields)
    |&amp;gt; validate_required(@required_fields)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE: &lt;code&gt;@required_fields [:user_id, :title, :body]&lt;/code&gt; isn&amp;rsquo;t required, but as things change defining a constant that can be reused can be convient.&lt;/p&gt;
&lt;h2 id=&#34;auto-delete-sub-resources&#34;&gt;Auto delete sub-resources&lt;/h2&gt;
&lt;p&gt;To be sure we don&amp;rsquo;t have unreferenced blogs if a user gets deleted we need to change our Blog migration to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# priv/repo/migrations/20200704152318_create_posts.exs
defmodule FeenixIntro.Repo.Migrations.CreatePosts do
  use Ecto.Migration

  def change do
    create table(:posts) do
      add :title, :string
      add :body, :text
      # remove the default
      # add :user_id, references(:users, on_delete: :nothing)
      # add the following to auto delete posts if user is deleted!
      add :user_id, references(:users, on_delete: :delete_all), null: false

      timestamps()
    end

    create index(:posts, [:user_id])
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now it should be safe to migrate using:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix ecto.migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;seed-data&#34;&gt;Seed Data&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s create seed data so that one we know how to do that and two have some data to test before we get all our views and forms working:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# priv/repo/seeds.exs

# Script for populating the database. You can run it as:
#
#     mix run priv/repo/seeds.exs
#
# We recommend using the bang functions (`insert!`, `update!`
# and so on) as they will fail if something goes wrong.

alias FeenixIntro.Repo
alias FeenixIntro.Blogs.Post
alias FeenixIntro.Accounts.User

# reset the datastore
Repo.delete_all(User) # this should also delete all Posts

# insert people
me = Repo.insert!(%User{ name: &amp;quot;Bill&amp;quot;, email: &amp;quot;bill@example.com&amp;quot;, username: &amp;quot;bill&amp;quot; })
dog = Repo.insert!(%User{ name: &amp;quot;Nyima&amp;quot;, email: &amp;quot;nyima@example.com&amp;quot;, username: &amp;quot;nyima&amp;quot; })
Repo.insert!(%Post{ user_id: me.id, title: &amp;quot;Elixir&amp;quot;, body: &amp;quot;Very cool ideas&amp;quot; })
Repo.insert!(%Post{ user_id: me.id, title: &amp;quot;Phoenix&amp;quot;, body: &amp;quot;live is fascinating&amp;quot; })
Repo.insert!(%Post{ user_id: dog.id, title: &amp;quot;Walk&amp;quot;, body: &amp;quot;oh cool&amp;quot; })
Repo.insert!(%Post{ user_id: dog.id, title: &amp;quot;Dinner&amp;quot;, body: &amp;quot;YES!&amp;quot; })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now as the comments state run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix run priv/repo/seeds.exs
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;
&lt;p&gt;run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.server
# or if you prefer:
# iex -S mix phx.server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Test USERS:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Go to: &lt;code&gt;http://localhost:4000/users&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;when we list users and create users - all is well&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TEST POSTS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Go to: &lt;code&gt;http://localhost:4000/posts&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;when we do the same withe posts - we get an error creating new posts and we don&amp;rsquo;t see the author in index and show&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we can&amp;rsquo;t create a post since we required the user_id and there is not field for that&lt;/li&gt;
&lt;li&gt;we can&amp;rsquo;t list the author&amp;rsquo;s name (just the author&amp;rsquo;s ID) until we preload the author along with the post&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;fix-post-creation-with-a-dropdown-list-of-resources&#34;&gt;Fix Post creation with a dropdown list of resources&lt;/h2&gt;
&lt;p&gt;Normally, this would be done with session info to autoselect the authenticated author, but that is for another day.  In this case, we will demonstrate how to load and pass a collection and use that to populate a dropdown entry.&lt;/p&gt;
&lt;p&gt;In the controller we must load users and add the user_id to the post form:
whe we look in the Accounts API we see: &lt;code&gt;list_users()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/controllers/post_controller.ex
  # ...
  # add the accounts context alias
  alias FeenixIntro.Accounts
  # ...
  def new(conn, _params) do
    changeset = Blogs.change_post(%Post{})
    # replace:
    # render(conn, &amp;quot;new.html&amp;quot;, changeset: changeset)
    # with:
    # collection of users for post form
    users = Accounts.list_users()
    # include the collection of users to the new form
    render(conn, &amp;quot;new.html&amp;quot;, changeset: changeset, users: users)
  end
  # ...
  def edit(conn, %{&amp;quot;id&amp;quot; =&amp;gt; id}) do
    post = Blogs.get_post!(id)
    changeset = Blogs.change_post(post)
    # replace:
    render(conn, &amp;quot;edit.html&amp;quot;, post: post, changeset: changeset)
    # with:
    users = Accounts.list_users()
    render(conn, &amp;quot;edit.html&amp;quot;, post: post, changeset: changeset, users: users)
  end
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to adapt the form to give us a choice of users:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/templates/post/form.html.eex
&amp;lt;%= form_for @changeset, @action, fn f -&amp;gt; %&amp;gt;
  &amp;lt;%= if @changeset.action do %&amp;gt;
    &amp;lt;div class=&amp;quot;alert alert-danger&amp;quot;&amp;gt;
      &amp;lt;p&amp;gt;Oops, something went wrong! Please check the errors below.&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;% end %&amp;gt;

  &amp;lt;%= label f, &amp;quot;Author&amp;quot; %&amp;gt;
  &amp;lt;%= select f, :user_id, Enum.map(@users, &amp;amp;{&amp;amp;1.name, &amp;amp;1.id}) %&amp;gt;
  &amp;lt;%= error_tag f, :user %&amp;gt;
  # ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming you can create posts now, lets make another git snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;users and posts resources can be created&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;display-the-author-of-post-with-preloads&#34;&gt;Display the Author of Post (with Preloads)&lt;/h2&gt;
&lt;p&gt;lets display the Blog author - that&amp;rsquo;s often interesting to others.
We can do this with preloading in our Blog context:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs.ex
  # change this line:
  # def list_posts, do: Repo.all(Post)
  def list_posts do
    Post
    |&amp;gt; Repo.all()
    |&amp;gt; Repo.preload(:user)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and also our get_post&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs.ex
  # change:
  # def get_post!(id), do: Repo.get!(Post, id)
  # into:
  def get_post!(id) do
    Post
    |&amp;gt; Repo.get!(id)
    |&amp;gt; Repo.preload(:user)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now we can update our index and show page to display the author&amp;rsquo;s name at the top of the page:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/templates/post/show.html.eex
&amp;lt;h1&amp;gt;Show Post&amp;lt;/h1&amp;gt;

&amp;lt;ul&amp;gt;

  &amp;lt;li&amp;gt;
    &amp;lt;strong&amp;gt;Author:&amp;lt;/strong&amp;gt;
    &amp;lt;%= @post.user.name %&amp;gt;
  &amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and in the index too:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/templates/post/index.html.eex
# ...
&amp;lt;%= for post &amp;lt;- @posts do %&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= post.user.name %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= post.title %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= post.body %&amp;gt;&amp;lt;/td&amp;gt;
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming authors and preload works properly, we can make another git snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;authors names are displayed now with preloading&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;source-code&#34;&gt;Source code&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/btihen/PhoenixIntro&#34;&gt;https://github.com/btihen/PhoenixIntro&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;helpful-resources-used&#34;&gt;Helpful Resources used:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://elixircasts.io/phoenix-contexts&#34;&gt;https://elixircasts.io/phoenix-contexts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/conradwt/zero-to-graphql-using-phoenix&#34;&gt;https://github.com/conradwt/zero-to-graphql-using-phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@damonvjanis/ecto-preloads-in-phoenix-contexts-167d11e5405e&#34;&gt;https://medium.com/@damonvjanis/ecto-preloads-in-phoenix-contexts-167d11e5405e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.to/joseph_lozano/setting-up-a-new-phoenix-1-5-project-with-phoenix-liveview-309n&#34;&gt;https://dev.to/joseph_lozano/setting-up-a-new-phoenix-1-5-project-with-phoenix-liveview-309n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/velotio-perspectives/creating-graphql-apis-using-elixir-phoenix-and-absinthe-486ff38f2549&#34;&gt;https://medium.com/velotio-perspectives/creating-graphql-apis-using-elixir-phoenix-and-absinthe-486ff38f2549&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Academic Content Commands</title>
      <link>https://btihen.me/post_tech_notes/hugo_academic_cheatsheet/</link>
      <pubDate>Sat, 23 May 2020 10:39:21 +0200</pubDate>
      <guid>https://btihen.me/post_tech_notes/hugo_academic_cheatsheet/</guid>
      <description>&lt;h2 id=&#34;from-the-academic-documentation&#34;&gt;From the Academic Documentation&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content&#34;&gt;https://sourcethemes.com/academic/docs/managing-content&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;create-a-user&#34;&gt;Create a User&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;hugo new --kind authors authors/firstname_lastname
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;add person&amp;rsquo;s image&lt;/strong&gt; (png or jpg)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp picture.jpg content/authors/firstname_lastname/avatar.jpg
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-blog&#34;&gt;Create a Blog&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;hugo new --kind post post/blog_title
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;images within the article&lt;/strong&gt; - add images to the article folder:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp image.jpg content/post/blog_title/article_image.jpg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and add it to the content using: &lt;code&gt;![kanban](example.jpg)&lt;/code&gt; within the article&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;add a display image&lt;/strong&gt; (png or jpg)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp picture.jpg content/post/blog_title/featured.jpg
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;add-a-publication-reference&#34;&gt;Add a Publication Reference&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;hugo new --kind publication publication/publication_title
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;add a display image&lt;/strong&gt; (png or jpg)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp picture.jpg content/publication/publication_title/featured.jpg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;add a pdf&lt;/strong&gt; (with the same name as the folder) and it will be automatically available&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp picture.pdf content/publication/publication_title/publication_title.pdf
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-project&#34;&gt;Create a Project&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;hugo new --kind project project/project_name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;add a display image&lt;/strong&gt; (png or jpg)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp picture.jpg content/project/project_name/featured.jpg
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-talk&#34;&gt;Create a Talk&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;hugo new --kind talk talk/my-talk-name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Talk Slides&lt;/strong&gt; are a bit more complicated see:
&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#create-slides&#34;&gt;https://sourcethemes.com/academic/docs/managing-content/#create-slides&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;course-documentation&#34;&gt;Course (Documentation)&lt;/h2&gt;
&lt;p&gt;This is tricky (copy and rename an existing &lt;code&gt;course&lt;/code&gt; and adapt it)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;courses&lt;/code&gt; can be renamed and can have multiple folders (courses) within it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; the &lt;code&gt;algebra_1&lt;/code&gt; folder cannot have any sub-folders. Within an actual course all materials must be within a FLAT hierarchy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Website using Github</title>
      <link>https://btihen.me/post_tech_notes/hugo_academic_website_steps/</link>
      <pubDate>Sat, 16 May 2020 10:39:21 +0200</pubDate>
      <guid>https://btihen.me/post_tech_notes/hugo_academic_website_steps/</guid>
      <description>&lt;h3 id=&#34;step-0-install-hugo&#34;&gt;step 0: install hugo&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;brew install hugo
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-1-create-a-public-username_website-repo&#34;&gt;step 1: create a &lt;strong&gt;public&lt;/strong&gt; &lt;code&gt;username_website&lt;/code&gt; repo&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;ll assume your github account is &lt;code&gt;username&lt;/code&gt; I think this repo needs to be publicly readable (not 100% sure)&lt;/p&gt;
&lt;h3 id=&#34;step-2-clone-the-academic-hugo-locally&#34;&gt;step 2: clone the academic hugo locally&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/sourcethemes/academic-kickstart.git username_website
cd academic_website
git submodule update --init --recursive  # without this the site won&#39;t start correctly
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;be sure you have many files within: &lt;strong&gt;&lt;code&gt;themes/academic&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;step-3-update-gitignore--public-folder&#34;&gt;step 3: Update .gitignore &amp;amp; public folder&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;update &lt;code&gt;.gitignore&lt;/code&gt; remove the line with &lt;code&gt;public&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;be sure there is no &lt;code&gt;public&lt;/code&gt; folder (yet), if there is remove it and all its contents.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;step-4-point-this-repo-to-your-username_website-repo&#34;&gt;step 4: point this repo to your &lt;code&gt;username_website&lt;/code&gt; repo&lt;/h3&gt;
&lt;p&gt;I have found the easiest way to overwrite the source &lt;code&gt;origin&lt;/code&gt; repo is to do this by hand.&lt;/p&gt;
&lt;p&gt;Currently your &lt;code&gt;.git/config&lt;/code&gt; file will currently look like (notice the url referencing: &lt;code&gt;git://github.com/sourcethemes/academic-kickstart.git&lt;/code&gt; - this is what we need to update):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true
[remote &amp;quot;origin&amp;quot;]
	url = git://github.com/sourcethemes/academic-kickstart.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch &amp;quot;master&amp;quot;]
	remote = origin
	merge = refs/heads/master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;change the origin url by hand or by using sed:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sed -i.bak -e &#39;s/https:\/\/github.com\/sourcethemes\/academic-kickstart.git/git@github.com:username\/username_website.git/&#39; .git/config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;when your &lt;code&gt;.git/config&lt;/code&gt; file is correct it will look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true
[remote &amp;quot;origin&amp;quot;]
	url = git@github.com:username/username_website.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch &amp;quot;master&amp;quot;]
	remote = origin
	merge = refs/heads/master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now you can push this local repo to your github repo using:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git push -u origin --all
# git init
# git add .
# git commit -m &amp;quot;Initial commit&amp;quot;
# git push -u origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-5-configure-website-basics&#34;&gt;step 5: configure website basics&lt;/h3&gt;
&lt;h4 id=&#34;5a-set-your-site-name&#34;&gt;5A: Set your site name:&lt;/h4&gt;
&lt;p&gt;in &lt;code&gt;config/_default/config.toml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;find the &lt;code&gt;title&lt;/code&gt; attribute and set it to &lt;code&gt;username&lt;/code&gt; (or whatever is appropriate)&lt;/p&gt;
&lt;h4 id=&#34;5b-pick-a-themes&#34;&gt;5B: Pick a themes&lt;/h4&gt;
&lt;p&gt;from &lt;a href=&#34;https://sourcethemes.com/academic/themes/&#34;&gt;https://sourcethemes.com/academic/themes/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in &lt;code&gt;config/_default/config.toml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;find the &lt;code&gt;theme&lt;/code&gt; attribute and set it to your favorite theme color (or leave it as is)&lt;/p&gt;
&lt;h4 id=&#34;5c-site-logo--favicon&#34;&gt;5C: site logo &amp;amp; favicon&lt;/h4&gt;
&lt;p&gt;Put your image files into assets/images:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;logo.png&lt;/code&gt; (the logo on your webpage) file and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;icon.png&lt;/code&gt; (the favicon - icon in the webtab)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can go to &lt;code&gt;https://www.namecheap.com/logo-maker&lt;/code&gt; and make a logo&lt;/p&gt;
&lt;h4 id=&#34;5d-menu-items&#34;&gt;5D: menu items&lt;/h4&gt;
&lt;p&gt;in &lt;code&gt;config/_default/menus.toml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;remove any items you won&amp;rsquo;t use.  In my case this file now looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[[main]]
  name = &amp;quot;Posts&amp;quot;
  url = &amp;quot;#posts&amp;quot;
  weight = 20

[[main]]
  name = &amp;quot;About&amp;quot;
  url = &amp;quot;#about&amp;quot;
  weight = 50

[[main]]
  name = &amp;quot;Contact&amp;quot;
  url = &amp;quot;#contact&amp;quot;
  weight = 60
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These will also be the sections on the home page that will be enabled and configured.&lt;/p&gt;
&lt;p&gt;The larger the weight the further to the &lt;strong&gt;right&lt;/strong&gt; the item will be shown.&lt;/p&gt;
&lt;h3 id=&#34;step-6-configure-site-parameters&#34;&gt;step 6: configure site parameters&lt;/h3&gt;
&lt;p&gt;You may want to read through all the params - but the ones listed here are enough to get started.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;site_type&lt;/strong&gt; &amp;ndash; in the file: &lt;code&gt;config/_default/params.toml&lt;/code&gt;: be sure to configure the &lt;code&gt;site_type&lt;/code&gt; variable&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;configure &amp;lsquo;contact details&amp;rsquo;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;if you choose not to add an email, then be sure to set the variable &lt;code&gt;email_form=0&lt;/code&gt; on the &lt;code&gt;content/home/contact.md&lt;/code&gt; file!&lt;/li&gt;
&lt;li&gt;if you choose not to enter an address and coordinates the in the &lt;code&gt;[map]&lt;/code&gt; section set the &lt;code&gt;engine=0&lt;/code&gt; to avoid problems.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;configure social details&lt;/strong&gt; &amp;ndash; optional&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Regional Settings&lt;/strong&gt; &amp;ndash; NOTE: The date display settings seems to have a bug &amp;ndash; so I don&amp;rsquo;t recommend adjusting that.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;step-7-configure-your-homepage&#34;&gt;step 7: configure your homepage&lt;/h3&gt;
&lt;p&gt;At this point I suggest starting &lt;code&gt;hugo server&lt;/code&gt; so you can watch your edits.&lt;/p&gt;
&lt;p&gt;Now go into the folder &lt;code&gt;content/home&lt;/code&gt; and we will adjust or disable the files in this folder.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;disable with: &lt;code&gt;active=false&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;enable with: &lt;code&gt;active=true&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;oder with: &lt;code&gt;weight=20&lt;/code&gt; the bigger the number the further down on the page is show (I suggest you use the same weights used in the menu)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;contact.md&lt;/code&gt;&lt;/strong&gt; - review and see if changes are desired.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;accomplishments.md&lt;/code&gt;&lt;/strong&gt; - (and all other home page sections you decide not to display) change &lt;code&gt;active=true&lt;/code&gt; to &lt;strong&gt;&lt;code&gt;active=false&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;7a-about-page&#34;&gt;7A: &lt;code&gt;about&lt;/code&gt; page&lt;/h4&gt;
&lt;p&gt;I prefer to use the &lt;code&gt;about&lt;/code&gt; page when it is a person&amp;rsquo;s site and the &lt;code&gt;people&lt;/code&gt; page when the site is about a group effort.  So in this case:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo new --kind authors authors/author_name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;content/home/about.md&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;change the title to whatever you like: biography, about, etc&amp;hellip;&lt;/li&gt;
&lt;li&gt;change the variable &lt;code&gt;author&lt;/code&gt; to match the name you used to generate you profile above, ie:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;author = &amp;quot;author_name&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;content/authors/author_name/_index.md&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adjust the file so the information is accurate&lt;/li&gt;
&lt;li&gt;below the &lt;code&gt;---&lt;/code&gt; toward the end of the file, add your own free text to the about page.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;content/authors/author_name/avatar.jpeg&lt;/code&gt;&lt;/strong&gt; (png, jpg, etc also work)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add an attractive image to the folder &lt;code&gt;content/authors/author_name/&lt;/code&gt; and name it: &lt;strong&gt;&lt;code&gt;avatar.jpg&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;7b-people-or-team-page&#34;&gt;7B: &lt;code&gt;people&lt;/code&gt; (or Team) page&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;disable &lt;code&gt;content/home/about.md&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mark the &lt;code&gt;active&lt;/code&gt; variable as &lt;code&gt;false&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;active=false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;enable &lt;code&gt;content/home/people.md&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set &lt;code&gt;active=true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;create sub-group names:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;[content]
  user_groups = [&amp;quot;Educators&amp;quot;, &amp;quot;Researchers&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or alternatively, use an empty string to create a team without sub-teams:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[content]
  user_groups = [&amp;quot;&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Create the people (authors)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo new --kind authors authors/person_name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;content/authors/person_name/_index.md&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add one (or more) &lt;code&gt;user_group&lt;/code&gt; to the person&amp;rsquo;s profile using the &lt;code&gt;user_groups&lt;/code&gt; variable:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;user_groups = [&amp;quot;Educators&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if you used an empty string in &lt;code&gt;people.md&lt;/code&gt; add:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;user_groups = [&amp;quot;&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Edit this file so that the information is accurate&lt;/li&gt;
&lt;li&gt;below the &lt;code&gt;---&lt;/code&gt; toward the end of the file, add your own free text to the about page.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;content/authors/person_name/avatar.jpeg&lt;/code&gt;&lt;/strong&gt; (png, jpg, etc also work)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add an attractive image to the folder &lt;code&gt;content/authors/person_name/&lt;/code&gt; and name it: &lt;strong&gt;&lt;code&gt;avatar.jpg&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;step-8-test-publish-to-usernamegithubio&#34;&gt;step 8: Test publish to &lt;code&gt;username.github.io&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;When you site is good enough to publish then its time to follow the following steps (these MUST be done in order to prevent problems!)&lt;/p&gt;
&lt;h4 id=&#34;8a-public-folder-non-existent&#34;&gt;8A: public folder (non-existent)&lt;/h4&gt;
&lt;p&gt;The first time you do setup for publishing it is important this folder doesn&amp;rsquo;t exist yet and that &lt;code&gt;public&lt;/code&gt; isn&amp;rsquo;t listed in the .gitignore` file&lt;/p&gt;
&lt;h4 id=&#34;8b-git-snapshot&#34;&gt;8B: git snapshot&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;(DO NOT YET GENERATE your website)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Create your git snapshot (very important at this point since the next steps are tricky)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;First draft of homepage&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;8c-make-second-github-repo-usernamegithubio&#34;&gt;8C: make second github repo &lt;strong&gt;&lt;code&gt;username.github.io&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Now make a second &lt;strong&gt;public&lt;/strong&gt; repo (CLICK THE BOX TO INCLUDE A &lt;strong&gt;README&lt;/strong&gt; and/or a &lt;strong&gt;LISENCE&lt;/strong&gt; file!) on github called &lt;strong&gt;&lt;code&gt;username.github.io&lt;/code&gt;&lt;/strong&gt;, this MUST be exactly: &lt;code&gt;username.github.io&lt;/code&gt; for this to work!&lt;/p&gt;
&lt;p&gt;Double check your repo is not empty, but has a &lt;strong&gt;README&lt;/strong&gt; and/or a &lt;strong&gt;LISENCE&lt;/strong&gt; file.&lt;/p&gt;
&lt;p&gt;NOW go to github repo &lt;strong&gt;settings&lt;/strong&gt; and click on &lt;strong&gt;manage access&lt;/strong&gt; and be sure you have permission to at administer (or at least write to this repo) &amp;ndash; probably not so click the &lt;strong&gt;&lt;code&gt;invite teams or people&lt;/code&gt;&lt;/strong&gt; button and add yourself as an admin (an other as needed).&lt;/p&gt;
&lt;h4 id=&#34;8d-clone-usernamegithubio-to-public-within-your-hugo-project&#34;&gt;8D: clone &lt;strong&gt;&lt;code&gt;username.github.io&lt;/code&gt;&lt;/strong&gt; to public (within your Hugo project)&lt;/h4&gt;
&lt;p&gt;now go back into your website code (root folder) and type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/username/username.github.io.git public
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if you see: &lt;code&gt;warning: You appear to have cloned an empty repository.&lt;/code&gt; &amp;ndash; go back to the repo and create a README file!&lt;/p&gt;
&lt;h4 id=&#34;8e-check-your-permissions&#34;&gt;8E: check your permissions&lt;/h4&gt;
&lt;p&gt;enter you public folder and create an &lt;code&gt;index.html&lt;/code&gt; file and put in very simple html code: &lt;code&gt;&amp;lt;h1&amp;gt;Hello username.github.io&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd public
touch index.html
echo &#39;&amp;lt;h1&amp;gt;Hello username.github.io&amp;lt;/h1&amp;gt;&#39; &amp;gt;&amp;gt; index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now check this in and push it to github.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;test webpage&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point you should see a bunch of message and toward the end you should see a line with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;To github.com:username/username.github.io.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If instead you get the error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;remote: Permission to peakchallenges/peakchallenges.github.io.git denied to btihen.
fatal: unable to access &#39;https://github.com/peakchallenges/peakchallenges.github.io.git/&#39;: The requested URL returned error: 403
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;go back and check your site permissions.&lt;/p&gt;
&lt;p&gt;If site permissions aren&amp;rsquo;t a problem do the following:&lt;/p&gt;
&lt;p&gt;re-create your website repo &lt;code&gt;username.github.io.git&lt;/code&gt; outside the webcode project.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone git@github.com:username/username.github.io.git
cd username.github.io
echo &#39;&amp;lt;h1&amp;gt;Hello username.github.io - v1&amp;lt;/h1&amp;gt;&#39; &amp;gt;&amp;gt; index.html
git add index.html
git commit -m &amp;quot;update readme and test permissions&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;assuming this works then move this repo into the hugo repo:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rm -rf username_website/public
mv username.github.io username_website/public
cd username_website/public
echo &#39;&amp;lt;h1&amp;gt;Hello username.github.io - v2&amp;lt;/h1&amp;gt;&#39; &amp;gt;&amp;gt; index.html
git commit -am &amp;quot;update readme and test permissions within hugo project&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;8f-check-the-website&#34;&gt;8F: check the website&lt;/h4&gt;
&lt;p&gt;Wait a few minutes and go to the website &lt;code&gt;https://username.github.io&lt;/code&gt; and be sure you see your newly published html page.&lt;/p&gt;
&lt;h3 id=&#34;step-9-configure-public-as-a-submodule&#34;&gt;step 9: configure &lt;code&gt;public&lt;/code&gt; as a &lt;strong&gt;submodule&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Now add the username.github.io repo as a submodule to your website code repo using.  This allows nested projects without confusing git.&lt;/p&gt;
&lt;p&gt;First be sure you are in the hugo root and not the public folder and type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd public
git submodule add -b master https://github.com/username/username.github.io.git public`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now in &lt;code&gt;.git/modules&lt;/code&gt; you might see a folder called &lt;code&gt;public&lt;/code&gt; (with a bunch of stuff in it) if not simply edit your &lt;code&gt;.git/config&lt;/code&gt; so that after:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[submodule &amp;quot;themes/academic&amp;quot;]
  path = themes/academic
  url = https://github.com/gcushen/hugo-academic.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you see:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[submodule &amp;quot;public&amp;quot;]
  path = public
  url = https://github.com/username/username.github.io.git
  branch = master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can add it by hand or with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt;&amp;quot;EOF&amp;quot; &amp;gt;&amp;gt; git/config
[submodule &amp;quot;public&amp;quot;]
  path = public
  url = https://github.com/username/username.github.io.git
  branch = master
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-10-publish-your-new-hugo-webpage&#34;&gt;step 10: publish your new Hugo webpage:&lt;/h3&gt;
&lt;p&gt;Now to publish the Hugo site you prepared do the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo -d public
cd public
git add .
git commit -m &amp;quot;first webpage content&amp;quot;
git push
# toward the end you should see: `To github.com:username/username.github.io.git`
cd ..
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Follow this proceedure every time you update your site.&lt;/p&gt;
&lt;p&gt;NOTE: BE SURE NOT TO delete the folder &lt;code&gt;public/.git/&lt;/code&gt; or you will need to reconfigure your public submodule.&lt;/p&gt;
&lt;p&gt;now go back to &lt;code&gt;https://username.github.io&lt;/code&gt; and you should see your hugo site!&lt;/p&gt;
&lt;p&gt;(This might take a few minutes &amp;ndash; up to a half-hour &amp;ndash; to publish)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker Intro using MailCatcher</title>
      <link>https://btihen.me/post_tech_notes/docker_intro_with_mail_catcher/</link>
      <pubDate>Tue, 12 May 2020 21:19:09 +0200</pubDate>
      <guid>https://btihen.me/post_tech_notes/docker_intro_with_mail_catcher/</guid>
      <description>&lt;h3 id=&#34;intro&#34;&gt;&lt;strong&gt;Intro&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;It is often helpful to be able to test email sending from an application during development or testing (or even to make testing emails on a staging server possible).&lt;/p&gt;
&lt;p&gt;To do this follow these instructions for a safe convenient way to test and inspect emails sent from an application.&lt;/p&gt;
&lt;h3 id=&#34;setup&#34;&gt;&lt;strong&gt;SETUP&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;First we need to get the repo (or at least the docker file)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# get the mailcatcher repo
git clone git@github.com:sj26/mailcatcher.git

# go into mailcather repo
cd mailcatcher

# configure to use the newest `released` gem version of mailcatcher
sed -i.bu1 &#39;s/FROM ruby:2.5/FROM ruby:2.6/&#39; Dockerfile
sed -i.bu2 &#39;s/ARG VERSION=0.6.5/ARG VERSION=0.7.1/&#39; Dockerfile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Dockerfile should now look like (which is actually all that is actually needed):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM ruby:2.6
MAINTAINER Samuel Cochran &amp;lt;sj26@sj26.com&amp;gt;

ARG VERSION=0.7.1

RUN gem install mailcatcher -v $VERSION

EXPOSE 1025 1080

ENTRYPOINT [&amp;quot;mailcatcher&amp;quot;, &amp;quot;--foreground&amp;quot;]
CMD [&amp;quot;--ip&amp;quot;, &amp;quot;0.0.0.0&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;build-image&#34;&gt;&lt;strong&gt;BUILD IMAGE&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Now you can download the docker image and install the gems into it with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# -t adds repository:tag info -- the &#39;.&#39; at the end is important:
docker build -t btihen/ruby/mailcatcher:ruby_2.6 .
# ...
# should end with something like
# Successfully built 21e0de2bdd68

# now tag it as the **lasted** image with:
docker build -t btihen/ruby/mailcatcher:latest .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now you can see your list of docker images (you should see the starting image/container we just created):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker images
REPOSITORY                 TAG                 IMAGE ID            CREATED             SIZE
btihen/ruby/mailcatcher    latest              21e0de2bdd68        8 minutes ago       870MB
btihen/ruby/mailcatcher    ruby_2.6            21e0de2bdd68        8 minutes ago       870MB
ruby                       2.6                 a98425292e84        2 weeks ago         843MB
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;build-container&#34;&gt;&lt;strong&gt;BUILD CONTAINER&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Now start the docker image using the build image id (&lt;code&gt;-d&lt;/code&gt; allows it to run in the backgroud, &lt;code&gt;-p 1025:1025 -p 1080:1080&lt;/code&gt; opens a connection on ports 1025 &amp;amp; 1080 from localhost to the docker image):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# build a container so we can test our image
docker run -d -p 1025:1025 -p 1080:1080 --name mailcatcher btihen/ruby/mailcatcher:latest

# or if you like ids better
docker run -d -p 1025:1025 -p 1080:1080 --name mailcatcher 21e0de2bdd68

# if you forgot the image-id you can list the images with:
docker images
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;testing-http--smtp&#34;&gt;&lt;strong&gt;TESTING (http &amp;amp; smtp)&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;now you should be able to go to &lt;code&gt;http://localhost:1080&lt;/code&gt; and see the mailcatcher webpage.&lt;/p&gt;
&lt;p&gt;now lets test the smtp side from the cli using these instructions: &lt;code&gt;https://www.shellhacks.com/send-email-smtp-server-command-line/&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# connect to the mail server
$ telnet localhost 1025
# or
$ telnet 127.0.0.1 1025
220 smtp.domain.ext ESMTP Sendmail ?version-number?; ?date+time+gmtoffset?

# declare yourself (IP or DNS)
&amp;gt; HELO local.domain.name
250 smtp.domain.ext Hello local.domain.name [xxx.xxx.xxx.xxx], pleased to meet you

# declare who the email is from:
&amp;gt; MAIL FROM: test@local.domain.name
250 2.1.0 sender@adress.ext... Sender ok

# declare who should get the email:
&amp;gt; RCPT TO: recipient@adress.ext
250 2.1.5 recipient@adress.ext... Recipient ok

# setup the DATA transmission:
 &amp;gt; DATA
354 Enter mail, end with &amp;quot;.&amp;quot; on a line by itself

# type a subject two returns and a message ending with &#39;.&#39; (on its own line):
SUBJECT: Test message

Hello,
this is a TEST message,
please don&#39;t reply.
Thank you.
.

# end the connection
&amp;gt; QUIT
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now check the mail has arrived in mailcatcher at &lt;code&gt;localhost:1080&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Assuming you see the email sent - you can be sure your image &amp;amp; container is setup properly.&lt;/p&gt;
&lt;h3 id=&#34;stopping-exited-container&#34;&gt;&lt;strong&gt;STOPPING (exited) CONTAINER&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;When we are done with mailcatcher we can stop the docker process:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker ps -a
docker kill mailcatcher
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;starting-built-but-exited-containers&#34;&gt;&lt;strong&gt;STARTING BUILT (but exited) CONTAINERS&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;To restart mailcatcher at a later date simply type:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker start mailcatcher&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;sharing-images-once-they-work&#34;&gt;&lt;strong&gt;SHARING IMAGES (once they work)&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# login to the Azure Container Repository
docker login btihen -u username -p xxxxxxxxxxx

# upload the new image
docker push btihen/ruby/mailcatcher
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;retrieving-shared-image&#34;&gt;&lt;strong&gt;RETRIEVING SHARED IMAGE&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;az acr login --name username
az acr repository list --name username --output table

# getting the image
docker pull btihen/ruby/image_name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;containerize the image&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# these are the default local ports - adjust to your needs
docker run -d -p 1025:1025 -p 1080:1080 --name mailcatcher btihen/ruby/mailcatcher:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;start the container&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker start mailcatcher
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;listing-repo-images&#34;&gt;&lt;strong&gt;LISTING Repo IMAGES&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;One-time install&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# if needed install the azure cli
brew update &amp;amp;&amp;amp; brew install azure-cli

# the following may also be needed:
brew update &amp;amp;&amp;amp; brew install python3 &amp;amp;&amp;amp; brew upgrade python3
brew link --overwrite python3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Retrieve the image list&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# login with the azure-cli
az acr login --name username

# list the images
az acr repository list --name username --output table
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;removing-containers&#34;&gt;&lt;strong&gt;REMOVING CONTAINERS&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;when we no longer need mailcatcher we can remove it with (&lt;code&gt;-a&lt;/code&gt; lists running and stopped containers):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker ps -a
docker rm mailcatcher
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;REMOVING IMAGES&lt;/strong&gt;
To fully clean up and remove (images &amp;ndash; after the containers are removed):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker images
REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE
btihen/ruby/mailcatcher  ruby_2.5            21e0de2bdd68        25 minutes ago      870MB
ruby                     2.5                 a98425292e84        2 weeks ago         843MB

$ docker image rm 21e0de2bdd68

$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
ruby                2.5                 a98425292e84        2 weeks ago         843MB
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Phoenix 1.5 LiveView &amp; PubSub Basics</title>
      <link>https://btihen.me/post_elixir_phoenix/phoenix_1_5_live_view_basics/</link>
      <pubDate>Sun, 10 May 2020 17:01:53 +0200</pubDate>
      <guid>https://btihen.me/post_elixir_phoenix/phoenix_1_5_live_view_basics/</guid>
      <description>&lt;p&gt;I have been watching Phoenix and Elixir for a while, and the idea of writing dynamic Web Applications without needing a ton of JavaScript is very interesting.  I recently saw this video by Chris McCord:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=MZvmYaFkNJI&amp;amp;feature=youtu.be&#34;&gt;https://www.youtube.com/watch?v=MZvmYaFkNJI&amp;amp;feature=youtu.be&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;which is very cool.  I wanted to learn more and found this Phoenix 1.4 tutorial:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=2bipVjOcvdI&#34;&gt;https://www.youtube.com/watch?v=2bipVjOcvdI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dennisbeatty.com/2019/03/19/how-to-create-a-counter-with-phoenix-live-view.html&#34;&gt;https://dennisbeatty.com/2019/03/19/how-to-create-a-counter-with-phoenix-live-view.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and decided to translate that into Phoenix 1.5. This is what follows.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Since I am just learning the Phoenix Framework and will need to refer to this for my self to remember how to do basic things &amp;ndash; I&amp;rsquo;ve documented every little detail.&lt;/p&gt;
&lt;h3 id=&#34;step-0---setup-environment&#34;&gt;Step 0 - setup environment&lt;/h3&gt;
&lt;p&gt;Setup environment &amp;amp; newest version of elixir:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exenv install 1.10.3
exenv global
exenv local 1.10.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install the 1.5.1 phx_new generator:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mix archive.install hex phx_new 1.5.1&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;step-1-create-a-phoenix-project-with-liveview&#34;&gt;Step 1: Create a Phoenix Project with LiveView&lt;/h3&gt;
&lt;p&gt;Create the project (notice the &lt;code&gt;--live&lt;/code&gt; - that enables LiveView, &lt;code&gt;--no-ecto&lt;/code&gt; - keeps the project smaller since we won&amp;rsquo;t be persisting any data):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mix phx.new counter --no-ecto --live&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;enter project and create init commit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd counter
git init &amp;amp;&amp;amp; git add -A &amp;amp;&amp;amp; git commit -m &amp;quot;init&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-2---simple-counter-page-using-liveview&#34;&gt;Step 2 - simple counter page using LiveView&lt;/h3&gt;
&lt;p&gt;Make a counter_live folder &amp;amp; an index.ex file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir lib/counter_web/live/counter_live
touch lib/counter_web/live/counter_live/index.ex
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add the following contents:
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;47
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;48
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;49
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# lib/counter_web/live/counter_live/index.ex&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CounterWeb.CounterLive.Index&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CounterWeb&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:live_view&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;# since we don&amp;#39;t have a db to pull from we initialize on mount&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@impl&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; mount(_params, _session, socket) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    {&lt;span style=&#34;color:#e6db74&#34;&gt;:ok&lt;/span&gt;, assign(socket, &lt;span style=&#34;color:#e6db74&#34;&gt;:val&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)}
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; render(assigns) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;~L&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;h1&amp;gt;Live Counter&amp;lt;/h1&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;p&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;lt;b&amp;gt;Here is a great complex page&amp;lt;/b&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;lt;h2&amp;gt;The count is: &amp;lt;%= @val %&amp;gt;&amp;lt;/h2&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;lt;button phx-click=&amp;#34;dec&amp;#34;&amp;gt;-&amp;lt;/button&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;lt;button phx-click=&amp;#34;inc&amp;#34;&amp;gt;+&amp;lt;/button&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;lt;button phx-click=&amp;#34;clear&amp;#34;&amp;gt;clear&amp;lt;/button&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;p&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;lt;i&amp;gt;even more awesome content&amp;lt;/i&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;# event handler for &amp;lt;button phx-click=&amp;#34;inc&amp;#34;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; handle_event(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inc&amp;#34;&lt;/span&gt;, _, socket) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    {&lt;span style=&#34;color:#e6db74&#34;&gt;:noreply&lt;/span&gt;, update(socket, &lt;span style=&#34;color:#e6db74&#34;&gt;:val&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(&amp;amp;1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))}
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;# event handler for &amp;lt;button phx-click=&amp;#34;dec&amp;#34;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; handle_event(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dec&amp;#34;&lt;/span&gt;, _, socket) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    {&lt;span style=&#34;color:#e6db74&#34;&gt;:noreply&lt;/span&gt;, update(socket, &lt;span style=&#34;color:#e6db74&#34;&gt;:val&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(&amp;amp;1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))}
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;# event handler for &amp;lt;button phx-click=&amp;#34;clear&amp;#34;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; handle_event(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clear&amp;#34;&lt;/span&gt;, _, socket) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    {&lt;span style=&#34;color:#e6db74&#34;&gt;:noreply&lt;/span&gt;, update(socket, &lt;span style=&#34;color:#e6db74&#34;&gt;:val&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(&amp;amp;1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &amp;amp;1))}
    &lt;span style=&#34;color:#75715e&#34;&gt;# {:noreply, update(socket, :val, 0)} # very slow - why?&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Now update the routers (so we can get to the new webpage &amp;ndash; now our app should work:
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;  scope &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;CounterWeb&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    pipe_through &lt;span style=&#34;color:#e6db74&#34;&gt;:browser&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# live &amp;#34;/&amp;#34;, PageLive, :index        # remove this line&lt;/span&gt;
    live &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;CounterLive.Index&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:index&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# add this line&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Start pheonix:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mix phx.server&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Go to:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;localhost:4000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You should now see the website and the counter should function&lt;/p&gt;
&lt;p&gt;Assuming all is good, I&amp;rsquo;ll take a git snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;counter with live update&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-3---running-tests&#34;&gt;Step 3 - Running tests&lt;/h3&gt;
&lt;p&gt;In order to run the tests we type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We see that PageLive test fails.  This is because we replaced this behavior with &lt;code&gt;CounterLive&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To fix this we will create a &lt;strong&gt;CounterLive&lt;/strong&gt; test and delete &lt;strong&gt;PageLive&lt;/strong&gt; test.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rm test/counter_web/live/page_live_text.exs
touch test/counter_web/live/counter_live_text.exs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is the code for our new test: it basically just checks to be sure our Title is on the page:
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# test/counter_web/live/counter_live_text.exs&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CounterWeb.CounterLiveTest&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CounterWeb.ConnCase&lt;/span&gt;

  &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CounterWeb.CounterLive.Index&lt;/span&gt;

  test &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;disconnected and connected render&amp;#34;&lt;/span&gt;, %{&lt;span style=&#34;color:#e6db74&#34;&gt;conn&lt;/span&gt;: conn} &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    {&lt;span style=&#34;color:#e6db74&#34;&gt;:ok&lt;/span&gt;, page_live, disconnected_html} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; live(conn, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;)
    assert disconnected_html &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Live Counter&amp;#34;&lt;/span&gt;
    assert render(page_live) &lt;span style=&#34;color:#f92672&#34;&gt;=~&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Live Counter&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Now we can test again: &lt;code&gt;mix test&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now that works, lets take another git snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;counter with live update&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-4----liveview-templates&#34;&gt;Step 4 &amp;ndash; LiveView Templates&lt;/h3&gt;
&lt;p&gt;Create a template file (helpful for complex html pages, but simple to create):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;touch lib/counter_web/live/counter_live/index.html.leex&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now just copy the html (from the render method into this file):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-linenos=table,linenostart=1&#34; data-lang=&#34;linenos=table,linenostart=1&#34;&gt;# lib/counter_web/live/counter_live/index.html.leex
&amp;lt;h1&amp;gt;Live Counter&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;
  &amp;lt;b&amp;gt;Here is a great complex page&amp;lt;/b&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;div&amp;gt;
  &amp;lt;h2&amp;gt;The count is: &amp;lt;%= @val %&amp;gt;&amp;lt;/h2&amp;gt;
  &amp;lt;button phx-click=&amp;#34;dec&amp;#34;&amp;gt;-&amp;lt;/button&amp;gt;
  &amp;lt;button phx-click=&amp;#34;inc&amp;#34;&amp;gt;+&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
   &amp;lt;button phx-click=&amp;#34;clear&amp;#34;&amp;gt;clear&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;p&amp;gt;
  &amp;lt;i&amp;gt;even more awesome content&amp;lt;/i&amp;gt;
&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now point &lt;code&gt;lib/counter_web/live/counter_live/index.ex&lt;/code&gt; to this file by replacing render with an apply command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# add this new function&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;defp&lt;/span&gt; apply_action(socket, &lt;span style=&#34;color:#e6db74&#34;&gt;:index&lt;/span&gt;, _params) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    socket
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# remove this funtion&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# def render(assigns) do&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;#  ~L&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;#   ...&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;#   &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;# end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;code&gt;apply_action&lt;/code&gt; understands the &lt;strong&gt;rest&lt;/strong&gt; verbs such as &lt;code&gt;:new&lt;/code&gt;, &lt;code&gt;:show&lt;/code&gt; etc.&lt;/p&gt;
&lt;p&gt;Now try the app again and it should still work!&lt;/p&gt;
&lt;p&gt;Assuming it still works, I&amp;rsquo;ll take another git snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;counter using a template&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-5---reusable-components--isolation&#34;&gt;Step 5 - Reusable Components (&amp;amp; isolation)&lt;/h3&gt;
&lt;p&gt;This allows complex components to be &lt;strong&gt;reused&lt;/strong&gt; within multiple templates and &lt;strong&gt;isolation&lt;/strong&gt; to keep one&amp;rsquo;s mental scope minimal.&lt;/p&gt;
&lt;p&gt;Create a file for the component:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;touch lib/counter_web/live/counter_live/counter_component.ex&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Move the dynamic html and it&amp;rsquo;s associated functions into this file, it&amp;rsquo;s important to import the live_components into this file using:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;use CounterWeb, :live_component&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In order to encapsulate the events into the component we will also move the event handlers into the component file.&lt;/p&gt;
&lt;p&gt;So this file will now look like:
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# lib/counter_web/live/counter_live/counter_component.ex&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CounterWeb.CounterLive.CounterComponent&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CounterWeb&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:live_component&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; render(assigns) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;~L&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;lt;h2&amp;gt;The count is: &amp;lt;%= @val %&amp;gt;&amp;lt;/h2&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;lt;button phx-click=&amp;#34;dec&amp;#34; phx-target=&amp;#34;&amp;lt;%= @myself %&amp;gt;&amp;#34;&amp;gt;-&amp;lt;/button&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;lt;button phx-click=&amp;#34;inc&amp;#34; phx-target=&amp;#34;&amp;lt;%= @myself %&amp;gt;&amp;#34;&amp;gt;+&amp;lt;/button&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;lt;button phx-click=&amp;#34;clear&amp;#34; phx-target=&amp;#34;&amp;lt;%= @myself %&amp;gt;&amp;#34;&amp;gt;clear&amp;lt;/button&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; handle_event(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inc&amp;#34;&lt;/span&gt;, _, socket) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    {&lt;span style=&#34;color:#e6db74&#34;&gt;:noreply&lt;/span&gt;, update(socket, &lt;span style=&#34;color:#e6db74&#34;&gt;:val&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(&amp;amp;1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))}
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; handle_event(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dec&amp;#34;&lt;/span&gt;, _, socket) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    {&lt;span style=&#34;color:#e6db74&#34;&gt;:noreply&lt;/span&gt;, update(socket, &lt;span style=&#34;color:#e6db74&#34;&gt;:val&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(&amp;amp;1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))}
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; handle_event(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clear&amp;#34;&lt;/span&gt;, _, socket) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# {:noreply, update(socket, :val, 0)} # very slow - why?&lt;/span&gt;
    {&lt;span style=&#34;color:#e6db74&#34;&gt;:noreply&lt;/span&gt;, update(socket, &lt;span style=&#34;color:#e6db74&#34;&gt;:val&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(&amp;amp;1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &amp;amp;1))}
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Notice the button tags are slightly more complex&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;button phx-click=&amp;quot;dec&amp;quot; phx-target=&amp;quot;&amp;lt;%= @myself %&amp;gt;&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;the &lt;strong&gt;@myself&lt;/strong&gt; basically informs the event that the handler is within the component.&lt;/p&gt;
&lt;p&gt;Now update the live template to point at the component using:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;%= live_component @socket, CounterWeb.CounterLive.CounterComponent, id: 0, val: @val %&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Also note we need to pass the @val value into the component using:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;id: 0, val: @val&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;its a little wierd, but we need to pass an &lt;strong&gt;id&lt;/strong&gt; even if there is no ecto backed record.&lt;/p&gt;
&lt;p&gt;Now the template file looks like a normal template file again (focused on formating):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# lib/counter_web/live/counter_live/index.ex&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CounterWeb.CounterLive.Index&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CounterWeb&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:live_view&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;# since we don&amp;#39;t have a db to pull from we initialize on mount&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;@impl&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; mount(_params, _session, socket) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    {&lt;span style=&#34;color:#e6db74&#34;&gt;:ok&lt;/span&gt;, assign(socket, &lt;span style=&#34;color:#e6db74&#34;&gt;:val&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)}
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; render(assigns) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;~L&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;h1&amp;gt;Live Counter&amp;lt;/h1&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;p&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;lt;b&amp;gt;Here is a great complex page&amp;lt;/b&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;%= live_component @socket, CounterWeb.CounterLive.CounterComponent, id: 0, val: @val %&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;p&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;lt;i&amp;gt;even more awesome content&amp;lt;/i&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Lets check that this still works.&lt;/p&gt;
&lt;p&gt;Assuming it still works, I&amp;rsquo;ll make one last git snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;live pages using isolated components - like JS does&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
