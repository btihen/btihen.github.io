<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>auth | btihen</title>
    <link>https://btihen.me/categories/auth/</link>
      <atom:link href="https://btihen.me/categories/auth/index.xml" rel="self" type="application/rss+xml" />
    <description>auth</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2021</copyright><lastBuildDate>Sat, 18 Dec 2021 01:36:55 +0200</lastBuildDate>
    <image>
      <url>https://btihen.me/img/btihen_landing_page.png</url>
      <title>auth</title>
      <link>https://btihen.me/categories/auth/</link>
    </image>
    
    <item>
      <title>Passwordless Authentication with Devise</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_x_passwordless_devise_w_global_ids/</link>
      <pubDate>Sat, 18 Dec 2021 01:36:55 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_x_passwordless_devise_w_global_ids/</guid>
      <description>&lt;p&gt;I wrote a little app for a small non-profit group.  Some of them had severe problems with password management - so this article is how I solved that.&lt;/p&gt;
&lt;p&gt;The easiest way to approach this is to use Rails built-in Secure Global IDs, in this way no database migrations are needed.&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;User enters their email-address in a simple form&lt;/li&gt;
&lt;li&gt;If account is found - a link with a token is generated and email is sent&lt;/li&gt;
&lt;li&gt;User is notified that the link is on its way (even if the account is not found and no email is sent)&lt;/li&gt;
&lt;li&gt;When the user follows the link in the email, a session is generated&lt;/li&gt;
&lt;li&gt;Session valid until the session expires or the user logs out (deleting the session).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Since you are using Devise, I will assume you are using it to also manage accounts.  However to keep the code short I will only show what is needed for this one feature.&lt;/p&gt;
&lt;h3 id=&#34;understanding-globalids&#34;&gt;Understanding GlobalIDs&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s start by understanding how Global IDs work&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We start by grabbing a user object and generating a token.&lt;/li&gt;
&lt;li&gt;Next we use the token to retrieve the same user object.
Code to demostrate the usage:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;bin/rails c
user_orig = User.first
# * the `for: &#39;user_auth&#39;` must matching on the receiving end.
# * the `expires_in: 1.hour` can be set for any length of time (default is 30 days)
sgid = user_orig.to_sgid(expires_in: 1.hour, for: &#39;user_auth&#39;)

# now that we have a secured global id, we can generate a token
auth_token = sgid.to_s # token from the Global ID

# should retrieve the user since the token is still valid and the `for:` string matches
user_retrieved = GlobalID::Locator.locate_signed(auth_token, for: &#39;user_auth&#39;)
# try this token again in an hour+ and it should fail!
user_retrieved.id == user_orig.id

# should be nil, since the `for:` string didn&#39;t match
GlobalID::Locator.locate_signed(auth_token, for: &#39;admins_access&#39;).nil?
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;global-ids-for-login&#34;&gt;Global IDs for login&lt;/h3&gt;
&lt;p&gt;To use a Global ID will need a user&amp;rsquo;s email to send it to them and generate a token points to a url that can verify the token and create a session.   So we would need code that looks something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;email = params[:email]
user = User.find_by(email: email)
sgid = user.to_sgid(expires_in: 1.hour, for: &#39;user_auth&#39;)
auth_url = Rails.application.routes.url_helpers
                .auth_user_session_url(auth_token: sgid.to_s)
UserAuthMailer.send_link(user, auth_url).deliver_now
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course we don&amp;rsquo;t have the &lt;code&gt;auth_user_session_url&lt;/code&gt; route and &lt;code&gt;UserAuthMailer.send_link&lt;/code&gt; yet, but we will build that soon.&lt;/p&gt;
&lt;p&gt;To unpack the token and build a session we will need code that looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;auth_token = params[:auth_token]
user = GlobalID::Locator.locate_signed(auth_token, for: &#39;user_auth&#39;)
if user.present?
  sign_in(user) # a devise method
  flash[:notice] = &amp;quot;Welcome back! #{user.email}&amp;quot;
else
  flash[:alert] = &#39;invalid token&#39;
end
redirect_to root_path
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets figure out where all this code goes to integrate with both Rails and Devise.&lt;/p&gt;
&lt;h3 id=&#34;simple-app&#34;&gt;Simple App&lt;/h3&gt;
&lt;p&gt;This code-repo is posted at: 
&lt;a href=&#34;https://github.com/btihen/ruby_kafi_passwordless_devise_code&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/btihen/ruby_kafi_passwordless_devise_code&lt;/a&gt; (actually this has code to demo two methods)&lt;/p&gt;
&lt;p&gt;Create a Rails Project&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails new passwordless_devise_code
cd passwordless_devise_code

bin/rails db:create
bin/rails g controller Landing index
bin/rails g scaffold Pet name species
bin/rails db:migrate

## config/routes.rb
Rails.application.routes.draw do
  resources :pets
  root to: &amp;quot;landing#index&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The landing page and pets should both be fully available.&lt;/p&gt;
&lt;h3 id=&#34;add-the-devise-gem&#34;&gt;Add the Devise Gem&lt;/h3&gt;
&lt;p&gt;User-Controller to manage users:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle add devise
bundle install
bin/rails generate devise:install
bin/rails generate devise User
# update the migration to match any added features
bin/rails db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;devise--rails-config-for-email-and-urls&#34;&gt;Devise / Rails Config for email and URLs&lt;/h3&gt;
&lt;p&gt;Devise and Rails need a few config tweeks to do what we want.  (the example is for development, but when publishing of course production will need the appropriate configs too)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/environments/development.rb
self.default_url_options = { host: &#39;http://localhost:3000&#39; }
config.action_mailer.default_url_options = { host: &#39;localhost&#39;, port: 3000 }

# app/views/layouts/application.html.erb
&amp;lt;p class=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p class=&amp;quot;alert&amp;quot;&amp;gt;&amp;lt;%= alert %&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;require-authentication-to-access-pets&#34;&gt;Require Authentication to access Pets&lt;/h3&gt;
&lt;p&gt;Now lets activate Devise on all pages, except the landing page.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/application_controller.rb
class ApplicationController &amp;lt; ActionController::Base
  before_action :authenticate_user!
end

# app/controllers/landing_controller.rb
class LandingController &amp;lt; ApplicationController
  skip_before_action :authenticate_user!
  def index
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the landing page should be available, but not the pets page.&lt;/p&gt;
&lt;h3 id=&#34;setup-session-authentication&#34;&gt;Setup Session Authentication&lt;/h3&gt;
&lt;p&gt;We are going to need to generate our own DeviseSession controller and add to it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;rails g devise:controllers users -c=sessions

# app/controllers/users/sessions_controller.rb:
class Users::SessionsController &amp;lt; Devise::SessionsController
  def auth_token
    auth_token = params[:auth_token]
    user = GlobalID::Locator.locate_signed(auth_token, for: &#39;user_auth&#39;)
    # if we get a user then we know the secured global ID checked out
    if user.present?
      sign_in(user)
      flash[:notice] = &amp;quot;Welcome back! #{user.email}&amp;quot;
      redirect_to pets_path
    else
      flash[:alert] = &#39;OOPS - something went wrong.&#39;
      redirect_to root_path
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We need to tell Devise and Rails about our new code in the routes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;#config/routes.rb
Rails.application.routes.draw do
  # tell devise about our sessions controller
  devise_for :users, controllers: { sessions: &#39;users/sessions&#39; }
  devise_scope :user do  # tell rails and devise about our new passwordless authorization route
    get &#39;users/auth_token/:auth_token&#39;, as: :auth_user_session, to: &#39;users/sessions#auth_token&#39;
  end
  resources :pets
  root to: &amp;quot;landing#index&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we try this now we will get a password error, since devise always assumes a user MUST have and has entered a password.&lt;/p&gt;
&lt;h3 id=&#34;allow-devise-to-ignore-passwords&#34;&gt;Allow Devise to ignore passwords&lt;/h3&gt;
&lt;p&gt;It is tricky to remove the passwords, but easy to ignore them with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ApplicationRecord
  before_validation :set_password, on: :create

  # don&#39;t require passwords with user_authenticate!
  def password_required?
    false # because we aren&#39;t using passwords
  end
  private
  # set random Devise passwords to keep devise happy
  def set_password
    tmp_passwd = SecureRandom.alphanumeric(30) # the longer the better (more or less)
    self.password = tmp_passwd
    self.password_confirmation = tmp_passwd
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;testing-our-new-model-and-controller&#34;&gt;Testing our new model and controller&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;bin/rails c

# create new devise user (without a known password)
User.create(email: &amp;quot;tester@test.ch&amp;quot;, name: &amp;quot;Tester&amp;quot;)
user = User.last
sgid = user.to_sgid(expires_in: 1.hour, for: &#39;user_auth&#39;)
auth_url = Rails.application.routes.url_helpers
                .auth_user_session_url(auth_token: sgid.to_s)
#                `auth_user_session_url` - matches our route name we set!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Copy this generated url into your browser and you should end up on the &lt;code&gt;pets&lt;/code&gt; page!&lt;/p&gt;
&lt;h3 id=&#34;emailing-our-auth_token&#34;&gt;Emailing our auth_token&lt;/h3&gt;
&lt;p&gt;Now that we know the Auth Token works, lets learn to email them to the appropriate email&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# create the Emailer code with:
bin/rails g mailer UserAuth send_link

# app/mailers/user_auth_mailer.rb
class UserAuthMailer &amp;lt; ApplicationMailer
  def send_url(user, auth_url)
    @user = user
    @url  = auth_url
    @host = Rails.application.config.hosts.first
    mail to: @user.email, subject: &#39;Sign in into #{@host}&#39;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets create the email contents - let&amp;rsquo;s include a greeting, the sending host and of course the auth_url (we will determine later)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;

# app/views/user_auth_mailer/send_url.html.erb
&amp;lt;p&amp;gt;
  Hi &amp;lt;%= @user.email %&amp;gt;,
  &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
  For access to &amp;lt;%= @host %&amp;gt; &amp;lt;%= link_to &amp;quot;Click here&amp;quot;, @url %&amp;gt;
  &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
  or in plain-text: &amp;lt;%= @url %&amp;gt;
&amp;lt;/p&amp;gt;

# app/views/user_auth_mailer/send_url.text.erb
Hi &amp;lt;%= @user.email %&amp;gt;,

For access to &amp;lt;%= @host %&amp;gt; follow this link:
&amp;lt;%= @url %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;test-the-emailer&#34;&gt;Test the emailer&lt;/h3&gt;
&lt;p&gt;Start mailhog and then:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;bin/rails c
user = User.first
sgid = user.to_sgid(expires_in: 1.hour, for: &#39;user_auth&#39;)
auth_url = Rails.application.routes.url_helpers
                .auth_user_session_url(auth_token: sgid.to_s)
UserAuthMailer.send_link(user, auth_url).deliver_now
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now open the mailhog browser tab (or copy the url from the console) and click on the link and pets should open.&lt;/p&gt;
&lt;h3 id=&#34;now-the-hard-devise-strategy-part&#34;&gt;Now the Hard (Devise Strategy) part&lt;/h3&gt;
&lt;p&gt;Now we have all that we need to update Devise with a new Strategy.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;mkdir app/lib/devise
mkdir app/lib/devise/models
mkdir app/lib/devise/strategies
touch app/lib/devise/models/token_authenticatable.rb
touch app/lib/devise/strategies/token_authenticatable.rb

# app/lib/devise/models/passwordless_authenticatable.rb
require Rails.root.join(&#39;app/lib/devise/strategies/token_authenticatable&#39;)
module Devise
  module Models
    module TokenAuthenticatable
      extend ActiveSupport::Concern
    end
  end
end

# app/lib/devise/strategies/token_authenticatable.rb
require &#39;devise/strategies/authenticatable&#39;
require_relative &#39;../../../mailers/user_mailer&#39;

module Devise::Strategies
  class TokenAuthenticatable &amp;lt; Authenticatable
    def authenticate!
      email = params.dig(:user, :email)
      user = User.find_by(email: email)
      if user.present? &amp;amp;&amp;amp; !user.locked_at? # and other restrictions as (depending on what was configured)
        auth_sgid = user.to_sgid(expires_in: 1.hour, for: &#39;user_auth&#39;)
        auth_token = auth_sgid.to_s
        auth_url = Rails.application.routes.url_helpers
                        .auth_user_session_url(login_token: auth_token)
        UserAuthMailer.send_url(user, auth_url).deliver_later
      end
      fail!(&amp;quot;An email was sent to you with an authorization link.&amp;quot;)s
    end
  end
end
Warden::Strategies.add(:token_authenticatable, Devise::Strategies::TokenAuthenticatable)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; this strategy authenticates that the user is allowed to get a token.  The &lt;code&gt;auth&lt;/code&gt; method in sessions_controller - authenticates the token and creates a session.&lt;/p&gt;
&lt;h3 id=&#34;tell-devise-to-use-the-new-strategy&#34;&gt;Tell Devise to use the new Strategy&lt;/h3&gt;
&lt;p&gt;Now we want to move Devise away from its default &lt;code&gt;database_athenticable&lt;/code&gt; to &lt;code&gt;token_authenticable&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So now we need to add &lt;code&gt;:token_authenticatable&lt;/code&gt; to our User model:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/users.rb
class User &amp;lt; ApplicationRecord
  before_validation :set_password, on: :create

  # at this point validatable is basically only checking that the email is valid
  devise :token_authenticatable, :validatable

  def password_required?
    false # because we aren&#39;t using passwords
  end
  private
  # since we aren&#39;t using passwords
  def set_password
    tmp_passwd = SecureRandom.alphanumeric(20)
    self.password = tmp_passwd
    self.password_confirmation = tmp_passwd
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, this isn&amp;rsquo;t enough - devise must know to load this strategy at boot - we do this with by adding the following to the VERY TOP of Devise initializer file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/devise.rb
Devise.add_module(:token_authenticatable, {
  strategy:   true,
  route:      :session,
  controller: :sessions,
  model:      &#39;app/lib/devise/models/token_authenticatable&#39;
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE: if all is good the devise routes should be there (plus our extra one):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;new_user_session      GET     /users/sign_in(.:format)     users/sessions#new
user_session          POST    /users/sign_in(.:format)     users/sessions#create
destroy_user_session  DELETE  /users/sign_out(.:format)    users/sessions#destroy
auth_user_session     GET     /users/auth_token(.:format)  users/sessions#auth_token
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;devise-views-remove-the-passwords&#34;&gt;Devise Views (remove the passwords)&lt;/h3&gt;
&lt;p&gt;Now we need to change the password in the views so we will need to generate the devise views (and configure devise to use scoped views is probably best):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/devise.rb:
config.scoped_views = true

# generate the devise views (to override them)
bin/rails generate devise:views users
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you will need to remove the password field from all the views.  For this project, I will only show the sign_in page:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/users/sessions/new.html.erb
&amp;lt;h2&amp;gt;Log in&amp;lt;/h2&amp;gt;
&amp;lt;%= form_for(resource, as: resource_name, url: user_session_path) do |f| %&amp;gt;
  &amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
    &amp;lt;%= f.label :email %&amp;gt;&amp;lt;br /&amp;gt;
    &amp;lt;%= f.email_field :email, autofocus: true, autocomplete: &amp;quot;email&amp;quot; %&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;% if devise_mapping.rememberable? %&amp;gt;
    &amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
      &amp;lt;%= f.check_box :remember_me %&amp;gt;
      &amp;lt;%= f.label :remember_me %&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;% end %&amp;gt;
  &amp;lt;div class=&amp;quot;actions&amp;quot;&amp;gt;
    &amp;lt;%= f.submit &amp;quot;Log in&amp;quot; %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;
&amp;lt;%= render &amp;quot;users/shared/links&amp;quot; %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;security-note&#34;&gt;Security Note&lt;/h3&gt;
&lt;p&gt;NOTE: I prefer a short sgid key life-spans and longer session-lifespans (both are configurable)&lt;/p&gt;
&lt;p&gt;By default rails sessions have no expiration (until logout) and sgids are valid for a month. I find both of these settings too long. To change this default behavior, you can set the session length with the setting:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/session_store.rb
Rails.application.config.session_store :cookie_store, expire_after: 14.days
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And you saw in the code where the sgid lifespan is defined.&lt;/p&gt;
&lt;h2 id=&#34;test-the-full-flow&#34;&gt;Test the full flow&lt;/h2&gt;
&lt;p&gt;With all that completed you should be able to test the full workflow!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;start rails with: &lt;code&gt;bin/rails s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;start mailhog with: &lt;code&gt;mailhog&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;go to: &lt;code&gt;http://localhost:3000/user/home&lt;/code&gt; (should get redirected to the below URL)&lt;/li&gt;
&lt;li&gt;go to: &lt;code&gt;http://localhost:3000/user/logins&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;enter the &amp;ldquo;
&lt;a href=&#34;mailto:tester@test.ch&#34;&gt;tester@test.ch&lt;/a&gt;&amp;rdquo; email&lt;/li&gt;
&lt;li&gt;Check mailhog for the link &lt;code&gt;http://localhost:8025/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;click the link you should now be on &lt;code&gt;http://localhost:3000/user/home&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Rails GlobalID&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The nice thing about these is that the auto expire - simplifying the code a lot.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/rails/globalid&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/rails/globalid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.magicalruby.com/implementing-magic-links-in-rails/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.magicalruby.com/implementing-magic-links-in-rails/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Token using SecureRandom&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With these you need to create your own expiration and lookup system (more code add a migration), but will work with any framework.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(using uuids) - 
&lt;a href=&#34;https://oozou.com/blog/how-to-implement-passwordless-authentication-in-ruby-on-rails-154&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://oozou.com/blog/how-to-implement-passwordless-authentication-in-ruby-on-rails-154&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(using SecureRandom) - 
&lt;a href=&#34;https://abevoelker.com/skipping-the-database-with-stateless-tokens-a-hidden-rails-gem-and-a-useful-web-technique/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://abevoelker.com/skipping-the-database-with-stateless-tokens-a-hidden-rails-gem-and-a-useful-web-technique/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Devise Options&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Devise Plugin - 
&lt;a href=&#34;https://github.com/abevoelker/devise-passwordless&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/abevoelker/devise-passwordless&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Do it Yourself Devise - 
&lt;a href=&#34;https://dev.to/matiascarpintini/magic-links-with-ruby-on-rails-and-devise-4e3o&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dev.to/matiascarpintini/magic-links-with-ruby-on-rails-and-devise-4e3o&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Do it yourself Devise - 
&lt;a href=&#34;https://www.mintbit.com/blog/passwordless-authentication-in-ruby-on-rails-with-devise&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.mintbit.com/blog/passwordless-authentication-in-ruby-on-rails-with-devise&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Other Options&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;passwordless gem - 
&lt;a href=&#34;https://github.com/mikker/passwordless#token-and-session-expiry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/mikker/passwordless#token-and-session-expiry&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;magic-link gem - 
&lt;a href=&#34;https://github.com/dvanderbeek/magic-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/dvanderbeek/magic-link&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using Sorcery - 
&lt;a href=&#34;https://fullstackheroes.com/rails/sorcery-passwordless-authentication/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://fullstackheroes.com/rails/sorcery-passwordless-authentication/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using Sourcery - 
&lt;a href=&#34;https://www.sitepoint.com/magical-authentication-sorcery/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.sitepoint.com/magical-authentication-sorcery/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(using JWTs) - 
&lt;a href=&#34;https://blog.kiprosh.com/implement-passwordless-authentication-via-magic-link-in-rails-api/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.kiprosh.com/implement-passwordless-authentication-via-magic-link-in-rails-api/&lt;/a&gt;
&lt;strong&gt;Passwordless Security Overview&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://abevoelker.com/skipping-the-database-with-stateless-tokens-a-hidden-rails-gem-and-a-useful-web-technique/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://abevoelker.com/skipping-the-database-with-stateless-tokens-a-hidden-rails-gem-and-a-useful-web-technique/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Sessions&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://api.rubyonrails.org/classes/ActionDispatch/Session/CookieStore.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://api.rubyonrails.org/classes/ActionDispatch/Session/CookieStore.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://blog.saeloun.com/2019/09/12/rails-6-adds-dig-to-actiondispatch-request-session.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.saeloun.com/2019/09/12/rails-6-adds-dig-to-actiondispatch-request-session.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Rails 6.x&#43; Auth with MagicLinks using Rails Signed GlobalIDs</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_x_auth_w_magic_links_using_signed_global_id/</link>
      <pubDate>Sun, 19 Sep 2021 01:36:55 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_x_auth_w_magic_links_using_signed_global_id/</guid>
      <description>&lt;p&gt;Passwordless Authentication is very convenient for users and generally as secure as passwords (a good security authentication discussion can be found at: ).&lt;/p&gt;
&lt;p&gt;A good approach is to make a short-lived link, and then transfer the security to a session.&lt;/p&gt;
&lt;p&gt;I found that there seems to be three simple approaches:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Do it yourself: with a Stored-Token (with an expiration date-time)&lt;/li&gt;
&lt;li&gt;Do it yourself: with a Signed-GlobalID from Rails (self-times out &amp;amp; no stored tokens)&lt;/li&gt;
&lt;li&gt;Other Options: other Gems for Devise, Sorcery, or independent gems&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;User enters their email-address in a simple form&lt;/li&gt;
&lt;li&gt;If account is found - a link with a token is generated and email is sent&lt;/li&gt;
&lt;li&gt;User is notified that the link is on its way (even if the account is not found and no email is sent)&lt;/li&gt;
&lt;li&gt;When the user follows the link in the email, a session is generated&lt;/li&gt;
&lt;li&gt;Session valid until the session expires or the user logs out (deleting the session).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; User accounts are assumed to be previously created, and verified.  If you need a full set of features - then your best option is probably to use devise, sorcery or authenticate and use an extension or build your own extension to one of these libraries.  Either way, this article will clarify the basics of passwordless authentication.&lt;/p&gt;
&lt;h3 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h3&gt;
&lt;p&gt;Code Repo is posted at: 
&lt;a href=&#34;https://github.com/btihen/magic_sgid&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/btihen/magic_sgid&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Create a Rails Project&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails new magic_id
cd magic_id
git add .
git commit -m &amp;quot;initial commit on creation&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;User-Controller to manage users:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:create
bin/rails g scaffold User name:string email:string
bin/rails db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets start Rails&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Go to: &lt;code&gt;http://localhost:3000/users&lt;/code&gt; and create a few users - feel free to make the GUI nicer!&lt;/p&gt;
&lt;p&gt;Assuming all is good:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit &amp;quot;user management scaffold&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-a-landing-page&#34;&gt;Create a Landing Page&lt;/h3&gt;
&lt;p&gt;we need a landing / root page to send users when they are not logged in:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails g controller landing index
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now lets point the root page to that too - make the routes page look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/routes.rb
Rails.application.routes.draw do
  get &#39;/landing&#39;, to: &#39;landing#index&#39;, as: :landing
  root to: &amp;quot;landing#index&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I will also remove: &lt;code&gt;app/helpers/landing_helper.rb&lt;/code&gt; with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rm app/helpers/landing_helper.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets check all is well with the routes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails routes | grep landing
# should show
  landing GET /landing(:format) landing#index
     root GET /                 landing#index
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(quite likely it will be all spread out)&lt;/p&gt;
&lt;p&gt;Now the following pages should be available:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http://localhost:3000/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://localhost:3000/landing&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;again feel free to make them look nice.&lt;/p&gt;
&lt;p&gt;assuming all works well:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;create landing page and landing &amp;amp; root route&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-a-user-application-controller-restrict-access&#34;&gt;Create a User Application Controller (restrict access)&lt;/h3&gt;
&lt;p&gt;This will allow us to control access to all urls in the /users paths within our app&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir app/controllers/users
touch app/controllers/users/application_controller.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The application controller ensures only authenticated users (with a session) can access pages in the &lt;code&gt;users&lt;/code&gt; area:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/users/application_controller.rb
class Users::ApplicationController &amp;lt; ApplicationController
  before_action :users_only

  def current_user(user_id = session[:user_id])
    # `try` and `find_by` avoid raising an exception w/o a session
    @current_user ||= User.find_by(id: user_id)
  end

  private

  # code to ensure only logged in users have access to users pages
  def users_only
    # send person to a safe page if not logged in
    if current_user.blank?
      # send to login page to get an access link
      redirect_back(fallback_location: landing_path,
                    :alert =&amp;gt; &amp;quot;Login Required&amp;quot;)
      # once the below page is created we can redirect to here instead
      # redirect_back(fallback_location: new_users_login_path,
      #               :alert =&amp;gt; &amp;quot;Login Required&amp;quot;)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE: if you want all pages protected then put this code in:
&lt;code&gt;app/controllers/application_controller.rb&lt;/code&gt;
and adjust the routes (remove the namespace)!&lt;/p&gt;
&lt;h3 id=&#34;restricted-user-home-page&#34;&gt;Restricted User Home Page&lt;/h3&gt;
&lt;p&gt;we need a landing / root page to send users when they are not logged in:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails g controller users/landing index
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now lets point the root page to that too - make the routes page look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/routes.rb
Rails.application.routes.draw do
  namespace :users do
    get &#39;/&#39;,                as: &#39;root&#39;,         to: &#39;home#index&#39;
    get &#39;/home&#39;,            as: &#39;home&#39;,         to: &#39;home#index&#39;
  end
  get &#39;/landing&#39;, to: &#39;landing#index&#39;, as: :landing
  root to: &amp;quot;landing#index&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Update the controller to use the Users::ApplicationController:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/users/home_controller.rb
class Users::HomeController &amp;lt; Users::ApplicationController
  def index
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I will also remove: &lt;code&gt;app/helpers/users/home_helper.rb&lt;/code&gt; with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rm app/helpers/users/home_helper.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets check all is well with the routes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails routes | grep user
# should show
  users_home GET /users/home(:format) home#index
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(quite likely it will be all spread out)&lt;/p&gt;
&lt;p&gt;Now the following pages should NOT be available:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http://localhost:3000/users&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://localhost:3000/users/home&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and we should be redirected to the landing page.  If you access the home page - then probably the first line is wrong it should be:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Users::HomeController &amp;lt; Users::ApplicationController&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;assuming all works well:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;create restricted user home page&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;create-an-session-authorization-controller&#34;&gt;Create an Session Authorization Controller&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;touch app/controllers/users/sessions_controller.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Users::SessionsController &amp;lt; Users::ApplicationController
  # before_action :users_only, only: :destroy
  skip_before_action :users_only, only: :create

  def create
    sgid_token = params[:token].to_s
    user = GlobalID::Locator.locate_signed(sgid_token, for: &#39;user_access&#39;)
    if user
      # create the session id for current_user to access
      session[:user_id] = user.id
      redirect_to(users_home_path, notice: &amp;quot;Welcome back #{user.name}&amp;quot;)
    else
      flash[:alert] = &#39;Oops - you need a new login link&#39;
      redirect_to(landing_path)
      # later when created we will redirect to login access link page
      # redirect_to(new_users_login)
    end
  end

  # allow a user to logout / destroy session if desired
  def destroy
    user = current_user
    if user
      session[:user_id] = nil
      flash[:notice] = &amp;quot;logout successful&amp;quot;
    else
      falsh[:alert] = &amp;quot;Oops, there was a problem&amp;quot;
    end
    redirect_to(landing_path)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add to routes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/routes.rb
Rails.application.routes.draw do
  namespace :users do
    get &#39;/&#39;,                as: &#39;root&#39;,         to: &#39;home#index&#39;
    get &#39;/home&#39;,            as: &#39;home&#39;,         to: &#39;home#index&#39;
    # use get to create since I don&#39;t think a text url can create a post
    get &#39;/sessions/:token&#39;, as: &#39;session_create&#39;, to: &#39;sessions#create&#39;
    # allow logout / destroy the session
    resources :sessions,    only: [:destroy]
  end
  get &#39;/landing&#39;, to: &#39;landing#index&#39;, as: :landing
  root to: &amp;quot;landing#index&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To test this go to rails console:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;bin/rails c
# create our own token
user = User.first
global_id = User.find(user.id).to_sgid(expires_in: 1.hour, for: &#39;user_access&#39;)
access_token = global_id.to_s

# check that this global_id works (we should get the same user)
GlobalID::Locator.locate_signed(access_token, for: &#39;user_access&#39;)

# add url helpers to console
include ActionView::Helpers
include ActionView::Helpers::UrlHelper
# generate the URL for the session
Rails.application.routes.url_helpers.users_session_create_url(token: global_id.to_s, host: &#39;locahost:3000&#39;)
# should get something like:
# &amp;quot;http://locahost:3000/users/sessions/BAh7CEkiCGdpZAY6BkVUSSItZ2lkOi8vbWFnaWMtbGlua3MvVXNlci8xP2V4cGlyZXNfaW49MzYwMAY7AFRJIgxwdXJwb3NlBjsAVEkiEHVzZXJfYWNjZXNzBjsAVEkiD2V4cGlyZXNfYXQGOwBUSSIdMjAyMS0wOS0xOVQxNTozNzo0MS4wNjdaBjsAVA==--c948a0a5ccbae391c7ab9c808677fe41da4cbc28&amp;quot;

# copy this url into the browser
# now we be on: `http://localhost:3000/user/` &amp;amp; `http://localhost:3000/user/home`

# if you try again in an hour it should not work!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; by default rails sessions have no expiration, thus are deleted when the browser closes. To change this default behavior, you can set the session length with the setting:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/session_store.rb
Rails.application.config.session_store :cookie_store, expire_after: 14.days
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming all works:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;session controller gives access to users_home&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;access-link-generation&#34;&gt;Access-Link Generation&lt;/h3&gt;
&lt;p&gt;We will need to allow the user to request an access-link.  We will do this with (we won&amp;rsquo;t be generating any models just a controller and a submission form - scaffold_controller does this for us):&lt;/p&gt;
&lt;h4 id=&#34;create-a-mailer-to-send-access-links&#34;&gt;Create a Mailer to send Access-Links&lt;/h4&gt;
&lt;p&gt;We need a way to send the login link - so we will create a login mailer with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails generate mailer Login send_link
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Configure our emailer for our needs with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class LoginMailer &amp;lt; ApplicationMailer
  def send_link(user, login_url)
    @user = user
    @login_url  = login_url
    host = Rails.application.config.hosts.first

    mail(to: @user.email, subject: &amp;quot;Access-Link for #{host}&amp;quot;)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And of course set up the views that contain the contents of the email:
The HTML Version&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/login_mailer/send_link.html.erb
&amp;lt;h1&amp;gt;Hi &amp;lt;%= @user.name %&amp;gt;,&amp;lt;/h1&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;&amp;lt;%= @login_url %&amp;gt;&amp;quot;&amp;gt;Access-Link for &amp;lt;%= @host %&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt; &amp;lt;%= @login_url %&amp;gt; &amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;Link is valid for about an hour from &amp;lt;%= DateTime.now %&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The text version:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/login_mailer/send_link.text.erb
Hi &amp;lt;%= @user.name %&amp;gt;,

Access-Link for &amp;lt;%= @host %&amp;gt; is:

&amp;lt;%= @login_url %&amp;gt;

Link is valid for about an hour from &amp;lt;%= DateTime.now %&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;setup-mailhog-optional&#34;&gt;Setup Mailhog (OPTIONAL)&lt;/h4&gt;
&lt;p&gt;This is optional - technical testing can be done from the log file - but to see what the email formatting looks like this is VERY HELPFUL.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install mailhog
mailhog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Configure Rails to send emails to port 1025 in development (where mailhog listens)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/environments/development.rb
Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.
  # ...
  # mailhog config
  config.action_mailer.perform_deliveries = true
  config.action_mailer.smtp_settings = { address: &#39;localhost&#39;, port: 1025 }
  # ...
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now open - to view:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;open localhost:8025
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;controller&#34;&gt;Controller&lt;/h4&gt;
&lt;p&gt;Now lets create a user login controller:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;touch app/controllers/users/logins_controller.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add the contents of the controller:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/users/logins_controller.rb
class Users::LoginsController &amp;lt; Users::ApplicationController
skip_before_action :users_only

  def new
    user = User.new
    render :new, locals: {user: user}
  end

  def create
    email = user_params[:email]
    ip_address = request.remote_ip
    # the participant might already exist in our db or possimagic_link_url = participants_session_auth_url(token: participant.login_token)bly a new participant
    user = User.find_by(email: email)

    if user
      # create a signed expiring Rails Global ID - this makes LONG tokens, but browswers can handle it
      # all browsers should handle up to 2000 characters.
      # https://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers
      # https://www.geeksforgeeks.org/maximum-length-of-a-url-in-different-browsers/
      global_id = user.to_sgid(expires_in: 1.hour, for: &#39;user_access&#39;)
      access_url = users_session_create_url(token: global_id.to_s)
      LoginMailer.send_link(user, access_url).deliver_later
    else
      # if user isn&#39;t found then grab a user and compute the global_id and url (but don&#39;t send an email)
      # in order to make the time of both paths similar - so people can&#39;t find user emails checking the response times
      # see: https://abevoelker.com/skipping-the-database-with-stateless-tokens-a-hidden-rails-gem-and-a-useful-web-technique/

      global_id = User.first.to_sgid(expires_in: 1.hour, for: &#39;user_access&#39;)
      access_url = user_auth_url(token: global_id.to_s)
    end

    # uncomment to add noise to further make email fishing difficult to time
    # mini_wait = Random.new.rand(10..20) / 1000
    # wait(mini_wait)

    # true or not we state we have sent an access link and redirect to the landing page
    # also prevent email fishing by always returning the same answer
    redirect_to(landing_path, notice: &amp;quot;Access-Link has been sent&amp;quot;)
  end

  private

    # Only allow a list of trusted parameters through.
    def user_params
      params.require(:user).permit(:email)
    end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You can let the GlobalID be valid for however long you want (in hours), but since email isn&amp;rsquo;t very secure, it seems wise to keep this short lived.  The default time is 30.days&lt;/p&gt;
&lt;p&gt;We need to add the route to the users login_controller with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/routes.rb
Rails.application.routes.draw do
  # restricted area (protected by user login - Users::ApplicationController)
  namespace :users do
    get &#39;/&#39;,                as: &#39;root&#39;,         to: &#39;home#index&#39;
    get &#39;/home&#39;,            as: &#39;home&#39;,         to: &#39;home#index&#39;
    # use get to create since I don&#39;t think a text url can create a post
    get &#39;/sessions/:token&#39;, as: &#39;session_create&#39;, to: &#39;sessions#create&#39;
    # allow logout / destroy the session
    resources :sessions,    only: [:destroy]
    # login (generates link and emails to the user)
    resources :logins,      only: [:new, :create]
  end
  get &#39;/landing&#39;, to: &#39;landing#index&#39;, as: :landing
  root to: &amp;quot;landing#index&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now check the routes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails routes | grep users
# should return
     users_logins POST  /users/logins(.:format)     users/logins#create
  new_users_login GET   /users/logins/new(.:format) users/logins#new
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;email--access-link-form&#34;&gt;Email / Access Link form&lt;/h4&gt;
&lt;p&gt;Login email form:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir app/views/users/logins
touch app/views/users/logins/new.html.erb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note I often use Bulma - so here is how I like to format my forms (without Bulma installed the form will be ugly).
Also note, I dislike using instance variables in my form - so this is why the form looks a little extra complicated.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/users/logins/new.html.erb
&amp;lt;%= form_for(user, local: true,
             url: users_logins_path,   # NEW MUST BE PLURAL for POST
             id: &amp;quot;user-login-form&amp;quot;, class: &amp;quot;user&amp;quot; ) do |form|  %&amp;gt;

  &amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
    &amp;lt;label class=&amp;quot;label&amp;quot;&amp;gt;Email for Access-Link&amp;lt;/label&amp;gt;
    &amp;lt;div class=&amp;quot;control&amp;quot;&amp;gt;
      &amp;lt;%= form.email_field :email,
                            placeholder: &amp;quot;Email&amp;quot;,
                            class: &#39;input&#39; %&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;p class=&amp;quot;help&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;control&amp;quot;&amp;gt;
    &amp;lt;%= form.submit(&amp;quot;Get Access-Link&amp;quot;, class: &amp;quot;button is-success&amp;quot;) %&amp;gt;
  &amp;lt;/div&amp;gt;

&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;test-the-full-flow&#34;&gt;Test the full flow&lt;/h2&gt;
&lt;p&gt;using the command line create some users:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;bin/rails c
User.create(email: &amp;quot;tester@test.ch&amp;quot;, name: &amp;quot;Tester&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;start rails with: &lt;code&gt;bin/rails s&lt;/code&gt;
start mailhog with: &lt;code&gt;mailhog&lt;/code&gt;
go to: &lt;code&gt;http://localhost:3000/user/home&lt;/code&gt; (should get redirected to the below URL)
go to: &lt;code&gt;http://localhost:3000/user/logins&lt;/code&gt;
enter the &amp;ldquo;
&lt;a href=&#34;mailto:tester@test.ch&#34;&gt;tester@test.ch&lt;/a&gt;&amp;rdquo; email
Check mailhog for the link &lt;code&gt;http://localhost:8025/&lt;/code&gt;
Click the link you should now be on &lt;code&gt;http://localhost:3000/user/home&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Assuming everything works:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;working magic links using Rails Global ID&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; obviously automated tests are important (both spec and feature tests).&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Rails GlobalID&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The nice thing about these is that the auto expire - simplifying the code a lot.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/rails/globalid&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/rails/globalid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.magicalruby.com/implementing-magic-links-in-rails/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.magicalruby.com/implementing-magic-links-in-rails/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Token using SecureRandom&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With these you need to create your own expiration and lookup system (more code add a migration), but will work with any framework.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(using uuids) - 
&lt;a href=&#34;https://oozou.com/blog/how-to-implement-passwordless-authentication-in-ruby-on-rails-154&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://oozou.com/blog/how-to-implement-passwordless-authentication-in-ruby-on-rails-154&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(using SecureRandom) - 
&lt;a href=&#34;https://abevoelker.com/skipping-the-database-with-stateless-tokens-a-hidden-rails-gem-and-a-useful-web-technique/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://abevoelker.com/skipping-the-database-with-stateless-tokens-a-hidden-rails-gem-and-a-useful-web-technique/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Devise Options&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Devise Plugin - 
&lt;a href=&#34;https://github.com/abevoelker/devise-passwordless&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/abevoelker/devise-passwordless&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Do it Yourself Devise - 
&lt;a href=&#34;https://dev.to/matiascarpintini/magic-links-with-ruby-on-rails-and-devise-4e3o&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dev.to/matiascarpintini/magic-links-with-ruby-on-rails-and-devise-4e3o&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Do it yourself Devise - 
&lt;a href=&#34;https://www.mintbit.com/blog/passwordless-authentication-in-ruby-on-rails-with-devise&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.mintbit.com/blog/passwordless-authentication-in-ruby-on-rails-with-devise&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Other Options&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;passwordless gem - 
&lt;a href=&#34;https://github.com/mikker/passwordless#token-and-session-expiry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/mikker/passwordless#token-and-session-expiry&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;magic-link gem - 
&lt;a href=&#34;https://github.com/dvanderbeek/magic-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/dvanderbeek/magic-link&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using Sorcery - 
&lt;a href=&#34;https://fullstackheroes.com/rails/sorcery-passwordless-authentication/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://fullstackheroes.com/rails/sorcery-passwordless-authentication/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using Sourcery - 
&lt;a href=&#34;https://www.sitepoint.com/magical-authentication-sorcery/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.sitepoint.com/magical-authentication-sorcery/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(using JWTs) - 
&lt;a href=&#34;https://blog.kiprosh.com/implement-passwordless-authentication-via-magic-link-in-rails-api/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.kiprosh.com/implement-passwordless-authentication-via-magic-link-in-rails-api/&lt;/a&gt;
&lt;strong&gt;Passwordless Security Overview&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://abevoelker.com/skipping-the-database-with-stateless-tokens-a-hidden-rails-gem-and-a-useful-web-technique/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://abevoelker.com/skipping-the-database-with-stateless-tokens-a-hidden-rails-gem-and-a-useful-web-technique/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Sessions&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://api.rubyonrails.org/classes/ActionDispatch/Session/CookieStore.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://api.rubyonrails.org/classes/ActionDispatch/Session/CookieStore.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://blog.saeloun.com/2019/09/12/rails-6-adds-dig-to-actiondispatch-request-session.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.saeloun.com/2019/09/12/rails-6-adds-dig-to-actiondispatch-request-session.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
