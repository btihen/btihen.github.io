<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rails 6 | btihen</title>
    <link>https://btihen.me/tags/rails-6/</link>
      <atom:link href="https://btihen.me/tags/rails-6/index.xml" rel="self" type="application/rss+xml" />
    <description>Rails 6</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2022</copyright><lastBuildDate>Thu, 12 Aug 2021 01:11:22 +0200</lastBuildDate>
    <image>
      <url>https://btihen.me/img/btihen_landing_page.png</url>
      <title>Rails 6</title>
      <link>https://btihen.me/tags/rails-6/</link>
    </image>
    
    <item>
      <title>Squished String Type (Rails 5/6)</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_x_squished_strings_type/</link>
      <pubDate>Thu, 12 Aug 2021 01:11:22 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_x_squished_strings_type/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://discuss.rubyonrails.org/t/database-fields-are-polluted-with-both-nil-and-empty-values-when-submitting-forms/74877/3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://discuss.rubyonrails.org/t/database-fields-are-polluted-with-both-nil-and-empty-values-when-submitting-forms/74877/3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://bitbucket.org/tiu/rails-application-template/src/master/rails/lib/types/type/string.rb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://bitbucket.org/tiu/rails-application-template/src/master/rails/lib/types/type/string.rb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/3879680/how-can-i-make-rails-3-localize-my-date-formats/45743846#45743846&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://stackoverflow.com/questions/3879680/how-can-i-make-rails-3-localize-my-date-formats/45743846#45743846&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lets start by making a sample project (without tests -T):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails new task_cards -T
cd task_cards
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will use a generator to create the structures we need and just focus clean inputs.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails g scaffold Card title:string description:text
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets make our attribute types that cleanup string inputs (we will put them in the a new folder we will call &lt;code&gt;types&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir app/types
touch app/types/string_stripped_type.rb
touch app/types/text_trimmed_type.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To make a string type that removes leading, trailing and duplicate spaces we will use the squish method.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/types/string_squished_type.rb
class StringSquishedType &amp;lt; ActiveRecord::Type::String
  # cast the incomming value for Rails
  def cast(value)
    value.to_s.squish
  end

  # convert the data to what the Database expects
  def serialize(value)
    value.to_s
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since text may want to have newlines and other &lt;code&gt;double&lt;/code&gt; spaces we will only remove (&lt;code&gt;trim&lt;/code&gt;) leading and trailing spaces:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/types/text_trimmed_type.rb
class TextTrimmedType &amp;lt; ActiveRecord::Type::String
  # cast the incomming value for Rails
  def cast(value)
    value.to_s.strip
  end

  # convert the data to what the Database expects
  def serialize(value)
    value.to_s
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To simplify our code we will define short names for our new types &amp;ndash; in the &lt;code&gt;config/initializers&lt;/code&gt; folder we will make a new file called &lt;code&gt;types.rb&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;touch config/initializers/attribute_types.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To make a string type that removes leading, trailing and duplicate spaces we will use the squish method.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/attribute_types.rb
ActiveRecord::Type.register(:string_stripped, StringSquishedType)
ActiveRecord::Type.register(:text_trimmed,    TextTrimmedType)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets add our new virutual data types that we will use in our forms to our model:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/card.rb
class Card &amp;lt; ApplicationRecord
  attribute :title_in,       :string_squished
  # attribute :title_in,       StringSquishedType.new
  attribute :description_in. :text_trimmed,   default: &#39;--&#39;
  # attribute :description_in, TextTrimmedType.new, default: &#39;--&#39;

  validate :title_in, presence: true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;a href=&#34;https://bitbucket.org/tiu/rails-application-template/src/master/rails/lib/types/type/string.rb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://bitbucket.org/tiu/rails-application-template/src/master/rails/lib/types/type/string.rb&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# lib/types/type/string.rb
# frozen_string_literal: true

module Type
  # * +squish+ if true, squish value when casting
  # * +strip+ if true, strip value when casting
  # * +nilify_blank+ if true, set blank value to nil when casting
  class String &amp;lt; ActiveModel::Type::String

    def initialize(precision: nil, limit: nil, scale: nil, strip: false, squish: false, nilify_blank: false)
      @strip = strip
      @squish = squish
      @nilify_blank = nilify_blank
      super(precision: precision, limit: limit, scale: scale)
    end

    def serialize(value)
      super(value)
      apply_options(value)
    end

    private

      def cast_value(value)
        value = super(value)
        apply_options(value)
      end

      def apply_options(value)
        return unless value

        if @squish
          value = value.squish
        elsif @strip
          value = value.strip
        end

        value = nil if @nilify_blank &amp;amp;&amp;amp; value.blank?

        value
      end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;a href=&#34;https://bitbucket.org/tiu/rails-application-template/src/master/rails/lib/types/type/editor_text.rb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://bitbucket.org/tiu/rails-application-template/src/master/rails/lib/types/type/editor_text.rb&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# lib/types/type/editor_text.rb
# frozen_string_literal: true

# Strips out empty spaces that are default on Ckeditor 5
module Type
  class EditorText &amp;lt; ActiveModel::Type::String

    EMPTY_P_TAG_REGEX = %r{\A(&amp;lt;p[^&amp;gt;]*&amp;gt;(\s|&amp;amp;nbsp;|&amp;lt;/?\s?br\s?/?&amp;gt;)*&amp;lt;/?p&amp;gt;)\1*\z}.freeze

    def serialize(value)
      super(value)
      apply_options(value)
    end

    private

      def cast_value(value)
        value = super(value)
        apply_options(value)
      end

      def apply_options(value)
        return if value.nil?

        remove_empty_p_tags(value)
      end

      def remove_empty_p_tags(value)
        value.match?(EMPTY_P_TAG_REGEX) ? nil : value
      end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;a href=&#34;https://bitbucket.org/tiu/rails-application-template/src/master/rails/lib/types/type/token.rb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://bitbucket.org/tiu/rails-application-template/src/master/rails/lib/types/type/token.rb&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# lib/types/type/token.rb
# frozen_string_literal: true

# Represents a user-entered code, like a coupon code, discount code or confirmation number.
# Avoids ambiguous characters that could cause user confusion or apprehension.
module Type
  class Token &amp;lt; ActiveRecord::Type::String

    AMBIGUITIES = [
      %w[B 8],
      %w[D O 0],
      %w[G 6],
      %w[I 1 l],
      %w[S 5],
      %w[Z 2]
    ].flatten.freeze
    CHARACTERS = ([*(&#39;A&#39;..&#39;Z&#39;), *(&#39;0&#39;..&#39;9&#39;)] - AMBIGUITIES).freeze
    LENGTH = 6

    def initialize(precision: nil, limit: nil, scale: nil, length: LENGTH)
      @length = length
      super(precision: precision, limit: limit, scale: scale)
    end

    private

      def cast_value(value)
        if value == :random
          random_number
        elsif value.is_a? ::String
          value = value.upcase
          value if value.chars.all? { |c| c.in? CHARACTERS }
        end
      end

      def random_number
        Array.new(@length) { CHARACTERS.sample }.join
      end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# lib/types/localized_date.rb
# frozen_string_literal: true

# Convert localized date string to Date object. This takes I18n formatted date strings
# (e.g. in form text inputs) and casts them back to Date objects when writing the attribute.
#
# See ActiveModel::Type::Date for original, which attempts to parse the Date string, causing
# the months and days swap if input is in &amp;quot;%m/%d/%Y&amp;quot; format.
#
class LocalizedDate &amp;lt; ActiveRecord::Type::Date

  # Full specifier is: %&amp;lt;flag&amp;gt;&amp;lt;width&amp;gt;&amp;lt;modifier&amp;gt;&amp;lt;conversion&amp;gt;
  FORMAT_STRING_EXPR = /(?&amp;lt;=%)(?&amp;lt;flag&amp;gt;[-_0^#])?(?&amp;lt;width&amp;gt;\d)?/.freeze

  def initialize(format: default_format)
    @format_string = safe_format_string(format)
  end

  # Deserialize db value using Date::DATE_FORMATS[:db]
  def deserialize(value)
    cast_value(value, format: Date::DATE_FORMATS[:db]) unless value.nil?
  end

  private

    def cast_value(value, format: @format_string)
      if value.is_a?(::String)
        return if value.empty?

        Date.strptime(value, format)
      elsif value.respond_to?(:to_date)
        value.to_date
      else
        value
      end
    rescue ArgumentError
      nil
    end

    def default_format
      I18n.translate(&amp;quot;date.formats.default&amp;quot;)
    end

    # Date.strptime doesn&#39;t support flags and width, so remove them.
    # See https://ruby-doc.org/stdlib/libdoc/date/rdoc/Date.html#method-c-strptime
    def safe_format_string(value)
      value.gsub FORMAT_STRING_EXPR, &#39;&#39;
    end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/types.rb
# frozen_string_literal: true

# NOTE: when using custom types with Postgres arrays they must be registered (here) to work.
# When registered, they become a subtype of ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Array
# which handles the array bits before invoking your custom type.
#
#     attribute :links, :link, array: true          # this works, becoming an array subtype
#     attribute :links, Type::Link.new, array: true # this acts like a non-array type
#
# Next, confirm the type with `MyModel.type_for_attribute(:links)`
Dir[Rails.root.join(&#39;lib/types/**/*.rb&#39;)].sort.each { |f| require f }

ActiveRecord::Type.register(:localized_date, LocalizedDate)
ActiveRecord::Type.register(:string, Type::String, override: true)
ActiveRecord::Type.register(:token, Type::Token)

ActiveModel::Type.register(:localized_date, LocalizedDate)
ActiveModel::Type.register(:string, Type::String, override: true)
ActiveModel::Type.register(:token, Type::Token)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/3879680/how-can-i-make-rails-3-localize-my-date-formats/45743846#45743846&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://stackoverflow.com/questions/3879680/how-can-i-make-rails-3-localize-my-date-formats/45743846#45743846&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How Rails Transforms Attributes&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a quick tour of the Rails Attributes API. You can skip this section, but then you won&amp;rsquo;t know how this stuff works. What fun is that?&lt;/p&gt;
&lt;p&gt;Understanding how Rails handles user input for your attribute will let us override only one method instead of making a more complete custom type. It will also help you write better code, since rails&#39; code is pretty good.&lt;/p&gt;
&lt;p&gt;Since you didn&amp;rsquo;t mention a model, I&amp;rsquo;ll assume you have a Post with a :publish_date attribute (some would prefer the name :published_on, but I digress).
What is your type?&lt;/p&gt;
&lt;p&gt;Find out what type :publish_date is. We don&amp;rsquo;t care that it is an instance of Date, we need to know what type_for_attribute returns:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This method is the only valid source of information for anything related to the types of a model&#39;s attributes.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;$ rails c
&amp;gt; post = Post.where.not(publish_date: nil).first
&amp;gt; post.publish_date.class
=&amp;gt; Date
&amp;gt; Post.type_for_attribute(&#39;publish_date&#39;).type
=&amp;gt; :date
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we know the &lt;code&gt;:publish_date&lt;/code&gt; attribute is a &lt;code&gt;:date&lt;/code&gt; type. This is defined by &lt;code&gt;ActiveRecord::Type::Date&lt;/code&gt;, which extends &lt;code&gt;ActiveModel::Type::Date&lt;/code&gt; (ActiveRecord Types are here: 
&lt;a href=&#34;https://api.rubyonrails.org/classes/ActiveRecord/Type.html%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://api.rubyonrails.org/classes/ActiveRecord/Type.html)&lt;/a&gt;, which extends &lt;code&gt;ActiveModel::Type::Value&lt;/code&gt; (ActiveModel Types are here: 
&lt;a href=&#34;https://api.rubyonrails.org/classes/ActiveModel/Type.htmlValue.html%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://api.rubyonrails.org/classes/ActiveModel/Type.htmlValue.html)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;How is user input transformed by &lt;code&gt;ActiveRecord::Type::Date&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;So, when you set &lt;code&gt;:publish_date&lt;/code&gt;, the value is passed to cast, which calls cast_value. Since form input is a String, it will try a &lt;code&gt;fast_string_to_date&lt;/code&gt; then &lt;code&gt;fallback_string_to_date&lt;/code&gt; which uses &lt;code&gt;Date._parse&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re getting lost, don&amp;rsquo;t worry. You don&amp;rsquo;t need to understand rails&#39; code to customize an attribute.
Defining a Custom Type&lt;/p&gt;
&lt;p&gt;Now that we understand how Rails uses the attributes API, we can easily make our own. Just create a custom type to override cast_value to expect localized date strings:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class LocalizedDate &amp;lt; ActiveRecord::Type::Date

  private
    # Convert localized date string to Date object. This takes I18n formatted date strings
    # from user input and casts them back to Date objects.
    def cast_value(value)
      if value.is_a?(::String)
        return if value.empty?
        format = I18n.translate(&amp;quot;date.formats.short&amp;quot;)
        Date.strptime(value, format) rescue nil
      elsif value.respond_to?(:to_date)
        value.to_date
      else
        value
      end
    end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See how I just copied rails&#39; code and made a small tweak. Easy. You might want to improve on this with a call to super and move the :short format to an option or constant.&lt;/p&gt;
&lt;p&gt;Register your type so it can be referenced by a symbol:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/types.rb
ActiveRecord::Type.register(:localized_date, LocalizedDate)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Override the :publish_date type with your custom type:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/post.rb
class Post &amp;lt; ApplicationRecord
  attribute :publish_date, :localized_date
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can use localized values in your form inputs:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/posts/_form.html.erb
&amp;lt;%= form_for(@post) do |f| %&amp;gt;
  &amp;lt;%= f.label :publish_date %&amp;gt;
  &amp;lt;%= f.text_field :publish_date, value: (I18n.localize(value, format: :short) if value.present?) %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Tweets - A Single Page Rails App (using reloads)</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_1_single_page_app_simulate/</link>
      <pubDate>Sat, 20 Feb 2021 18:57:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_1_single_page_app_simulate/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;This article is just to have a base app that stays on the index page.  We will use this as a starting point for a more efficient single page app by updating this project with Hotwire in the next article 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_hotwire_tweet_single_page/&#34;&gt;Tweets - A Rails based Single Page App using Hotwire&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://hotwire.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hotwire&lt;/a&gt; allows us to build Single Page Apps using Ruby and Rails with nearly NO configuration! It allow very responsive web-applications as it reloads only the parts of the page that change via a socket.  Hotwire using 
&lt;a href=&#34;https://turbo.hotwire.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Turbo&lt;/a&gt; - an evolution of TurboLinks and as such is mobile friendly and in most cases can send the replacement HTML directly from the server to the client with minimal or no client side processing over websockets so there is minimal lag time.&lt;/p&gt;
&lt;p&gt;This code can be found at: 
&lt;a href=&#34;https://github.com/btihen/tweet_simulator_rails&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/btihen/tweet_simulator_rails&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;basic-setup&#34;&gt;Basic Setup&lt;/h2&gt;
&lt;h3 id=&#34;create-the-project&#34;&gt;Create the project&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;ll skip Turbolinks since Turbo replaces Turbolinks and also installs Stimulus&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails new tweets -d postgresql -T --skip-turbolinks --skip-spring
cd tweets
git add .
git commit -m &amp;quot;initial commit after creation&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I generally take a lot of git snapshots (and then squash them - so its easy to go back to a known good point if things don&amp;rsquo;t work out).&lt;/p&gt;
&lt;h3 id=&#34;create-a-traditional-rails-tweet-clone&#34;&gt;Create a Traditional Rails Tweet Clone&lt;/h3&gt;
&lt;h4 id=&#34;tweet-model&#34;&gt;Tweet Model&lt;/h4&gt;
&lt;p&gt;We&amp;rsquo;ll scaffold the model to get all the parts we need&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails g scaffold tweet body:text likes:integer retweets:integer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&amp;rsquo;ll update the migration to prevent blanks - make the migration file look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/migrate/yyyymmddHHMMSS_create_tweets.rb
class CreateTweets &amp;lt; ActiveRecord::Migration[6.1]
  def change
    create_table :tweets do |t|
      t.text :body, null: false
      t.integer :likes, null: false, default: 0
      t.integer :retweets, null: false, default: 0

      t.timestamps
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we should be able to successfully create and migrate out database&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:create
bin/rails db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Given the Database restrictions we&amp;rsquo;ll add validations to the model. So now it should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/tweet.rb
class Tweet &amp;lt; ApplicationRecord
  validates :body, presence: true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets also point the root route at our tweets resource - so now it should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/routes.rb
Rails.application.routes.draw do
  resources :tweets
  root to: &amp;quot;tweets#index&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets start up rails and be sure everything works so far:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;go to &lt;code&gt;http://localhost:3000&lt;/code&gt; and make and edit and delete some tweets.&lt;/p&gt;
&lt;p&gt;Assuming it works lets commit these changes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;created tweet scaffold, validations and routes&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;lets-make-this-useable-more-like-a-single-page-app&#34;&gt;Let&amp;rsquo;s make this useable (more like a single page app)&lt;/h4&gt;
&lt;p&gt;Lets start by fixing the following problems:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the create form allows us to choose and edit likes and retweets&lt;/li&gt;
&lt;li&gt;tweets are listed in the opposite order in oldest to newest&lt;/li&gt;
&lt;li&gt;to create a new tweet we need to go to a separate new page&lt;/li&gt;
&lt;li&gt;creating and editing new tweets brings us to a show page (away from our index)&lt;/li&gt;
&lt;li&gt;message, likes, retweets, etc are all listed in one long table row (we&amp;rsquo;ll fix with some bootstrap css)&lt;/li&gt;
&lt;li&gt;likes and retweets are not usable&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As mentioned users shouldn&amp;rsquo;t choose their likes and retweets:
&lt;img src=&#34;tweet_form_1st.png&#34; alt=&#34;tweet_form_1st&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now lets remove likes and retweets from our form:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/_form.html.erb
&amp;lt;%= form_with(model: tweet) do |form| %&amp;gt;
  &amp;lt;% if tweet.errors.any? %&amp;gt;
    &amp;lt;div id=&amp;quot;error_explanation&amp;quot;&amp;gt;
      &amp;lt;h2&amp;gt;&amp;lt;%= pluralize(tweet.errors.count, &amp;quot;error&amp;quot;) %&amp;gt; prohibited this tweet from being saved:&amp;lt;/h2&amp;gt;

      &amp;lt;ul&amp;gt;
        &amp;lt;% tweet.errors.each do |error| %&amp;gt;
          &amp;lt;li&amp;gt;&amp;lt;%= error.full_message %&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;% end %&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;% end %&amp;gt;

  &amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
    &amp;lt;%= form.label :body %&amp;gt;
    &amp;lt;%= form.text_area :body %&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;actions&amp;quot;&amp;gt;
    &amp;lt;%= form.submit %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the form should look like:
&lt;img src=&#34;tweet_form_2nd.png&#34; alt=&#34;tweet_form_2nd&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you made several tweets you&amp;rsquo;ll notice that the tweets are in oldest to newest.
&lt;img src=&#34;tweet_index_1st_oldest.png&#34; alt=&#34;tweet_index_1st&#34;&gt;&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll fix that with the index controller sort order:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/tweets_controller.rb
class TweetsController &amp;lt; ApplicationController
  before_action :set_tweet, only: %i[ show edit update destroy ]

  def index
    @tweets = Tweet.all.order(created_at: :desc)
  end
  ...
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_2nd_newest.png&#34; alt=&#34;tweet_index_2nd&#34;&gt;&lt;/p&gt;
&lt;p&gt;now tweets should be newest to oldest&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s put our create tweet at the top of our index page&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/index.html.erb
&amp;lt;p id=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;h1&amp;gt;Tweets&amp;lt;/h1&amp;gt;

&amp;lt;h4&amp;gt;New Tweet&amp;lt;/h4&amp;gt;
&amp;lt;%= render &amp;quot;tweets/form&amp;quot;, tweet: @tweet %&amp;gt;

&amp;lt;h4&amp;gt;Tweet Feed&amp;lt;/h4&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now when we check out index page again &amp;ndash; oops, we get an error:
&lt;img src=&#34;tweet_index_3rd_error.png&#34; alt=&#34;tweet_index_3rd_error&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;errors&lt;/code&gt; is null because the new instance isn&amp;rsquo;t available we need to add a new tweet to our index page from the controller:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/tweets_controller.rb
class TweetsController &amp;lt; ApplicationController
  before_action :set_tweet, only: %i[ show edit update destroy ]

  def index
    # put newest tweets at the top of the page
    @tweets = Tweet.all.order(created_at: :desc)
    @tweet = Tweet.new
  end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when we view index we should be able to create a tweet on the index page:
&lt;img src=&#34;tweet_index_4th_top.png&#34; alt=&#34;tweet_index_4th&#34;&gt;&lt;/p&gt;
&lt;p&gt;However, after creation we still go to show page and need to navigate back to the index page - lets fix that in the create controller.  We will change the line:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;format.html { redirect_to @tweet, notice: &amp;quot;Tweet was successfully created.&amp;quot; }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;with:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;format.html { redirect_to tweets_url, notice: &amp;quot;Tweet was successfully created.&amp;quot; }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We will have the same problem with update &amp;ndash; so let&amp;rsquo;s fix them both.  Now the controller should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/tweets_controller.rb
  def create
    @tweet = Tweet.new(tweet_params)

    respond_to do |format|
      if @tweet.save
        format.html { redirect_to tweets_url, notice: &amp;quot;Tweet was successfully created.&amp;quot; }
        format.json { render :show, status: :created, location: @tweet }
      else
        format.html { render :new, status: :unprocessable_entity }
        format.json { render json: @tweet.errors, status: :unprocessable_entity }
      end
    end
  end

  def update
    respond_to do |format|
      if @tweet.update(tweet_params)
        format.html { redirect_to tweet_url, notice: &amp;quot;Tweet was successfully updated.&amp;quot; }
        format.json { render :show, status: :ok, location: @tweet }
      else
        format.html { render :edit, status: :unprocessable_entity }
        format.json { render json: @tweet.errors, status: :unprocessable_entity }
      end
    end
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now after we create a new tweet we should &amp;lsquo;stay&amp;rsquo; (it actually reloads - which could be slow if we had many tweets on the page - we will fix this with hotwire) on the index page and see:
&lt;img src=&#34;tweet_index_5th_after_create.png&#34; alt=&#34;tweet_index_5th&#34;&gt;&lt;/p&gt;
&lt;p&gt;OK we are almost there, but we still have rows of tables and not a nice tweet feed look.&lt;/p&gt;
&lt;p&gt;Lets add Bootstrap CSS for some modest beauty (you can copy this file or use the below link to get the newest Bootstrap CSS)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/layout/application.html.erb
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;

&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Tweets&amp;lt;/title&amp;gt;
  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt;
  &amp;lt;%= csrf_meta_tags %&amp;gt;
  &amp;lt;%= csp_meta_tag %&amp;gt;

  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot;
        href=&amp;quot;https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css&amp;quot;
        integrity=&amp;quot;sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l&amp;quot;
        crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;
  &amp;lt;%= stylesheet_link_tag &#39;application&#39;, media: &#39;all&#39; %&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
  &amp;lt;%= yield %&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you can get the newest bootstrap link from: 
&lt;a href=&#34;https://getbootstrap.com/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://getbootstrap.com/docs/&lt;/a&gt; or 
&lt;a href=&#34;https://www.bootstrapcdn.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bootstrapcdn.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now lets make a partial reformat our feed with bootstrap:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/_tweet.html.erb
&amp;lt;div class=&amp;quot;card card-body&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;%= tweet.body %&amp;gt;&amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;mt-2&amp;quot;&amp;gt;
    &amp;lt;%= &amp;quot;Like (#{tweet.likes})&amp;quot; %&amp;gt;

    &amp;lt;%= &amp;quot;Retweet (#{tweet.retweets})&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &#39;Edit&#39;, edit_tweet_path(tweet),
              class: &amp;quot;btn btn-sm btn-success&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &#39;Destroy&#39;, tweet_path(tweet), method: :delete,
              data: { confirm: &#39;Are you sure?&#39; },
              class: &amp;quot;btn btn-sm btn-danger&amp;quot; %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets integrate the tweet partial into the index page:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/index.html.erb
&amp;lt;p id=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;h1&amp;gt;Tweets&amp;lt;/h1&amp;gt;

&amp;lt;h4&amp;gt;New Tweet&amp;lt;/h4&amp;gt;
&amp;lt;%= render &amp;quot;tweets/form&amp;quot;, tweet: @tweet %&amp;gt;

&amp;lt;h4&amp;gt;Tweet Feed&amp;lt;/h4&amp;gt;
&amp;lt;%= render @tweets %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have an app that basically works from the index pages (not yet Edit, but without Hotwire, that&amp;rsquo;s difficult &amp;ndash; see the next article)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_6th_formatted.png&#34; alt=&#34;tweet_index_6th&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take another git snapshot of &amp;lsquo;index&amp;rsquo; reloading app.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;tweet app mostly from the index page&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;activate-likes-and-retweets&#34;&gt;Activate likes and retweets&lt;/h4&gt;
&lt;p&gt;To finish this simple app lets activate Likes and Retweets - we will do this with new controllers since this is an independent action from our tweet itself.  We will use the &lt;code&gt;create&lt;/code&gt; since we are &lt;code&gt;creating&lt;/code&gt; a like or a retweet.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s build the like controller - we will redirect back to the index where we want to stay:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/likes_controller.rb
class LikesController &amp;lt; ApplicationController
  before_action :set_tweet

  def create
    @tweet.increment! :likes
    redirect_to tweets_url
  end

  private

  def set_tweet
    @tweet = Tweet.find(params[:tweet_id])
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now the retweet controller:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/retweets_controller.rb
class RetweetsController &amp;lt; ApplicationController
  before_action :set_tweet

  def create
    @tweet.increment! :retweets
    redirect_to tweets_url
  end

  private

  def set_tweet
    @tweet = Tweet.find(params[:tweet_id])
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These controllers are dependent on the tweet so they are subroutes of a tweet - so lets update our routes to be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/routes.rb
Rails.application.routes.draw do
  resources :tweets do
    resource :like, only: [:create]
    resource :retweet, only: [:create]
  end
  root to: &amp;quot;tweets#index&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets add the connection to controller in our front-end with buttons.  Note we need to use the &lt;code&gt;method: :post&lt;/code&gt; for our like and retweet &lt;code&gt;create&lt;/code&gt; because these are normally &lt;code&gt;posted&lt;/code&gt; by the &lt;code&gt;edit&lt;/code&gt; form.  In this case we want to bypass a form and just update.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/_tweet.html.erb
&amp;lt;div class=&amp;quot;card card-body&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;%= tweet.body %&amp;gt;&amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;mt-2&amp;quot;&amp;gt;
    &amp;lt;%= link_to &amp;quot;Like (#{tweet.likes})&amp;quot;,
                tweet_like_path(tweet),
                method: :post,
                class: &amp;quot;btn btn-sm btn-outline-success&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &amp;quot;Retweet (#{tweet.retweets})&amp;quot;,
                tweet_retweet_path(tweet),
                method: :post,
                class: &amp;quot;btn btn-sm btn-outline-info&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &#39;Edit&#39;, edit_tweet_path(tweet),
                class: &amp;quot;btn btn-sm btn-outline-primary&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &#39;Destroy&#39;, tweet_path(tweet), method: :delete,
                data: { confirm: &#39;Are you sure?&#39; },
                class: &amp;quot;btn btn-sm btn-outline-danger&amp;quot; %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Test that everything works as expected!  Assuming it works - we will take another snapshot.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;likes and retweets enabled and also &#39;stay&#39; on index page&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_7th_likes_retweets.png&#34; alt=&#34;tweet_index_7th&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rails 6.1 with TailwindCSS 2.0 and AlpineJS</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_1_tailwind_2_0_alpinejs/</link>
      <pubDate>Thu, 10 Sep 2020 02:46:07 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_1_tailwind_2_0_alpinejs/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;TailwindCSS is a very flexible CSS framework and makes it easy to customize unique web pages and animations.&lt;/p&gt;
&lt;p&gt;Unfortunately, with Rails its a bit tricky to install and configure with Rails Standards.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TailwindCSS 2.0 expects PostCSS 8 and Rails Webpacker uses PostCSS 7 (for now)&lt;/li&gt;
&lt;li&gt;TailwindCSS 2.0 expects AlpineJS, React or Vue &amp;ndash; by default Rails uses StimulusJS (although you can additionally install AlpineJS)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;rails-setup&#34;&gt;Rails Setup&lt;/h1&gt;
&lt;p&gt;I am assuming you have followed the Rails setup described at: 
&lt;a href=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the end, I feel like its easier / better to use tailwindcss with AlpineJS since that is how it evolved and lots of Internet resources are available for that.&lt;/p&gt;
&lt;h2 id=&#34;install-tailwind-css-20&#34;&gt;Install Tailwind CSS 2.0&lt;/h2&gt;
&lt;h3 id=&#34;tailwind-css-20-install&#34;&gt;Tailwind CSS 2.0 Install&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://tailwindcss.com/docs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://tailwindcss.com/docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Start by installing the tailwindcss compatible with postcss7 (necessary until rails-webpacker updates to postcss8) &amp;ndash; with or without upgrading webpacker the following should work:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn add tailwindcss@latest postcss@latest autoprefixer@latest

# if you get this error: Error: PostCSS plugin tailwindcss requires PostCSS 8. use:
# yarn add tailwindcss@npm:@tailwindcss/postcss7-compat postcss@^7 autoprefixer@^9
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now install AlpineJS (its easier to use AlpineJS with tailwind but Stimulus works too - just need to do it all yourself - alpine and stimulus play well together in Rails).  Add alpine turbo drive adapter so that the AlpineJS effects work even AFTER clicking on a link!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn add alpinejs
yarn add alpine-turbo-drive-adapter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you see something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;arn add aplinejs
error An unexpected error occurred: âhttps://registry.yarnpkg.com/aplinejs: Not foundâ.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then check the spelling of the package(s).&lt;/p&gt;
&lt;p&gt;Now create the tailwind config file&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx tailwindcss init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now config tailwind:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// tailwind.config.js
module.exports = {
  purge: [
    &#39;./app/**/*/*.html.erb&#39;,
    &#39;./app/helpers/**/*/*.rb&#39;,
    &#39;./app/javascript/**/*/*.js&#39;,
    &#39;./app/javascript/**/*/*.vue&#39;,
    &#39;./app/javascript/**/*/*.react&#39;
  ],
  darkMode: false, // or &#39;media&#39; or &#39;class&#39;
  theme: {
    extend: {},
  },
  variants: {
    extend: {},
  },
  plugins: [
    // not needed here ?
    // require(&#39;@tailwindcss/forms&#39;),
  ],
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;tell &lt;code&gt;postcss.config.js&lt;/code&gt; about tailwind:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/* postcss.config.js */
module.exports = {
  plugins: [
    require(&amp;quot;tailwindcss&amp;quot;)(&amp;quot;./tailwind.config.js&amp;quot;),
    require(&amp;quot;postcss-import&amp;quot;),
    require(&amp;quot;postcss-flexbugs-fixes&amp;quot;),
    require(&amp;quot;postcss-preset-env&amp;quot;)({
      autoprefixer: {
        flexbox: &amp;quot;no-2009&amp;quot;,
      },
      stage: 3,
    }),
  ],
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create application.scss&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir app/javascript/stylesheets
touch app/javascript/stylesheets/application.scss
cat &amp;lt;&amp;lt;EOF &amp;gt;app/javascript/stylesheets/application.scss
/* app/javascript/stylesheets/application.scss */
@import &amp;quot;tailwindcss/base&amp;quot;;
@import &amp;quot;tailwindcss/components&amp;quot;;
@import &amp;quot;tailwindcss/utilities&amp;quot;;

/* Add custom CSS here */
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;import tailwind into &lt;code&gt;application.js&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/* app/javascript/packs/application.js */
import Rails from &amp;quot;@rails/ujs&amp;quot;
import &amp;quot;@hotwired/turbo-rails&amp;quot;
import * as ActiveStorage from &amp;quot;@rails/activestorage&amp;quot;
import &amp;quot;channels&amp;quot;

// import alpinejs and its necessary rails adaptation
import &#39;alpine-turbo-drive-adapter&#39;
require(&amp;quot;alpinejs&amp;quot;)

// import tailwind into javascript
import &amp;quot;../stylesheets/application.scss&amp;quot;

Rails.start()
ActiveStorage.start()

import &amp;quot;controllers&amp;quot;

require(&amp;quot;trix&amp;quot;)
require(&amp;quot;@rails/actiontext&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&amp;rsquo;s great to get samples from 
&lt;a href=&#34;https://tailwindui.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://tailwindui.com&lt;/a&gt; (&amp;amp; other places) - USE THE INSPECTOR to copy the HTML (this will copy the AlpineJS settings too) - the standard copy HTML button requires you to add the JS on your own.&lt;/p&gt;
&lt;p&gt;create a navbar:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;touch app/views/layouts/_navbar.html.erb
cat &amp;lt;&amp;lt;EOF &amp;gt;app/views/layouts/_navbar.html.erb
&amp;lt;nav x-data=&amp;quot;{ open: false }&amp;quot; class=&amp;quot;bg-gray-800&amp;quot;&amp;gt;
  &amp;lt;!-- NavBar here --&amp;gt;
&amp;lt;/nav&amp;gt;
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create a footer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;!-- app/views/layouts/_footer.html.erb --&amp;gt;
&amp;lt;footer class=&amp;quot;bg-gray-50&amp;quot; aria-labelledby=&amp;quot;footerHeading&amp;quot;&amp;gt;
  &amp;lt;h2 id=&amp;quot;footerHeading&amp;quot; class=&amp;quot;sr-only&amp;quot;&amp;gt;Company&amp;lt;/h2&amp;gt;
  &amp;lt;div class=&amp;quot;max-w-md mx-auto pt-12 px-4 sm:max-w-7xl sm:px-6 lg:pt-16 lg:px-8&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;xl:grid xl:grid-cols-3 xl:gap-8&amp;quot;&amp;gt;
      Some Footer Info
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;mt-12 border-t border-gray-200 py-8&amp;quot;&amp;gt;
      &amp;lt;p class=&amp;quot;text-base text-gray-400 xl:text-center&amp;quot;&amp;gt;
        &amp;amp;copy; 2020 Company, Inc. All rights reserved.
      &amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/footer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Update the landing page:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;!-- app/views/landing/index.html.erb --&amp;gt;
&amp;lt;!-- landing page here --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;application.html.erb&lt;/code&gt; needs to import the javascript stylesheet and the navbar&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;!-- app/views/layouts/application.html.erb --&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Vivers&amp;lt;/title&amp;gt;
  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt;
  &amp;lt;%= csrf_meta_tags %&amp;gt;
  &amp;lt;%= csp_meta_tag %&amp;gt;

  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://rsms.me/inter/inter.css&amp;quot;&amp;gt;
  &amp;lt;%= stylesheet_link_tag &#39;application&#39;, media: &#39;all&#39; %&amp;gt;
  &amp;lt;%= stylesheet_pack_tag &#39;application&#39;, media: &#39;all&#39; %&amp;gt;
  &amp;lt;%= javascript_pack_tag &#39;application&#39; %&amp;gt;
  &amp;lt;%= yield :head %&amp;gt;
  &amp;lt;%= turbo_include_tags %&amp;gt;
  &amp;lt;%# stimulus_include_tags %&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;div class=&amp;quot;pb-32&amp;quot;&amp;gt;
      &amp;lt;%= render &#39;layouts/navbar&#39; %&amp;gt;
      &amp;lt;header class=&amp;quot;py-10&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;max-w-9xl mx-auto px-4 sm:px-6 lg:px-8&amp;quot;&amp;gt;
          &amp;lt;p class=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;
          &amp;lt;p class=&amp;quot;alert&amp;quot;&amp;gt;&amp;lt;%= alert %&amp;gt;&amp;lt;/p&amp;gt;
          &amp;lt;h1 class=&amp;quot;text-3xl font-bold&amp;quot;&amp;gt;
            Dashboard
          &amp;lt;/h1&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/header&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;main class=&amp;quot;-mt-32&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;max-w-9xl mx-auto pb-12 px-4 sm:px-6 lg:px-8&amp;quot;&amp;gt;
        &amp;lt;%= yield %&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/main&amp;gt;
    &amp;lt;%= render &#39;layouts/footer&#39; %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You may need to want rails with both (to increase reload speed after changes &amp;ndash; but &lt;code&gt;bin/rails s&lt;/code&gt; is enough):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails s
# runnding the following in a separate window tends to speed CSS / JS recompilation
./bin/webpack-dev-server
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;install-tailwind-svg-icons&#34;&gt;Install Tailwind SVG Icons&lt;/h2&gt;
&lt;p&gt;You can embed the Icon directly into the View - downloading from:&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://heroicons.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://heroicons.dev/&lt;/a&gt;

&lt;a href=&#34;https://heroicons.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://heroicons.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However, you can also use a gem and add flexibility:&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/bharget/heroicon&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bharget/heroicon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In gemfile&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &amp;quot;heroicon&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From CLI:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle
rails g heroicon:install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Usage:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;%= heroicon &amp;quot;search&amp;quot; %&amp;gt;
&amp;lt;%= heroicon &amp;quot;search&amp;quot;, variant: :outline %&amp;gt;
&amp;lt;%= heroicon &amp;quot;search&amp;quot;, options: { class: &amp;quot;text-primary-500&amp;quot; } %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or

&lt;a href=&#34;https://github.com/andrewjmead/rails_heroicons/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/andrewjmead/rails_heroicons/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Gemfile&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;rails_heroicons&#39;, &#39;~&amp;gt; 1.0.1&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CLI&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle
gem install rails_heroicons
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Usage:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;%= heroicon(&#39;user&#39;) %&amp;gt;
&amp;lt;%= heroicon(&#39;user&#39;, class_name: &#39;icon icon-large&#39;) %&amp;gt;
&amp;lt;%= heroicon(&#39;user&#39;, style: :outline, class_name: &#39;icon icon-large&#39;) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The classes magically update the SVG embedded using:&lt;/p&gt;
&lt;h3 id=&#34;use-svg-images--icons-in-rails----heroicons-or-zondicons&#34;&gt;USE SVG Images / Icons in Rails &amp;ndash; HeroIcons or ZondIcons&lt;/h3&gt;
&lt;p&gt;Downloaded SVG images in Rails:

&lt;a href=&#34;https://heroicons.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://heroicons.com/&lt;/a&gt;

&lt;a href=&#34;https://heroicons.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://heroicons.dev/&lt;/a&gt;

&lt;a href=&#34;http://www.zondicons.com/icons.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://www.zondicons.com/icons.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OR download the Icons and use the gem:

&lt;a href=&#34;https://github.com/jamesmartin/inline_svg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/jamesmartin/inline_svg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Gemfile:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;inline_svg&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CLI:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle
gem install inline_svg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;USAGE:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Sprockets
inline_svg_tag(file_name, options={})

# Webpacker
inline_svg_pack_tag(file_name, options={})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OR without gem:&lt;/p&gt;
&lt;p&gt;you can embed the SVG directly into rails using:

&lt;a href=&#34;https://dev.to/hslzr/using-inline-svgs-with-rails-3khb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dev.to/hslzr/using-inline-svgs-with-rails-3khb&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;reference-articles&#34;&gt;Reference Articles&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://davidteren.medium.com/tailwindcss-2-0-with-rails-6-1-postcss-8-0-9645e235892d&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://davidteren.medium.com/tailwindcss-2-0-with-rails-6-1-postcss-8-0-9645e235892d&lt;/a&gt;

&lt;a href=&#34;https://web-crunch.com/posts/how-to-install-tailwind-css-2-using-ruby-on-rails&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://web-crunch.com/posts/how-to-install-tailwind-css-2-using-ruby-on-rails&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
