<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Relationships | btihen</title>
    <link>https://btihen.me/tags/relationships/</link>
      <atom:link href="https://btihen.me/tags/relationships/index.xml" rel="self" type="application/rss+xml" />
    <description>Relationships</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2021</copyright><lastBuildDate>Sun, 02 May 2021 01:01:53 +0200</lastBuildDate>
    <image>
      <url>https://btihen.me/img/btihen_landing_page.png</url>
      <title>Relationships</title>
      <link>https://btihen.me/tags/relationships/</link>
    </image>
    
    <item>
      <title>Lucky Framework with Crystal Language</title>
      <link>https://btihen.me/post_crystal/lucky_0_27/</link>
      <pubDate>Sun, 02 May 2021 01:01:53 +0200</pubDate>
      <guid>https://btihen.me/post_crystal/lucky_0_27/</guid>
      <description>&lt;p&gt;~/devel/learning/crystal_frameworks/lucky/brews&lt;/p&gt;
&lt;h2 id=&#34;why-lucky&#34;&gt;Why Lucky&lt;/h2&gt;
&lt;p&gt;Lucky offers all the features I use in Rails - but is type safe and faster than rails.  Lucky&amp;rsquo;s focus is on stability (its not the fastest Crystal Framework, but it focuses on preventing run-time problems).  See: &lt;a href=&#34;https://luckyframework.org/guides/getting-started/why-lucky&#34;&gt;https://luckyframework.org/guides/getting-started/why-lucky&lt;/a&gt; for a full list of what Lucky aims to improve.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;This article is a collection of making sense of the following resources&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://luckycasts.com/&#34;&gt;https://luckycasts.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://luckyframework.org/guides&#34;&gt;https://luckyframework.org/guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://onchain.io/blog/lucky_tutorial&#34;&gt;https://onchain.io/blog/lucky_tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/andrewmcodes/awesome-lucky&#34;&gt;https://github.com/andrewmcodes/awesome-lucky&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&#34;&gt;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My goal is to have a simple tutorial for important basic features and orientation of the Lucky Framework - for myself and students I work with.&lt;/p&gt;
&lt;h2 id=&#34;installing-lucky&#34;&gt;installing Lucky&lt;/h2&gt;
&lt;p&gt;For more information see: &lt;a href=&#34;https://luckyframework.org/guides/getting-started/installing&#34;&gt;https://luckyframework.org/guides/getting-started/installing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;brew install&lt;/code&gt; of lucky (on a MacOS) is bit broken, but the Linux install also works well on MacOS!&lt;/p&gt;
&lt;p&gt;First be sure openssl and postgresql are installed and findable:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install openssl postgresql

# and depending on your shell either (if you don&#39;t know which it is safe to do both):
echo &#39;export PKG_CONFIG_PATH=/usr/local/opt/openssl/lib/pkgconfig&#39; &amp;gt;&amp;gt;~/.zshrc
echo &#39;export PKG_CONFIG_PATH=/usr/local/opt/openssl/lib/pkgconfig&#39; &amp;gt;&amp;gt;~/.bash_profile

# IMPORTANT - OPEN a new terminal

# or if you know what shell you are using you can reload it with source!
source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now install (or be sure ASDF is installed). &lt;a href=&#34;https://asdf-vm.com/#/core-manage-asdf-vm&#34;&gt;https://asdf-vm.com/#/core-manage-asdf-vm&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install asdf
# assuming bash
echo -e &amp;quot;\n. $(brew --prefix asdf)/asdf.sh&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile
echo -e &amp;quot;\n. $(brew --prefix asdf)/etc/bash_completion.d/asdf.bash&amp;quot; &amp;gt;&amp;gt; ~/.bash_profile

# or zsh
echo -e &amp;quot;\n. $(brew --prefix asdf)/asdf.sh&amp;quot; &amp;gt;&amp;gt; ${ZDOTDIR:-~}/.zshrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we add asdf plugin for crystal:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;asdf plugin-add crystal https://github.com/asdf-community/asdf-crystal.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For both Ruby and Crystal the following is also helpful:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &amp;quot;legacy_version_file = yes&amp;quot; &amp;gt;&amp;gt;~/.asdfrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lucky 0.27 needs Crystal 0.36.1 (not Crystal 1.0.0) - so we install it with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;asdf install crystal 0.36.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I like to the local folder to crystal 0.36.1 (&amp;amp; the node version too) - this will allow use to install and run the lucky-cli tool&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &amp;quot;cyrstal 0.36.1&amp;quot; &amp;gt;&amp;gt; .tool-versions
echo &amp;quot;node 14.16.0&amp;quot; &amp;gt;&amp;gt; .tool-versions
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(but you can also just use: &lt;code&gt;asdf global crystal 0.36.1&lt;/code&gt; - so you don&amp;rsquo;t have to set the crystal version in every file you work in)!&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s install lucky_cli &amp;amp; also lucky&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/luckyframework/lucky_cli
cd lucky_cli
git checkout v0.27.0
shards install

# if this following step fails (you probably forgot to reload your shell after the openssl lib path update)
crystal build src/lucky.cr

# make your compiled lucky_cli available everywhere
mv lucky /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if you check your settings you should get:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky -v
# This should return 0.27.0

node -v
# should be 12.x or greater

yarn -v
# should be 1.x or greater

psql --version
# should be 10.x or greater
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;start-a-lucky-project&#34;&gt;Start a Lucky Project&lt;/h2&gt;
&lt;p&gt;Create your new Lucky project with the wizzard (just answer questions) - other options are at: &lt;a href=&#34;https://luckyframework.org/guides/getting-started/starting-project&#34;&gt;https://luckyframework.org/guides/getting-started/starting-project&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky init
cd {project_name}

# update the db settings in: `config/database.cr`

# if this step fails you may have forgotten to reload the shell after updating the openssl path
script/setup

# run lucky with:
lucky dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok lets do an initial commit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;initial commit after create&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;language-inflections&#34;&gt;Language Inflections&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s make a little silly Human and Pets database/webpage:&lt;/p&gt;
&lt;p&gt;The simplest way to generate is with: &lt;code&gt;lucky gen.resource.browser&lt;/code&gt; its basically the same as &lt;code&gt;rails g scaffold&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So lets get started:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky gen.resource.browser Human name:String
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OOPS - that generated the plural of &lt;code&gt;Human&lt;/code&gt; as &lt;code&gt;Humen&lt;/code&gt; instead of &lt;code&gt;Humans&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;lets clear all our incorrect files and fix this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clean -fd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;rsquo;s create a new config file for inflections &lt;code&gt;config/inflect.cr&lt;/code&gt; and enter:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# this probably isn&#39;t necessary for very long - but for now it is needed.
Wordsmith::Inflector.inflections.irregular(&amp;quot;human&amp;quot;, &amp;quot;humans&amp;quot;)

# I like using persons (also a dictionary word) over people, to do this we need
# - first we have to remove the original setting by doing:
Wordsmith::Inflector.inflections.plurals.delete(/(p)erson$/i)
# - now we can override the original with our preference
Wordsmith::Inflector.inflections.irregular(&amp;quot;person&amp;quot;, &amp;quot;persons&amp;quot;)

# if using `staff` as in human staff - then also add staff to uncountable:
Wordsmith::Inflector.inflections.uncountable(%w(staff))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if we try again we will have the same problem!  We need to remove our binaries and recompile lucky with our need config!  (I lost a lot of time on this detail)! Do this with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rm -rf lib &amp;amp;&amp;amp; rm -rf bin &amp;amp;&amp;amp; shards update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can try to create a new Resource again.&lt;/p&gt;
&lt;h2 id=&#34;quick-lucky-test-tip&#34;&gt;Quick Lucky Test Tip&lt;/h2&gt;
&lt;p&gt;Lets quickly test our new config wiht &lt;code&gt;lucky exec&lt;/code&gt; - type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky exec
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This gives you an edit in your cli and you can type a small amount of code and it will be compiles and print you the results - ie:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky exec
# then when vim or nano opens you can enter something like:

require &amp;quot;../../src/app.cr&amp;quot;

include Lucky::TextHelpers

pp pluralize(2, &amp;quot;human&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and hopefuly you get &lt;code&gt;2 humans&lt;/code&gt; - cool - it works lets snapshot our changes.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;language inflection updates and customization&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;scaffold-a-simple-resource&#34;&gt;Scaffold a Simple Resource&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://luckyframework.org/guides/command-line-tasks/built-in&#34;&gt;https://luckyframework.org/guides/command-line-tasks/built-in&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now if we try again (we are free to use human again):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky gen.resource.browser Human name:String
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets run the migration:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky db.migrate

# oops I haven&#39;t create the DB yet
lucky db.create

# now migrate
lucky db.migrate

# start lucky &amp;amp; test
lucky dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now log_in and create humans at the &lt;code&gt;/humans&lt;/code&gt; url&lt;/p&gt;
&lt;p&gt;Cool - lets snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;First simple &#39;Human&#39; resource with scaffold&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;lucky-html-and-rootpage-routing&#34;&gt;Lucky HTML and RootPage Routing&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://luckycasts.com/videos/lucky-html-in-crystal&#34;&gt;https://luckycasts.com/videos/lucky-html-in-crystal&lt;/a&gt;
&lt;a href=&#34;https://www.luckyframework.org/guides/http-and-routing/routing-and-params#root-page&#34;&gt;https://www.luckyframework.org/guides/http-and-routing/routing-and-params#root-page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If we look in &lt;code&gt;src/actions/home/index.cr&lt;/code&gt; we see:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# src/actions/home/index.cr
class Home::Index &amp;lt; BrowserAction
  include Auth::AllowGuests

  get &amp;quot;/&amp;quot; do
    if current_user?
      redirect Me::Show
    else
      # html Landing::IndexPage
      html Lucky::WelcomePage
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we can see - when we are not logged in &amp;ldquo;/&amp;rdquo; points to &lt;code&gt;Lucky::WelcomePage&lt;/code&gt; or whatever new landing page we make and when logged in we are pointed to the &lt;code&gt;Me::Show&lt;/code&gt; page.&lt;/p&gt;
&lt;p&gt;Let practice adding some &lt;code&gt;html&lt;/code&gt; and add links to our expected resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lsquo;/humans&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;/pets&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So lets change this too and practice lucky html&lt;/p&gt;
&lt;p&gt;We will add our list of resources - &amp;lsquo;pets&amp;rsquo; and &amp;lsquo;humans&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;So from looking at the existing html in &lt;code&gt;src/pages/me/show_page.cr&lt;/code&gt; it&amp;rsquo;s like a combo of haml and JS to create executable blocks with &lt;code&gt;{}&lt;/code&gt; so I created the method: &lt;code&gt;private def resource_links&lt;/code&gt; and tried out two methods of linking - not bad, but I figure it will take a bit of practice with this new format.  I don&amp;rsquo;t know the reason behind this, since almost all web resources will need to be reformatted - but I assume it is pre-compiled and thus fast!&lt;/p&gt;
&lt;p&gt;In the end I created this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# src/pages/me/show_page.cr
class Me::ShowPage &amp;lt; MainLayout
  def content
    h1 &amp;quot;This is your profile:&amp;quot;
    h2 &amp;quot;Email:  #{@current_user.email}&amp;quot;
    resource_links
    helpful_tips
  end

  private def resource_links
    h2 &amp;quot;Available Resources&amp;quot;
    ul do
      li { a &amp;quot;Pet Owners&amp;quot;, href: &amp;quot;/humans&amp;quot; }
      li { link_to_pets }
    end
  end

  private def helpful_tips
    h3 &amp;quot;Next, you may want to:&amp;quot;
    ul do
      li { link_to_authentication_guides }
      li &amp;quot;Modify this page: src/pages/me/show_page.cr&amp;quot;
      li &amp;quot;Change where you go after sign in: src/actions/home/index.cr&amp;quot;
    end
  end

  private def link_to_pets
    a &amp;quot;Pets&amp;quot;, href: &amp;quot;/pets&amp;quot;
  end

  private def link_to_authentication_guides
    a &amp;quot;Check out the authentication guides&amp;quot;,
      href: &amp;quot;https://luckyframework.org/guides/authentication&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;lets test it out:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;cool - good enough for now.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;added html links to user_home_page &#39;me&#39;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-related-model&#34;&gt;Create a Related Model&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luckyframework.org/guides/database/models#belongs-to&#34;&gt;https://www.luckyframework.org/guides/database/models#belongs-to&lt;/a&gt;
&lt;a href=&#34;https://www.luckyframework.org/guides/database/models#has-many-one-to-many&#34;&gt;https://www.luckyframework.org/guides/database/models#has-many-one-to-many&lt;/a&gt;
&lt;a href=&#34;https://luckyframework.org/guides/database/migrations#associations&#34;&gt;https://luckyframework.org/guides/database/migrations#associations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, the Lucky generators don&amp;rsquo;t understand &lt;code&gt;belongs_to&lt;/code&gt; so we will need to do a few extra tweeks &amp;ndash; since we can&amp;rsquo;t do something like human:belongs_to or human:references like with Rails.&lt;/p&gt;
&lt;p&gt;So if we want to scaffold &amp;ldquo;pets&amp;rdquo; now and have them belong to humans (and humans can have many pets) - we first do:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky gen.resource.browser Pet name:String breed:String species:String age:Int32 house_trained:Bool
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;rsquo;s setup the relationships:&lt;/p&gt;
&lt;p&gt;First we need to update the migration with the human foreign_key using: &lt;code&gt;add_belongs_to&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So we need to update our pets migration to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# db/migrations/yyyymmddxxxxxx_create_pets.cr
class CreatePets::V20210502100912 &amp;lt; Avram::Migrator::Migration::V1
  def migrate
    create table_for(Pet) do
      primary_key id : Int64
      add_timestamps
      add name : String
      add breed : String
      add species : String
      add age : Int32
      add house_trained : Bool

      # When the associated human is deleted, their pets are also deleted
      # because we set on_delete: :cascade
      add_belongs_to human : Human, on_delete: :cascade    # relationship - newly added
    end
  end

  def rollback
    drop table_for(Pet)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that the pets database table will is correct - lets update the pet model too.
This is straight-forward we just need to add &lt;code&gt;belongs_to human : Human&lt;/code&gt; in the model file so it changes to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# src/models/pet.cr
class Pet &amp;lt; BaseModel
  table do
    column name : String
    column breed : String
    column species : String
    column age : Int32
    column house_trained : Bool

    belongs_to human : Human     # relationship - newly added
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now we need to add &lt;code&gt;has_many&lt;/code&gt; to the &lt;code&gt;Human&lt;/code&gt; model.  So we change it to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# src/models/human.cr
class Human &amp;lt; BaseModel
  table do
    column name : String

    has_many pets : Pet    # relationship - newly added
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can migrate:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky db.migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;seed-files&#34;&gt;Seed Files&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&#34;&gt;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&lt;/a&gt;
&lt;a href=&#34;https://luckyframework.org/guides/database/database-setup#seeding-data&#34;&gt;https://luckyframework.org/guides/database/database-setup#seeding-data&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now we can create seed files and be sure our basic relations work:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and run the seeds with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;simple-lucky-forms-in-pages-instead-of-shared&#34;&gt;Simple Lucky Forms (in pages instead of shared)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://luckycasts.com/videos/component-basics&#34;&gt;https://luckycasts.com/videos/component-basics&lt;/a&gt;
&lt;a href=&#34;https://luckycasts.com/videos/lucky-html-in-crystal&#34;&gt;https://luckycasts.com/videos/lucky-html-in-crystal&lt;/a&gt;
&lt;a href=&#34;https://luckyframework.org/guides/frontend/html-forms&#34;&gt;https://luckyframework.org/guides/frontend/html-forms&lt;/a&gt;
&lt;a href=&#34;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&#34;&gt;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&lt;/a&gt;
&lt;a href=&#34;https://luckyframework.org/guides/frontend/html-forms#shared-components&#34;&gt;https://luckyframework.org/guides/frontend/html-forms#shared-components&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lets test the web page&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and go to the url &lt;code&gt;/pets&lt;/code&gt; and create a &lt;strong&gt;Pet&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We discover we have problems - validation errors.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type mismatches (crystal is strongly typed - but the form generator ignores this - so we need to adjust by hans)&lt;/li&gt;
&lt;li&gt;Required human_id is missing (the generator isn&amp;rsquo;t aware of &lt;code&gt;belongs_to&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I didn&amp;rsquo;t find lots of Documentation or examples on Components, but I did find this article - which got me started on Lucky html and forms:
&lt;a href=&#34;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&#34;&gt;https://dev.to/hinchy/setting-up-a-crud-app-in-lucky-jo1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After I figured out how to update FormComponents I found this: &lt;a href=&#34;https://luckycasts.com/videos/component-basics&#34;&gt;https://luckycasts.com/videos/component-basics&lt;/a&gt; - I&amp;rsquo;ll go back and view this!&lt;/p&gt;
&lt;p&gt;This got me going!  However, one difficulty I had was the Boolean field &lt;code&gt;house_trained&lt;/code&gt; - I tried both Checkboxes and Radio Buttons, but I kept getting &lt;code&gt;overload&lt;/code&gt; errors (which I finally realized were type mis-matches - you can&amp;rsquo;t send text into a Boolean field).  So I settled on a select_list where I can present a tuple with a &amp;ldquo;human readable value&amp;rdquo; and a &amp;ldquo;model value&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;So in the end my first draft form looked like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# src/pages/pets/new_page.cr
class Pets::NewPage &amp;lt; MainLayout
  needs operation : SavePet
  quick_def page_title, &amp;quot;New Pet&amp;quot;

  def content
    h1 &amp;quot;New Pet&amp;quot;
    render_pet_form(operation)
  end

  def render_pet_form(op)
    # comment out the form component for now
    # form_for Pets::Create do
    #   # Edit fields in src/components/pets/form_fields.cr
    #   mount Pets::FormFields, op

    #   submit &amp;quot;Save&amp;quot;, data_disable_with: &amp;quot;Saving...&amp;quot;
    # end

    form_for Pets::Create do
      div do
        label_for op.name
        text_input op.name
      end
      div do
        label_for op.species
        select_input(op.species, class: &amp;quot;custom-select&amp;quot;) do
          select_prompt(&amp;quot;Select&amp;quot;)
          options_for_select(op.species, [{&amp;quot;Cat&amp;quot;, &amp;quot;cat&amp;quot;}, {&amp;quot;Dog&amp;quot;, &amp;quot;dog&amp;quot;}])
        end
      end
      # eventually allow for this to be blank
      # eventually allow a dropdown list to be dependent on species
      div do
        label_for op.breed
        text_input op.breed
      end
      div do
        label_for op.age
        number_input(op.age, class: &amp;quot;custom-input&amp;quot;, min: &amp;quot;0&amp;quot;, max: &amp;quot;99&amp;quot;)
      end
      div do
        label_for op.house_trained
        select_input(op.house_trained, class: &amp;quot;custom-select&amp;quot;) do
          select_prompt(&amp;quot;Select&amp;quot;)
          options_for_select(op.house_trained, [{&amp;quot;yes&amp;quot;, true}, {&amp;quot;No&amp;quot;, false}])
        end
      end
      div do
        label_for op.human_id
        select_input op.human_id do
          options_for_select(op.human_id, humans_for_select)
        end
      end
      submit &amp;quot;Save Pet&amp;quot;
    end
  end

  # find all the humans and create a tuple of the name and id - displayed and passed to model
  private def humans_for_select
    HumanQuery.new.map do |human|
      { human.name, human.id }
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;of course this isn&amp;rsquo;t shared by the &lt;code&gt;edit&lt;/code&gt; page, but it is still helpful to see the Lucky way to create html.&lt;/p&gt;
&lt;p&gt;So after a while I figured out how to revert this code and use SharedForms (I think this is a form of FrontEnd Components).&lt;/p&gt;
&lt;p&gt;Lets test again:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool it works as I expect&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;a working &#39;new&#39; html form - not shared&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;shared-web-form---component&#34;&gt;Shared Web Form - Component&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://luckycasts.com/videos/component-basics&#34;&gt;https://luckycasts.com/videos/component-basics&lt;/a&gt;
&lt;a href=&#34;https://luckyframework.org/guides/frontend/html-forms&#34;&gt;https://luckyframework.org/guides/frontend/html-forms&lt;/a&gt;
&lt;a href=&#34;https://luckyframework.org/guides/frontend/html-forms#shared-components&#34;&gt;https://luckyframework.org/guides/frontend/html-forms#shared-components&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;With a little more experience with Lucky HTML lets try the component forms again at &lt;code&gt;src/components/pets/form_fields.cr&lt;/code&gt; (so lets revert: &lt;code&gt;src/pages/pets/new_page.cr&lt;/code&gt; back to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# src/pages/pets/new_page.cr
class Pets::NewPage &amp;lt; MainLayout
  needs operation : SavePet
  quick_def page_title, &amp;quot;New Pet&amp;quot;

  def content
    h1 &amp;quot;New Pet&amp;quot;
    render_pet_form(operation)
  end

  def render_pet_form(op)
    form_for Pets::Create do
      # Edit fields in src/components/pets/form_fields.cr
      mount Pets::FormFields, op

      submit &amp;quot;Save&amp;quot;, data_disable_with: &amp;quot;Saving...&amp;quot;
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once I had build the first form and understood the errors - so the same form as a form_component looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# src/components/pets/form_fields.cr
class Pets::FormFields &amp;lt; BaseComponent
  needs operation : SavePet

  def render
    mount Shared::Field, operation.name, &amp;amp;.text_input(autofocus: &amp;quot;true&amp;quot;, attrs: [:required])
    mount Shared::Field, operation.species do |input_html|
      input_html.select_input append_class: &amp;quot;select-input&amp;quot; do
        select_prompt(&amp;quot;Select&amp;quot;)
        options_for_select operation.species, [{&amp;quot;Dog&amp;quot;, &amp;quot;dog&amp;quot;}, {&amp;quot;Cat&amp;quot;, &amp;quot;cat&amp;quot;}]
      end
    end
    mount Shared::Field, operation.breed  # default setting: &amp;amp;.text_input(attrs: [:required])
    mount Shared::Field, operation.age, &amp;amp;.number_input(append_class: &amp;quot;custom-input&amp;quot;, min: &amp;quot;0&amp;quot;, max: &amp;quot;99&amp;quot;)
    mount Shared::Field, operation.house_trained do |input_html|
      input_html.select_input append_class: &amp;quot;select-input&amp;quot; do
        select_prompt(&amp;quot;Select&amp;quot;)
        options_for_select operation.house_trained, [{&amp;quot;yes&amp;quot;, true}, {&amp;quot;no&amp;quot;, false}]
      end
    end
    mount Shared::Field, operation.human_id do |input_html|
      input_html.select_input append_class: &amp;quot;select-input&amp;quot; do
        select_prompt(&amp;quot;Select&amp;quot;)
        options_for_select operation.human_id, options_for_humans
      end
    end
  end

  private def options_for_humans
    HumanQuery.new.map do |human|
      { human.name, human.id }
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets test again:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lucky dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;cool - lets snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;working shared form component with a variety of types&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;redirect-after-create--update-to-index&#34;&gt;Redirect after Create / Update to Index&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://luckyframework.org/guides/http-and-routing/routing-and-params&#34;&gt;https://luckyframework.org/guides/http-and-routing/routing-and-params&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I find it annoying after creating and updating a resource to have to then manually go back to the index page from the show page.&lt;/p&gt;
&lt;p&gt;In lucky the routing/controll happens in the &lt;code&gt;action&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;To change what happens after creating and updating a Pet we simply change &lt;code&gt;src/actions/pets/create.cr&lt;/code&gt; to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# src/actions/pets/create.cr
class Pets::Create &amp;lt; BrowserAction
  post &amp;quot;/pets&amp;quot; do
    SavePet.create(params) do |operation, pet|
      if pet
        flash.success = &amp;quot;The record has been saved&amp;quot;
        html IndexPage, pets: PetQuery.new  # new action (copied from index)
        # redirect Show.with(pet.id)        # old no longer wanted
      else
        flash.failure = &amp;quot;It looks like the form is not valid&amp;quot;
        html NewPage, operation: operation
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And update &lt;code&gt;src/actions/pets/update.cr&lt;/code&gt; is similarly easy:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# src/actions/pets/update.cr
class Pets::Update &amp;lt; BrowserAction
  put &amp;quot;/pets/:pet_id&amp;quot; do
    pet = PetQuery.find(pet_id)
    SavePet.update(pet, params) do |operation, updated_pet|
      if operation.saved?
        flash.success = &amp;quot;The record has been updated&amp;quot;
        html IndexPage, pets: PetQuery.new
        # redirect Show.with(updated_pet.id)
      else
        flash.failure = &amp;quot;It looks like the form is not valid&amp;quot;
        html EditPage, operation: operation, pet: updated_pet
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I appreciate how explicit these are!&lt;/p&gt;
&lt;h2 id=&#34;display-validation-errors&#34;&gt;Display Validation Errors&lt;/h2&gt;
&lt;p&gt;If we leave some fields out - Lucky gives us validation errors - all fields appear to be required without explicitly allowing nils - but we don&amp;rsquo;t see them with our default form.  Lets fix that.&lt;/p&gt;
&lt;h2 id=&#34;optional-fields&#34;&gt;Optional Fields&lt;/h2&gt;
&lt;p&gt;Often a &lt;strong&gt;breed&lt;/strong&gt; is unknown - we could just add an &lt;code&gt;unknown&lt;/code&gt; value, but that&amp;rsquo;s silly, lets figure out how to work with unknown / unneeded data and allow nil in our &lt;code&gt;breed&lt;/code&gt; field.&lt;/p&gt;
&lt;h2 id=&#34;add-validations&#34;&gt;Add Validations&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s add a few custom validations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;minimal pet_name length&lt;/li&gt;
&lt;li&gt;numeric range&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tests-for-our-validations&#34;&gt;Tests for our Validations&lt;/h2&gt;
&lt;p&gt;Now that we have some logic lets add some tests&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/luckyframework/lucky_flow&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BrowserTesting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pretty-urls&#34;&gt;Pretty URLs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/luckyframework/avram_slugify&#34;&gt;https://github.com/luckyframework/avram_slugify&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lucky-pubsub&#34;&gt;Lucky PubSub&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/luckyframework/pulsar&#34;&gt;https://github.com/luckyframework/pulsar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bulma-integration&#34;&gt;Bulma Integration&lt;/h2&gt;
&lt;p&gt;Integrate CSS Frameworks&lt;/p&gt;
&lt;h2 id=&#34;view-components&#34;&gt;View Components&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://luckycasts.com/videos/component-basics&#34;&gt;https://luckycasts.com/videos/component-basics&lt;/a&gt;
&lt;a href=&#34;https://luckyframework.org/guides/frontend/rendering-html#creating-and-using-components&#34;&gt;https://luckyframework.org/guides/frontend/rendering-html#creating-and-using-components&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;tailwind-integration&#34;&gt;Tailwind Integration&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://luckycasts.com/videos/tailwind-css&#34;&gt;https://luckycasts.com/videos/tailwind-css&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s make the pages a bit nicer&lt;/p&gt;
&lt;h2 id=&#34;html-to-lucky-formatter&#34;&gt;HTML to Lucky formatter&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://luckyframework.org/html&#34;&gt;https://luckyframework.org/html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If we want to create some more complex pages with tailwind - lets use the converted to help.&lt;/p&gt;
&lt;h2 id=&#34;dynamic-front-end---selections-dependencies-alpinejs--stimulusjs-&#34;&gt;Dynamic Front-end - Selections Dependencies (AlpineJS / StimulusJS) ?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://luckycasts.com/videos/stimulus-js&#34;&gt;https://luckycasts.com/videos/stimulus-js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Make the breed list, dependent on the species list
Lets change the Front-End language on the fly
Lets make the new TailwindUI menu bar have the dynamic features.&lt;/p&gt;
&lt;h2 id=&#34;has-many-through&#34;&gt;Has many through&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luckyframework.org/guides/database/models#has-many-through-many-to-many&#34;&gt;https://www.luckyframework.org/guides/database/models#has-many-through-many-to-many&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;polymorphic-relationships&#34;&gt;Polymorphic Relationships&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.luckyframework.org/guides/database/models#polymorphic-associations&#34;&gt;https://www.luckyframework.org/guides/database/models#polymorphic-associations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One reason I favor Lucky is the database &lt;code&gt;Avram&lt;/code&gt; supports polymorphic relationships - which seems to come up a lot in my code - so lets see how to get it working and support multiple types:&lt;/p&gt;
&lt;p&gt;Pets -&amp;gt; Cats, Dogs, Horses, etc&lt;/p&gt;
&lt;h2 id=&#34;optional-relations&#34;&gt;Optional Relations&lt;/h2&gt;
&lt;h2 id=&#34;internationalization-i18n&#34;&gt;Internationalization (i18n)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://luckycasts.com/videos/translations&#34;&gt;https://luckycasts.com/videos/translations&lt;/a&gt;
&lt;a href=&#34;https://luckyframework.org/guides/frontend/internationalization&#34;&gt;https://luckyframework.org/guides/frontend/internationalization&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;dynamic-i18n-in-front-end&#34;&gt;Dynamic i18n in Front-End?&lt;/h2&gt;
&lt;h2 id=&#34;components-with-scopes&#34;&gt;Components (with scopes)&lt;/h2&gt;
&lt;h2 id=&#34;lucky-code-scopes&#34;&gt;Lucky Code Scopes&lt;/h2&gt;
&lt;h2 id=&#34;resource-authorization&#34;&gt;Resource Authorization&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/stephendolan/pundit&#34;&gt;https://github.com/stephendolan/pundit&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;web-sockets&#34;&gt;Web Sockets&lt;/h2&gt;
&lt;p&gt;For now something like &lt;strong&gt;LiveView&lt;/strong&gt; and &lt;strong&gt;Hotwire&lt;/strong&gt; are not yet integrated into lucky - its build your own.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cable-cr/cable&#34;&gt;https://github.com/cable-cr/cable&lt;/a&gt;
&lt;a href=&#34;https://github.com/luckyframework/lucky/issues/554&#34;&gt;https://github.com/luckyframework/lucky/issues/554&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;deploying-lucky--env&#34;&gt;Deploying Lucky &amp;amp; ENV&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://fullstackstanley.com/read/categories/lucky-framework/&#34;&gt;https://fullstackstanley.com/read/categories/lucky-framework/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;security-alternatives&#34;&gt;Security (Alternatives)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/grottopress/shield&#34;&gt;https://github.com/grottopress/shield&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;message--events---queues&#34;&gt;Message / Events - Queues&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/mosquito-cr/mosquito&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/mperham/sidekiq.cr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sidekiq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/bmulvihill/dispatch&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;InMemory-JobQueue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Phoenix 1.5 Blog with Comments</title>
      <link>https://btihen.me/post_elixir_phoenix/phoenix_1_5_blog_w_comments/</link>
      <pubDate>Fri, 10 Jul 2020 09:43:51 +0200</pubDate>
      <guid>https://btihen.me/post_elixir_phoenix/phoenix_1_5_blog_w_comments/</guid>
      <description>&lt;h2 id=&#34;purpose&#34;&gt;Purpose&lt;/h2&gt;
&lt;p&gt;This article builds on the existing article: &lt;a href=&#34;https://btihen.me/post_tech/phoenix_1_5_blog_intro/&#34;&gt;https://btihen.me/post_tech/phoenix_1_5_blog_intro/&lt;/a&gt; and adds nested relationships and has_many_through.&lt;/p&gt;
&lt;h2 id=&#34;now-lets-create-comments-a-has-many-through-for-users&#34;&gt;now lets create comments (a has many through for users)&lt;/h2&gt;
&lt;p&gt;we will use &lt;code&gt;mix phx.gen.context&lt;/code&gt; this time since we will use the posts page to add comments.  We will use the context generator since we don&amp;rsquo;t need any views or templates generated.  Answer &lt;code&gt;Y&lt;/code&gt; to the question about the context already existing.  We could create to API files within the Context before the one file gets too large, but we will skip that.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.gen.context Blogs Comment comments message:text post_id:references:posts  user_id:references:users
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;update-relationships&#34;&gt;Update Relationships&lt;/h2&gt;
&lt;p&gt;We need to create the relationships and update the migration to delete comments when post is deleted:&lt;/p&gt;
&lt;p&gt;Now lets create the relationship between posts and comments:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs/comment.ex
efmodule FeenixIntro.Blogs.Comment do
  use Ecto.Schema
  import Ecto.Changeset
  alias FeenixIntro.Blogs.Post
  alias FeenixIntro.Accounts.User

  @required_fields [:user_id, :post_id, :message]

  schema &amp;quot;comments&amp;quot; do
    # remove these
    # field :post_id, :id
    # field :user_id, :id
    # add these:
    belongs_to(:user, User)
    belongs_to(:post, Post)

    field :message, :string

    timestamps()
  end

  @doc false
  def changeset(comment, attrs) do
    comment
    |&amp;gt; cast(attrs, @required_fields)
    |&amp;gt; validate_required(@required_fields)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets update posts relationship to comments:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs/post.ex
  # ...
  alias FeenixIntro.Blogs.Comment
  # ...
  schema &amp;quot;posts&amp;quot; do
    # ...
    # add this
    has_many(:comments, Comment)
  # ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could do the same &lt;code&gt;has_many&lt;/code&gt; relationship with users - but its not needed.  It is unlikely we would want to look-up all a user&amp;rsquo;s comments outside the context of a Blog.&lt;/p&gt;
&lt;h2 id=&#34;update-migration-to-delete-sub-resource-when-top-resource-is-deleted&#34;&gt;Update Migration to delete sub-resource when top-resource is deleted&lt;/h2&gt;
&lt;p&gt;To create the rails equivalent of dependent_delete we change the migration to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# priv/repo/migrations/20200704161651_create_comments.exs
      # ...
      # replce
      # add :post_id, references(:posts, on_delete: :nothing)
      # add :user_id, references(:users, on_delete: :nothing)
      # with
      add :post_id, references(:posts, on_delete: :delete_all), null: false
      add :user_id, references(:users, on_delete: :delete_all), null: false
      # ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we should be able to migrate:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix ecto.migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Start simple with the seed file&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Lets add a comment to our prebuild posts:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# priv/repo/seeds.exs
# ...
# add the alias to keep things short
alias FeenixIntro.Blogs.Comment

# ...
# this ensures all we have all the correct fields:
Repo.insert!(%Comment{user_id: dog.id, post_id: post1.id, message: &amp;quot;woof&amp;quot; })

# this also checks the relationships
post2
|&amp;gt; Ecto.build_assoc(:comments)
|&amp;gt; Comment.changeset(%{user_id: dog.id, post_id: post2.id, message: &amp;quot;BARK&amp;quot; })
|&amp;gt; Repo.insert!()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets run the seed and see if all is working:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix run priv/repo/seeds.exs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nice lets make a quick git snapshot before we work on the html aspects&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;Comments added as a resource and relationship to Posts established&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;preload-comments-within-get_post&#34;&gt;Preload comments within get_post&lt;/h2&gt;
&lt;p&gt;To show the comments within a post we will need to preload the comments &amp;ndash; this is done by adding &lt;code&gt;Repo.preload(:comments)&lt;/code&gt; to our function: &lt;code&gt;def get_post!(id)&lt;/code&gt; &amp;ndash; however, we will also want to display the comment&amp;rsquo;s author &amp;ndash; so we need to do a nested preload with: &lt;code&gt;Repo.preload([comments: [:user]])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So now this function looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs.ex
def get_post!(id) do
    Post
    |&amp;gt; Repo.get!(id)
    |&amp;gt; Repo.preload(:user)
    |&amp;gt; Repo.preload([comments: [:user]])
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This can actually be shortened to (this will be helpful later):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lib/feenix_intro/blogs.ex
def get_post!(id) do
    Post
    |&amp;gt; Repo.get!(id)
    |&amp;gt; Repo.preload([:user, comments: [:user]])
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;display-the-comments-within-the-post-show&#34;&gt;Display the comments within the Post show&lt;/h2&gt;
&lt;p&gt;Now that we have updated the get_post! to preload comments we can display the comments too by adding to the end of our post&amp;rsquo;s - show template:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/templates/post/show.html.eex

# ...
&amp;lt;table&amp;gt;
  &amp;lt;thead&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th&amp;gt;Comment Author&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Message&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/thead&amp;gt;
  &amp;lt;tbody&amp;gt;
    &amp;lt;%= for comment &amp;lt;- @post.comments do %&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= comment.user.name %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= comment.message %&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;

&amp;lt;span&amp;gt;&amp;lt;%= link &amp;quot;Edit&amp;quot;, to: Routes.post_path(@conn, :edit, @post) %&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span&amp;gt;&amp;lt;%= link &amp;quot;Back&amp;quot;, to: Routes.post_path(@conn, :index) %&amp;gt;&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Start the server &lt;code&gt;mix phx.server&lt;/code&gt; and be sure this works&lt;/p&gt;
&lt;p&gt;Assuming it works, lets commit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;display comments and comment author on post show page&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;creating-comments-as-a-nested-resource&#34;&gt;Creating Comments (as a nested resource)&lt;/h2&gt;
&lt;p&gt;Since we have added comments within the Blogs context and they are associated with a post - it makes sense to create and display comments as a nested resource.  To set this up lets change our routes file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/router.ex
# ...
  scope &amp;quot;/&amp;quot;, FeenixIntroWeb do
    pipe_through :browser

    get &amp;quot;/&amp;quot;, PageController, :index
    resources &amp;quot;/users&amp;quot;, UserController

    # replace this line:
    # resources &amp;quot;/posts&amp;quot;, PostController
    # with:
    resources &amp;quot;/posts&amp;quot;, PostController do
      resources &amp;quot;/comments&amp;quot;, CommentController, only: [:create]
    end
  end
  # ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means we will be able to create a comment only within the context of an existing post (seems reasonable) &amp;ndash; more actions can be added later such as &lt;code&gt;edit&lt;/code&gt; or &lt;code&gt;delete&lt;/code&gt; possibly.&lt;/p&gt;
&lt;p&gt;This also means we need to display our comments within the context of existing posts (the best place for this is the &lt;code&gt;show&lt;/code&gt; - where all the details of the post are shown).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create the controller we just defined - we will need to make a new file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/controllers/comment_controller.ex
defmodule FeenixIntroWeb.CommentController do
  use FeenixIntroWeb, :controller

  alias FeenixIntro.Blogs

  def create(conn, %{&amp;quot;post_id&amp;quot; =&amp;gt; post_id, &amp;quot;comment&amp;quot; =&amp;gt; comment_params}) do
    # define the post we are nested within
    post = Blogs.get_post!(post_id)

    # create our new comment and handle (success or failure)
    case Blogs.create_comment(post, comment_params) do
      {:ok, _comment} -&amp;gt;
        conn
        |&amp;gt; put_flash(:info, &amp;quot;Comment created&amp;quot;)
        |&amp;gt; redirect(to: Routes.post_path(conn, :show, post))

      # TODO: return to form and show errors
      {:error, _changeset} -&amp;gt;
        conn
        |&amp;gt; put_flash(:error, &amp;quot;Comment creation failed&amp;quot;)
        |&amp;gt; redirect(to: Routes.post_path(conn, :show, post))
    end
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: at the moment we don&amp;rsquo;t handle errors, and allow those to be fixed.  We will get to that in a second step.&lt;/p&gt;
&lt;p&gt;We need to update the function &lt;code&gt;create_comment&lt;/code&gt; in order to work as a nested resource:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#  @doc &amp;quot;&amp;quot;&amp;quot;
  Creates a comment.

  ## Examples
      # also update our function docs
      # replace
      # iex&amp;gt; create_comment(%{field: value})
      # with
      iex&amp;gt; create_comment(post, %{field: value})
      {:ok, %Comment{}}

      # replace:
      # iex&amp;gt; create_comment(%{field: bad_value})
      # with:
      iex&amp;gt; create_comment(post, %{field: bad_value})
      {:error, %Ecto.Changeset{}}

  &amp;quot;&amp;quot;&amp;quot;
  # replace
  # def create_comment(attrs \\ %{}) do
  #   %Comment{}
  #   |&amp;gt; Comment.changeset(attrs)
  #   |&amp;gt; Repo.insert()
  # end

  # with (this uses the passed in post and creates an association with the new comment)
  def create_comment(%Post{} = post, attrs \\ %{}) do
    post
    |&amp;gt; Ecto.build_assoc(:comments)
    |&amp;gt; Comment.changeset(attrs)
    |&amp;gt; Repo.insert()
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to create a new Comment &lt;strong&gt;form&lt;/strong&gt; the &lt;code&gt;show&lt;/code&gt; function will need to borrow from a typical &lt;code&gt;new&lt;/code&gt; function and send and empty struct (changeset) for the form &amp;ndash; lets start by updating the PostController show function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/controllers/post_controller.ex
  # ...
  alias FeenixIntro.Blogs.Comment

  def show(conn, %{&amp;quot;id&amp;quot; =&amp;gt; id}) do
    post = Blogs.get_post!(id)
    users = Accounts.list_users()
    # replace:
    # render(conn, &amp;quot;show.html&amp;quot;, post: post, users: users)

    # with: This allows us to add comments on the Post show form!
    comment_changeset = Blogs.change_comment(%Comment{})
    render(conn, &amp;quot;show.html&amp;quot;, post: post, users: users,
                              comment_changeset: comment_changeset)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have an empty changeset for the form - we can add the form to the show page with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/templates/post/show.html.eex
# ...
&amp;lt;h3&amp;gt;Add a Comment&amp;lt;/h3&amp;gt;
&amp;lt;%= form_for @comment_changeset, Routes.post_comment_path(@conn, :create, @post), fn form -&amp;gt; %&amp;gt;

  &amp;lt;%= label form, &amp;quot;Author&amp;quot; %&amp;gt;
  &amp;lt;%= select form, :user_id, Enum.map(@users, &amp;amp;{&amp;amp;1.name, &amp;amp;1.id}) %&amp;gt;
  &amp;lt;%= error_tag form, :user %&amp;gt;

  &amp;lt;%= label form, :message %&amp;gt;
  &amp;lt;%= textarea form, :message %&amp;gt;
  &amp;lt;%= error_tag form, :message %&amp;gt;

  &amp;lt;div&amp;gt;
    &amp;lt;%= submit &amp;quot;Save&amp;quot;%&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s try this out with: &lt;code&gt;mix phx.server&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;assuming all works as expected let&amp;rsquo;s make another git commit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;comment creation as a nested resource within posts&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;handle-input-errors&#34;&gt;Handle Input Errors&lt;/h2&gt;
&lt;p&gt;Prevent empty strings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/32784008/phoenix-render-template-of-other-folder&#34;&gt;https://stackoverflow.com/questions/32784008/phoenix-render-template-of-other-folder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;lets add a minimum message legth to comments:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs/comment.ex
  def changeset(comment, attrs) do
    comment
    |&amp;gt; cast(attrs, @required_fields)
    |&amp;gt; validate_required(@required_fields)
    |&amp;gt; validate_length(:message, min: 3)
  end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, change the controller to prep the data just like a post &lt;code&gt;show&lt;/code&gt; and send the changeset - with the errors. &lt;code&gt;|&amp;gt; put_view(FeenixIntroWeb.PostView)&lt;/code&gt; is how we redirect to other external views as of Phoenix 1.5.1:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/controllers/comment_controller.ex
  # add the alias
  alias FeenixIntro.Accounts

  # ...

  def create(conn, %{&amp;quot;post_id&amp;quot; =&amp;gt; post_id, &amp;quot;comment&amp;quot; =&amp;gt; comment_params}) do
    # ...

      # replace:
      # {:error, _changeset} -&amp;gt;
      #   conn
      #   |&amp;gt; put_flash(:error, &amp;quot;Comment creation failed, please fix the errors&amp;quot;)
      #   |&amp;gt; redirect(to: Routes.post_path(conn, :show, post))

      # with:
      {:error, %Ecto.Changeset{} = changeset} -&amp;gt;
        users = Accounts.list_users()
        conn
        |&amp;gt; put_flash(:error, &amp;quot;Comment creation failed, please fix the errors&amp;quot;)
        |&amp;gt; put_view(FeenixIntroWeb.PostView)   # as of Phoenix 1.5.1
        |&amp;gt; render(&amp;quot;show.html&amp;quot;, post: post, users: users, comment_changeset: changeset)
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming this works make a new git commit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;handle comment creation errors&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;flexible-preloading&#34;&gt;Flexible preloading&lt;/h2&gt;
&lt;p&gt;You may have noticed the pre-loading is hard-coded &amp;ndash; in this case it is ok, but might not always be good.  Here is a flexible alternative:&lt;/p&gt;
&lt;p&gt;We can update / replace the following functions with the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs.ex
  def list_posts(opts \\ [:user]) do
    preloads = Keyword.get(opts, :preloads, [])
    Post
    |&amp;gt; Repo.all()
    |&amp;gt; Repo.preload(preloads)
  end

  def get_post!(id, opts \\ [:user, comments: [:user]]) do
    preloads = Keyword.get(opts, :preloads, [])
    Post
    |&amp;gt; Repo.get!(id)
    |&amp;gt; Repo.preload(preloads)
  end

  def get_comment!(id, opts \\ [:user]) do
    preloads = Keyword.get(opts, :preloads, [])
    Comment
    |&amp;gt; Repo.get!(id)
    |&amp;gt; Repo.preload(preloads)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now we can change our show post controller to look like - so that we can use this flexibility:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/controllers/post_controller.ex
  # ...

  def index(conn, _params) do
    # posts = Blogs.list_posts()
    preloads = [:user]
    posts = Blogs.list_posts(preloads: preloads)
    render(conn, &amp;quot;index.html&amp;quot;, posts: posts)
  end

  def new(conn, _params) do
    users = Accounts.list_users()
    changeset = Blogs.change_post(%Post{})
    render(conn, &amp;quot;new.html&amp;quot;, changeset: changeset, users: users)
  end

  # ...

  def show(conn, %{&amp;quot;id&amp;quot; =&amp;gt; id}) do
    # post = Blogs.get_post!(id)
    preloads = [:user, comments: [:user]]
    post = Blogs.get_post!(id, preloads: preloads)
    users = Accounts.list_users()
    # This allows us to add comments on the Post show form!
    comment_changeset = Blogs.change_comment(%Comment{})
    render(conn, &amp;quot;show.html&amp;quot;, post: post,
                              users: users,
                              comment_changeset: comment_changeset)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have the flexibilty to preload or not depending on what we want to do,&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Phoenix 1.5 Blog Intro</title>
      <link>https://btihen.me/post_elixir_phoenix/phoenix_1_5_blog_intro/</link>
      <pubDate>Sat, 04 Jul 2020 13:06:29 +0200</pubDate>
      <guid>https://btihen.me/post_elixir_phoenix/phoenix_1_5_blog_intro/</guid>
      <description>&lt;h2 id=&#34;purpose&#34;&gt;Purpose&lt;/h2&gt;
&lt;p&gt;This article creates a basic web application backed by a database and creates a few relationships.  I&amp;rsquo;ll use the mix generator commands to make this process quick and easy.  In step two we will add a graphql api.&lt;/p&gt;
&lt;h2 id=&#34;topics-covered&#34;&gt;Topics Covered&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;create a project&lt;/li&gt;
&lt;li&gt;create a resource&lt;/li&gt;
&lt;li&gt;dropdown list of a collection&lt;/li&gt;
&lt;li&gt;pre-load/display sub-reources&lt;/li&gt;
&lt;li&gt;create a has_many relationship&lt;/li&gt;
&lt;li&gt;create a belongs_to relationship&lt;/li&gt;
&lt;li&gt;delete has_many sub-resources when top resource is deleted&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;getting-started---create-an-app&#34;&gt;Getting Started - create an app&lt;/h2&gt;
&lt;p&gt;find the most recent phoenix version:
&lt;a href=&#34;https://github.com/phoenixframework/phoenix/releases&#34;&gt;https://github.com/phoenixframework/phoenix/releases&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix archive.install hex phx_new 1.5.3
mix phx.new feenix_intro
cd feenix_intro
mix ecto.create
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test with: &lt;code&gt;mix phx.server&lt;/code&gt; and go to &lt;code&gt;http://localhost:4000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Ideally you see a the Phoenix Start Page.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create a git snapshot&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init &amp;amp;&amp;amp; git add -A &amp;amp;&amp;amp; git commit -m &amp;quot;init&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-contexts&#34;&gt;Create Contexts&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Context helps us create areas of code isolation and creates an API for other contexts to use&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In our case we will need a Blogs and Accounts (better would have been Authors) context&lt;/p&gt;
&lt;p&gt;Blogs will have the posts and comments and Accounts will have the user and login credentials and user relationships (why not)?  To see the full documentation on Contexts see: &lt;a href=&#34;https://hexdocs.pm/phoenix/contexts.html&#34;&gt;https://hexdocs.pm/phoenix/contexts.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We will generate two resources and Contexts (and add more later) - lets start with users who will post their blogs (users will be within the Accounts context and posts will be within the Blogs context):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.gen.html Accounts User users name:string email:string username:string:unique
mix phx.gen.html Blogs Post posts title:string body:text user_id:references:users
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice we can generate unique fields with &lt;code&gt;:unique&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And we can generate relationships (foriegn keys) with &lt;code&gt;references&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now that we have generated our code - we need to make a few updates:&lt;/p&gt;
&lt;p&gt;First: we need to update our routes in the scope area to look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/ideas_web/router.ex
  scope &amp;quot;/&amp;quot;, FeenixIntroWeb do
    pipe_through :browser

    get &amp;quot;/&amp;quot;, PageController, :index
    resources &amp;quot;/users&amp;quot;, UserController
    resources &amp;quot;/posts&amp;quot;, PostController
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE: the API&amp;rsquo;s for our Contexts &lt;code&gt;Accounts&lt;/code&gt; and &lt;code&gt;Blogs&lt;/code&gt; is in &lt;code&gt;lib/feenix_intro/accounts.ex&lt;/code&gt; and &lt;code&gt;lib/feenix_intro/blogs/post.ex&lt;/code&gt; respectively - as we add more info into these contexts these files will get long!  &lt;strong&gt;Ideally you will always interact with the Context API and not the Repo directly this will help create much more managable code.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;define-the-has_many-relationship&#34;&gt;Define the has_many relationship&lt;/h2&gt;
&lt;p&gt;Before we migrate we need to define the relationships:&lt;/p&gt;
&lt;p&gt;so we update the users with a has_many relationship to posts&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/accounts/user.ex
defmodule FeenixIntro.Accounts.User do
  use Ecto.Schema
  import Ecto.Changeset
  alias FeenixIntro.Blogs.Post

  @required_fields [:name, :email, :username]

  schema &amp;quot;users&amp;quot; do
    has_many(:posts, Post)

    field :name, :string
    field :email, :string
    field :username, :string

    timestamps()
  end

  @doc false
  def changeset(user, attrs) do
    user
    |&amp;gt; cast(attrs, @required_fields)
    |&amp;gt; validate_required(@required_fields)
    |&amp;gt; unique_constraint(:username)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you skip the alias, then &lt;code&gt;has_many&lt;/code&gt; needs to be written as: &lt;code&gt;has_many(:posts, FeenixIntro.Blogs.Post)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;define-the-belongs_to-relationship&#34;&gt;Define the belongs_to relationship&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; replace the &lt;code&gt;field :user_id, :id&lt;/code&gt; with &lt;code&gt;belongs_to(:user, User)&lt;/code&gt; &amp;ndash; you CAN&amp;rsquo;T have both!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs/post.ex
defmodule FeenixIntro.Blogs.Post do
  use Ecto.Schema
  import Ecto.Changeset
  alias FeenixIntro.Blogs.Post
  alias FeenixIntro.Accounts.User

  @required_fields [:user_id, :title, :body]

  schema &amp;quot;posts&amp;quot; do
    belongs_to(:user, User)

    # field :user_id, :id
    field :body, :string
    field :title, :string

    timestamps()
  end

  @doc false
  def changeset(post, attrs) do
    post
    |&amp;gt; cast(attrs, @required_fields)
    |&amp;gt; validate_required(@required_fields)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE: &lt;code&gt;@required_fields [:user_id, :title, :body]&lt;/code&gt; isn&amp;rsquo;t required, but as things change defining a constant that can be reused can be convient.&lt;/p&gt;
&lt;h2 id=&#34;auto-delete-sub-resources&#34;&gt;Auto delete sub-resources&lt;/h2&gt;
&lt;p&gt;To be sure we don&amp;rsquo;t have unreferenced blogs if a user gets deleted we need to change our Blog migration to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# priv/repo/migrations/20200704152318_create_posts.exs
defmodule FeenixIntro.Repo.Migrations.CreatePosts do
  use Ecto.Migration

  def change do
    create table(:posts) do
      add :title, :string
      add :body, :text
      # remove the default
      # add :user_id, references(:users, on_delete: :nothing)
      # add the following to auto delete posts if user is deleted!
      add :user_id, references(:users, on_delete: :delete_all), null: false

      timestamps()
    end

    create index(:posts, [:user_id])
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now it should be safe to migrate using:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix ecto.migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;seed-data&#34;&gt;Seed Data&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s create seed data so that one we know how to do that and two have some data to test before we get all our views and forms working:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# priv/repo/seeds.exs

# Script for populating the database. You can run it as:
#
#     mix run priv/repo/seeds.exs
#
# We recommend using the bang functions (`insert!`, `update!`
# and so on) as they will fail if something goes wrong.

alias FeenixIntro.Repo
alias FeenixIntro.Blogs.Post
alias FeenixIntro.Accounts.User

# reset the datastore
Repo.delete_all(User) # this should also delete all Posts

# insert people
me = Repo.insert!(%User{ name: &amp;quot;Bill&amp;quot;, email: &amp;quot;bill@example.com&amp;quot;, username: &amp;quot;bill&amp;quot; })
dog = Repo.insert!(%User{ name: &amp;quot;Nyima&amp;quot;, email: &amp;quot;nyima@example.com&amp;quot;, username: &amp;quot;nyima&amp;quot; })
Repo.insert!(%Post{ user_id: me.id, title: &amp;quot;Elixir&amp;quot;, body: &amp;quot;Very cool ideas&amp;quot; })
Repo.insert!(%Post{ user_id: me.id, title: &amp;quot;Phoenix&amp;quot;, body: &amp;quot;live is fascinating&amp;quot; })
Repo.insert!(%Post{ user_id: dog.id, title: &amp;quot;Walk&amp;quot;, body: &amp;quot;oh cool&amp;quot; })
Repo.insert!(%Post{ user_id: dog.id, title: &amp;quot;Dinner&amp;quot;, body: &amp;quot;YES!&amp;quot; })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now as the comments state run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix run priv/repo/seeds.exs
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;
&lt;p&gt;run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.server
# or if you prefer:
# iex -S mix phx.server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Test USERS:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Go to: &lt;code&gt;http://localhost:4000/users&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;when we list users and create users - all is well&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TEST POSTS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Go to: &lt;code&gt;http://localhost:4000/posts&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;when we do the same withe posts - we get an error creating new posts and we don&amp;rsquo;t see the author in index and show&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we can&amp;rsquo;t create a post since we required the user_id and there is not field for that&lt;/li&gt;
&lt;li&gt;we can&amp;rsquo;t list the author&amp;rsquo;s name (just the author&amp;rsquo;s ID) until we preload the author along with the post&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;fix-post-creation-with-a-dropdown-list-of-resources&#34;&gt;Fix Post creation with a dropdown list of resources&lt;/h2&gt;
&lt;p&gt;Normally, this would be done with session info to autoselect the authenticated author, but that is for another day.  In this case, we will demonstrate how to load and pass a collection and use that to populate a dropdown entry.&lt;/p&gt;
&lt;p&gt;In the controller we must load users and add the user_id to the post form:
whe we look in the Accounts API we see: &lt;code&gt;list_users()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/controllers/post_controller.ex
  # ...
  # add the accounts context alias
  alias FeenixIntro.Accounts
  # ...
  def new(conn, _params) do
    changeset = Blogs.change_post(%Post{})
    # replace:
    # render(conn, &amp;quot;new.html&amp;quot;, changeset: changeset)
    # with:
    # collection of users for post form
    users = Accounts.list_users()
    # include the collection of users to the new form
    render(conn, &amp;quot;new.html&amp;quot;, changeset: changeset, users: users)
  end
  # ...
  def edit(conn, %{&amp;quot;id&amp;quot; =&amp;gt; id}) do
    post = Blogs.get_post!(id)
    changeset = Blogs.change_post(post)
    # replace:
    render(conn, &amp;quot;edit.html&amp;quot;, post: post, changeset: changeset)
    # with:
    users = Accounts.list_users()
    render(conn, &amp;quot;edit.html&amp;quot;, post: post, changeset: changeset, users: users)
  end
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to adapt the form to give us a choice of users:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/templates/post/form.html.eex
&amp;lt;%= form_for @changeset, @action, fn f -&amp;gt; %&amp;gt;
  &amp;lt;%= if @changeset.action do %&amp;gt;
    &amp;lt;div class=&amp;quot;alert alert-danger&amp;quot;&amp;gt;
      &amp;lt;p&amp;gt;Oops, something went wrong! Please check the errors below.&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;% end %&amp;gt;

  &amp;lt;%= label f, &amp;quot;Author&amp;quot; %&amp;gt;
  &amp;lt;%= select f, :user_id, Enum.map(@users, &amp;amp;{&amp;amp;1.name, &amp;amp;1.id}) %&amp;gt;
  &amp;lt;%= error_tag f, :user %&amp;gt;
  # ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming you can create posts now, lets make another git snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;users and posts resources can be created&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;display-the-author-of-post-with-preloads&#34;&gt;Display the Author of Post (with Preloads)&lt;/h2&gt;
&lt;p&gt;lets display the Blog author - that&amp;rsquo;s often interesting to others.
We can do this with preloading in our Blog context:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs.ex
  # change this line:
  # def list_posts, do: Repo.all(Post)
  def list_posts do
    Post
    |&amp;gt; Repo.all()
    |&amp;gt; Repo.preload(:user)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and also our get_post&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs.ex
  # change:
  # def get_post!(id), do: Repo.get!(Post, id)
  # into:
  def get_post!(id) do
    Post
    |&amp;gt; Repo.get!(id)
    |&amp;gt; Repo.preload(:user)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now we can update our index and show page to display the author&amp;rsquo;s name at the top of the page:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/templates/post/show.html.eex
&amp;lt;h1&amp;gt;Show Post&amp;lt;/h1&amp;gt;

&amp;lt;ul&amp;gt;

  &amp;lt;li&amp;gt;
    &amp;lt;strong&amp;gt;Author:&amp;lt;/strong&amp;gt;
    &amp;lt;%= @post.user.name %&amp;gt;
  &amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and in the index too:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/templates/post/index.html.eex
# ...
&amp;lt;%= for post &amp;lt;- @posts do %&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= post.user.name %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= post.title %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= post.body %&amp;gt;&amp;lt;/td&amp;gt;
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming authors and preload works properly, we can make another git snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;authors names are displayed now with preloading&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;source-code&#34;&gt;Source code&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/btihen/PhoenixIntro&#34;&gt;https://github.com/btihen/PhoenixIntro&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;helpful-resources-used&#34;&gt;Helpful Resources used:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://elixircasts.io/phoenix-contexts&#34;&gt;https://elixircasts.io/phoenix-contexts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/conradwt/zero-to-graphql-using-phoenix&#34;&gt;https://github.com/conradwt/zero-to-graphql-using-phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@damonvjanis/ecto-preloads-in-phoenix-contexts-167d11e5405e&#34;&gt;https://medium.com/@damonvjanis/ecto-preloads-in-phoenix-contexts-167d11e5405e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.to/joseph_lozano/setting-up-a-new-phoenix-1-5-project-with-phoenix-liveview-309n&#34;&gt;https://dev.to/joseph_lozano/setting-up-a-new-phoenix-1-5-project-with-phoenix-liveview-309n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/velotio-perspectives/creating-graphql-apis-using-elixir-phoenix-and-absinthe-486ff38f2549&#34;&gt;https://medium.com/velotio-perspectives/creating-graphql-apis-using-elixir-phoenix-and-absinthe-486ff38f2549&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
