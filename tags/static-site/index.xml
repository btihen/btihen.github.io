<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Static Site | btihen</title>
    <link>https://btihen.me/tags/static-site/</link>
      <atom:link href="https://btihen.me/tags/static-site/index.xml" rel="self" type="application/rss+xml" />
    <description>Static Site</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2022</copyright><lastBuildDate>Sun, 06 Mar 2022 01:57:00 +0200</lastBuildDate>
    <image>
      <url>https://btihen.me/img/btihen_landing_page.png</url>
      <title>Static Site</title>
      <link>https://btihen.me/tags/static-site/</link>
    </image>
    
    <item>
      <title>Bridgetown 1.0 (Beta) - Ruby Static-Site Orientation</title>
      <link>https://btihen.me/post_ruby_rails/bridgetown_1_x_ruby_static_stite_orientation/</link>
      <pubDate>Sun, 06 Mar 2022 01:57:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/bridgetown_1_x_ruby_static_stite_orientation/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;&lt;strong&gt;Overview&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;I have often wanted to build websites using as much of my Rails knowledge as possible.  Now I can!&lt;/p&gt;
&lt;p&gt;Enter Bridgetown - 
&lt;a href=&#34;https://edge.bridgetownrb.com/docs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://edge.bridgetownrb.com/docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A ruby based (erb, components, etc), author-friendly (markdown pages).&lt;/p&gt;
&lt;p&gt;The newest version 1.0 beta uses esbuild by default (or webpacker) and has several pre-build deploy configurations and a quick and easy way to install TailwindCSS!&lt;/p&gt;
&lt;p&gt;Unfortunately, for some reason I found it a bit hard to assemble the information to create a website that would meet my needs and interests.  So this doc is a quick summary and context that will get you through the next step after &lt;code&gt;getting started&lt;/code&gt;.  My understanding is now that are 3 added aspects&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(&lt;strong&gt;bundled configurations&lt;/strong&gt;)[https://www.bridgetownrb.com/docs/bundled-configurations] are for &lt;code&gt;tool-chain setup&lt;/code&gt;, like deployment configs, tailwindcss, stimulusJS, etc.  And&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plugins&lt;/strong&gt; are for things that will show-up in the &lt;code&gt;output html&lt;/code&gt; like SEO Tags, Sitemaps, etc.&lt;/li&gt;
&lt;li&gt;(&lt;strong&gt;automations&lt;/strong&gt;)[https://www.bridgetownrb.com/docs/automations] An automation script is nothing more than a Ruby code file run in the context of an instance
Unfortunately, I still struggle to find the parts I am looking for, so I am adding the links here (to help my future self).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;new-site-setup&#34;&gt;&lt;strong&gt;New Site Setup&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;I listened to the interview about Bridgetown on (Remote Ruby Podcast)[https://remoteruby.transistor.fm/169] so I went and checked it out.  Starting with the (Beta Docs)[https://edge.bridgetownrb.com/docs] - as it has a TailwindCSS installer and lots of excellent deployment setups (in particular Render and Netlify - although I would find Fly.io also interesting)&lt;/p&gt;
&lt;p&gt;So I started by downloading the gem:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem install bridgetown -N -v 1.0.0.beta3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I decided to configure it with the &lt;code&gt;erb&lt;/code&gt; but you can leave off &lt;code&gt;-t erb&lt;/code&gt; and use liquid or change erb for serbea templates.  Anyway, I created a new project with &lt;code&gt;erb&lt;/code&gt; using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bridgetown new bridge_tail_site -t erb
cd bridge_tail_site
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;configure-tailwindcss&#34;&gt;&lt;strong&gt;Configure TailwindCSS&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Installing TailwindCSS it was straightforward - once I found the right area. Follow the instructions at 
&lt;a href=&#34;https://www.bridgetownrb.com/docs/bundled-configurations#tailwindcss&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bridgetownrb.com/docs/bundled-configurations#tailwindcss&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle exec bridgetown configure tailwindcss
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I wanted to see if this worked by starting bridgetown with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/bridgetown start
open localhost:4000
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;configure-alpinejs&#34;&gt;&lt;strong&gt;Configure AlpineJS&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;It looked good - so I went on to install AlpineJS (using the embedded script method) at 
&lt;a href=&#34;https://alpinejs.dev/essentials/installation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://alpinejs.dev/essentials/installation&lt;/a&gt; - so I went to &lt;code&gt;src/_partials/_head.erb&lt;/code&gt; and added &lt;code&gt;&amp;lt;script defer src=&amp;quot;https://unpkg.com/alpinejs@3.9.0/dist/cdn.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; just before the &lt;code&gt;live_reload_dev_js&lt;/code&gt; tag:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- src/_partials/_head.erb --&amp;gt;
...
&amp;lt;!-- AlpineJS script tag--&amp;gt;
&amp;lt;script defer src=&amp;quot;https://unpkg.com/alpinejs@3.9.0/dist/cdn.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;%= live_reload_dev_js %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then I went to the page &lt;code&gt;src/_components/shared/navbar.erb&lt;/code&gt; to add an example from (AlpineJS Start-here page)[https://alpinejs.dev/start-here]&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div x-data=&amp;quot;{ count: 0 }&amp;quot;&amp;gt;
 &amp;lt;button x-on:click=&amp;quot;count++&amp;quot;
         class=&amp;quot;bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded&amp;quot;&amp;gt;
   Increment
 &amp;lt;/button&amp;gt;
 &amp;lt;span x-text=&amp;quot;count&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool this works!  So I went and created my navbar and footer.&lt;/p&gt;
&lt;h2 id=&#34;adding-a-custom-font-in-css&#34;&gt;Adding a Custom Font (in CSS)&lt;/h2&gt;
&lt;p&gt;We will add the &lt;code&gt;handlee&lt;/code&gt; font as it is distinctive and easy to see that it works (or not).
Let&amp;rsquo;s get it from (Google Webfonts Helper)[https://google-webfonts-helper.herokuapp.com/fonts/handlee?subsets=latin] site.  &lt;strong&gt;This is a convenient site as it has both the font and the CSS needed.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now that you&amp;rsquo;ve downloaded the font, create a new folder in the frontend folder and copy the font into it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p frontend/fonts/handlee
cp ~/Downloads/handlee-v12-latin/* frontend/fonts/handlee/.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now grab the CSS from the Google Webfonts Helper site and copy it into the &lt;code&gt;frontend/styles/index.css&lt;/code&gt; file (I like to put the font css just below the tailwind imports). So the start of index.css looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* frontend/styles/index.css */

/* triggers frontend rebuilds */
@import &amp;quot;jit-refresh.css&amp;quot;;

/* Set up Tailwind imports */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Import Fonts */
@font-face {
  font-family: &#39;Handlee&#39;;
  font-style: normal;
  font-weight: 400;
  src: local(&#39;&#39;),
       url(&#39;../fonts/handlee/handlee-v12-latin-regular.woff2&#39;) format(&#39;woff2&#39;),
       url(&#39;../fonts/handlee/handlee-v12-latin-regular.woff&#39;) format(&#39;woff&#39;);
}

/* ... */
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now within your CSS definitions you can use: &lt;code&gt;font-family: &#39;Handlee&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s try it out - let&amp;rsquo;s add that to the h1 definition in the index.css file - so now that would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* ... */
h1 {
  margin: 1rem 0 3rem;
  text-align: center;
  font-weight: 900;
  font-size: 2.5rem;
  font-family: &#39;Handlee&#39;;
  color: var(--heading-color);
  line-height: 1.2;
}
/* ... */
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Be sure the Title of your homepage is now using the &amp;lsquo;Handlee&amp;rsquo; font.&lt;/p&gt;
&lt;h2 id=&#34;adding-a-custom-font-into-tailwindcss&#34;&gt;Adding a Custom Font (into TailwindCSS)&lt;/h2&gt;
&lt;p&gt;Now we need to define this font within TailwindCSS config to have it create a &lt;code&gt;font-handlee&lt;/code&gt; class so we can use this font within our tailwind class definitions.  To do this we will need to update the &lt;code&gt;tailwind.config.js&lt;/code&gt; file to look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.exports = {
  content: [
    &#39;./src/**/*.{html,md,liquid,erb,serb}&#39;,
    &#39;./frontend/javascript/**/*.js&#39;,
  ],
  theme: {
    extend: {
      fontFamily: {
        handlee: [&#39;Handlee&#39;]
      },
    },
  },
  plugins: [],
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s update the default layout to use Handlee for the text within the main body. So lets open &lt;code&gt;src/_layouts/default.erb&lt;/code&gt; and change the &lt;code&gt;main&lt;/code&gt; tag to have the &lt;code&gt;class=&amp;quot;font-handlee&amp;quot;&lt;/code&gt; in it - so now it might look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- ... --&amp;gt;
    &amp;lt;main class=&amp;quot;font-hand&amp;quot;&amp;gt;
      &amp;lt;%= yield %&amp;gt;
    &amp;lt;/main&amp;gt;
&amp;lt;!-- ... --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now both the Title and Body of each page should be using the Handlee font.&lt;/p&gt;
&lt;h2 id=&#34;adding-an-image&#34;&gt;Adding an Image&lt;/h2&gt;
&lt;p&gt;So to add an image we need to put it in the &lt;code&gt;src/images&lt;/code&gt; folder:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p /images/posts/welcome_post
cp ~/Desktop/sunrise.jpeg /images/posts/welcome_post/.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;rsquo;s test this in our &lt;strong&gt;navbar&lt;/strong&gt; file &lt;code&gt;src/_components/shared/navbar.erb&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;header&amp;gt;
  &amp;lt;%# &amp;lt;img src=&amp;quot;/images/logo.svg&amp;quot; alt=&amp;quot;Logo&amp;quot; /&amp;gt; %&amp;gt;
  &amp;lt;img src=&amp;quot;/images/posts/welcome/sunrise.jpeg&amp;quot; alt=&amp;quot;Sunrise&amp;quot; /&amp;gt;
&amp;lt;/header&amp;gt;
&amp;lt;!-- ... --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bridgetown uses &lt;strong&gt;Kramdown&lt;/strong&gt; as the Markdown rendering engine.  You can learn more about Kramdown Markdown at: 
&lt;a href=&#34;https://kramdown.gettalong.org/quickref.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://kramdown.gettalong.org/quickref.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s also add it in our sample blog post &lt;code&gt;src/_posts/2022-03-05-welcome-to-bridgetown.md&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---
layout: post
title:  &amp;quot;Your First Post on Bridgetown&amp;quot;
date:   2022-03-05 23:22:30 +0100
categories: updates
---
**Display our image!**

![Sunrise](/images/posts/welcome/sunrise.jpeg)

_Now on to the post_
Youâll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `bridgetown serve`, which launches a web server and auto-regenerates your site when a file is updated.

...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hopefully you see the image:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;once on the page &lt;code&gt;http://localhost:4000/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;twice on the page &lt;code&gt;http://localhost:4000/updates/2022/03/05/welcome-to-bridgetown/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;deploy&#34;&gt;&lt;strong&gt;Deploy&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s now deploy this Webpage (using the &lt;code&gt;configure&lt;/code&gt; command) it is very straightforward!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First, be sure you have pushed your project to github or gitlab - create the repo online and push it with:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;Configured w TailwindCSS and Handlee Font&amp;quot;
git remote add origin git@github.com:gitusername/bridge_tail_site.git
git branch -M main
git push -u origin main
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Second, install the config for your deploy service (in this case &lt;code&gt;netlify&lt;/code&gt;) by typing:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle exec bridgetown configure netlify
git add bin/netlify.sh netlify.toml
git commit -m &amp;quot;add netlify config&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Third, connect your netlify account to the repo you just created.&lt;/li&gt;
&lt;li&gt;Four, click &lt;code&gt;deploy&lt;/code&gt; within the netlify site (if it hasn&amp;rsquo;t already startet) and wait 5-10 mins (yes its kinda slow to deploy) and you should have your new website!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Woo Hoo.&lt;/p&gt;
&lt;h2 id=&#34;what-didnt-work-yet&#34;&gt;What didn&amp;rsquo;t work (yet!)&lt;/h2&gt;
&lt;p&gt;I tried using the Bridgetown Javascript install instructions at: 
&lt;a href=&#34;https://www.bridgetownrb.com/docs/frontend-assets#javascript&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bridgetownrb.com/docs/frontend-assets#javascript&lt;/a&gt; &amp;amp; also the AlpineJS instructions at: 
&lt;a href=&#34;https://alpinejs.dev/essentials/installation#as-a-module&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://alpinejs.dev/essentials/installation#as-a-module&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am hoping to install AlpineJS as an imported module (so building isn&amp;rsquo;t depending on a web-connection and the code needed is local).  So I tried removing the AplineJS script tag from the header:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- src/_partials/_head.erb --&amp;gt;
...
&amp;lt;!-- AlpineJS script tag--&amp;gt;
&amp;lt;%# &amp;lt;script defer src=&amp;quot;https://unpkg.com/alpinejs@3.9.0/dist/cdn.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; %&amp;gt;
&amp;lt;%= live_reload_dev_js %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then installing alpinejs&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn add alpinejs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and I confirmed that I see the AlpineJS in the node_modules folder.&lt;/p&gt;
&lt;p&gt;Then I import and start AlpineJS in &lt;code&gt;frontend/javascript/index.js&lt;/code&gt; so it looked like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// frontend/javascript/index.js
import &amp;quot;index.css&amp;quot;
import Alpine from &#39;alpinejs&#39;
// Import all JavaScript &amp;amp; CSS files from src/_components
import components from &amp;quot;bridgetownComponents/**/*.{js,jsx,js.rb,css}&amp;quot;

console.info(&amp;quot;Bridgetown is loaded!&amp;quot;)
window.Alpine = Alpine
Alpine.start()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But unfortunately, this doesn&amp;rsquo;t work :( If you know how to make it work, I&amp;rsquo;ll be glad to update this document.&lt;/p&gt;
&lt;p&gt;I have also created a github discussion to hopefully help: 
&lt;a href=&#34;https://github.com/bridgetownrb/bridgetown/discussions/506&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/bridgetown/discussions/506&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;feature-still-to-explore&#34;&gt;Feature still to explore&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Add a Custom Font&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bundle Configs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setup for purging css: (bundle exec bridgetown configure purgecss) - 
&lt;a href=&#34;https://www.bridgetownrb.com/docs/bundled-configurations#purgecss-post-build-hook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bridgetownrb.com/docs/bundled-configurations#purgecss-post-build-hook&lt;/a&gt; - installed by default with Tailwind&lt;/li&gt;
&lt;li&gt;Rails Default JS - (bundle exec bridgetown configure stimulus) - 
&lt;a href=&#34;https://www.bridgetownrb.com/docs/bundled-configurations#stimulus&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bridgetownrb.com/docs/bundled-configurations#stimulus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rails Turbo features: (bundle exec bridgetown configure turbo) - 
&lt;a href=&#34;https://www.bridgetownrb.com/docs/bundled-configurations#turbo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bridgetownrb.com/docs/bundled-configurations#turbo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Animation Transitions: (bundle exec bridgetown configure swup) - 
&lt;a href=&#34;https://www.bridgetownrb.com/docs/bundled-configurations#swupjs-page-transitions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bridgetownrb.com/docs/bundled-configurations#swupjs-page-transitions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Automations&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bulma Configured Site: (bundle exec bridgetown apply 
&lt;a href=&#34;https://github.com/whitefusionhq/bulmatown&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/whitefusionhq/bulmatown&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Cloudinary Configuration: (bundle exec bridgetown apply 
&lt;a href=&#34;https://github.com/bridgetownrb/bridgetown-cloudinary&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/bridgetown-cloudinary&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Netlify Configuration: (bundle exec bridgetown apply 
&lt;a href=&#34;https://github.com/bridgetownrb/automations/netlify.rb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/automations/netlify.rb&lt;/a&gt;) - how is this different from Netlify bundle configure?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Testing&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MiniTests: (bundle exec bridgetown configure minitesting) - 
&lt;a href=&#34;https://www.bridgetownrb.com/docs/testing#use-ruby-and-minitest-to-test-html-directly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bridgetownrb.com/docs/testing#use-ruby-and-minitest-to-test-html-directly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cypres JS Testing: (bundle exec bridgetown apply 
&lt;a href=&#34;https://github.com/ParamagicDev/bridgetown-automation-cypress&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/ParamagicDev/bridgetown-automation-cypress&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Plugins&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SEO Tags (bundle add bridgetown-seo-tag -g bridgetown_plugins): 
&lt;a href=&#34;https://github.com/bridgetownrb/bridgetown-seo-tag&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/bridgetown-seo-tag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Atom Feed (bundle add bridgetown-feed -g bridgetown_plugins): 
&lt;a href=&#34;https://github.com/bridgetownrb/bridgetown-feed&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/bridgetown-feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SVG in HTML inline (bundle add &amp;ldquo;bridgetown-svg-inliner&amp;rdquo; -g bridgetown_plugins): 
&lt;a href=&#34;https://github.com/ayushn21/bridgetown-svg-inliner&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/ayushn21/bridgetown-svg-inliner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Liquid QuickSearch (bundle add bridgetown-quick-search -g bridgetown_plugins): 
&lt;a href=&#34;https://github.com/bridgetownrb/bridgetown-quick-search&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/bridgetown-quick-search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add a SiteMap (bundle add bridgetown-sitemap -g bridgetown_plugins): 
&lt;a href=&#34;https://github.com/ayushn21/bridgetown-sitemap&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/ayushn21/bridgetown-sitemap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Markdown JS (bundle add bridgetown-mdjs -g bridgetown_plugins): 
&lt;a href=&#34;https://github.com/bridgetownrb/bridgetown-mdjs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/bridgetown-mdjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HTML Minify (bundle add bridgetown-minify-html -g bridgetown_plugins): 
&lt;a href=&#34;https://github.com/bt-rb/bridgetown-minify-html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bt-rb/bridgetown-minify-html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Github ViewComponents (bundle add bridgetown-view-component -g bridgetown_plugins): 
&lt;a href=&#34;https://github.com/bridgetownrb/bridgetown-view-component&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/bridgetown-view-component&lt;/a&gt; &amp;ndash; but the docs are here: 
&lt;a href=&#34;https://www.bridgetownrb.com/docs/components/ruby#need-compatibility-with-rails-try-viewcomponent-experimental&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bridgetownrb.com/docs/components/ruby#need-compatibility-with-rails-try-viewcomponent-experimental&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GraphQL Api for Bridgetown (bundle add graphtown -g bridgetown_plugins): 
&lt;a href=&#34;https://github.com/whitefusionhq/graphtown&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/whitefusionhq/graphtown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bulma Starter (bundle exec bridgetown apply 
&lt;a href=&#34;https://github.com/whitefusionhq/bulmatown%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/whitefusionhq/bulmatown)&lt;/a&gt;: 
&lt;a href=&#34;https://github.com/whitefusionhq/bulmatown&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/whitefusionhq/bulmatown&lt;/a&gt; (something went wrong on my first try - and don&amp;rsquo;t use this with tailwindcss :)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Content Management Plugins&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Notable MD Editor (bundle add bridgetown-notable -g bridgetown_plugins): 
&lt;a href=&#34;https://github.com/jamie/bridgetown-notable&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/jamie/bridgetown-notable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Prismic Flat CMS (bin/bridgetown apply 
&lt;a href=&#34;https://github.com/bridgetownrb/bridgetown-prismic%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/bridgetown-prismic)&lt;/a&gt;: 
&lt;a href=&#34;https://github.com/bridgetownrb/bridgetown-prismic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/bridgetown-prismic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This looks promising for people familiar with Rails, we will see how it competes with Astro and the other JAMF Stacks for the general public.&lt;/p&gt;
&lt;p&gt;So far, the only downsides have been:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I am not sure I fully understand the logic of 3 added aspects of additional features - for example why is there a netlify automation and bundle config?&lt;/li&gt;
&lt;li&gt;I have only been able to install AlpineJS as a weblink and not as an included module (If I figure it out I&amp;rsquo;ll update this document and or make a configuration script) - maybe I just need to learn into StimulusJS.&lt;/li&gt;
&lt;li&gt;I would like to use Fly.io too (if I figure it out I&amp;rsquo;ll write a configuration script)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Apparently, Vue, React, Bulma plugin-configuations are comming too.
As well as workflows and deployment for github and gitlab.
This should be interesting and fun.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Academic Content Commands</title>
      <link>https://btihen.me/post_tech_notes/hugo_academic_cheatsheet/</link>
      <pubDate>Sat, 23 May 2020 10:39:21 +0200</pubDate>
      <guid>https://btihen.me/post_tech_notes/hugo_academic_cheatsheet/</guid>
      <description>&lt;h2 id=&#34;from-the-academic-documentation&#34;&gt;From the Academic Documentation&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://sourcethemes.com/academic/docs/managing-content&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;create-a-user&#34;&gt;Create a User&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;hugo new --kind authors authors/firstname_lastname
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;add person&amp;rsquo;s image&lt;/strong&gt; (png or jpg)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp picture.jpg content/authors/firstname_lastname/avatar.jpg
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-blog&#34;&gt;Create a Blog&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;hugo new --kind post post/blog_title
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;images within the article&lt;/strong&gt; - add images to the article folder:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp image.jpg content/post/blog_title/article_image.jpg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and add it to the content using: &lt;code&gt;![kanban](example.jpg)&lt;/code&gt; within the article&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;add a display image&lt;/strong&gt; (png or jpg)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp picture.jpg content/post/blog_title/featured.jpg
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;add-a-publication-reference&#34;&gt;Add a Publication Reference&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;hugo new --kind publication publication/publication_title
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;add a display image&lt;/strong&gt; (png or jpg)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp picture.jpg content/publication/publication_title/featured.jpg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;add a pdf&lt;/strong&gt; (with the same name as the folder) and it will be automatically available&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp picture.pdf content/publication/publication_title/publication_title.pdf
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-project&#34;&gt;Create a Project&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;hugo new --kind project project/project_name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;add a display image&lt;/strong&gt; (png or jpg)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp picture.jpg content/project/project_name/featured.jpg
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-talk&#34;&gt;Create a Talk&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;hugo new --kind talk talk/my-talk-name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Talk Slides&lt;/strong&gt; are a bit more complicated see:

&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://sourcethemes.com/academic/docs/managing-content/#create-slides&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;course-documentation&#34;&gt;Course (Documentation)&lt;/h2&gt;
&lt;p&gt;This is tricky (copy and rename an existing &lt;code&gt;course&lt;/code&gt; and adapt it)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;courses&lt;/code&gt; can be renamed and can have multiple folders (courses) within it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; the &lt;code&gt;algebra_1&lt;/code&gt; folder cannot have any sub-folders. Within an actual course all materials must be within a FLAT hierarchy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Website using Github</title>
      <link>https://btihen.me/post_tech_notes/hugo_academic_website_steps/</link>
      <pubDate>Sat, 16 May 2020 10:39:21 +0200</pubDate>
      <guid>https://btihen.me/post_tech_notes/hugo_academic_website_steps/</guid>
      <description>&lt;h3 id=&#34;step-0-install-hugo&#34;&gt;step 0: install hugo&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install hugo
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-1-create-a-public-username_website-repo&#34;&gt;step 1: create a &lt;strong&gt;public&lt;/strong&gt; &lt;code&gt;username_website&lt;/code&gt; repo&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;ll assume your github account is &lt;code&gt;username&lt;/code&gt; I think this repo needs to be publicly readable (not 100% sure)&lt;/p&gt;
&lt;h3 id=&#34;step-2-clone-the-academic-hugo-locally&#34;&gt;step 2: clone the academic hugo locally&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/sourcethemes/academic-kickstart.git username_website
cd academic_website
git submodule update --init --recursive  # without this the site won&#39;t start correctly
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;be sure you have many files within: &lt;strong&gt;&lt;code&gt;themes/academic&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;step-3-update-gitignore--public-folder&#34;&gt;step 3: Update .gitignore &amp;amp; public folder&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;update &lt;code&gt;.gitignore&lt;/code&gt; remove the line with &lt;code&gt;public&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;be sure there is no &lt;code&gt;public&lt;/code&gt; folder (yet), if there is remove it and all its contents.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;step-4-point-this-repo-to-your-username_website-repo&#34;&gt;step 4: point this repo to your &lt;code&gt;username_website&lt;/code&gt; repo&lt;/h3&gt;
&lt;p&gt;I have found the easiest way to overwrite the source &lt;code&gt;origin&lt;/code&gt; repo is to do this by hand.&lt;/p&gt;
&lt;p&gt;Currently your &lt;code&gt;.git/config&lt;/code&gt; file will currently look like (notice the url referencing: &lt;code&gt;git://github.com/sourcethemes/academic-kickstart.git&lt;/code&gt; - this is what we need to update):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true
[remote &amp;quot;origin&amp;quot;]
	url = git://github.com/sourcethemes/academic-kickstart.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch &amp;quot;master&amp;quot;]
	remote = origin
	merge = refs/heads/master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;change the origin url by hand or by using sed:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sed -i.bak -e &#39;s/https:\/\/github.com\/sourcethemes\/academic-kickstart.git/git@github.com:username\/username_website.git/&#39; .git/config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;when your &lt;code&gt;.git/config&lt;/code&gt; file is correct it will look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true
[remote &amp;quot;origin&amp;quot;]
	url = git@github.com:username/username_website.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch &amp;quot;master&amp;quot;]
	remote = origin
	merge = refs/heads/master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now you can push this local repo to your github repo using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push -u origin --all
# git init
# git add .
# git commit -m &amp;quot;Initial commit&amp;quot;
# git push -u origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-5-configure-website-basics&#34;&gt;step 5: configure website basics&lt;/h3&gt;
&lt;h4 id=&#34;5a-set-your-site-name&#34;&gt;5A: Set your site name:&lt;/h4&gt;
&lt;p&gt;in &lt;code&gt;config/_default/config.toml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;find the &lt;code&gt;title&lt;/code&gt; attribute and set it to &lt;code&gt;username&lt;/code&gt; (or whatever is appropriate)&lt;/p&gt;
&lt;h4 id=&#34;5b-pick-a-themes&#34;&gt;5B: Pick a themes&lt;/h4&gt;
&lt;p&gt;from 
&lt;a href=&#34;https://sourcethemes.com/academic/themes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://sourcethemes.com/academic/themes/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in &lt;code&gt;config/_default/config.toml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;find the &lt;code&gt;theme&lt;/code&gt; attribute and set it to your favorite theme color (or leave it as is)&lt;/p&gt;
&lt;h4 id=&#34;5c-site-logo--favicon&#34;&gt;5C: site logo &amp;amp; favicon&lt;/h4&gt;
&lt;p&gt;Put your image files into assets/images:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;logo.png&lt;/code&gt; (the logo on your webpage) file and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;icon.png&lt;/code&gt; (the favicon - icon in the webtab)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can go to &lt;code&gt;https://www.namecheap.com/logo-maker&lt;/code&gt; and make a logo&lt;/p&gt;
&lt;h4 id=&#34;5d-menu-items&#34;&gt;5D: menu items&lt;/h4&gt;
&lt;p&gt;in &lt;code&gt;config/_default/menus.toml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;remove any items you won&amp;rsquo;t use.  In my case this file now looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[main]]
  name = &amp;quot;Posts&amp;quot;
  url = &amp;quot;#posts&amp;quot;
  weight = 20

[[main]]
  name = &amp;quot;About&amp;quot;
  url = &amp;quot;#about&amp;quot;
  weight = 50

[[main]]
  name = &amp;quot;Contact&amp;quot;
  url = &amp;quot;#contact&amp;quot;
  weight = 60
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These will also be the sections on the home page that will be enabled and configured.&lt;/p&gt;
&lt;p&gt;The larger the weight the further to the &lt;strong&gt;right&lt;/strong&gt; the item will be shown.&lt;/p&gt;
&lt;h3 id=&#34;step-6-configure-site-parameters&#34;&gt;step 6: configure site parameters&lt;/h3&gt;
&lt;p&gt;You may want to read through all the params - but the ones listed here are enough to get started.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;site_type&lt;/strong&gt; &amp;ndash; in the file: &lt;code&gt;config/_default/params.toml&lt;/code&gt;: be sure to configure the &lt;code&gt;site_type&lt;/code&gt; variable&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;configure &amp;lsquo;contact details&amp;rsquo;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;if you choose not to add an email, then be sure to set the variable &lt;code&gt;email_form=0&lt;/code&gt; on the &lt;code&gt;content/home/contact.md&lt;/code&gt; file!&lt;/li&gt;
&lt;li&gt;if you choose not to enter an address and coordinates the in the &lt;code&gt;[map]&lt;/code&gt; section set the &lt;code&gt;engine=0&lt;/code&gt; to avoid problems.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;configure social details&lt;/strong&gt; &amp;ndash; optional&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Regional Settings&lt;/strong&gt; &amp;ndash; NOTE: The date display settings seems to have a bug &amp;ndash; so I don&amp;rsquo;t recommend adjusting that.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;step-7-configure-your-homepage&#34;&gt;step 7: configure your homepage&lt;/h3&gt;
&lt;p&gt;At this point I suggest starting &lt;code&gt;hugo server&lt;/code&gt; so you can watch your edits.&lt;/p&gt;
&lt;p&gt;Now go into the folder &lt;code&gt;content/home&lt;/code&gt; and we will adjust or disable the files in this folder.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;disable with: &lt;code&gt;active=false&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;enable with: &lt;code&gt;active=true&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;oder with: &lt;code&gt;weight=20&lt;/code&gt; the bigger the number the further down on the page is show (I suggest you use the same weights used in the menu)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;contact.md&lt;/code&gt;&lt;/strong&gt; - review and see if changes are desired.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;accomplishments.md&lt;/code&gt;&lt;/strong&gt; - (and all other home page sections you decide not to display) change &lt;code&gt;active=true&lt;/code&gt; to &lt;strong&gt;&lt;code&gt;active=false&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;7a-about-page&#34;&gt;7A: &lt;code&gt;about&lt;/code&gt; page&lt;/h4&gt;
&lt;p&gt;I prefer to use the &lt;code&gt;about&lt;/code&gt; page when it is a person&amp;rsquo;s site and the &lt;code&gt;people&lt;/code&gt; page when the site is about a group effort.  So in this case:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new --kind authors authors/author_name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;content/home/about.md&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;change the title to whatever you like: biography, about, etc&amp;hellip;&lt;/li&gt;
&lt;li&gt;change the variable &lt;code&gt;author&lt;/code&gt; to match the name you used to generate you profile above, ie:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;author = &amp;quot;author_name&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;content/authors/author_name/_index.md&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adjust the file so the information is accurate&lt;/li&gt;
&lt;li&gt;below the &lt;code&gt;---&lt;/code&gt; toward the end of the file, add your own free text to the about page.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;content/authors/author_name/avatar.jpeg&lt;/code&gt;&lt;/strong&gt; (png, jpg, etc also work)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add an attractive image to the folder &lt;code&gt;content/authors/author_name/&lt;/code&gt; and name it: &lt;strong&gt;&lt;code&gt;avatar.jpg&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;7b-people-or-team-page&#34;&gt;7B: &lt;code&gt;people&lt;/code&gt; (or Team) page&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;disable &lt;code&gt;content/home/about.md&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mark the &lt;code&gt;active&lt;/code&gt; variable as &lt;code&gt;false&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;active=false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;enable &lt;code&gt;content/home/people.md&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set &lt;code&gt;active=true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;create sub-group names:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[content]
  user_groups = [&amp;quot;Educators&amp;quot;, &amp;quot;Researchers&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or alternatively, use an empty string to create a team without sub-teams:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[content]
  user_groups = [&amp;quot;&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Create the people (authors)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new --kind authors authors/person_name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;content/authors/person_name/_index.md&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add one (or more) &lt;code&gt;user_group&lt;/code&gt; to the person&amp;rsquo;s profile using the &lt;code&gt;user_groups&lt;/code&gt; variable:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;user_groups = [&amp;quot;Educators&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if you used an empty string in &lt;code&gt;people.md&lt;/code&gt; add:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;user_groups = [&amp;quot;&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Edit this file so that the information is accurate&lt;/li&gt;
&lt;li&gt;below the &lt;code&gt;---&lt;/code&gt; toward the end of the file, add your own free text to the about page.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;content/authors/person_name/avatar.jpeg&lt;/code&gt;&lt;/strong&gt; (png, jpg, etc also work)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add an attractive image to the folder &lt;code&gt;content/authors/person_name/&lt;/code&gt; and name it: &lt;strong&gt;&lt;code&gt;avatar.jpg&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;step-8-test-publish-to-usernamegithubio&#34;&gt;step 8: Test publish to &lt;code&gt;username.github.io&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;When you site is good enough to publish then its time to follow the following steps (these MUST be done in order to prevent problems!)&lt;/p&gt;
&lt;h4 id=&#34;8a-public-folder-non-existent&#34;&gt;8A: public folder (non-existent)&lt;/h4&gt;
&lt;p&gt;The first time you do setup for publishing it is important this folder doesn&amp;rsquo;t exist yet and that &lt;code&gt;public&lt;/code&gt; isn&amp;rsquo;t listed in the .gitignore` file&lt;/p&gt;
&lt;h4 id=&#34;8b-git-snapshot&#34;&gt;8B: git snapshot&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;(DO NOT YET GENERATE your website)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Create your git snapshot (very important at this point since the next steps are tricky)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;First draft of homepage&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;8c-make-second-github-repo-usernamegithubio&#34;&gt;8C: make second github repo &lt;strong&gt;&lt;code&gt;username.github.io&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Now make a second &lt;strong&gt;public&lt;/strong&gt; repo (CLICK THE BOX TO INCLUDE A &lt;strong&gt;README&lt;/strong&gt; and/or a &lt;strong&gt;LISENCE&lt;/strong&gt; file!) on github called &lt;strong&gt;&lt;code&gt;username.github.io&lt;/code&gt;&lt;/strong&gt;, this MUST be exactly: &lt;code&gt;username.github.io&lt;/code&gt; for this to work!&lt;/p&gt;
&lt;p&gt;Double check your repo is not empty, but has a &lt;strong&gt;README&lt;/strong&gt; and/or a &lt;strong&gt;LISENCE&lt;/strong&gt; file.&lt;/p&gt;
&lt;p&gt;NOW go to github repo &lt;strong&gt;settings&lt;/strong&gt; and click on &lt;strong&gt;manage access&lt;/strong&gt; and be sure you have permission to at administer (or at least write to this repo) &amp;ndash; probably not so click the &lt;strong&gt;&lt;code&gt;invite teams or people&lt;/code&gt;&lt;/strong&gt; button and add yourself as an admin (an other as needed).&lt;/p&gt;
&lt;h4 id=&#34;8d-clone-usernamegithubio-to-public-within-your-hugo-project&#34;&gt;8D: clone &lt;strong&gt;&lt;code&gt;username.github.io&lt;/code&gt;&lt;/strong&gt; to public (within your Hugo project)&lt;/h4&gt;
&lt;p&gt;now go back into your website code (root folder) and type:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/username/username.github.io.git public
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;if you see: &lt;code&gt;warning: You appear to have cloned an empty repository.&lt;/code&gt; &amp;ndash; go back to the repo and create a README file!&lt;/p&gt;
&lt;h4 id=&#34;8e-check-your-permissions&#34;&gt;8E: check your permissions&lt;/h4&gt;
&lt;p&gt;enter you public folder and create an &lt;code&gt;index.html&lt;/code&gt; file and put in very simple html code: &lt;code&gt;&amp;lt;h1&amp;gt;Hello username.github.io&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd public
touch index.html
echo &#39;&amp;lt;h1&amp;gt;Hello username.github.io&amp;lt;/h1&amp;gt;&#39; &amp;gt;&amp;gt; index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now check this in and push it to github.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;test webpage&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point you should see a bunch of message and toward the end you should see a line with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;To github.com:username/username.github.io.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If instead you get the error:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;remote: Permission to peakchallenges/peakchallenges.github.io.git denied to btihen.
fatal: unable to access &#39;https://github.com/peakchallenges/peakchallenges.github.io.git/&#39;: The requested URL returned error: 403
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;go back and check your site permissions.&lt;/p&gt;
&lt;p&gt;If site permissions aren&amp;rsquo;t a problem do the following:&lt;/p&gt;
&lt;p&gt;re-create your website repo &lt;code&gt;username.github.io.git&lt;/code&gt; outside the webcode project.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:username/username.github.io.git
cd username.github.io
echo &#39;&amp;lt;h1&amp;gt;Hello username.github.io - v1&amp;lt;/h1&amp;gt;&#39; &amp;gt;&amp;gt; index.html
git add index.html
git commit -m &amp;quot;update readme and test permissions&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;assuming this works then move this repo into the hugo repo:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rm -rf username_website/public
mv username.github.io username_website/public
cd username_website/public
echo &#39;&amp;lt;h1&amp;gt;Hello username.github.io - v2&amp;lt;/h1&amp;gt;&#39; &amp;gt;&amp;gt; index.html
git commit -am &amp;quot;update readme and test permissions within hugo project&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;8f-check-the-website&#34;&gt;8F: check the website&lt;/h4&gt;
&lt;p&gt;Wait a few minutes and go to the website &lt;code&gt;https://username.github.io&lt;/code&gt; and be sure you see your newly published html page.&lt;/p&gt;
&lt;h3 id=&#34;step-9-configure-public-as-a-submodule&#34;&gt;step 9: configure &lt;code&gt;public&lt;/code&gt; as a &lt;strong&gt;submodule&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Now add the username.github.io repo as a submodule to your website code repo using.  This allows nested projects without confusing git.&lt;/p&gt;
&lt;p&gt;First be sure you are in the hugo root and not the public folder and type:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd public
git submodule add -b master https://github.com/username/username.github.io.git public`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now in &lt;code&gt;.git/modules&lt;/code&gt; you might see a folder called &lt;code&gt;public&lt;/code&gt; (with a bunch of stuff in it) if not simply edit your &lt;code&gt;.git/config&lt;/code&gt; so that after:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[submodule &amp;quot;themes/academic&amp;quot;]
  path = themes/academic
  url = https://github.com/gcushen/hugo-academic.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you see:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[submodule &amp;quot;public&amp;quot;]
  path = public
  url = https://github.com/username/username.github.io.git
  branch = master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can add it by hand or with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;cat &amp;lt;&amp;lt;&amp;quot;EOF&amp;quot; &amp;gt;&amp;gt; git/config
[submodule &amp;quot;public&amp;quot;]
  path = public
  url = https://github.com/username/username.github.io.git
  branch = master
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-10-publish-your-new-hugo-webpage&#34;&gt;step 10: publish your new Hugo webpage:&lt;/h3&gt;
&lt;p&gt;Now to publish the Hugo site you prepared do the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo -d public
cd public
git add .
git commit -m &amp;quot;first webpage content&amp;quot;
git push
# toward the end you should see: `To github.com:username/username.github.io.git`
cd ..
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Follow this proceedure every time you update your site.&lt;/p&gt;
&lt;p&gt;NOTE: BE SURE NOT TO delete the folder &lt;code&gt;public/.git/&lt;/code&gt; or you will need to reconfigure your public submodule.&lt;/p&gt;
&lt;p&gt;now go back to &lt;code&gt;https://username.github.io&lt;/code&gt; and you should see your hugo site!&lt;/p&gt;
&lt;p&gt;(This might take a few minutes &amp;ndash; up to a half-hour &amp;ndash; to publish)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
