<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rails | btihen</title>
    <link>https://btihen.me/tags/rails/</link>
      <atom:link href="https://btihen.me/tags/rails/index.xml" rel="self" type="application/rss+xml" />
    <description>Rails</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2022</copyright><lastBuildDate>Sat, 18 Sep 2021 21:20:00 +0200</lastBuildDate>
    <image>
      <url>https://btihen.me/img/btihen_landing_page.png</url>
      <title>Rails</title>
      <link>https://btihen.me/tags/rails/</link>
    </image>
    
    <item>
      <title>Shared Schedule</title>
      <link>https://btihen.me/projects/mobile_calendar/</link>
      <pubDate>Fri, 06 Nov 2020 01:34:47 +0200</pubDate>
      <guid>https://btihen.me/projects/mobile_calendar/</guid>
      <description>&lt;p&gt;An opensource mobile friendly simple calendar to simplify scheduling for non-profits.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rails 7.0alpha2 Test-drive</title>
      <link>https://btihen.me/post_ruby_rails/rails_7_0_alpha_test_drive/</link>
      <pubDate>Sat, 18 Sep 2021 21:20:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_7_0_alpha_test_drive/</guid>
      <description>&lt;p&gt;I thought it would be fun to test the new alpha version of rails - but I always forget how to do this without upgrading an existing projects.&lt;/p&gt;
&lt;h3 id=&#34;discover-the-rails-pre-release-versions&#34;&gt;Discover the Rails Pre-release versions&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem list rails --remote --prerelease -e
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;ndash;remote - checks the rubygems site - not the locally installed versions
&amp;ndash;prerelease - find pre-release versions
-e - use an exact match (many packages have rails in the name).&lt;/p&gt;
&lt;h3 id=&#34;install-the-rails-alpha-gems&#34;&gt;Install the Rails Alpha Gems&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem install rails --version 7.0.0.alpha2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;this installs a usable local version of rails&lt;/p&gt;
&lt;h3 id=&#34;initailize-a-new-rails-project-with-a-specific-version&#34;&gt;Initailize a new Rails project with a specific version&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails _7.0.0.alpha2_ new magic_links
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now continue as normal!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rails 6.x - Framework Agnostic Associations - part 2</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_x_agnostic_associations_3/</link>
      <pubDate>Sun, 30 May 2021 01:57:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_x_agnostic_associations_3/</guid>
      <description>&lt;h2 id=&#34;purpose&#34;&gt;Purpose&lt;/h2&gt;
&lt;p&gt;In the interest of coding Rails in a way to work well with other code bases, I looking at ways to do complex database relations in a framework agnostic way.  In particular, this article will primarily explore Polymorphic Relationships.&lt;/p&gt;
&lt;p&gt;This is the second article in the series.  This article builds on (part 1)[post_ruby_rails/rails_6_x_agnostic_associations_1/]&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;In this case, I want to model a contact list of businesses and people.  Some people will be associated with a company.  Additionally, we will track transactions with each person and business.&lt;/p&gt;
&lt;p&gt;The basic model will then look something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                       ┌───────────┐           ┌───────────┐
                       │           │╲         ╱│           │
      ┌──────────────○┼│  Contact  │───────────│UserContact│
      │                │           │╱         ╲│           │
      │                └───────────┘           └───────────┘
      │                      ┼                      ╲│╱
      │                      ○                       │
      │                      │                       │
      │                      │                       │
     ╱│╲                    ╱│╲                      │
┌───────────┐          ┌───────────┐                 │
│           │╲         │           │                 │
│ Business  │─○───────┼│  Person   │                 │
│           │╱         │           │                 │
└───────────┘          └───────────┘                 │
     ╲│╱                    ╲│╱                      │
      │                      │                       │
      │                      │                       │
      │                      ○                       │
      │                      ┼                      ╱│╲
      │                ┌───────────┐           ┌───────────┐
      │                │           │          ╱│           │
      └──────────────○┼│  Remark   │┼──────────│   User    │
                       │           │          ╲│           │
                       └───────────┘           └───────────┘
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;rails-app-and-first-models&#34;&gt;Rails app and first Models&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;    ┌────────────┐             ┌───────────┐
    │            │╲          1 │           │
    │  Business  │─○──────────┼│  Person   │
    │-legal_name │╱0..*        │-full_name │
    └────────────┘             └───────────┘
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We discussed/explained in (part 1)[post_ruby_rails/rails_6_x_agnostic_associations_1/]&lt;/p&gt;
&lt;h2 id=&#34;polymorphic-sti---sometime-called-inverse-polymorphic&#34;&gt;Polymorphic (STI) - sometime called inverse polymorphic&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;                   ┌─────────────┐
                   │   Contact   │
                   │  relations* │
                   │+display_name│
                   └─────────────┘
                          ┼
                          │
          ┌───────────────┴────────────┐
          │                            │
         ╱│╲                          ╱│╲
    ┌─────────────┐             ┌─────────────┐
    │  Business   │╲            │    Person   │
    │ -legal_name │─○──────────┼│ -full_name  │
    │+display_name│╱            │+display_name│
    └─────────────┘             └─────────────┘
  + array: supplier, reseller, customer, sales-rep
  * virtual attribute (public method)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We disucssed/explained this in (part 2)[post_ruby_rails/rails_6_x_agnostic_associations_2/]&lt;/p&gt;
&lt;h2 id=&#34;polymorphic-modeling&#34;&gt;Polymorphic Modeling&lt;/h2&gt;
&lt;p&gt;Is a model that can be associated with several different models - serving a similar purpose in all cases.  For example perhaps we would like to leave remarks on our interactions with various other business partners as shown below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;┌───────────┐          ┌───────────┐
│           │╲         │           │
│ Business  │─○───────┼│  Person   │
│           │╱         │           │
└───────────┘          └───────────┘
     ╲│╱                    ╲│╱
      │                      │
      │                      │
      │                      ○
      │                      ┼
      │                ┌───────────┐           ┌───────────┐
      │                │           │          ╱│           │
      └──────────────○┼│  Remark   │┼──────────│   User    │
                       │           │          ╲│           │
                       └───────────┘           └───────────┘
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A Remark could be either associated with either a person or a business - this is called polymorphism.  For ubiquitous things like comments, pictures, etc. this is a common approach.&lt;/p&gt;
&lt;p&gt;The standard rails way - is convenient (only uses 2 columns for any number of models), but lacks a foreign key so the DB can&amp;rsquo;t ensure Data integrity.  For this reason, many other frameworks do not encourage this approach.  So we will use an approach accepted by all frameworks.&lt;/p&gt;
&lt;h3 id=&#34;models-and-relationships&#34;&gt;Models and relationships&lt;/h3&gt;
&lt;p&gt;Lets build the user model first so we have all the models needed by Remark.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;bin/rails g model User email:string:uniq
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s add an email validation to match the DB settings (and case insensitive):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/user.rb
class User &amp;lt; ApplicationRecord
  validates :name, presence: true,
                   uniqueness: { case_sensitive: false }
end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Given the simplicity of this model we can just continue. lets build Remark now.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;bin/rails g model Remark note:text user:references business:references person:references
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Like contact we will need to update the migration to allow null in the Business and Person foreign keys, but not for user.  Then we will update the models too.&lt;/p&gt;
&lt;p&gt;update the migration to ensure we have a note and user, and allow either a business or person associated with each remark:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/migrate/20210530104742_create_remarks.rb
class CreateRemarks &amp;lt; ActiveRecord::Migration[6.1]
  def change
    create_table :remarks do |t|
      t.text :note, null: false

      t.references :business, foreign_key: true
      t.references :person, foreign_key: true
      t.references :user, null: false, foreign_key: true

      t.timestamps
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we will update the User, Business and Person models to know they could have many remarks with &lt;code&gt;has_many :remarks&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/user.rb
class User &amp;lt; ApplicationRecord
  has_many :remarks
  validates :email, presence: true,
                    uniqueness: { case_sensitive: false }
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/person.rb
class Person &amp;lt; ApplicationRecord
  has_one :contact
  has_many :remarks
  belongs_to :business, optional: true

  validates :contact, presence: true
  validates :full_name, presence: true

  def display_name
    full_name
  end

  def employee_count
    nil
  end

  def associated_business_name
    business&amp;amp;.display_name
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/business.rb
class Business &amp;lt; ApplicationRecord
  has_one :contact
  has_many :people
  has_many :remarks

  accepts_nested_attributes_for :contact

  validates :contact, presence: true
  validates :legal_name, presence: true

  def display_name
    legal_name
  end

  def employee_count
    people.count
  end

  def associated_business_name
    &amp;quot;&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the Remark model with the validations to enforce relations:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/remark.rb
class Remark &amp;lt; ApplicationRecord
  belongs_to :user
  belongs_to :person, optional: true
  belongs_to :business, optional: true

  validates :user, presence: true
  validates :note, presence: true
  # validate :validate_remarkable_belongs_to_one_and_only_one_foreign_key

  def remarkable
    business || person
  end

  private

  # exclusive or (XOR) is true if one or the other is true, but both
  # if un-persisted we could get a model w/o an id
  # if persisted we could have a model and an id
  def validate_remarkable_belongs_to_one_and_only_one_foreign_key
    return if (business_id.present? ^ person_id.present?) ||
              (business.present? ^ person.present?)

    # add to base since, some forms may not have the person/business fields
    errors.add :base, &#39;must belong to ONE business or person, but not both&#39;
    # errors.add :remarkable, &#39;must belong to a business or a person&#39;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets be sure this migrates:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets add the following to the end of our seed file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/seed.rb
# We will create a few users
require &#39;securerandom&#39;

10.times do
  username = SecureRandom.alphanumeric(10)  # or use SecureRandom.uuid
  User.create!(email: &amp;quot;#{username}@example.ch&amp;quot;)
end

# Lets add a remark to most People and Business (using a random user)
users = User.all

Person.all.each_with_index do |person, index|
  next if rand(1..3) == 1  # skip one in 3 people

  user = users.sample
  Remark.create!(person: person, user: user,
                note: &amp;quot;some note about #{person.display_name}, by user: #{user.email}&amp;quot;)
end

Business.all.each_with_index do |business, index|
  next if rand(1..4) == 1  # skip one in 4 businesses

  user = users.sample
  Remark.create!(business: business, user: user,
                note: &amp;quot;some note about #{business.display_name}, by user: #{user.email}&amp;quot;)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets check the seed with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:seed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool that works!&lt;/p&gt;
&lt;p&gt;lets snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;polymorphic remark relations created&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;views&#34;&gt;Views&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Comming soon &amp;hellip;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Assuming this works, let&amp;rsquo;s see the &amp;ldquo;/people&amp;rdquo; page:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails s
open localhost:3000/businesses/
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;n1-checks&#34;&gt;N+1 checks&lt;/h3&gt;
&lt;p&gt;Great - lets snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;created an agnostic polymorphic model with data integrity enforced&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;input-forms--building-new-info&#34;&gt;Input Forms (&amp;amp; Building new Info)&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Rails 6.x - Framework Agnostic Associations - part 2</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_x_agnostic_associations_2/</link>
      <pubDate>Sat, 29 May 2021 01:57:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_x_agnostic_associations_2/</guid>
      <description>&lt;h2 id=&#34;purpose&#34;&gt;Purpose&lt;/h2&gt;
&lt;p&gt;In the interest of coding Rails in a way to work well with other code bases, I looking at ways to do complex database relations in a framework agnostic way.  In particular, this article will primarily explore Polymorphic Relationships.&lt;/p&gt;
&lt;p&gt;This is the second article in the series.  This article builds on (part 1)[post_ruby_rails/rails_6_x_agnostic_associations_1/]&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;In this case, I want to model a contact list of businesses and people.  Some people will be associated with a company.  Additionally, we will track transactions with each person and business.&lt;/p&gt;
&lt;p&gt;The basic model will then look something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                       ┌───────────┐           ┌───────────┐
                       │           │╲         ╱│           │
      ┌──────────────○┼│  Contact  │───────────│UserContact│
      │                │           │╱         ╲│           │
      │                └───────────┘           └───────────┘
      │                      ┼                      ╲│╱
      │                      ○                       │
      │                      │                       │
      │                      │                       │
     ╱│╲                    ╱│╲                      │
┌───────────┐          ┌───────────┐                 │
│           │╲         │           │                 │
│ Business  │─○───────┼│  Person   │                 │
│           │╱         │           │                 │
└───────────┘          └───────────┘                 │
     ╲│╱                    ╲│╱                      │
      │                      │                       │
      │                      │                       │
      │                      ○                       │
      │                      ┼                      ╱│╲
      │                ┌───────────┐           ┌───────────┐
      │                │           │          ╱│           │
      └──────────────○┼│  Remark   │┼──────────│   User    │
                       │           │          ╲│           │
                       └───────────┘           └───────────┘

                 Created with Monodraw
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;rails-app-and-first-models&#34;&gt;Rails app and first Models&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;    ┌────────────┐             ┌───────────┐
    │            │╲          1 │           │
    │  Business  │─○──────────┼│  Person   │
    │-legal_name │╱0..*        │-full_name │
    └────────────┘             └───────────┘
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We discussed / explained in (part 1)[post_ruby_rails/rails_6_x_agnostic_associations_1/]&lt;/p&gt;
&lt;h2 id=&#34;polymorphic-sti---sometime-called-inverse-polymorphic&#34;&gt;Polymorphic (STI) - sometime called inverse polymorphic&lt;/h2&gt;
&lt;p&gt;In this article we will build this structure (a replacement for Rails STI).  Many frameworks will only use columns that can be identified as foreign keys to ensure DB integrity - therefore, we will build this using DB structures that are supported by Rails, Lucky and Phoenix and probably most frameworks.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                   ┌─────────────┐
                   │   Contact   │
                   │  relations* │
                   │+display_name│
                   └─────────────┘
                          ┼
                          │
          ┌───────────────┴────────────┐
          │                            │
         ╱│╲                          ╱│╲
    ┌─────────────┐             ┌─────────────┐
    │  Business   │╲            │    Person   │
    │ -legal_name │─○──────────┼│ -full_name  │
    │+display_name│╱            │+display_name│
    └─────────────┘             └─────────────┘
  + array: supplier, reseller, customer, sales-rep
  * virtual attribute (public method)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A contact could be either a person or a business - but must be one or the other.&lt;/p&gt;
&lt;h3 id=&#34;migration-and-relationships&#34;&gt;Migration and Relationships&lt;/h3&gt;
&lt;p&gt;Rails doesn&amp;rsquo;t have a built-in array migration, so we use string and then we change the migration:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails g scaffold Contact functions:string business:references person:references
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now update the migration to ensure we have a functions as an array &amp;amp; relations as Foreign keys (but optional). Since there we only want/need one of the two foreign_keys at a time they must be nullable and we need to change roles to an array - so now:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/migrate/20210519205042_create_contacts.rb
class CreateContacts &amp;lt; ActiveRecord::Migration[6.1]
  def change
    create_table :contacts do |t|
      t.string :functions, array: true, null: false, default: []
      t.references :business, foreign_key: true
      t.references :person, foreign_key: true

      t.timestamps
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the Contact model with the validations &amp;amp; flexible relations - we also want to be able to refer to the sub-model by one name we will call that &lt;code&gt;contactable&lt;/code&gt; - so now the model will look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/contact.rb
class Contact &amp;lt; ApplicationRecord
  belongs_to :business, optional: true
  belongs_to :person, optional: true

  VALID_FUNCTIONS_LIST = %w(supplier reseller customer sales-rep)

  validate :validate_relationship_functions
  validate :validate_belongs_to_one_and_only_one_foreign_key

  def contactable
    business || person
  end

  private

  # be sure we have the variable, it is an Array &amp;amp; all elements are in the valid list
  def validate_relationship_functions
    return if functions.present? &amp;amp;&amp;amp; functions.is_a?(Array)
              functions.all? { |role| VALID_FUNCTIONS_LIST.include?(role.to_s) }

    errors.add :functions, &amp;quot;must be ONE or MORE of the following options: #{VALID_FUNCTIONS_LIST.join(&#39;,&#39;)}&amp;quot;
  end

  # exclusive or (XOR) is true if one or the other is true, but both
  # if un-persisted we could get a model w/o an id
  # if persisted we could have a model and an id
  def validate_remarkable_belongs_to_one_and_only_one_foreign_key
    return if (business_id.present? ^ person_id.present?) ||
              (business.present? ^ person.present?)

    # add to base since, some forms may not have the person/business fields
    errors.add :base, &#39;must belong to ONE business or person, but not both&#39;
    # errors.add :remarkable, &#39;must belong to a business or a person&#39;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the Person model and relations and enforce every person is a member of the contact list - with a contact role:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/person.rb
class Person &amp;lt; ApplicationRecord
  has_one :contact
  belongs_to :business, optional: true

  validates :contact, presence: true
  validates :full_name, presence: true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the business model and relations and enforce every business is a member of the contact list - with a contact role:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# # app/models/business.rb
class Business &amp;lt; ApplicationRecord
  has_one :contact
  has_many :people

  validates :contact, presence: true
  validates :legal_name, presence: true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets check the seed with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we go to a person or business we can no longer make changes - they need to have an associated Contact.
We&amp;rsquo;ll start by rolling back the last migration and fixing it with (we can use the logic in the seeds to guide us in the Business/Person creation controller):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:rollback
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we need to fix the old relations in the migration (or simply drop the database and reseed it) - but given this is to article is find cross-framework &amp;ndash; &amp;lsquo;real-world&amp;rsquo; techniques - let&amp;rsquo;s be sure the existing records stay useful.  We will assume a business is a supplier, a person associated with a business is a sales-rep, and unassociated people are customers.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/migrate/20210519205042_create_contacts.rb
class CreateContacts &amp;lt; ActiveRecord::Migration[6.1]
  def change
    create_table :contacts do |t|
      t.string :functions, array: true, null: false, default: []
      t.references :business, foreign_key: true
      t.references :person, foreign_key: true

      t.timestamps
    end

    # add a contact for each existing company
    businesses = Business.joins(:people)
                         .group(&#39;businesses.id&#39;)
                         .select(&#39;businesses.*, count(people.id) as people_count&#39;)
    businesses.each do |business|
      functions = if business.people_count &amp;lt; 10
                    [&#39;supplier&#39;]
                  elsif business.people_count &amp;lt; 20
                    [&#39;reseller&#39;]
                  elsif business.people_count &amp;lt; 30
                    [&#39;supplier&#39;, &#39;reseller&#39;]
                  end
      Contact.create!(functions: functions, business: business)
    end

    # add a contact for each existing person
    Person.all.each do |person|
      functions = if person.business
                    [&#39;sales_rep&#39;]
                  else
                    [&#39;customer&#39;]
                  end
      Contact.create!(functions: functions, person: person)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets the existing models now:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OK - we are in business lets update our seed file too:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/seed.rb
# create small business w/o employees
20.times do |num|
  business = Business.create(legal_name: &amp;quot;Business #{num}&amp;quot;,
                             contact: Contact.new(functions: [&#39;supplier&#39;]))
end

# create individuals
20.times do |num|
  person = Person.create(full_name: &amp;quot;Individual #{num}&amp;quot;,
                            contact: Contact.new(functions: [&#39;customer&#39;]))
end

# create big companies with employees
20.times do |bus_num|
  functions = if bus_num &amp;lt; 3
                [&#39;supplier&#39;]
              elsif bus_num&amp;lt; 5
                [&#39;reseller&#39;]
              elsif bus_num &amp;lt; 8
                [&#39;supplier&#39;, &#39;reseller&#39;]
              else
                %w[supplier reseller customer]
              end
  company  = Business.create(legal_name: &amp;quot;Company #{bus_num}&amp;quot;,
                             contact: Contact.new(functions: functions))

  bus_num.times do |emp_num|
    Person.create(full_name: &amp;quot;Employee #{bus_num}-#{emp_num}&amp;quot;,
                  business: company,
                  contact: Contact.new(functions: [&#39;sales-rep&#39;]))
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets check the seed with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:seed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great all works!&lt;/p&gt;
&lt;h3 id=&#34;lets-make-the-index-page-more-useful&#34;&gt;Lets make the index page more useful&lt;/h3&gt;
&lt;p&gt;When we visit the contacts page we would like more than the ids - but we need a unified way to present that info so let&amp;rsquo;s add a display_name so we can show the name of the primary model, if a person we would like to know the associated business if present and if a company we would like the employee_count so we will delegate these to the sub-models.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s update contact first by adding:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  # this references our existing contactable
  delegate :display_name, :associated_business_name, :employee_count,
           to: :contactable

  def contactable
    business || person
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now the contact model will look like (with validations)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/contact.rb
class Contact &amp;lt; ApplicationRecord
  belongs_to :business, optional: true
  belongs_to :person, optional: true

  VALID_FUNCTIONS_LIST = %w(supplier reseller customer sales-rep)

  validate :validate_relationship_functions
  validate :validate_belongs_to_one_and_only_one_foreign_key

  delegate :display_name, :associated_business_name, :employee_count,
           to: :contactable

  def contactable
    business || person
    # would memoize be valuable here?
    # @contactable ||= (business || person)
  end

  private

  # be sure we have the variable, it is an Array &amp;amp; all elements are in the valid list
  def validate_relationship_functions
    return if functions.present? &amp;amp;&amp;amp; functions.is_a?(Array)
              functions.all? { |role| VALID_FUNCTIONS_LIST.include?(role.to_s) }

    errors.add :functions, &amp;quot;must be ONE or MORE of the following options: #{VALID_FUNCTIONS_LIST.join(&#39;,&#39;)}&amp;quot;
  end

  # exclusive or (XOR) is true if one or the other is true, but not when both are true
  # we could get a model (or possibly an id)
  def validate_belongs_to_one_and_only_one_foreign_key
    return if business.present? ^ person.present? ^ business_id.present? ^ person_id.present?

    # add to base since, some forms may not have the person/business fields
    errors.add :base, &#39;must belong to ONE business or person, but not both&#39;
    # errors.add :contactable, &#39;must belong to a business or a person&#39;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets update the models to provide the needed info&lt;/p&gt;
&lt;p&gt;Business now will look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/business.rb
class Business &amp;lt; ApplicationRecord
  has_one :contact
  has_many :people

  validates :contact, presence: true
  validates :legal_name, presence: true

  def display_name
    legal_name
  end

  def employee_count
    people.count
  end

  def associated_business_name
    &amp;quot;&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And person will look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/person.rb
class Person &amp;lt; ApplicationRecord
  has_one :contact
  belongs_to :business, optional: true

  validates :contact, presence: true
  validates :full_name, presence: true

  def display_name
    full_name
  end

  def employee_count
    nil  # person count has no meaning under person
  end

  def associated_business_name
    business&amp;amp;.display_name
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets update the index view to show our new info:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;h1&amp;gt;Contacts&amp;lt;/h1&amp;gt;

&amp;lt;table&amp;gt;
  &amp;lt;thead&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th&amp;gt;Person/Business&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Employee Count&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Contact Name&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Business Name&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Relationships&amp;lt;/th&amp;gt;
      &amp;lt;th colspan=&amp;quot;3&amp;quot;&amp;gt;&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/thead&amp;gt;

  &amp;lt;tbody&amp;gt;
    &amp;lt;% @contacts.each do |contact| %&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= contact.contactable.class.name %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= contact.employee_count %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= contact.display_name %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= contact.associated_business_name %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= contact.functions %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Show&#39;, contact %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Edit&#39;, edit_contact_path(contact) %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Destroy&#39;, contact, method: :delete, data: { confirm: &#39;Are you sure?&#39; } %&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we see another n+1 query - we will fix the main part - but not the employee count this time:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ContactsController &amp;lt; ApplicationController
  def index
    # @contacts = Contact.all
    @contacts = Contact.includes(:business).includes(:person).all
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool now the page is usable (a bit long but we will ignore that)&lt;/p&gt;
&lt;h3 id=&#34;lets-be-sure-we-can-create-new-contacts&#34;&gt;Lets be sure we can create new contacts&lt;/h3&gt;
&lt;p&gt;I usually use an input model (for more flexibility), but for now I will use nested_params.
A few articles on nested params and nested fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=PYYwjTlcoa4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=PYYwjTlcoa4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.pluralsight.com/guides/ruby-on-rails-nested-attributes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.pluralsight.com/guides/ruby-on-rails-nested-attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://levelup.gitconnected.com/rails-nested-forms-in-three-steps-5580f0ad0e&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://levelup.gitconnected.com/rails-nested-forms-in-three-steps-5580f0ad0e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://levelup.gitconnected.com/handling-nested-attributes-with-a-has-many-through-association-with-rails-api-f91729547ea5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://levelup.gitconnected.com/handling-nested-attributes-with-a-has-many-through-association-with-rails-api-f91729547ea5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To start we will tell the contacts model that it can create nested models with do by adding:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  accepts_nested_attributes_for :business
  accepts_nested_attributes_for :person
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;so now now the contact model looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/contact.rb
class Contact &amp;lt; ApplicationRecord
  belongs_to :business, optional: true
  belongs_to :person, optional: true

  accepts_nested_attributes_for :business
  accepts_nested_attributes_for :person

  VALID_FUNCTIONS_LIST = %w(supplier reseller customer sales-rep)

  validate :validate_relationship_functions
  validate :validate_belongs_to_one_and_only_one_foreign_key

  delegate :display_name, :associated_business_name, :employee_count,
           to: :contactable

  def contactable
    business || person
    # would memoize be valuable here?
    # @contactable ||= (business || person)
  end

  private

  # be sure we have the variable, it is an Array &amp;amp; all elements are in the valid list
  def validate_relationship_functions
    return if functions.present? &amp;amp;&amp;amp; functions.is_a?(Array)
              functions.all? { |role| VALID_FUNCTIONS_LIST.include?(role.to_s) }

    errors.add :functions, &amp;quot;must be ONE or MORE of the following options: #{VALID_FUNCTIONS_LIST.join(&#39;,&#39;)}&amp;quot;
  end

  # exclusive or (XOR) is true if one or the other is true, but not when both are true
  # we could get a model (or possibly an id)
  def validate_belongs_to_one_and_only_one_foreign_key
    return if business.present? ^ person.present? ^ business_id.present? ^ person_id.present?

    # add to base since, some forms may not have the person/business fields
    errors.add :base, &#39;must belong to ONE business or person, but not both&#39;
    # errors.add :contactable, &#39;must belong to a business or a person&#39;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the controller we need to create models as part of @contact to allow nested-fields - which feed the nested attributes. to allow the new information in via strong params:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/contacts_controller.rb
  def new
    @contact = Contact.new
    # add empty sub-models for our form
    @contact.person = Person.new
    @contact.business = Business.new
  end

  # update strong params to accept the sub-model attributes
  # sub-models from nested-forms feeding nested_atttributes in the model
  # take the form &amp;lt;model_name&amp;gt;_attributes
  # `functions` is an empty array since it is taking a list of values
  # person_attributes &amp;amp; business_attributes - need to include the list of attributes to accept!
  # so in our case:
  def contact_params
    contact_attribs = params.require(:contact)
                            .permit(functions: [],  # is empty - takes a list of values
                                    person_attributes: [:full_name],  # needs to include the list of attributes to accept
                                    business_attributes: [:legal_name])
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the contact form to tie this all together by adding our nested forms:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  &amp;lt;div class=&amp;quot;field-group&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;Create your Contact: a Person or a Business&amp;lt;/h2&amp;gt;

    &amp;lt;h3&amp;gt;Business&amp;lt;/h3&amp;gt;
    &amp;lt;%= form.fields_for :business, Business.new do |f| %&amp;gt;
      &amp;lt;%= f.label :legal_name %&amp;gt;
      &amp;lt;%= f.text_field :legal_name %&amp;gt;
    &amp;lt;% end %&amp;gt;

    &amp;lt;h3&amp;gt;Person&amp;lt;/h3&amp;gt;
    &amp;lt;%= form.fields_for :person, Person.new do |f| %&amp;gt;
      &amp;lt;%= f.label :full_name %&amp;gt;
      &amp;lt;%= f.text_field :full_name %&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will also need to make the list of possible relationship functions a multi-select - I always forget the format &amp;ndash; so remember BOTH {} are required when using multi-select!!  The first one is for normal drop-down select options &amp;ndash; like include_blank, the second one is where the multi-select must go!&lt;/p&gt;
&lt;p&gt;This looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  &amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
    &amp;lt;%= form.label :functions %&amp;gt;
    &amp;lt;%= form.select :functions,
                    options_for_select(Contact::VALID_FUNCTIONS_LIST,
                                      selected: Contact::VALID_FUNCTIONS_LIST.second),
                                      {}, #{:include_blank =&amp;gt; &#39;None&#39;},
                                      {:multiple =&amp;gt; true, size: 3} %&amp;gt;
  &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;so now the template looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/contacts/_form.html.erb
&amp;lt;%= form_with(model: contact) do |form| %&amp;gt;
  &amp;lt;% if contact.errors.any? %&amp;gt;
  &amp;lt;div id=&amp;quot;error_explanation&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;&amp;lt;%= pluralize(contact.errors.count, &amp;quot;error&amp;quot;) %&amp;gt; prohibited this contact from being saved:&amp;lt;/h2&amp;gt;

    &amp;lt;ul&amp;gt;
      &amp;lt;% contact.errors.each do |error| %&amp;gt;
      &amp;lt;li&amp;gt;&amp;lt;%= error.full_message %&amp;gt;&amp;lt;/li&amp;gt;
      &amp;lt;% end %&amp;gt;
    &amp;lt;/ul&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;% end %&amp;gt;

  &amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
    &amp;lt;%= form.label :functions %&amp;gt;
    &amp;lt;%= form.select :functions,
                    options_for_select(Contact::VALID_FUNCTIONS_LIST,
                                      selected: Contact::VALID_FUNCTIONS_LIST.second),
                                      {}, #{:include_blank =&amp;gt; &#39;None&#39;},
                                      {:multiple =&amp;gt; true, size: 3} %&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;field-group&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;Create your Contact: a Person or a Business&amp;lt;/h2&amp;gt;

    &amp;lt;h3&amp;gt;Business&amp;lt;/h3&amp;gt;
    &amp;lt;%= form.fields_for :business, Business.new do |f| %&amp;gt;
      &amp;lt;%= f.label :legal_name %&amp;gt;
      &amp;lt;%= f.text_field :legal_name %&amp;gt;
    &amp;lt;% end %&amp;gt;

    &amp;lt;h3&amp;gt;Person&amp;lt;/h3&amp;gt;
    &amp;lt;%= form.fields_for :person, Person.new do |f| %&amp;gt;
      &amp;lt;%= f.label :full_name %&amp;gt;
      &amp;lt;%= f.text_field :full_name %&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;actions&amp;quot;&amp;gt;
    &amp;lt;%= form.submit %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when we try &lt;code&gt;/contacts&lt;/code&gt; we notice one more problem - it is always invalid - rails automatically add a leading &amp;quot;&amp;quot; in an array input list :( - so we will have to clean this up in the strong params.  In this case we are working with param objects not a hash so we will do an in-place update (removal of &amp;ldquo;&amp;quot;) using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  contact_attribs[&amp;quot;functions&amp;quot;].reject! {|f| f.blank? }
  contact_attribs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we also need to be sure in our case we only send the params of the business or the person, but not both - since we are only creating one.  So we will remove whichever one is empty - also with an in-place update - using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    # find and set to nil the model without params
    if contact_attribs[&amp;quot;person_attributes&amp;quot;]
      # since we only have one param we can do
      contact_attribs[&amp;quot;person_attributes&amp;quot;] = nil if contact_attribs[&amp;quot;person_attributes&amp;quot;][&amp;quot;full_name&amp;quot;].blank?
    end

    if contact_attribs[&amp;quot;business_attributes&amp;quot;]
      # assuming we had multiple params the test is easier with:
      contact_attribs[&amp;quot;business_attributes&amp;quot;] = nil if contact_attribs[&amp;quot;business_attributes&amp;quot;].to_h.all? {|key,value| value.blank?}
    end

    # remove the nested attributes set to nil so contact will only create the desired associated model
    contact_attribs.reject! {|key, value| value.blank? }
    contact_attribs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now the full controller looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class ContactsController &amp;lt; ApplicationController
  before_action :set_contact, only: %i[ show edit update destroy ]

  def index
    # @contacts = Contact.all
    @contacts = Contact.includes(:business).includes(:person).all
  end

  def show
  end

  def new
    @contact = Contact.new
    @contact.person = Person.new
    @contact.business = Business.new
  end

  def edit
  end

  def create
    @contact = Contact.new(contact_params)

    respond_to do |format|
      if @contact.save
        format.html { redirect_to @contact, notice: &amp;quot;Contact was successfully created.&amp;quot; }
        format.json { render :show, status: :created, location: @contact }
      else
        format.html { render :new, status: :unprocessable_entity }
        format.json { render json: @contact.errors, status: :unprocessable_entity }
      end
    end
  end

  def update
    respond_to do |format|
      if @contact.update(contact_params)
        format.html { redirect_to @contact, notice: &amp;quot;Contact was successfully updated.&amp;quot; }
        format.json { render :show, status: :ok, location: @contact }
      else
        format.html { render :edit, status: :unprocessable_entity }
        format.json { render json: @contact.errors, status: :unprocessable_entity }
      end
    end
  end

  def destroy
    @contact.destroy
    respond_to do |format|
      format.html { redirect_to contacts_url, notice: &amp;quot;Contact was successfully destroyed.&amp;quot; }
      format.json { head :no_content }
    end
  end

  private

  # Use callbacks to share common setup or constraints between actions.
  def set_contact
    @contact = Contact.find(params[:id])
  end

  # Only allow a list of trusted parameters through.
  def contact_params
    # update strong params to accept the sub-model attributes
    # sub-models from nested-forms feeding nested_atttributes in the model
    # take the form &amp;lt;model_name&amp;gt;_attributes
    # `functions` is an empty array since it is taking a list of values
    # person_attributes &amp;amp; business_attributes - need to include the list of attributes to accept!
    # so in our case:
    contact_attribs = params.require(:contact)
                            .permit(functions: [],
                                    person_attributes: [:full_name],
                                    business_attributes: [:legal_name])
    # cleanup array - always delivers with [&#39;&#39;] - :(
    # https://stackoverflow.com/questions/51341912/empty-array-value-being-input-with-simple-form-entries

    # easiest way in in-place replacement (given that params is now objects and not a hash), but that always makes me a bit nervous
    # https://stackoverflow.com/questions/20164354/rails-strong-parameters-with-empty-arrays
    # reject and replace in place
    contact_attribs[&amp;quot;functions&amp;quot;].reject! {|f| f.blank? }

    # remove empty model attributes
    # contact_attribs[&amp;quot;person_attributes&amp;quot;].reject {|key,value| value.blank?}
    if contact_attribs[&amp;quot;person_attributes&amp;quot;]
      contact_attribs[&amp;quot;person_attributes&amp;quot;] = nil if contact_attribs[&amp;quot;person_attributes&amp;quot;][&amp;quot;full_name&amp;quot;].blank?
    end

    if contact_attribs[&amp;quot;business_attributes&amp;quot;]
      contact_attribs[&amp;quot;business_attributes&amp;quot;] = nil if contact_attribs[&amp;quot;business_attributes&amp;quot;].to_h.all? {|key,value| value.blank?}
    end

    # have to remove nil attributes for models so nested attributes works correctly
    contact_attribs.reject! {|key, value| value.blank? }

    # return the attributes with the tidied array
    contact_attribs
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now when we try again:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails s
open localhost:3000/contacts/new
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool - it works.  We could now do the same for the &lt;code&gt;/business/new&lt;/code&gt; and &lt;code&gt;/people/new&lt;/code&gt;, but we won&amp;rsquo;t do that here in the article. Lets snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;created person possibly related to the model&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;polymorphic&#34;&gt;Polymorphic&lt;/h2&gt;
&lt;p&gt;In the next article we will explore the following in (part 3)[post_ruby_rails/rails_6_x_agnostic_associations_3/]&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;┌───────────┐             ┌───────────┐
│           │╲            │           │
│ Business  │─○──────────┼│  Person   │
│           │╱            │           │
└───────────┘             └───────────┘
      ┼                         ┼
      │                         │
      └────────────┬────────────┘
                   │
                  ╱│╲
             ┌───────────┐
             │           │
             │  Remark   │
             │           │
             └───────────┘
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Rails 6.x - Framework Agnostic Associations - part 1</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_x_agnostic_associations_1/</link>
      <pubDate>Wed, 19 May 2021 01:57:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_x_agnostic_associations_1/</guid>
      <description>&lt;h2 id=&#34;purpose&#34;&gt;Purpose&lt;/h2&gt;
&lt;p&gt;In the interest of coding Rails in a way to work well with other code bases, I looking at ways to do complex database relations in a framework agnostic way.  In particular, this article will primarily explore Polymorphic Relationships.&lt;/p&gt;
&lt;p&gt;This is the second article in the series.  This article is followed up with (part 2)[post_ruby_rails/rails_6_x_agnostic_associations_2/]&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;In this case, I want to model a contact list of businesses and people.  Some people will be associated with a company.  Additionally, we will track transactions with each person and business.&lt;/p&gt;
&lt;p&gt;The basic model will then look something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                       ┌───────────┐           ┌───────────┐
                       │           │╲         ╱│           │
      ┌──────────────○┼│  Contact  │───────────│UserContact│
      │                │           │╱         ╲│           │
      │                └───────────┘           └───────────┘
      │                      ┼                      ╲│╱
      │                      ○                       │
      │                      │                       │
      │                      │                       │
     ╱│╲                    ╱│╲                      │
┌───────────┐          ┌───────────┐                 │
│           │╲         │           │                 │
│ Business  │─○───────┼│  Person   │                 │
│           │╱         │           │                 │
└───────────┘          └───────────┘                 │
     ╲│╱                    ╲│╱                      │
      │                      │                       │
      │                      │                       │
      │                      ○                       │
      │                      ┼                      ╱│╲
      │                ┌───────────┐           ┌───────────┐
      │                │           │          ╱│           │
      └──────────────○┼│  Remark   │┼──────────│   User    │
                       │           │          ╲│           │
                       └───────────┘           └───────────┘
                    Created with Monodraw
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-default-rails-app&#34;&gt;Create a default Rails app&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails new rails_poly
cd rails_poly
bin/rails db:create
bin/rails db:migrate
git add .
git commit -m &amp;quot;initial commit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;starting-simple---optional-relations&#34;&gt;Starting Simple - optional relations&lt;/h2&gt;
&lt;h3 id=&#34;build-businesses&#34;&gt;Build Businesses&lt;/h3&gt;
&lt;p&gt;Lets start with the simple relationship between businesses and people:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;┌────────────┐             ┌───────────┐
│            │╲          1 │           │
│  Business  │─○──────────┼│  Person   │
│-legal_name │╱0..*        │-full_name │
└────────────┘             └───────────┘
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For expedience, I&amp;rsquo;ll use scaffolds:&lt;/p&gt;
&lt;p&gt;Generating a simple business model.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails g scaffold Business legal_name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets adjust the migration to require the business&#39; legal name, by adding &lt;code&gt;null: false&lt;/code&gt; to the name:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/migrate/20210516080420_create_businesses.rb
class CreateBusinesses &amp;lt; ActiveRecord::Migration[6.1]
  def change
    create_table :businesses do |t|
      t.string :legal_name, null: false

      t.timestamps
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we will validate the business&#39; name in the model:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/business.rb
class Business &amp;lt; ApplicationRecord
  validates :legal_name, presence: true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets be sure we can migrate:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;lets use seed to quickly check our models and relations (&amp;amp; get an idea of how to use them):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/seeds.rb
business = Business.create(legal_name: &amp;quot;Business&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets check the seed with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:seed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming this works, let&amp;rsquo;s see the &amp;ldquo;/businesses&amp;rdquo; page:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails s
open localhost:3000/businesses/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great - lets snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;created business model&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;build-people&#34;&gt;Build People&lt;/h3&gt;
&lt;p&gt;Now let&amp;rsquo;s build the person model and its relations to businesses.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails g scaffold Person full_name business:references
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case we want the person to optionally be a member of a business, so lets update the both the models and the migration.  Starting with the migration, we need to remove &lt;code&gt;null: false&lt;/code&gt; in the foreign key, and add that to the name - so it should now look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/migrate/20210516080414_create_people.rb
class CreatePeople &amp;lt; ActiveRecord::Migration[6.1]
  def change
    create_table :people do |t|
      t.string :full_name, null: false
      t.references :company, foreign_key: true

      t.timestamps
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets adjust the person model - we&amp;rsquo;ll make the relation optional with &lt;code&gt;optional: true&lt;/code&gt; and require the name with the validation &lt;code&gt;validates :full_name, presence: true&lt;/code&gt;, so it should now look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/person.rb
class Person &amp;lt; ApplicationRecord
  belongs_to :company, optional: true

  validates :full_name, presence: true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And lets let the Business know it can have lots of people with &lt;code&gt;has_many :people&lt;/code&gt; - now the model will look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/business.rb
class Business &amp;lt; ApplicationRecord
  has_many :people

  validates :legal_name, presence: true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets check the migrations work:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;lets use seed a couple of people too - so it now looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/seed.rb
business = Business.create(legal_name: &amp;quot;Business&amp;quot;)
company = Business.create(legal_name: &amp;quot;Company&amp;quot;)

company.build_person(full_name: &amp;quot;Company Man&amp;quot;)
company.save

person = Person.create(full_name: &amp;quot;Own Person&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets check the seed with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:seed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets check our pages again:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails s
open localhost:3000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets check the index pages&lt;/p&gt;
&lt;p&gt;On the business page it would be nice to see how many employees - so we can update the model with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/business.rb
class Business &amp;lt; ApplicationRecord
  has_many :people

  validates :legal_name, presence: true

  def people_count
    people.count
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now &lt;code&gt;people_count&lt;/code&gt; is added as a virtual attribute (as well as all other business fields because of &lt;code&gt;&#39;businesses.*&lt;/code&gt;) - now we can use in our view using = &lt;code&gt;&amp;lt;td&amp;gt;&amp;lt;%= business.people_count %&amp;gt;&amp;lt;/td&amp;gt;&lt;/code&gt; so now it would look something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/businesses/index.html.erb
&amp;lt;h1&amp;gt;Businesses&amp;lt;/h1&amp;gt;

&amp;lt;table&amp;gt;
  &amp;lt;thead&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th&amp;gt;Legal name&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Employee Count&amp;lt;/th&amp;gt;
      &amp;lt;th colspan=&amp;quot;3&amp;quot;&amp;gt;&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/thead&amp;gt;

  &amp;lt;tbody&amp;gt;
    &amp;lt;% @businesses.each do |business| %&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= business.legal_name %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= business.people_count %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Show&#39;, business %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Edit&#39;, edit_business_path(business) %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Destroy&#39;, business, method: :delete, data: { confirm: &#39;Are you sure?&#39; } %&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and on the &amp;lsquo;/people&amp;rsquo; page it would be nice to see there business name instead of id.&lt;/p&gt;
&lt;p&gt;so in the model:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/model/person.rb
class Person &amp;lt; ApplicationRecord
  belongs_to :business, optional: true

  validates :full_name, presence: true

  def associated_business_name
    business&amp;amp;.legal_name
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and in the index view:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/people/index.html.erb
&amp;lt;table&amp;gt;
  &amp;lt;thead&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th&amp;gt;Full name&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Business&amp;lt;/th&amp;gt;
      &amp;lt;th colspan=&amp;quot;3&amp;quot;&amp;gt;&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/thead&amp;gt;

  &amp;lt;tbody&amp;gt;
    &amp;lt;% @people.each do |person| %&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= person.full_name %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= person.associated_business_name %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Show&#39;, person %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Edit&#39;, edit_person_path(person) %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= link_to &#39;Destroy&#39;, person, method: :delete, data: { confirm: &#39;Are you sure?&#39; } %&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to show all employees on the business show page we can do:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/businesses/show.html.erb
&amp;lt;p&amp;gt;
  &amp;lt;strong&amp;gt;Legal name:&amp;lt;/strong&amp;gt;
  &amp;lt;%= @business.legal_name %&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;table&amp;gt;
  &amp;lt;thead&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th&amp;gt;Employee&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/thead&amp;gt;
  &amp;lt;tbody&amp;gt;
    &amp;lt;% @business.people.each do |person| %&amp;gt;
    &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;person.full_name&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;/tbody&amp;gt;

&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now lets look for n+1 queries - to do that we will create many records in the seeds file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/seeds.rb
business = Business.create(legal_name: &amp;quot;Business&amp;quot;)
company  = Business.create(legal_name: &amp;quot;Company&amp;quot;)
boss_man = Person.create(full_name: &amp;quot;Company Man&amp;quot;, business: company)
person = Person.create(full_name: &amp;quot;Own Person&amp;quot;)

# larger numbers (look for n+1 lookups)
50.times do |business_number|
  company  = Business.create(legal_name: &amp;quot;Company #{business_number}&amp;quot;)
  business_number.times do |employee_number|
    Person.create(full_name: &amp;quot;Employee #{employee_number}&amp;quot;,
                  business: company)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when we visit &amp;lsquo;/people&amp;rsquo; we see an n+1 (to look up the business to get the business name) - this is an easy fix with a pre-load in the controller - just add &lt;code&gt;.include(:business)&lt;/code&gt; to the query - now the index method will look like&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/people_controller.rb
class PeopleController &amp;lt; ApplicationController

  def index
    @people = Person.include(:business).all
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fix n+1 lookups - for the business employee count is a bit trickier - to avoid lots of look ups we need the db to do the count and add the count as a virtual attribute - this is done with the following query:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/people_controller.rb
class BusinessController &amp;lt; ApplicationController

  def index
    # businesses = Business.all  # (N+1 when using referring to people)
    # select must go last or it gets lost / overwritten
    @businesses = Business.joins(:people)
                          .group(&#39;businesses.id&#39;)
                          .select(&#39;businesses.*, count(people.id) as people_count&#39;)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to avoid confusion - lets rename the method in the class to &lt;code&gt;employee_count&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/business.rb
class Business &amp;lt; ApplicationRecord
  has_many :people

  validates :legal_name, presence: true

  def employee_count
    people.count
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;lets run the seeds again:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:seed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;cool now when we look at the log we just have one query instead of many!&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s make the people form to associate a business by name instead of the id!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/people/_form.html.erb
&amp;lt;%= form_with(model: person) do |form| %&amp;gt;
  &amp;lt;% if person.errors.any? %&amp;gt;
    &amp;lt;div id=&amp;quot;error_explanation&amp;quot;&amp;gt;
      &amp;lt;h2&amp;gt;&amp;lt;%= pluralize(person.errors.count, &amp;quot;error&amp;quot;) %&amp;gt; prohibited this person from being saved:&amp;lt;/h2&amp;gt;

      &amp;lt;ul&amp;gt;
        &amp;lt;% person.errors.each do |error| %&amp;gt;
          &amp;lt;li&amp;gt;&amp;lt;%= error.full_message %&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;% end %&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;% end %&amp;gt;

  &amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
    &amp;lt;%= form.label :full_name %&amp;gt;
    &amp;lt;%= form.text_field :full_name %&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
    &amp;lt;%= form.label :business %&amp;gt;
    &amp;lt;%= form.select :business_id,
                    Business.all.collect { |b| [ b.legal_name, b.id ] },
                    prompt: &amp;quot;Select One&amp;quot;, include_blank: true %&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;actions&amp;quot;&amp;gt;
    &amp;lt;%= form.submit %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great - lets snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;created person related to businesses - w/o n+1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;polymorphic-sti---sometime-called-inverse-polymorphic&#34;&gt;Polymorphic (STI) - sometime called inverse polymorphic&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;          ┌───────────────┐
          │    Contact    │
          │  (functions)+ │ + supplier, reseller, customer, sales-rep
          │(display_name)*│ * virtual attribute
          └───────────────┘
                  ┼ 1
     ┌────────────┴─────────────┐
    ╱│╲ *                    * ╱│╲
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;┌───────────────┐          ┌───────────────┐
│    Business   │╲       1 │    Person     │
│  (legal_name) │ ○ ─ ─ ─ ┼│  (full_name)  │
│(display_name)&lt;em&gt;│╱ 0..&lt;/em&gt;    │(display_name)*│
└───────────────┘          └───────────────┘&lt;/p&gt;
&lt;p&gt;A contact could be either a person or a business - but must be one or the other.&lt;/p&gt;
&lt;p&gt;This is implemented in (part 2)[post_ruby_rails/rails_6_x_agnostic_associations_2/]&lt;/p&gt;
&lt;h2 id=&#34;polymorphic&#34;&gt;Polymorphic&lt;/h2&gt;
&lt;p&gt;a model associated with several different models - serving a similar purpose in both cases&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ┌────────────┐          ┌───────────┐
  │            │╲       1 │           │
  │  Business  │ ○ ─ ─ ─ ┼│  Person   │
  │            │╱ 0..*    │           │
  └────────────┘          └───────────┘
        ╲│╱ *                * ╲│╱
         └───────────┬──────────┘
                     ┼ 1
             ┌──────────────┐
             │              │
             │  Transaction │
             │              │
             └──────────────┘
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A contact could be either a person or a business - but must be one or the other.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails g Contact roles:array business:references person:references
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the migration to ensure we have a role provided &amp;amp; relations:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;#
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the Contact model with the validations &amp;amp; flexible relations:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# contact.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the Person model and relations:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# person.rb

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the Business model and relations:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# business.rb

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;lets use seed a couple of people too - so it now looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/seed.rb
business = Business.create(legal_name: &amp;quot;Business&amp;quot;)
company = Business.create(legal_name: &amp;quot;Company&amp;quot;)

company.build_person(full_name: &amp;quot;Company Man&amp;quot;)
company.save

person = Person.create(full_name: &amp;quot;Own Person&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets check the seed with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:seed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming this works, let&amp;rsquo;s see the &amp;ldquo;/people&amp;rdquo; page:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails s
open localhost:3000/businesses/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great - lets snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;created person possibly related to the model&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Rails 6.1 - Hotwire with Lazy Loading</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_1_hotwire_lazy_load_data/</link>
      <pubDate>Sun, 28 Mar 2021 01:57:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_1_hotwire_lazy_load_data/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;As was seen in 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_1_hotwire_flash_messages/&#34;&gt;Using Hotwire with Flash Messages&lt;/a&gt; Hotwire can easily load data - let&amp;rsquo;s do this in a lazy loaded way (after the html is loaded we add data).&lt;/p&gt;
&lt;h2 id=&#34;basic-setup&#34;&gt;Basic Setup&lt;/h2&gt;
&lt;p&gt;Start with the code at the end of: 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_1_hotwire_simple_realtime/&#34;&gt;Using Hotwire in Rails&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;prepare-our-code&#34;&gt;Prepare our code&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s remove the extra Tweet.new load in the controller&amp;rsquo;s index method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/tweets_controller.rb
  def index
    @tweets = Tweet.all.order(created_at: :desc)
    # @tweet = Tweet.new # no longer needed
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now if we try our code we get a null value error (for course).&lt;/p&gt;
&lt;p&gt;So to fix this we need to load the data back in (and restructure our index page a bit).&lt;/p&gt;
&lt;p&gt;Turbo works well if you use the normal templates - so in this case we will use the &lt;code&gt;new&lt;/code&gt; template on the home page to call the new form and get its own data:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/index.html.erb
&amp;lt;h1&amp;gt;Tweets&amp;lt;/h1&amp;gt;
&amp;lt;%= turbo_stream_from &amp;quot;tweets&amp;quot; %&amp;gt;

&amp;lt;h2 class=&amp;quot;mt-3 h4 text-muted&amp;quot;&amp;gt;New Tweet&amp;lt;/h2&amp;gt;
&amp;lt;div class=&amp;quot;card card-body&amp;quot;&amp;gt;
  &amp;lt;%= turbo_frame_tag &amp;quot;new-tweet&amp;quot;, src: new_tweet_path, target: &amp;quot;_top&amp;quot; %&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;h2 class=&amp;quot;mt-3 h4 text-muted&amp;quot;&amp;gt;Tweet Feed&amp;lt;/h2&amp;gt;
&amp;lt;%= turbo_frame_tag &amp;quot;tweets&amp;quot; do %&amp;gt;
  &amp;lt;%= render @tweets %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice the new template is using the dom_id &amp;ldquo;new-tweet&amp;rdquo; and not &amp;ldquo;new_tweet&amp;rdquo;. Also note that this tag has a &lt;code&gt;src:&lt;/code&gt; - that is where it is getting its data source (&amp;amp; view to use) - in this case the &lt;code&gt;new_tweet_path&lt;/code&gt; routes to &lt;code&gt;tweets_controller#new&lt;/code&gt; and that calls the &lt;code&gt;veiw&lt;/code&gt; template.  The final thing to note is the &lt;code&gt;target&lt;/code&gt; - this tells the turbo_tag to look / act outside the contraints of its frame (otherwise we couldn&amp;rsquo;t reach the controller).&lt;/p&gt;
&lt;p&gt;Currently this won&amp;rsquo;t work yet - we need to create a &lt;strong&gt;matching tag&lt;/strong&gt; &amp;ndash; including the &lt;code&gt;target&lt;/code&gt; in the &lt;code&gt;new&lt;/code&gt; template.  So our updated &lt;code&gt;new&lt;/code&gt; template now looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt; app/views/tweets/new.html.erb
&amp;lt;h1&amp;gt;New Tweet&amp;lt;/h1&amp;gt;

&amp;lt;%= turbo_frame_tag &amp;quot;new-tweet&amp;quot;, target: &amp;quot;_top&amp;quot; do %&amp;gt;
  &amp;lt;%= render &#39;form&#39;, tweet: @tweet %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we should have a new form that uses the standard rails data flow within the index - just like the display and edit of individual tweets also uses show and edit templates too.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;The repo where you can find this code in the branch:

&lt;a href=&#34;https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_lazy_load_data&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_lazy_load_data&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rails 6.1 - Hotwire with Modals</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_1_hotwire_modal_form/</link>
      <pubDate>Sat, 20 Mar 2021 18:57:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_1_hotwire_modal_form/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Now that you have the basics of using Hotwire in Rails 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_1_hotwire_simple_realtime/&#34;&gt;Using Hotwire in Rails&lt;/a&gt; - its interesting to try using it in other contexts, inparticular &lt;strong&gt;modals&lt;/strong&gt; are very useful for inputs in Single Page Apps.  So in this Blog we will make the new input form a modal and leave the edit as an in-place form.&lt;/p&gt;
&lt;h2 id=&#34;basic-setup&#34;&gt;Basic Setup&lt;/h2&gt;
&lt;p&gt;Start with the code at the end of: 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_1_hotwire_simple_realtime/&#34;&gt;Using Hotwire in Rails&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;add-jquery-to-bootstrap-setup&#34;&gt;Add jQuery to Bootstrap Setup&lt;/h2&gt;
&lt;p&gt;First we need to ensure we have JS and JQuery (installed with Bootstrap) - so we will simply add the following to the end of our &amp;lt;body&amp;gt; in the &lt;code&gt;application.html.erb&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/layouts/application.html.erb
&amp;lt;body&amp;gt;
  &amp;lt;p id=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;%= yield %&amp;gt;
  &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&amp;quot; integrity=&amp;quot;sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js&amp;quot; integrity=&amp;quot;sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;add-modal-to-index&#34;&gt;Add Modal to Index&lt;/h2&gt;
&lt;p&gt;So we will start by replacing the new-form with a button that toggles the modal.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/index.html.erb
&amp;lt;h1&amp;gt;Tweets&amp;lt;/h1&amp;gt;
&amp;lt;%= turbo_stream_from &amp;quot;tweets&amp;quot; %&amp;gt;

&amp;lt;h2 class=&amp;quot;mt-3 h4 text-muted&amp;quot;&amp;gt;New Tweet&amp;lt;/h2&amp;gt;
&amp;lt;%= render &amp;quot;tweets/modal_new&amp;quot;, tweet: @tweet %&amp;gt;

&amp;lt;h2 class=&amp;quot;mt-3 h4 text-muted&amp;quot;&amp;gt;Tweet Feed&amp;lt;/h2&amp;gt;
&amp;lt;%= turbo_frame_tag &amp;quot;tweets&amp;quot; do %&amp;gt;
  &amp;lt;%= render @tweets %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now lets make a partial that has the modal toggle button and the associated html to enable the modal to function (this code is basically copied from the Bootstrap website):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/_modal_new.html.erb
&amp;lt;%= link_to &amp;quot;#&amp;quot;, class: &#39;btn btn-sm btn-outline-primary&#39;, data: { toggle: &amp;quot;modal&amp;quot;, target: &amp;quot;#tweetModal&amp;quot; } do %&amp;gt;
New Tweet
&amp;lt;% end %&amp;gt;

&amp;lt;div class=&amp;quot;modal fade&amp;quot; id=&amp;quot;tweetModal&amp;quot; tabindex=&amp;quot;-1&amp;quot; aria-labelledby=&amp;quot;exampleModalLabel&amp;quot; aria-hidden=&amp;quot;true&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;modal-dialog&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;modal-content&amp;quot;&amp;gt;
      &amp;lt;%= render &amp;quot;tweets/modal_form&amp;quot;, tweet: tweet %&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice we have a partial for the form still - this is because we have to point turbo at a dom_id within a partial (without doing this we can&amp;rsquo;t get validation errors back into this form).  This is a mix of the Bootstrap example code placed within the rails form.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;#  app/views/tweets/_modal_form.html.erb
&amp;lt;%= form_with(model: tweet, id: dom_id(tweet)) do |form| %&amp;gt;

  &amp;lt;div class=&amp;quot;modal-header&amp;quot;&amp;gt;
    &amp;lt;h5 class=&amp;quot;modal-title&amp;quot;&amp;gt;New Tweet&amp;lt;/h5&amp;gt;
    &amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;close&amp;quot; data-dismiss=&amp;quot;modal&amp;quot; aria-label=&amp;quot;Close&amp;quot;&amp;gt;
      &amp;lt;span aria-hidden=&amp;quot;true&amp;quot;&amp;gt;&amp;amp;times;&amp;lt;/span&amp;gt;
    &amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;modal-body&amp;quot;&amp;gt;
    &amp;lt;% if tweet.errors.any? %&amp;gt;
    &amp;lt;div id=&amp;quot;error_explanation&amp;quot;&amp;gt;
      &amp;lt;h2&amp;gt;&amp;lt;%= pluralize(tweet.errors.count, &amp;quot;error&amp;quot;) %&amp;gt; prohibited this tweet from being saved:&amp;lt;/h2&amp;gt;

      &amp;lt;ul&amp;gt;
        &amp;lt;% tweet.errors.each do |error| %&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;%= error.full_message %&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;% end %&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;% end %&amp;gt;

    &amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
      &amp;lt;%= form.label :body %&amp;gt;
      &amp;lt;%= form.text_area :body %&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;modal-footer&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;actions&amp;quot;&amp;gt;
      &amp;lt;%= form.submit class: &amp;quot;btn btn-sm btn-outline-success&amp;quot; %&amp;gt;
      &amp;lt;%= link_to &amp;quot;Cancel&amp;quot;, tweet, class: &amp;quot;btn btn-sm btn-outline-danger&amp;quot; %&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;

&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;test&#34;&gt;Test&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Modal Opens&lt;/li&gt;
&lt;li&gt;Modal Close Works&lt;/li&gt;
&lt;li&gt;Modal Cancel Works&lt;/li&gt;
&lt;li&gt;Create valid Tweet &amp;ndash; works and broadcasts&lt;/li&gt;
&lt;li&gt;Create invalid Tweet &amp;ndash; Errors go to wrong form (must click cancel or reload)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In fact, if you put the regular form back into the index page you will see that the validation errors show up there.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;misplaced_validation_errors_on_create.png&#34; alt=&#34;validation errors in wrong form&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;fix-validation-errors&#34;&gt;Fix validation errors&lt;/h2&gt;
&lt;p&gt;We fix this like this like a normal form - we change how the controller uses turbo_stream. So instead of pointing to the partial: &amp;ldquo;tweets/form&amp;rdquo; we need to point to &amp;ldquo;tweets/modal_form&amp;rdquo; (the new partial with the form).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/tweets_controller.rb
  def create
    @tweet = Tweet.new(tweet_params)
    respond_to do |format|
      if @tweet.save
        format.html { redirect_to tweets_url, notice: &amp;quot;Tweet was successfully created.&amp;quot; }
        format.json { render :show, status: :created, location: @tweet }
      else
        format.turbo_stream { # route turbo_stream validation errors
                      render turbo_stream: turbo_stream.replace(
                              @tweet, partial: &amp;quot;tweets/modal_form&amp;quot;,
                              locals: { tweet: @tweet}) }
        format.html { render :new, status: :unprocessable_entity }
        format.json { render json: @tweet.errors, status: :unprocessable_entity }
      end
    end
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now all our tests should work.&lt;/p&gt;
&lt;h2 id=&#34;using-turbo-templates&#34;&gt;Using turbo templates&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s refactor - for future flexibility.  We&amp;rsquo;ll create the template.  Since we are using the &lt;code&gt;create&lt;/code&gt; method within the controller - we&amp;rsquo;ll call the file: &lt;code&gt;create.turbo_stream.html.erb&lt;/code&gt; - notice, unsurprisingly it looks what&amp;rsquo;s in the controller.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/create.turbo_stream.erb
&amp;lt;!--             action  dom_id           partial with the dom_id        actual data --&amp;gt;
&amp;lt;%= turbo_stream.replace @tweet, partial: &amp;quot;tweets/modal_form&amp;quot;, locals: { tweet: @tweet } %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can make the controller look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/tweets_controller.rb
  def create
    @tweet = Tweet.new(tweet_params)
    respond_to do |format|
      if @tweet.save
        format.html { redirect_to tweets_url, notice: &amp;quot;Tweet was successfully created.&amp;quot; }
        format.json { render :show, status: :created, location: @tweet }
      else
        format.turbo_stream  # route turbo_stream validation errors
        format.html { render :new, status: :unprocessable_entity }
        format.json { render json: @tweet.errors, status: :unprocessable_entity }
      end
    end
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using the template allows us the flexibilty to make multiple dynamic changes to the page on a create.  This is demonstrated in the post describing using Flash messages with Hotwire.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;The repo where you can find this code in the branch:

&lt;a href=&#34;https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_modal_new_tweet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_modal_new_tweet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The important commit is:

&lt;a href=&#34;https://github.com/btihen/ruby_kafi_hotwire_tweets/commit/0c37fb6071b31d13f4cf3ce2499326893724e131&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/btihen/ruby_kafi_hotwire_tweets/commit/0c37fb6071b31d13f4cf3ce2499326893724e131&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rails 6.1 - Hotwire with StimulusJS</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_1_hotwire_and_stimulusjs/</link>
      <pubDate>Sun, 14 Mar 2021 18:57:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_1_hotwire_and_stimulusjs/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Hotwire only updates dom_ids (usually only within a partial) - so other Frontend needs still need to be met with Javascript.  Rails uses StimulusJS to augment Hotwire.  I 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_1_hotwire_flash_messages/&#34;&gt;Using Hotwire with Flash Messages&lt;/a&gt; we created a new instance of Tweet in the turbo_template and sent that to the form.  (Pretty non-standard) - we can do this even more simply by using JS to clear the form without instantiating a new object.&lt;/p&gt;
&lt;h2 id=&#34;basic-setup&#34;&gt;Basic Setup&lt;/h2&gt;
&lt;p&gt;Start with the code at the end of: 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_1_hotwire_flash_messages/&#34;&gt;Using Hotwire with Flash Messages&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;stimulusjs-to-clear-forms&#34;&gt;StimulusJS to clear forms&lt;/h2&gt;
&lt;p&gt;To enable Flash Messages our create/controller looked like - which seems a little messy - in &lt;code&gt;create&lt;/code&gt; (happy-path) we handle all the updates via the create.turbo_stream.erb template and with validation errors we explicity (in the controller - handle the validation errors)&lt;/p&gt;
&lt;p&gt;So lets start by disabling the code we no longer need in the template:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/create.turbo_stream.erb
&amp;lt;%# turbo_stream.replace &amp;quot;tweet-form&amp;quot;, partial: &amp;quot;tweets/form&amp;quot;, locals: { tweet: Tweet.new } %&amp;gt;
&amp;lt;%# to send a message to the notice partial %&amp;gt;
&amp;lt;%= turbo_stream.append &amp;quot;notice&amp;quot;, partial: &amp;quot;shared/notice&amp;quot;, locals: {notice: &amp;quot;Tweet was successfully created.&amp;quot;} %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So we are only leaving the turbo_stream.append active.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s test here and be sure the new form doesn&amp;rsquo;t clear after making a new tweet.&lt;/p&gt;
&lt;h2 id=&#34;add-a-stimulusjs-controller&#34;&gt;Add a StimulusJS controller&lt;/h2&gt;
&lt;p&gt;We don&amp;rsquo;t need to add / install or configure StimulusJS since Hotwire already handles this.&lt;/p&gt;
&lt;p&gt;So let&amp;rsquo;s create the JS file to clear the form - its quite simple we will just use:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// app/javascript/controllers/reset_form_controller.js
import { Controller } from &amp;quot;stimulus&amp;quot;

export default class extends Controller {
  reset() {
    this.element.reset()
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to tie this to the form we need to go into the form and add the &lt;code&gt;data:&lt;/code&gt; info &amp;ndash; so now our form should start with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/_form.html.erb
&amp;lt;%= form_with(model: tweet, id: dom_id(tweet),
              data: {controller: &amp;quot;reset-form&amp;quot;, action: &amp;quot;turbo:submit-end-&amp;gt;reset-form#reset&amp;quot;}
            ) do |form| %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;code&gt;data&lt;/code&gt; tag ties the stimulus &lt;strong&gt;controller&lt;/strong&gt; &lt;code&gt;reset_form_controller.js&lt;/code&gt; with the &lt;code&gt;reset-form&lt;/code&gt; setting &amp;ndash; notice the html uses a &lt;code&gt;-&lt;/code&gt; when ruby uses &lt;code&gt;_&lt;/code&gt;. On the form &lt;strong&gt;action&lt;/strong&gt; &lt;code&gt;submit-end&lt;/code&gt; then execute (&#39;-&amp;gt;&#39;) in the controller &lt;code&gt;reset-form&lt;/code&gt; the function (&#39;#&#39;) &lt;code&gt;reset&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Fairly straight-forward, but it helps to be aware of the syntax and the differences between Ruby and Javascript.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;The repo where you can find this code in the branch:

&lt;a href=&#34;https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_with_stimulus&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_with_stimulus&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rails 6.1 - Hotwire with Flash Messages</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_1_hotwire_flash_messages/</link>
      <pubDate>Sat, 06 Mar 2021 18:57:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_1_hotwire_flash_messages/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Now that you have the basics of using Hotwire in Rails 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_1_hotwire_simple_realtime/&#34;&gt;Using Hotwire in Rails&lt;/a&gt; - its interesting to try using it in other contexts, inparticular &lt;strong&gt;modals&lt;/strong&gt; are very useful for inputs in Single Page Apps.  So in this Blog we will make the new input form a modal and leave the edit as an in-place form.&lt;/p&gt;
&lt;h2 id=&#34;basic-setup&#34;&gt;Basic Setup&lt;/h2&gt;
&lt;p&gt;Start with the code at the end of: 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_1_hotwire_simple_realtime/&#34;&gt;Using Hotwire in Rails&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;flash-messages-in-partial&#34;&gt;Flash Messages in Partial&lt;/h2&gt;
&lt;p&gt;Remember, turbo_streams requires a dom_id and a partial in order to know where to send / update the HTML it generates &amp;ndash; so let&amp;rsquo;s prepare &lt;code&gt;application.html.erb&lt;/code&gt; so that flash messages use partials.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/layouts/application.html.erb
&amp;lt;body&amp;gt;
  &amp;lt;%= render &amp;quot;shared/notice&amp;quot;, notice: notice %&amp;gt;
  &amp;lt;%= yield %&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and of course we need a partials for notices now (we will keep it very simple):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/shared/_notice.html.erb
&amp;lt;p id=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now we will create a turbo template to handle the flash on create:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/create.turbo_stream.erb
&amp;lt;%# to send a message to the notice partial %&amp;gt;
&amp;lt;!--            action   dom_id         partial with dom_id   data to send in the notice --&amp;gt;
&amp;lt;%= turbo_stream.append &amp;quot;notice&amp;quot;, partial: &amp;quot;shared/notice&amp;quot;, locals: {notice: &amp;quot;Tweet created.&amp;quot;} %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order for the controller and turbo_stream to handle this non-standard action we need to update the create method in the controller with the instructions &lt;code&gt;format.turbo_stream&lt;/code&gt; on a successful create:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/tweets_controller.rb
def create
    @tweet = Tweet.new(tweet_params)

    respond_to do |format|
      if @tweet.save
        format.turbo_stream  # enables flash message on create - via the create template
        format.html { redirect_to tweets_url, notice: &amp;quot;Tweet was successfully created.&amp;quot; }
        format.json { render :show, status: :created, location: @tweet }
      else
        format.turbo_stream { # route turbo validation errors
                      render turbo_stream: turbo_stream.replace(
                              @tweet, partial: &amp;quot;tweets/form&amp;quot;,
                              locals: { tweet: @tweet}) }
        format.html { render :new, status: :unprocessable_entity }
        format.json { render json: @tweet.errors, status: :unprocessable_entity }
      end
    end
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when we test everything works great, except our form no longer clears. We can fix that by adding a second action to the create template (we will send a Tweet.new - there are other approaches too - covered in 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_1_hotwire_and_stimulusjs&#34;&gt;Hotwire and StimulusJS&lt;/a&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/create.turbo_stream.erb
&amp;lt;%# clear form on create - without using JavaScript - by replacing the old Tweet info with Tweet.new %&amp;gt;
&amp;lt;%= turbo_stream.replace &amp;quot;tweet-form&amp;quot;, partial: &amp;quot;tweets/form&amp;quot;, locals: { tweet: Tweet.new } %&amp;gt;
&amp;lt;%# to send a message to the notice partial %&amp;gt;
&amp;lt;%= turbo_stream.append &amp;quot;notice&amp;quot;, partial: &amp;quot;shared/notice&amp;quot;, locals: {notice: &amp;quot;Tweet was successfully created.&amp;quot;} %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;refactor&#34;&gt;Refactor&lt;/h2&gt;
&lt;p&gt;You might have noticed, that we have moved most of our turbo_steam template to the template file, but not the replace for validation errors &amp;ndash; since we already have a &lt;code&gt;replace&lt;/code&gt; command in our template - we will need to leave our specific instructions in the errors as is &amp;ndash; until we clear the form with JS.&lt;/p&gt;
&lt;p&gt;NOTE: now that we are consolidating our template info it might be tempting to add the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;!-- to prepend on create - disabled to avoid double vision when broadcasting --&amp;gt;
&amp;lt;%#%   stream_action   dom_id_target, render_partial,       send_local_variables   %&amp;gt;
&amp;lt;%= turbo_stream.prepend &amp;quot;tweets&amp;quot;, partial: &amp;quot;tweets/tweet&amp;quot;, locals: { tweet: @tweet } %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but don&amp;rsquo;t add the default happy path instructions to the template when a model already has a broadcast after hook - if you add this instruction the person creating a new tweet will see two!&lt;/p&gt;
&lt;h2 id=&#34;flash-after-we-update&#34;&gt;Flash after we update&lt;/h2&gt;
&lt;p&gt;This is now very straight forward we simply add &lt;code&gt;format.turbo_stream&lt;/code&gt; to our save and create an &lt;code&gt;update.turbo_stream.erb&lt;/code&gt; template&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/update.turbo_stream.erb
&amp;lt;%# to send a message to the notice partial %&amp;gt;
&amp;lt;%= turbo_stream.append &amp;quot;notice&amp;quot;, partial: &amp;quot;shared/notice&amp;quot;, locals: {notice: &amp;quot;Tweet was successfully created.&amp;quot;} %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now we can tell the controller to use that:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;#  app/controllers/tweets_controller.rb
  def update
    respond_to do |format|
      if @tweet.update(tweet_params)
        format.turbo_stream
        format.html { redirect_to @tweet, notice: &amp;quot;Tweet was successfully updated.&amp;quot; }
        format.json { render :show, status: :ok, location: @tweet }
      else
        format.html { render :edit, status: :unprocessable_entity }
        format.json { render json: @tweet.errors, status: :unprocessable_entity }
      end
    end
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We don&amp;rsquo;t have to clear the form on update since the &lt;code&gt;edit&lt;/code&gt; template is replaced with the &lt;code&gt;show&lt;/code&gt; template already.  So we are done.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;The repo where you can find this code in the branch:

&lt;a href=&#34;https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_flash_messages&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/btihen/ruby_kafi_hotwire_tweets/commits/hotwire_flash_messages&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rails 6.1 - Hotwire (Simple Realtime SPA)</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_1_hotwire_simple_realtime/</link>
      <pubDate>Sun, 28 Feb 2021 18:57:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_1_hotwire_simple_realtime/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://hotwire.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hotwire&lt;/a&gt;  is planned to be integrated into Rails 7.x and is already included in the soon to be published book: 
&lt;a href=&#34;https://pragprog.com/titles/nrclient/modern-front-end-development-for-rails/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Modern Front-End Development for Rails: Hotwire, Stimulus, Turbo, and React &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hotwire allows us to build Single Page Apps using Ruby and Rails with nearly NO configuration! It allow very responsive web-applications as it reloads only the parts of the page that change via a socket.  Hotwire using 
&lt;a href=&#34;https://turbo.hotwire.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Turbo&lt;/a&gt; - an evolution of TurboLinks and as such is mobile friendly and in most cases can send the replacement HTML directly from the server to the client with minimal or no client side processing over websockets so there is minimal lag time.&lt;/p&gt;
&lt;p&gt;In this article we convert a seemingly &amp;lsquo;single-page&amp;rsquo; web app that reloads with every request see previous article 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_1_single_page_app_simulate_reloads/&#34;&gt;Tweets - A Single Page Rails App (using reloads)&lt;/a&gt; and convert it into a proper &amp;lsquo;single-page&amp;rsquo; app that only refreshes the aspects that change.  This makes web-pages with lots of data and complexity FAST and feel like native apps.  This is done with Hotwire (using web-sockets).&lt;/p&gt;
&lt;h2 id=&#34;basic-setup&#34;&gt;Basic Setup&lt;/h2&gt;
&lt;p&gt;We will be starting with a basic Tweet Simulator it looks something like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_1st_starting_point.png&#34; alt=&#34;tweet_index_1st&#34;&gt;&lt;/p&gt;
&lt;p&gt;The starting code base can be found at: 
&lt;a href=&#34;https://github.com/btihen/tweet_simulator_rails&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/btihen/tweet_simulator_rails&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The steps to re-create this code can be found at: 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_tweet_single_page_reloads/&#34;&gt;Tweets - A Single Page Rails App (using reloads)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The actual Tweet Hotwire code from this article can be found at:&lt;/p&gt;
&lt;h2 id=&#34;install-and-configure-hotwire&#34;&gt;Install and configure Hotwire&lt;/h2&gt;
&lt;h3 id=&#34;install-hotwire&#34;&gt;Install Hotwire&lt;/h3&gt;
&lt;p&gt;To use hotwire - we need to install it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle add hotwire-rails
bin/rails hotwire:install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The hotwire package is smart enough to install via webpack if that&amp;rsquo;s installed or in the asset pipeline if no webpacker is installed.  This project uses webpack (but it shouldn&amp;rsquo;t matter).&lt;/p&gt;
&lt;p&gt;This also installs Stimulus Javascript and enables redis if not already installed.  Now you should see the following steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stimulus config in: &lt;code&gt;application.js&lt;/code&gt; and setup.&lt;/li&gt;
&lt;li&gt;Turbo install and setup&lt;/li&gt;
&lt;li&gt;Removal of Turbolinks&lt;/li&gt;
&lt;li&gt;Enable Redis gem&lt;/li&gt;
&lt;li&gt;Configure Redis to work with ActionCable (Rails Websockets)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and the output should look something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Appending Stimulus setup code to
      append  app/javascript/packs/application.js
Creating controllers directory
      create  app/javascript/controllers
      create  app/javascript/controllers/hello_controller.js
      create  app/javascript/controllers/index.js
Installing all Stimulus dependencies
         run  yarn add stimulus from &amp;quot;.&amp;quot;
...
✨  Done in 36.58s.

Install Turbo
         run  yarn add @hotwired/turbo-rails from &amp;quot;.&amp;quot;
...
✨  Done in 7.40s.

      insert  app/javascript/packs/application.js
Remove Turbolinks
        gsub  Gemfile
         run  bin/bundle from &amp;quot;.&amp;quot;
         run  bin/yarn remove turbolinks from &amp;quot;.&amp;quot;
yarn remove v1.22.10
[1/2] 🗑  Removing module turbolinks...
...

        gsub  app/javascript/packs/application.js
        gsub  app/javascript/packs/application.js
Enable redis in bundle
        gsub  Gemfile
Switch development cable to use redis
        gsub  config/cable.yml

Turbo successfully installed ⚡️
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE: a prerequisite is that you already have Redis (server) installed in your development environment.&lt;/p&gt;
&lt;h3 id=&#34;check-project-config-for-hotwire&#34;&gt;Check Project config for Hotwire&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;References to turbolinks must be removed&lt;/li&gt;
&lt;li&gt;Turbo is installed&lt;/li&gt;
&lt;li&gt;Stimulus is installed&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you have problems you can experiment try adding one or more of the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  &amp;lt;%= yield :head %&amp;gt;
  &amp;lt;%= turbo_include_tags %&amp;gt;
  &amp;lt;%= stimulus_include_tags %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In particular, I found the top two helpful - but this is a new technology - and it is still evolving.  In the end the &lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt; might need to look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;

&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Tweets&amp;lt;/title&amp;gt;
  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt;
  &amp;lt;%= csrf_meta_tags %&amp;gt;
  &amp;lt;%= csp_meta_tag %&amp;gt;

  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css&amp;quot; integrity=&amp;quot;sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;
  &amp;lt;%= stylesheet_link_tag &#39;application&#39;, media: &#39;all&#39; %&amp;gt;
  &amp;lt;%= javascript_pack_tag &#39;application&#39; %&amp;gt;
  &amp;lt;%= yield :head %&amp;gt;
  &amp;lt;%= turbo_include_tags %&amp;gt;
  &amp;lt;%# stimulus_include_tags %&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
  &amp;lt;%= yield %&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check the app is still working and make a git snapshot.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;install and configure hotwire-rails&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;using-hotwire&#34;&gt;Using Hotwire&lt;/h2&gt;
&lt;p&gt;Avoid the page reloads and only update our changes by sending new HTML&lt;/p&gt;
&lt;h3 id=&#34;broadcast-new-tweets-to-all-clients&#34;&gt;Broadcast New Tweets to all Clients&lt;/h3&gt;
&lt;p&gt;To broadcast changes to a client we need to modify the model and add the broadcast command.   A Broadcast &amp;ldquo;tweets&amp;rdquo; sends changes to the turbo_stream (websocket channel) with the same name.
To add the new tweets to the top of the &amp;ldquo;tweets&amp;rdquo; page (frame) we need to use the &lt;code&gt;broadcast_prepend_to&lt;/code&gt; instead of the &lt;code&gt;broadcast_append_to&lt;/code&gt; (which puts new entries at the bottom)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/tweet.rb
class Tweet &amp;lt; ApplicationRecord
  validates :body, presence: true

  # broadcast &amp;quot;tweets&amp;quot; send all changes to the turbo_stream view &amp;quot;tweets&amp;quot;
  # broadcast_prepend_to places new information at the top instead of appending to the bottom
  after_create_commit { broadcast_prepend_to &amp;quot;tweets&amp;quot; }
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order for this model broadcast to work we need to create a place to send it.  We do this in the view via a stream with the command &lt;code&gt;&amp;lt;%= turbo_stream_from &amp;quot;tweets&amp;quot; %&amp;gt;&lt;/code&gt; we also need to tell this &lt;code&gt;stream&lt;/code&gt; where to update &amp;ndash; we do this with the turbo tag of the same name: &lt;code&gt;&amp;lt;%= turbo_frame_tag &amp;quot;tweets&amp;quot; do %&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So lets update our index page :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/index.html.erb
&amp;lt;!-- connects to the backend broadcast (via a channel) --&amp;gt;
&amp;lt;%= turbo_stream_from &amp;quot;tweets&amp;quot; %&amp;gt;

&amp;lt;!-- frame that receives the taged data --&amp;gt;
&amp;lt;%= turbo_frame_tag &amp;quot;tweets&amp;quot; do %&amp;gt;
  &amp;lt;%= render @tweets %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to see our new frames lets update our css to make them visible - lets add a border to our turbo-frames:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;# app/assets/stylesheets/tweets.scss
turbo-frame {
  display: block;
  border: 1px solid green
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s check that our new broadcast feature run: &lt;code&gt;bin/rails s&lt;/code&gt; and open two browser windows point at &lt;code&gt;http://localhost:3000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_2nd_broadcast_new.png&#34; alt=&#34;tweet_index_2nd&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can see in the left window we created a new tweet and it automatically appeared in the right window!  HOW COOL IS THAT!&lt;/p&gt;
&lt;p&gt;Notice that the &amp;ldquo;blue&amp;rdquo; turbo-frame is around all the displayed tweets.&lt;/p&gt;
&lt;p&gt;Lets also take a quick look at the logs - from this transaction:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Started POST &amp;quot;/tweets&amp;quot; for 127.0.0.1 at 2021-02-28 21:12:59 +0100
Processing by TweetsController#create as TURBO_STREAM
  Parameters: {&amp;quot;authenticity_token&amp;quot;=&amp;gt;&amp;quot;[FILTERED]&amp;quot;, &amp;quot;tweet&amp;quot;=&amp;gt;{&amp;quot;body&amp;quot;=&amp;gt;&amp;quot;Fourth Tweet&amp;quot;}, &amp;quot;commit&amp;quot;=&amp;gt;&amp;quot;Create Tweet&amp;quot;}
  TRANSACTION (1.6ms)  BEGIN
  ↳ app/controllers/tweets_controller.rb:28:in `block in create&#39;
  Tweet Create (60.1ms)  INSERT INTO &amp;quot;tweets&amp;quot; (&amp;quot;body&amp;quot;, &amp;quot;created_at&amp;quot;, &amp;quot;updated_at&amp;quot;) VALUES ($1, $2, $3) RETURNING &amp;quot;id&amp;quot;  [[&amp;quot;body&amp;quot;, &amp;quot;Fourth Tweet&amp;quot;], [&amp;quot;created_at&amp;quot;, &amp;quot;2021-02-28 20:12:59.221408&amp;quot;], [&amp;quot;updated_at&amp;quot;, &amp;quot;2021-02-28 20:12:59.221408&amp;quot;]]
  ↳ app/controllers/tweets_controller.rb:28:in `block in create&#39;
  TRANSACTION (2.4ms)  COMMIT
  ↳ app/controllers/tweets_controller.rb:28:in `block in create&#39;
  Rendered tweets/_tweet.html.erb (Duration: 1.7ms | Allocations: 416)
[ActionCable] Broadcasting to tweets: &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;prepend\&amp;quot; target=\&amp;quot;tweets\&amp;quot;&amp;gt;&amp;lt;template&amp;gt;&amp;lt;div class=\&amp;quot;card card-body\&amp;quot;&amp;gt;\n  &amp;lt;div&amp;gt;Fourth Tweet&amp;lt;/div&amp;gt;\n\n  &amp;lt;div class=\&amp;quot;mt-2\&amp;quot;&amp;gt;\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-success\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;post\&amp;quot; href=\&amp;quot;/tweets/7/like\&amp;quot;&amp;gt;Like (0)&amp;lt;/a&amp;gt;\n\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-info\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;post\&amp;quot; href=\&amp;quot;/tweets/7/retweet\&amp;quot;&amp;gt;Retweet (0)&amp;lt;/a&amp;gt;\n\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-primary\&amp;quot; href=\&amp;quot;/tweets/7/edit\&amp;quot;&amp;gt;Edit&amp;lt;/a&amp;gt;\n\n    &amp;lt;a data-confirm=\&amp;quot;Are you sure?\&amp;quot; class=\&amp;quot;btn btn-sm btn-outline-danger\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;delete\&amp;quot; href=\&amp;quot;/tweets/7\&amp;quot;&amp;gt;Destroy&amp;lt;/a&amp;gt;\n  &amp;lt;/div&amp;gt;\n&amp;lt;/div&amp;gt;\n&amp;lt;/template&amp;gt;&amp;lt;/turbo-stream&amp;gt;&amp;quot;
Redirected to http://localhost:3000/tweets
Completed 302 Found in 105ms (ActiveRecord: 64.1ms | Allocations: 5636)

Turbo::StreamsChannel transmitting &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;prepend\&amp;quot; target=\&amp;quot;tweets\&amp;quot;&amp;gt;&amp;lt;template&amp;gt;&amp;lt;div class=\&amp;quot;card card-body\&amp;quot;&amp;gt;\n  &amp;lt;div&amp;gt;Fourth Tweet&amp;lt;/div&amp;gt;\n\n  &amp;lt;div class=\&amp;quot;mt-2\&amp;quot;&amp;gt;\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-success\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;post\&amp;quot; href=\&amp;quot;/tweets/7/like\&amp;quot;&amp;gt;Like (0)&amp;lt;/a&amp;gt;\n\n    &amp;lt;a class=\&amp;quot;btn btn-s... (via streamed from tweets)
Turbo::StreamsChannel transmitting &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;prepend\&amp;quot; target=\&amp;quot;tweets\&amp;quot;&amp;gt;&amp;lt;template&amp;gt;&amp;lt;div class=\&amp;quot;card card-body\&amp;quot;&amp;gt;\n  &amp;lt;div&amp;gt;Fourth Tweet&amp;lt;/div&amp;gt;\n\n  &amp;lt;div class=\&amp;quot;mt-2\&amp;quot;&amp;gt;\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-success\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;post\&amp;quot; href=\&amp;quot;/tweets/7/like\&amp;quot;&amp;gt;Like (0)&amp;lt;/a&amp;gt;\n\n    &amp;lt;a class=\&amp;quot;btn btn-s... (via streamed from tweets)
Started GET &amp;quot;/tweets&amp;quot; for 127.0.0.1 at 2021-02-28 21:12:59 +0100
Processing by TweetsController#index as TURBO_STREAM
  Rendering layout layouts/application.html.erb
  Rendering tweets/index.html.erb within layouts/application
  Rendered tweets/_form.html.erb (Duration: 2.6ms | Allocations: 501)
  Tweet Load (41.8ms)  SELECT &amp;quot;tweets&amp;quot;.* FROM &amp;quot;tweets&amp;quot; ORDER BY &amp;quot;tweets&amp;quot;.&amp;quot;created_at&amp;quot; DESC
  ↳ app/views/tweets/index.html.erb:15
  Rendered collection of tweets/_tweet.html.erb [3 times] (Duration: 1.3ms | Allocations: 429)
  Rendered tweets/index.html.erb within layouts/application (Duration: 50.7ms | Allocations: 2283)
[Webpacker] Everything&#39;s up-to-date. Nothing to do
  Rendered layout layouts/application.html.erb (Duration: 75.7ms | Allocations: 7207)
Completed 200 OK in 80ms (Views: 34.9ms | ActiveRecord: 41.8ms | Allocations: 7831)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is a bunch of interesting information, but for now I just want to point out the only thing sent was the new html to display:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[ActionCable] Broadcasting to tweets: &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;prepend\&amp;quot; target=\&amp;quot;tweets\&amp;quot;&amp;gt;&amp;lt;template&amp;gt;&amp;lt;div class=\&amp;quot;card card-body\&amp;quot;&amp;gt;\n  &amp;lt;div&amp;gt;Fourth Tweet&amp;lt;/div&amp;gt;\n\n  &amp;lt;div class=\&amp;quot;mt-2\&amp;quot;&amp;gt;\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-success\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;post\&amp;quot; href=\&amp;quot;/tweets/7/like\&amp;quot;&amp;gt;Like (0)&amp;lt;/a&amp;gt;\n\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-info\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;post\&amp;quot; href=\&amp;quot;/tweets/7/retweet\&amp;quot;&amp;gt;Retweet (0)&amp;lt;/a&amp;gt;\n\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-primary\&amp;quot; href=\&amp;quot;/tweets/7/edit\&amp;quot;&amp;gt;Edit&amp;lt;/a&amp;gt;\n\n    &amp;lt;a data-confirm=\&amp;quot;Are you sure?\&amp;quot; class=\&amp;quot;btn btn-sm btn-outline-danger\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;delete\&amp;quot; href=\&amp;quot;/tweets/7\&amp;quot;&amp;gt;Destroy&amp;lt;/a&amp;gt;\n  &amp;lt;/div&amp;gt;\n&amp;lt;/div&amp;gt;\n&amp;lt;/template&amp;gt;&amp;lt;/turbo-stream&amp;gt;&amp;quot;
Redirected to http://localhost:3000/tweets
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using websockets to send html to the parts of the webpage that need to be updated is very efficient.&lt;/p&gt;
&lt;p&gt;Since the broadcast is at the model level, we can even create a new tweet on the cli and all our web-clients will update:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails c
Tweet.create(body: &amp;quot;CLI tweet appears&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_3rd_broadcast_new_cli.png&#34; alt=&#34;tweet_index_3rd&#34;&gt;&lt;/p&gt;
&lt;p&gt;Lets make a snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;new tweets are broadcast to all clients&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;broadcast-deleted-tweets-to-all-clients&#34;&gt;Broadcast Deleted Tweets to all Clients&lt;/h3&gt;
&lt;p&gt;we need to add another broadcast to the model:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/tweet.rb
class Tweet &amp;lt; ApplicationRecord
  validates :body, presence: true

  # broadcast &amp;quot;tweets&amp;quot; send all changes to the `turbo_stream` view &amp;quot;tweets&amp;quot;
  # `broadcast_prepend_to` places new information at the top instead of appending to the bottom
  after_create_commit { broadcast_prepend_to &amp;quot;tweets&amp;quot; }
  after_destroy_commit { broadcast_remove_to &amp;quot;tweets&amp;quot; }
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But for this to work we will need to create frames around every tweet so we can find and delete the individual tweet to do this we will at a tag to our &lt;code&gt;_tweet&lt;/code&gt; partial.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/_tweet.html.erb
&amp;lt;!-- this tag with `tweet` instead of &#39;tweets&#39; identifies an individual tweet --&amp;gt;
&amp;lt;%= turbo_frame_tag tweet do %&amp;gt;
&amp;lt;div class=&amp;quot;card card-body&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;%= tweet.body %&amp;gt;&amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;mt-2&amp;quot;&amp;gt;
    &amp;lt;%= link_to &amp;quot;Like (#{tweet.likes})&amp;quot;,
                tweet_like_path(tweet),
                method: :post,
                class: &amp;quot;btn btn-sm btn-outline-success&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &amp;quot;Retweet (#{tweet.retweets})&amp;quot;,
                tweet_retweet_path(tweet),
                method: :post,
                class: &amp;quot;btn btn-sm btn-outline-info&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &#39;Edit&#39;, edit_tweet_path(tweet),
                class: &amp;quot;btn btn-sm btn-outline-primary&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &#39;Destroy&#39;, tweet_path(tweet), method: :delete,
                data: { confirm: &#39;Are you sure?&#39; },
                class: &amp;quot;btn btn-sm btn-outline-danger&amp;quot; %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when you should be able to delete a tweet in the middle of the tweets and not reload the entire page index page.  You will notice also that each tweet now has the turbo-frame border.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_4th_delete_broadcast.png&#34; alt=&#34;tweet_index_4th&#34;&gt;&lt;/p&gt;
&lt;p&gt;In the above image you can see we are deleting the 3rd tweet - in the middle of the tweets.  And of course it works in both our web-clients because of the new broadcast and tags we added.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_5th_deleted.png&#34; alt=&#34;tweet_index_5th&#34;&gt;&lt;/p&gt;
&lt;p&gt;Looking at the logs we see that we only send the information that is changing to each client:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Turbo::StreamsChannel transmitting &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;remove\&amp;quot; target=\&amp;quot;tweet_6\&amp;quot;&amp;gt;&amp;lt;/turbo-stream&amp;gt;&amp;quot; (via streamed from tweets)
Turbo::StreamsChannel transmitting &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;remove\&amp;quot; target=\&amp;quot;tweet_6\&amp;quot;&amp;gt;&amp;lt;/turbo-stream&amp;gt;&amp;quot; (via streamed from tweets)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;here is the full transaction:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Started DELETE &amp;quot;/tweets/6&amp;quot; for 127.0.0.1 at 2021-02-28 21:45:44 +0100
Processing by TweetsController#destroy as TURBO_STREAM
  Parameters: {&amp;quot;authenticity_token&amp;quot;=&amp;gt;&amp;quot;[FILTERED]&amp;quot;, &amp;quot;id&amp;quot;=&amp;gt;&amp;quot;6&amp;quot;}
  Tweet Load (5.5ms)  SELECT &amp;quot;tweets&amp;quot;.* FROM &amp;quot;tweets&amp;quot; WHERE &amp;quot;tweets&amp;quot;.&amp;quot;id&amp;quot; = $1 LIMIT $2  [[&amp;quot;id&amp;quot;, 6], [&amp;quot;LIMIT&amp;quot;, 1]]
  ↳ app/controllers/tweets_controller.rb:63:in `set_tweet&#39;
  TRANSACTION (0.8ms)  BEGIN
  ↳ app/controllers/tweets_controller.rb:53:in `destroy&#39;
  Tweet Destroy (27.4ms)  DELETE FROM &amp;quot;tweets&amp;quot; WHERE &amp;quot;tweets&amp;quot;.&amp;quot;id&amp;quot; = $1  [[&amp;quot;id&amp;quot;, 6]]
  ↳ app/controllers/tweets_controller.rb:53:in `destroy&#39;
  TRANSACTION (30.8ms)  COMMIT
  ↳ app/controllers/tweets_controller.rb:53:in `destroy&#39;
[ActionCable] Broadcasting to tweets: &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;remove\&amp;quot; target=\&amp;quot;tweet_6\&amp;quot;&amp;gt;&amp;lt;/turbo-stream&amp;gt;&amp;quot;
Redirected to http://localhost:3000/tweets
Completed 302 Found in 234ms (ActiveRecord: 66.0ms | Allocations: 6664)

Turbo::StreamsChannel transmitting &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;remove\&amp;quot; target=\&amp;quot;tweet_6\&amp;quot;&amp;gt;&amp;lt;/turbo-stream&amp;gt;&amp;quot; (via streamed from tweets)
Turbo::StreamsChannel transmitting &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;remove\&amp;quot; target=\&amp;quot;tweet_6\&amp;quot;&amp;gt;&amp;lt;/turbo-stream&amp;gt;&amp;quot; (via streamed from tweets)
Started GET &amp;quot;/tweets&amp;quot; for 127.0.0.1 at 2021-02-28 21:45:44 +0100
Processing by TweetsController#index as TURBO_STREAM
  Rendering layout layouts/application.html.erb
  Rendering tweets/index.html.erb within layouts/application
  Rendered tweets/_form.html.erb (Duration: 1.9ms | Allocations: 501)
  Tweet Load (1.6ms)  SELECT &amp;quot;tweets&amp;quot;.* FROM &amp;quot;tweets&amp;quot; ORDER BY &amp;quot;tweets&amp;quot;.&amp;quot;created_at&amp;quot; DESC
  ↳ app/views/tweets/index.html.erb:15
  Rendered collection of tweets/_tweet.html.erb [3 times] (Duration: 1.2ms | Allocations: 528)
  Rendered tweets/index.html.erb within layouts/application (Duration: 10.2ms | Allocations: 2380)
[Webpacker] Everything&#39;s up-to-date. Nothing to do
  Rendered layout layouts/application.html.erb (Duration: 27.4ms | Allocations: 7296)
Completed 200 OK in 31ms (Views: 26.6ms | ActiveRecord: 1.6ms | Allocations: 7918)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s take another snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;broadcast deleted tweets via hotwire&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;edit--updates-to-all-clients&#34;&gt;Edit / Updates to all clients!&lt;/h3&gt;
&lt;p&gt;Turbo unlike Turbo-Links works with Forms as well as links.  This allows us to edit our posts.&lt;/p&gt;
&lt;h4 id=&#34;start-with-the-create-form&#34;&gt;Start with the Create Form&lt;/h4&gt;
&lt;p&gt;Lets start by testing the create form as is with validation errors - if we enter a blank message we should get an error.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_6th_no_frame_validations.png&#34; alt=&#34;tweet_index_6th_no_frame_validations&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now lets put this form in a turbo-frame - since we will need this in a form for edit - lets start with the easy case - new / create - where the form will always be in the same location. Ideally, the &lt;code&gt;turbo_stream_from&lt;/code&gt; definition is before the first &lt;code&gt;turbo_frame_tag&lt;/code&gt;.  Now your index view will look something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/index.html.erb
&amp;lt;p id=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;!-- connects to the backend broadcast (via a channel) --&amp;gt;
&amp;lt;%= turbo_stream_from &amp;quot;tweets&amp;quot; %&amp;gt;

&amp;lt;h1&amp;gt;Tweets&amp;lt;/h1&amp;gt;

&amp;lt;h4&amp;gt;New Tweet&amp;lt;/h4&amp;gt;

&amp;lt;!-- the form needs to be in a frame - otherwise we can&#39;t edit in place --&amp;gt;
&amp;lt;%= turbo_frame_tag &amp;quot;tweet-form&amp;quot; do %&amp;gt;
  &amp;lt;%= render &amp;quot;tweets/form&amp;quot;, tweet: @tweet %&amp;gt;
&amp;lt;% end %&amp;gt;

&amp;lt;h4&amp;gt;Tweet Feed&amp;lt;/h4&amp;gt;

&amp;lt;!-- frame that receives the taged data --&amp;gt;
&amp;lt;%= turbo_frame_tag &amp;quot;tweets&amp;quot; do %&amp;gt;
  &amp;lt;%= render @tweets %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Log file - from the log file we see we are still reloading the page see the line: &lt;code&gt;Tweet Load (83.9ms)  SELECT &amp;quot;tweets&amp;quot;.* FROM &amp;quot;tweets&amp;quot; ORDER BY &amp;quot;tweets&amp;quot;.&amp;quot;created_at&amp;quot;&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Started POST &amp;quot;/tweets&amp;quot; for 127.0.0.1 at 2021-03-01 20:55:34 +0100
Processing by TweetsController#create as TURBO_STREAM
  Parameters: {&amp;quot;authenticity_token&amp;quot;=&amp;gt;&amp;quot;[FILTERED]&amp;quot;, &amp;quot;tweet&amp;quot;=&amp;gt;{&amp;quot;body&amp;quot;=&amp;gt;&amp;quot;&amp;quot;}, &amp;quot;commit&amp;quot;=&amp;gt;&amp;quot;Create Tweet&amp;quot;}
  Rendering layout layouts/application.html.erb
  Rendering tweets/index.html.erb within layouts/application
  Rendered tweets/_form.html.erb (Duration: 4.9ms | Allocations: 1362)
  Tweet Load (83.9ms)  SELECT &amp;quot;tweets&amp;quot;.* FROM &amp;quot;tweets&amp;quot; ORDER BY &amp;quot;tweets&amp;quot;.&amp;quot;created_at&amp;quot; DESC
  ↳ app/views/tweets/index.html.erb:23
  Rendered collection of tweets/_tweet.html.erb [4 times] (Duration: 2.0ms | Allocations: 700)
  Rendered tweets/index.html.erb within layouts/application (Duration: 94.0ms | Allocations: 3159)
[Webpacker] Everything&#39;s up-to-date. Nothing to do
  Rendered layout layouts/application.html.erb (Duration: 119.2ms | Allocations: 8006)
Completed 422 Unprocessable Entity in 125ms (Views: 35.9ms | ActiveRecord: 83.9ms | Allocations: 9244)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To fix this we will need the &lt;code&gt;form&lt;/code&gt; to have a tag id - to do this we can update the form with &lt;code&gt;&amp;lt;%= form_with(model: tweet, id: dom_id(tweet)) do |form| %&amp;gt;&lt;/code&gt; - also:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;%= form_with(model: tweet, id: dom_id(tweet)) do |form| %&amp;gt;
&amp;lt;% if tweet.errors.any? %&amp;gt;
&amp;lt;div id=&amp;quot;error_explanation&amp;quot;&amp;gt;
  &amp;lt;h2&amp;gt;&amp;lt;%= pluralize(tweet.errors.count, &amp;quot;error&amp;quot;) %&amp;gt; prohibited this tweet from being saved:&amp;lt;/h2&amp;gt;

  &amp;lt;ul&amp;gt;
    &amp;lt;% tweet.errors.each do |error| %&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;%= error.full_message %&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;

&amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
  &amp;lt;%= form.label :body %&amp;gt;
  &amp;lt;%= form.text_area :body %&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div class=&amp;quot;actions&amp;quot;&amp;gt;
  &amp;lt;%= form.submit %&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But even still we need to the controller how to use the turbo_stream.  There are several ways (with and without a template).  We will start without a tempate (actually the template info is inline) using: &lt;code&gt;format.turbo_stream { render turbo_stream: turbo_stream.replace(@tweet, partial: &amp;quot;tweets/form&amp;quot;, locals: { tweet: @tweet}) }&lt;/code&gt;.  Not the create controller should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/tweets_controller.rb
  def create
    @tweet = Tweet.new(tweet_params)

    respond_to do |format|
      if @tweet.save
        format.html { redirect_to tweets_url, notice: &amp;quot;Tweet was successfully created.&amp;quot; }
        format.json { render :show, status: :created, location: @tweet }
      else
        format.turbo_stream { render turbo_stream: turbo_stream.replace(@tweet, partial: &amp;quot;tweets/form&amp;quot;, locals: { tweet: @tweet}) }
        @tweets = Tweet.all.order(created_at: :desc)
        format.html { render :index, status: :unprocessable_entity }
        format.json { render json: @tweet.errors, status: :unprocessable_entity }
      end
    end
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when we create an invalid message we should see (notice the turbo-frame outline):
&lt;img src=&#34;tweet_index_7th_w_frame_validation.png&#34; alt=&#34;tweet_index_7th_w_frame_validation&#34;&gt;&lt;/p&gt;
&lt;p&gt;When we look at the logs we can confirm we are using the TURBO_STREAM for both directions and NOT reloading the page (no &lt;code&gt;LOAD&lt;/code&gt; in the log):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Started POST &amp;quot;/tweets&amp;quot; for 127.0.0.1 at 2021-03-01 21:22:13 +0100
Processing by TweetsController#create as TURBO_STREAM
  Parameters: {&amp;quot;authenticity_token&amp;quot;=&amp;gt;&amp;quot;[FILTERED]&amp;quot;, &amp;quot;tweet&amp;quot;=&amp;gt;{&amp;quot;body&amp;quot;=&amp;gt;&amp;quot;&amp;quot;}, &amp;quot;commit&amp;quot;=&amp;gt;&amp;quot;Create Tweet&amp;quot;}
  Rendered tweets/_form.html.erb (Duration: 3.0ms | Allocations: 1373)
Completed 200 OK in 7ms (Views: 0.3ms | ActiveRecord: 0.0ms | Allocations: 2641)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that validation errors work again - lets be sure that we can still create a new tweet.&lt;/p&gt;
&lt;p&gt;Assuming all works - lets take a quick snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;new tweet form is hooked into turbo-stream and validations still work&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;?????
Turbo - is clever enough to figure out the routing in the default case and will use its own stream to update the page - however you could also define an explicit stream - something like: &lt;code&gt;format.turbo_stream { render turbo_stream: turbo_stream.prepend(@tweet, locals: { tweet: @tweet}) }&lt;/code&gt; or with &lt;code&gt;format.turbo_stream&lt;/code&gt; and a turbo view &lt;code&gt;app/views/tweets/create.turbo_stream&lt;/code&gt; - containing: &lt;code&gt;&amp;lt;%=  %&amp;gt;&lt;/code&gt;
????&lt;/p&gt;
&lt;h4 id=&#34;in-place-edit&#34;&gt;In-Place Edit&lt;/h4&gt;
&lt;p&gt;In oder to do an in-place edit we will need yet another type of broadcast &lt;code&gt; after_update_commit { broadcast_replace_to &amp;quot;tweets&amp;quot; }&lt;/code&gt;
so our new model will now look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/tweet.rb
class Tweet &amp;lt; ApplicationRecord
  validates :body, presence: true

  # broadcast &amp;quot;tweets&amp;quot; send all changes to the `turbo_stream` view &amp;quot;tweets&amp;quot;
  # `broadcast_prepend_to` places new information at the top instead of appending to the bottom
  after_create_commit { broadcast_prepend_to &amp;quot;tweets&amp;quot; }
  after_destroy_commit { broadcast_remove_to &amp;quot;tweets&amp;quot; }
  after_update_commit { broadcast_replace_to &amp;quot;tweets&amp;quot; }
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now would hope it would all work, but when we click on Edit, the item disappears (and re-appears on reload).
&lt;img src=&#34;tweet_index_8th_broken_edit.png&#34; alt=&#34;tweet_index_8th_broken_edit&#34;&gt;&lt;/p&gt;
&lt;p&gt;Lets look at the logs:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Started GET &amp;quot;/tweets/11/edit&amp;quot; for 127.0.0.1 at 2021-03-03 20:10:53 +0100
Processing by TweetsController#edit as HTML
  Parameters: {&amp;quot;id&amp;quot;=&amp;gt;&amp;quot;11&amp;quot;}
  Tweet Load (0.7ms)  SELECT &amp;quot;tweets&amp;quot;.* FROM &amp;quot;tweets&amp;quot; WHERE &amp;quot;tweets&amp;quot;.&amp;quot;id&amp;quot; = $1 LIMIT $2  [[&amp;quot;id&amp;quot;, 11], [&amp;quot;LIMIT&amp;quot;, 1]]
  ↳ app/controllers/tweets_controller.rb:68:in `set_tweet&#39;
  Rendering tweets/edit.html.erb
  Rendered tweets/_form.html.erb (Duration: 2.3ms | Allocations: 676)
  Rendered tweets/edit.html.erb (Duration: 3.8ms | Allocations: 980)
Completed 200 OK in 8ms (Views: 4.5ms | ActiveRecord: 0.7ms | Allocations: 2104)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We see that it loads the tweet and sends it to the edit.html.erb page (which loads the form partial), but we don&amp;rsquo;t see anything but the index page (minus the tweet we wanted to edit).  Unfortunately, Hotwire, doesn&amp;rsquo;t provide an error, it just doesn&amp;rsquo;t find a location to render the edit on our index (since the edit link is within a stream tag) and just replaces our dom_id with nothing.  Here is where Hotwire could provide much better feedback.&lt;/p&gt;
&lt;p&gt;In any case, the fix is straightforward, we need to tell Rails what in the edit page goes into the index page so we can do that with another frame_tag: &lt;code&gt;&amp;lt;%= turbo_frame_tag dom_id(@tweet) do %&amp;gt;&lt;/code&gt; Now the edit.html.erb page should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/edit.html.erb
&amp;lt;h1&amp;gt;Editing Tweet&amp;lt;/h1&amp;gt;

&amp;lt;%= turbo_frame_tag dom_id(@tweet) do %&amp;gt;
  &amp;lt;%= render &#39;form&#39;, tweet: @tweet %&amp;gt;
&amp;lt;% end %&amp;gt;

&amp;lt;%= link_to &#39;Show&#39;, @tweet %&amp;gt; |
&amp;lt;%= link_to &#39;Back&#39;, tweets_path %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE: We don&amp;rsquo;t need to fix the form partial since we did that in the previous &lt;code&gt;new&lt;/code&gt; step with by adding a dom_id tag to the form with: &lt;code&gt;&amp;lt;%= form_with(model: tweet, id: dom_id(tweet)) do |form| %&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_9th_in_place_wo_css.png&#34; alt=&#34;tweet_index_9th_in_place_wo_css&#34;&gt;&lt;/p&gt;
&lt;p&gt;We might notice that the edit page lacks formatting (the form is squished up against the left of our frame).  This is because our tweet partial has a card div but that is lacking when replace the dom_id with the form &amp;ndash; we can easily fix this by adding the CSS to our edit page:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/edit.html.erb
&amp;lt;h1&amp;gt;Editing Tweet&amp;lt;/h1&amp;gt;

&amp;lt;%= turbo_frame_tag dom_id(@tweet) do %&amp;gt;
&amp;lt;div class=&amp;quot;card card-body&amp;quot;&amp;gt;
  &amp;lt;%= render &#39;form&#39;, tweet: @tweet %&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;

&amp;lt;%= link_to &#39;Show&#39;, @tweet %&amp;gt; |
&amp;lt;%= link_to &#39;Back&#39;, tweets_path %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when we reload and try to edit &amp;ndash; we see what we expect:
&lt;img src=&#34;tweet_index_10th_in_place_edit.png&#34; alt=&#34;tweet_index_10th_in_place_edit&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now when we actually do an edit we see it all works as expected.  From the logs we see
it loads the tweet from the db, then the the edit page which loads the frame (this time it actually places it into the dom_id we provided, but unfortunately, we can&amp;rsquo;t see that from the logs)!  And we can see that when we submit the edit &amp;ndash; the tweet model sends out the html patch send to both windows we have open.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Started GET &amp;quot;/tweets/11/edit&amp;quot; for 127.0.0.1 at 2021-03-03 20:34:56 +0100
Processing by TweetsController#edit as HTML
  Parameters: {&amp;quot;id&amp;quot;=&amp;gt;&amp;quot;11&amp;quot;}
  Tweet Load (1.0ms)  SELECT &amp;quot;tweets&amp;quot;.* FROM &amp;quot;tweets&amp;quot; WHERE &amp;quot;tweets&amp;quot;.&amp;quot;id&amp;quot; = $1 LIMIT $2  [[&amp;quot;id&amp;quot;, 11], [&amp;quot;LIMIT&amp;quot;, 1]]
  ↳ app/controllers/tweets_controller.rb:68:in `set_tweet&#39;
  Rendering tweets/edit.html.erb
  Rendered tweets/_form.html.erb (Duration: 2.5ms | Allocations: 649)
  Rendered tweets/edit.html.erb (Duration: 3.8ms | Allocations: 985)
Completed 200 OK in 9ms (Views: 5.3ms | ActiveRecord: 1.0ms | Allocations: 2110)

Started PATCH &amp;quot;/tweets/11&amp;quot; for 127.0.0.1 at 2021-03-03 20:35:11 +0100
Processing by TweetsController#update as TURBO_STREAM
  Parameters: {&amp;quot;authenticity_token&amp;quot;=&amp;gt;&amp;quot;[FILTERED]&amp;quot;, &amp;quot;tweet&amp;quot;=&amp;gt;{&amp;quot;body&amp;quot;=&amp;gt;&amp;quot;jump! how high?&amp;quot;}, &amp;quot;commit&amp;quot;=&amp;gt;&amp;quot;Update Tweet&amp;quot;, &amp;quot;id&amp;quot;=&amp;gt;&amp;quot;11&amp;quot;}
  Tweet Load (1.1ms)  SELECT &amp;quot;tweets&amp;quot;.* FROM &amp;quot;tweets&amp;quot; WHERE &amp;quot;tweets&amp;quot;.&amp;quot;id&amp;quot; = $1 LIMIT $2  [[&amp;quot;id&amp;quot;, 11], [&amp;quot;LIMIT&amp;quot;, 1]]
  ↳ app/controllers/tweets_controller.rb:68:in `set_tweet&#39;
  TRANSACTION (1.0ms)  BEGIN
  ↳ app/controllers/tweets_controller.rb:45:in `block in update&#39;
  Tweet Update (58.8ms)  UPDATE &amp;quot;tweets&amp;quot; SET &amp;quot;body&amp;quot; = $1, &amp;quot;updated_at&amp;quot; = $2 WHERE &amp;quot;tweets&amp;quot;.&amp;quot;id&amp;quot; = $3  [[&amp;quot;body&amp;quot;, &amp;quot;jump! how high?&amp;quot;], [&amp;quot;updated_at&amp;quot;, &amp;quot;2021-03-03 19:35:11.765970&amp;quot;], [&amp;quot;id&amp;quot;, 11]]
  ↳ app/controllers/tweets_controller.rb:45:in `block in update&#39;
  TRANSACTION (2.3ms)  COMMIT
  ↳ app/controllers/tweets_controller.rb:45:in `block in update&#39;
  Rendered tweets/_tweet.html.erb (Duration: 2.0ms | Allocations: 499)
[ActionCable] Broadcasting to tweets: &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;replace\&amp;quot; target=\&amp;quot;tweet_11\&amp;quot;&amp;gt;&amp;lt;template&amp;gt;&amp;lt;!-- this tag with `tweet` instead of &#39;tweets&#39; identifies an individual tweet --&amp;gt;\n&amp;lt;turbo-frame id=\&amp;quot;tweet_11\&amp;quot;&amp;gt;\n\n&amp;lt;div class=\&amp;quot;card card-body\&amp;quot;&amp;gt;\n  &amp;lt;div&amp;gt;jump! how high?&amp;lt;/div&amp;gt;\n\n  &amp;lt;div class=\&amp;quot;mt-2\&amp;quot;&amp;gt;\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-success\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;post\&amp;quot; href=\&amp;quot;/tweets/11/like\&amp;quot;&amp;gt;Like (0)&amp;lt;/a&amp;gt;\n\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-info\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;post\&amp;quot; href=\&amp;quot;/tweets/11/retweet\&amp;quot;&amp;gt;Retweet (0)&amp;lt;/a&amp;gt;\n\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn-outline-primary\&amp;quot; href=\&amp;quot;/tweets/11/edit\&amp;quot;&amp;gt;Edit&amp;lt;/a&amp;gt;\n\n    &amp;lt;a data-confirm=\&amp;quot;Are you sure?\&amp;quot; class=\&amp;quot;btn btn-sm btn-outline-danger\&amp;quot; rel=\&amp;quot;nofollow\&amp;quot; data-method=\&amp;quot;delete\&amp;quot; href=\&amp;quot;/tweets/11\&amp;quot;&amp;gt;Destroy&amp;lt;/a&amp;gt;\n  &amp;lt;/div&amp;gt;\n&amp;lt;/div&amp;gt;\n\n&amp;lt;/turbo-frame&amp;gt;&amp;lt;/template&amp;gt;&amp;lt;/turbo-stream&amp;gt;&amp;quot;
Redirected to http://localhost:3000/tweets
Completed 302 Found in 116ms (ActiveRecord: 63.1ms | Allocations: 6308)

Turbo::StreamsChannel transmitting &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;replace\&amp;quot; target=\&amp;quot;tweet_11\&amp;quot;&amp;gt;&amp;lt;template&amp;gt;&amp;lt;!-- this tag with `tweet` instead of &#39;tweets&#39; identifies an individual tweet --&amp;gt;\n&amp;lt;turbo-frame id=\&amp;quot;tweet_11\&amp;quot;&amp;gt;\n\n&amp;lt;div class=\&amp;quot;card card-body\&amp;quot;&amp;gt;\n  &amp;lt;div&amp;gt;jump! how high?&amp;lt;/div&amp;gt;\n\n  &amp;lt;div class=\&amp;quot;mt-2\&amp;quot;&amp;gt;\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn... (via streamed from tweets)
Turbo::StreamsChannel transmitting &amp;quot;&amp;lt;turbo-stream action=\&amp;quot;replace\&amp;quot; target=\&amp;quot;tweet_11\&amp;quot;&amp;gt;&amp;lt;template&amp;gt;&amp;lt;!-- this tag with `tweet` instead of &#39;tweets&#39; identifies an individual tweet --&amp;gt;\n&amp;lt;turbo-frame id=\&amp;quot;tweet_11\&amp;quot;&amp;gt;\n\n&amp;lt;div class=\&amp;quot;card card-body\&amp;quot;&amp;gt;\n  &amp;lt;div&amp;gt;jump! how high?&amp;lt;/div&amp;gt;\n\n  &amp;lt;div class=\&amp;quot;mt-2\&amp;quot;&amp;gt;\n    &amp;lt;a class=\&amp;quot;btn btn-sm btn... (via streamed from tweets)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets add a &lt;code&gt;cancel&lt;/code&gt; button to the form so we don&amp;rsquo;t need to reload the page to stop editing - we can do that with a show link &lt;code&gt;&amp;lt;%= link_to &amp;quot;Cancel&amp;quot;, @tweet, class: &amp;quot;btn btn-sm btn-outline-danger&amp;quot; %&amp;gt;&lt;/code&gt; - so our form would now look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/_form.html.erb
&amp;lt;%= form_with(model: tweet, id: dom_id(tweet)) do |form| %&amp;gt;
&amp;lt;% if tweet.errors.any? %&amp;gt;
&amp;lt;div id=&amp;quot;error_explanation&amp;quot;&amp;gt;
  &amp;lt;h2&amp;gt;&amp;lt;%= pluralize(tweet.errors.count, &amp;quot;error&amp;quot;) %&amp;gt; prohibited this tweet from being saved:&amp;lt;/h2&amp;gt;

  &amp;lt;ul&amp;gt;
    &amp;lt;% tweet.errors.each do |error| %&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;%= error.full_message %&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;

&amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
  &amp;lt;%= form.label :body %&amp;gt;
  &amp;lt;%= form.text_area :body %&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div class=&amp;quot;action&amp;quot;&amp;gt;
  &amp;lt;%= form.submit class: &amp;quot;btn btn-sm btn-outline-success&amp;quot; %&amp;gt;
  &amp;lt;%= link_to &amp;quot;Cancel&amp;quot;, @tweet, class: &amp;quot;btn btn-sm btn-outline-danger&amp;quot; %&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately, now when we hit &lt;code&gt;cancel&lt;/code&gt; - the tweet disappears &amp;ndash; because @tweet points to the show page and our current show page has no turbo_frame with a &lt;code&gt;dom_id&lt;/code&gt;. We can fix this by putting our show page (formatted like the tweet partial wrapped in a frame tag with a dom_id) - like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/show.html.erb
&amp;lt;%= turbo_frame_tag dom_id(@tweet) do %&amp;gt;

&amp;lt;div class=&amp;quot;card card-body&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;%= @tweet.body %&amp;gt;&amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;mt-2&amp;quot;&amp;gt;
    &amp;lt;%= link_to &amp;quot;Like (#{@tweet.likes})&amp;quot;,
                tweet_like_path(@tweet),
                method: :post,
                class: &amp;quot;btn btn-sm btn-outline-success&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &amp;quot;Retweet (#{@tweet.retweets})&amp;quot;,
                tweet_retweet_path(@tweet),
                method: :post,
                class: &amp;quot;btn btn-sm btn-outline-info&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &#39;Edit&#39;, edit_tweet_path(@tweet),
                class: &amp;quot;btn btn-sm btn-outline-primary&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &#39;Destroy&#39;, tweet_path(@tweet), method: :delete,
                data: { confirm: &#39;Are you sure?&#39; },
                class: &amp;quot;btn btn-sm btn-outline-danger&amp;quot; %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, this is a bit silly since this is basically the same as our partial and we have two places to change if we want to adjust our tweet layout &amp;ndash; so we can fix this by using the tweet partial:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/show.html.erb
&amp;lt;%= turbo_frame_tag dom_id(@tweet) do %&amp;gt;
  &amp;lt;%= render @tweet %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works, but renders a tag inside a turbo_frame with the tweet dom_id inside the same turbo_frame with the same dom_id (I only noticed this since I have the css marking all turbo_frames):
&lt;img src=&#34;tweet_index_11th_double_frame.png&#34; alt=&#34;tweet_index_11th_double_frame&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is because the tweet partial also has a dom_id - and show will process whatever it finds &amp;ndash; but only sends whatever is marked by the dom_id.&lt;/p&gt;
&lt;p&gt;This was a little tricky to notice at first without the HTML inspector &amp;ndash; since in show I used the explicit dom_id: &lt;code&gt;&amp;lt;%= turbo_frame_tag @tweet do %&amp;gt;&lt;/code&gt; and in the tweet partial I used the implicit dom_id tag: &lt;code&gt;&amp;lt;%= turbo_frame_tag tweet do %&amp;gt;&lt;/code&gt;.  Unfortunately, for now Rails Turbo provides does not yet provide warnings when you render the same dom_id twice.&lt;/p&gt;
&lt;p&gt;In any case, now it may be clear that the the proper solution is that show should now read like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/show.html.erb
&amp;lt;%= render @tweet %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when you inspect the HTML you will only see one dom_id for each tweet and since turbo only replaces items with the correct tags and ids - it renders the tweet partial now.  This is all a bit tricky to debug, hopefully, with time more errors or logging will be added - but for now, I suggest adding &lt;code&gt;&amp;lt;!-- --&amp;gt;&lt;/code&gt; HTML comments with the name of the file inside each turbo tag to ease debugging &amp;ndash; at least until everything works as wished.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s be sure the validation still works for edit too. Try to submit an empty edit - we should see:
&lt;img src=&#34;tweet_index_12_edit_w_validations.png&#34; alt=&#34;tweet_index_12_edit_w_validations&#34;&gt;
because the form now has a dom_id and the validation errors are sent there.&lt;/p&gt;
&lt;p&gt;If some other route is happening another way to fix this would be to add &lt;code&gt;format.turbo_stream { render turbo_stream: turbo_stream.replace(@tweet, partial: &amp;quot;tweets/form&amp;quot;, locals: { tweet: @tweet}) }&lt;/code&gt; to the controller update method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/tweets_controller.rb
def update
    respond_to do |format|
      if @tweet.update(tweet_params)
        format.html { redirect_to tweets_url, notice: &amp;quot;Tweet was successfully updated.&amp;quot; }
        format.json { render :show, status: :ok, location: @tweet }
      else
        format.turbo_stream { render turbo_stream: turbo_stream.replace(@tweet, partial: &amp;quot;tweets/form&amp;quot;, locals: { tweet: @tweet}) }
        format.html { render :edit, status: :unprocessable_entity }
        format.json { render json: @tweet.errors, status: :unprocessable_entity }
      end
    end
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OK - ideally all functionality in the edit form is now working well!&lt;/p&gt;
&lt;p&gt;Time for another snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;turbo frame now allows in-place edit and cancel edit without reloading&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;likes-and-retweet&#34;&gt;Likes and Retweet&lt;/h3&gt;
&lt;p&gt;I was able to get these special routes / actions to update just the calling browser, but unable to get these to broadcast to all open connections.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;p&gt;I am particularly fond of the GoRails videos.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://hotwire.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://hotwire.dev/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://turbo.hotwire.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://turbo.hotwire.dev/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/hotwired/hotwire-rails&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/hotwired/hotwire-rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=NtTfYfWAzw0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=NtTfYfWAzw0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=77GvSdc2Pf8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=77GvSdc2Pf8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=NtTfYfWAzw0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=NtTfYfWAzw0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=MRv4XGu6QkY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=MRv4XGu6QkY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://gorails.com/episodes/hotwire-rails?autoplay=1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://gorails.com/episodes/hotwire-rails?autoplay=1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://robrace.dev/build-a-twitter-clone-with-rails-hotwire/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://robrace.dev/build-a-twitter-clone-with-rails-hotwire/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://blog.cloud66.com/taking-rails-to-the-next-level-with-hotwire/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.cloud66.com/taking-rails-to-the-next-level-with-hotwire/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://betterprogramming.pub/hotwire-actiontext-and-rails-6-be025dce7d87&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://betterprogramming.pub/hotwire-actiontext-and-rails-6-be025dce7d87&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Tweets - A Single Page Rails App (using reloads)</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_1_single_page_app_simulate/</link>
      <pubDate>Sat, 20 Feb 2021 18:57:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_1_single_page_app_simulate/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;This article is just to have a base app that stays on the index page.  We will use this as a starting point for a more efficient single page app by updating this project with Hotwire in the next article 
&lt;a href=&#34;https://btihen.me/post_ruby_rails/rails_6_hotwire_tweet_single_page/&#34;&gt;Tweets - A Rails based Single Page App using Hotwire&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://hotwire.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hotwire&lt;/a&gt; allows us to build Single Page Apps using Ruby and Rails with nearly NO configuration! It allow very responsive web-applications as it reloads only the parts of the page that change via a socket.  Hotwire using 
&lt;a href=&#34;https://turbo.hotwire.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Turbo&lt;/a&gt; - an evolution of TurboLinks and as such is mobile friendly and in most cases can send the replacement HTML directly from the server to the client with minimal or no client side processing over websockets so there is minimal lag time.&lt;/p&gt;
&lt;p&gt;This code can be found at: 
&lt;a href=&#34;https://github.com/btihen/tweet_simulator_rails&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/btihen/tweet_simulator_rails&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;basic-setup&#34;&gt;Basic Setup&lt;/h2&gt;
&lt;h3 id=&#34;create-the-project&#34;&gt;Create the project&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;ll skip Turbolinks since Turbo replaces Turbolinks and also installs Stimulus&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails new tweets -d postgresql -T --skip-turbolinks --skip-spring
cd tweets
git add .
git commit -m &amp;quot;initial commit after creation&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I generally take a lot of git snapshots (and then squash them - so its easy to go back to a known good point if things don&amp;rsquo;t work out).&lt;/p&gt;
&lt;h3 id=&#34;create-a-traditional-rails-tweet-clone&#34;&gt;Create a Traditional Rails Tweet Clone&lt;/h3&gt;
&lt;h4 id=&#34;tweet-model&#34;&gt;Tweet Model&lt;/h4&gt;
&lt;p&gt;We&amp;rsquo;ll scaffold the model to get all the parts we need&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails g scaffold tweet body:text likes:integer retweets:integer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&amp;rsquo;ll update the migration to prevent blanks - make the migration file look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# db/migrate/yyyymmddHHMMSS_create_tweets.rb
class CreateTweets &amp;lt; ActiveRecord::Migration[6.1]
  def change
    create_table :tweets do |t|
      t.text :body, null: false
      t.integer :likes, null: false, default: 0
      t.integer :retweets, null: false, default: 0

      t.timestamps
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we should be able to successfully create and migrate out database&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:create
bin/rails db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Given the Database restrictions we&amp;rsquo;ll add validations to the model. So now it should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/tweet.rb
class Tweet &amp;lt; ApplicationRecord
  validates :body, presence: true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets also point the root route at our tweets resource - so now it should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/routes.rb
Rails.application.routes.draw do
  resources :tweets
  root to: &amp;quot;tweets#index&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets start up rails and be sure everything works so far:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;go to &lt;code&gt;http://localhost:3000&lt;/code&gt; and make and edit and delete some tweets.&lt;/p&gt;
&lt;p&gt;Assuming it works lets commit these changes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;created tweet scaffold, validations and routes&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;lets-make-this-useable-more-like-a-single-page-app&#34;&gt;Let&amp;rsquo;s make this useable (more like a single page app)&lt;/h4&gt;
&lt;p&gt;Lets start by fixing the following problems:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the create form allows us to choose and edit likes and retweets&lt;/li&gt;
&lt;li&gt;tweets are listed in the opposite order in oldest to newest&lt;/li&gt;
&lt;li&gt;to create a new tweet we need to go to a separate new page&lt;/li&gt;
&lt;li&gt;creating and editing new tweets brings us to a show page (away from our index)&lt;/li&gt;
&lt;li&gt;message, likes, retweets, etc are all listed in one long table row (we&amp;rsquo;ll fix with some bootstrap css)&lt;/li&gt;
&lt;li&gt;likes and retweets are not usable&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As mentioned users shouldn&amp;rsquo;t choose their likes and retweets:
&lt;img src=&#34;tweet_form_1st.png&#34; alt=&#34;tweet_form_1st&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now lets remove likes and retweets from our form:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/_form.html.erb
&amp;lt;%= form_with(model: tweet) do |form| %&amp;gt;
  &amp;lt;% if tweet.errors.any? %&amp;gt;
    &amp;lt;div id=&amp;quot;error_explanation&amp;quot;&amp;gt;
      &amp;lt;h2&amp;gt;&amp;lt;%= pluralize(tweet.errors.count, &amp;quot;error&amp;quot;) %&amp;gt; prohibited this tweet from being saved:&amp;lt;/h2&amp;gt;

      &amp;lt;ul&amp;gt;
        &amp;lt;% tweet.errors.each do |error| %&amp;gt;
          &amp;lt;li&amp;gt;&amp;lt;%= error.full_message %&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;% end %&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;% end %&amp;gt;

  &amp;lt;div class=&amp;quot;field&amp;quot;&amp;gt;
    &amp;lt;%= form.label :body %&amp;gt;
    &amp;lt;%= form.text_area :body %&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;actions&amp;quot;&amp;gt;
    &amp;lt;%= form.submit %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the form should look like:
&lt;img src=&#34;tweet_form_2nd.png&#34; alt=&#34;tweet_form_2nd&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you made several tweets you&amp;rsquo;ll notice that the tweets are in oldest to newest.
&lt;img src=&#34;tweet_index_1st_oldest.png&#34; alt=&#34;tweet_index_1st&#34;&gt;&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll fix that with the index controller sort order:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/tweets_controller.rb
class TweetsController &amp;lt; ApplicationController
  before_action :set_tweet, only: %i[ show edit update destroy ]

  def index
    @tweets = Tweet.all.order(created_at: :desc)
  end
  ...
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_2nd_newest.png&#34; alt=&#34;tweet_index_2nd&#34;&gt;&lt;/p&gt;
&lt;p&gt;now tweets should be newest to oldest&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s put our create tweet at the top of our index page&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/index.html.erb
&amp;lt;p id=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;h1&amp;gt;Tweets&amp;lt;/h1&amp;gt;

&amp;lt;h4&amp;gt;New Tweet&amp;lt;/h4&amp;gt;
&amp;lt;%= render &amp;quot;tweets/form&amp;quot;, tweet: @tweet %&amp;gt;

&amp;lt;h4&amp;gt;Tweet Feed&amp;lt;/h4&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now when we check out index page again &amp;ndash; oops, we get an error:
&lt;img src=&#34;tweet_index_3rd_error.png&#34; alt=&#34;tweet_index_3rd_error&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;errors&lt;/code&gt; is null because the new instance isn&amp;rsquo;t available we need to add a new tweet to our index page from the controller:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/tweets_controller.rb
class TweetsController &amp;lt; ApplicationController
  before_action :set_tweet, only: %i[ show edit update destroy ]

  def index
    # put newest tweets at the top of the page
    @tweets = Tweet.all.order(created_at: :desc)
    @tweet = Tweet.new
  end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when we view index we should be able to create a tweet on the index page:
&lt;img src=&#34;tweet_index_4th_top.png&#34; alt=&#34;tweet_index_4th&#34;&gt;&lt;/p&gt;
&lt;p&gt;However, after creation we still go to show page and need to navigate back to the index page - lets fix that in the create controller.  We will change the line:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;format.html { redirect_to @tweet, notice: &amp;quot;Tweet was successfully created.&amp;quot; }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;with:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;format.html { redirect_to tweets_url, notice: &amp;quot;Tweet was successfully created.&amp;quot; }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We will have the same problem with update &amp;ndash; so let&amp;rsquo;s fix them both.  Now the controller should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/tweets_controller.rb
  def create
    @tweet = Tweet.new(tweet_params)

    respond_to do |format|
      if @tweet.save
        format.html { redirect_to tweets_url, notice: &amp;quot;Tweet was successfully created.&amp;quot; }
        format.json { render :show, status: :created, location: @tweet }
      else
        format.html { render :new, status: :unprocessable_entity }
        format.json { render json: @tweet.errors, status: :unprocessable_entity }
      end
    end
  end

  def update
    respond_to do |format|
      if @tweet.update(tweet_params)
        format.html { redirect_to tweet_url, notice: &amp;quot;Tweet was successfully updated.&amp;quot; }
        format.json { render :show, status: :ok, location: @tweet }
      else
        format.html { render :edit, status: :unprocessable_entity }
        format.json { render json: @tweet.errors, status: :unprocessable_entity }
      end
    end
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now after we create a new tweet we should &amp;lsquo;stay&amp;rsquo; (it actually reloads - which could be slow if we had many tweets on the page - we will fix this with hotwire) on the index page and see:
&lt;img src=&#34;tweet_index_5th_after_create.png&#34; alt=&#34;tweet_index_5th&#34;&gt;&lt;/p&gt;
&lt;p&gt;OK we are almost there, but we still have rows of tables and not a nice tweet feed look.&lt;/p&gt;
&lt;p&gt;Lets add Bootstrap CSS for some modest beauty (you can copy this file or use the below link to get the newest Bootstrap CSS)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/layout/application.html.erb
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;

&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Tweets&amp;lt;/title&amp;gt;
  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt;
  &amp;lt;%= csrf_meta_tags %&amp;gt;
  &amp;lt;%= csp_meta_tag %&amp;gt;

  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot;
        href=&amp;quot;https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css&amp;quot;
        integrity=&amp;quot;sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l&amp;quot;
        crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;
  &amp;lt;%= stylesheet_link_tag &#39;application&#39;, media: &#39;all&#39; %&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
  &amp;lt;%= yield %&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you can get the newest bootstrap link from: 
&lt;a href=&#34;https://getbootstrap.com/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://getbootstrap.com/docs/&lt;/a&gt; or 
&lt;a href=&#34;https://www.bootstrapcdn.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bootstrapcdn.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now lets make a partial reformat our feed with bootstrap:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/_tweet.html.erb
&amp;lt;div class=&amp;quot;card card-body&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;%= tweet.body %&amp;gt;&amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;mt-2&amp;quot;&amp;gt;
    &amp;lt;%= &amp;quot;Like (#{tweet.likes})&amp;quot; %&amp;gt;

    &amp;lt;%= &amp;quot;Retweet (#{tweet.retweets})&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &#39;Edit&#39;, edit_tweet_path(tweet),
              class: &amp;quot;btn btn-sm btn-success&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &#39;Destroy&#39;, tweet_path(tweet), method: :delete,
              data: { confirm: &#39;Are you sure?&#39; },
              class: &amp;quot;btn btn-sm btn-danger&amp;quot; %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets integrate the tweet partial into the index page:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/index.html.erb
&amp;lt;p id=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;h1&amp;gt;Tweets&amp;lt;/h1&amp;gt;

&amp;lt;h4&amp;gt;New Tweet&amp;lt;/h4&amp;gt;
&amp;lt;%= render &amp;quot;tweets/form&amp;quot;, tweet: @tweet %&amp;gt;

&amp;lt;h4&amp;gt;Tweet Feed&amp;lt;/h4&amp;gt;
&amp;lt;%= render @tweets %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have an app that basically works from the index pages (not yet Edit, but without Hotwire, that&amp;rsquo;s difficult &amp;ndash; see the next article)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_6th_formatted.png&#34; alt=&#34;tweet_index_6th&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take another git snapshot of &amp;lsquo;index&amp;rsquo; reloading app.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;tweet app mostly from the index page&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;activate-likes-and-retweets&#34;&gt;Activate likes and retweets&lt;/h4&gt;
&lt;p&gt;To finish this simple app lets activate Likes and Retweets - we will do this with new controllers since this is an independent action from our tweet itself.  We will use the &lt;code&gt;create&lt;/code&gt; since we are &lt;code&gt;creating&lt;/code&gt; a like or a retweet.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s build the like controller - we will redirect back to the index where we want to stay:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/likes_controller.rb
class LikesController &amp;lt; ApplicationController
  before_action :set_tweet

  def create
    @tweet.increment! :likes
    redirect_to tweets_url
  end

  private

  def set_tweet
    @tweet = Tweet.find(params[:tweet_id])
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now the retweet controller:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/retweets_controller.rb
class RetweetsController &amp;lt; ApplicationController
  before_action :set_tweet

  def create
    @tweet.increment! :retweets
    redirect_to tweets_url
  end

  private

  def set_tweet
    @tweet = Tweet.find(params[:tweet_id])
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These controllers are dependent on the tweet so they are subroutes of a tweet - so lets update our routes to be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/routes.rb
Rails.application.routes.draw do
  resources :tweets do
    resource :like, only: [:create]
    resource :retweet, only: [:create]
  end
  root to: &amp;quot;tweets#index&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets add the connection to controller in our front-end with buttons.  Note we need to use the &lt;code&gt;method: :post&lt;/code&gt; for our like and retweet &lt;code&gt;create&lt;/code&gt; because these are normally &lt;code&gt;posted&lt;/code&gt; by the &lt;code&gt;edit&lt;/code&gt; form.  In this case we want to bypass a form and just update.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/tweets/_tweet.html.erb
&amp;lt;div class=&amp;quot;card card-body&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;%= tweet.body %&amp;gt;&amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;mt-2&amp;quot;&amp;gt;
    &amp;lt;%= link_to &amp;quot;Like (#{tweet.likes})&amp;quot;,
                tweet_like_path(tweet),
                method: :post,
                class: &amp;quot;btn btn-sm btn-outline-success&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &amp;quot;Retweet (#{tweet.retweets})&amp;quot;,
                tweet_retweet_path(tweet),
                method: :post,
                class: &amp;quot;btn btn-sm btn-outline-info&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &#39;Edit&#39;, edit_tweet_path(tweet),
                class: &amp;quot;btn btn-sm btn-outline-primary&amp;quot; %&amp;gt;

    &amp;lt;%= link_to &#39;Destroy&#39;, tweet_path(tweet), method: :delete,
                data: { confirm: &#39;Are you sure?&#39; },
                class: &amp;quot;btn btn-sm btn-outline-danger&amp;quot; %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Test that everything works as expected!  Assuming it works - we will take another snapshot.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;likes and retweets enabled and also &#39;stay&#39; on index page&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;tweet_index_7th_likes_retweets.png&#34; alt=&#34;tweet_index_7th&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Install and Configure Rails</title>
      <link>https://btihen.me/post_ruby_rails/rails_6_install_n_configure/</link>
      <pubDate>Thu, 10 Sep 2020 01:46:07 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_6_install_n_configure/</guid>
      <description>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;To document is mostly for me &amp;ndash; at least until I automate my setup defaults. However, I am glad to share and get ideas from others too.  I will build a little calendar app I use with friends (it&amp;rsquo;s focused on being mobile friendly and easy to use &amp;ndash; not a full featured calendar).&lt;/p&gt;
&lt;h1 id=&#34;rails-setup&#34;&gt;Rails Setup&lt;/h1&gt;
&lt;p&gt;Taken from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://gist.github.com/alxndr/7569551&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://gist.github.com/alxndr/7569551&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.codewithjason.com/rails-integration-tests-rspec-capybara/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.codewithjason.com/rails-integration-tests-rspec-capybara/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://hackernoon.com/how-to-build-awesome-integration-tests-with-capybara-j9333y68&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://hackernoon.com/how-to-build-awesome-integration-tests-with-capybara-j9333y68&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;create-the-project&#34;&gt;create the project:&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# -T - skips tests;              I like rspec
# -d postgresql;                 I like postgresql best for the db
# --skip-spring --skip-listen;   Spring caches and doesn&#39;t notice all changes (even after rails restart)
#                                I have lost several hours not realizing Spring wasn&#39;t seeing my changes

rails new calendar -T -d postgresql --webpack=stimulus --skip-turbolinks --skip-spring

cd calendar

# in some cases you may have serveral bundlers or need to create binstubs
# gem install bundler:2.1.4
# rails app:update:bin
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;update-the-readme-and-initialize-git&#34;&gt;update the README and initialize Git&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;initial commit&amp;quot;
git remote add origin git@gitlab.com:btihen/calendar.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;add-extra-gems-for-this-project&#34;&gt;Add extra Gems for this project&lt;/h2&gt;
&lt;p&gt;add rspec, devise, factory_bot and stimulus_reflex&lt;/p&gt;
&lt;p&gt;Execute the following command (or add to the Gemfile)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;cat &amp;lt;&amp;lt;EOF &amp;gt;&amp;gt; Gemfile
# Project Gems
##############

# FRONT END
###########
gem &amp;quot;hotwire-rails&amp;quot;                # probably not needed as of Rails 7.x
# gem &amp;quot;stimulus_reflex&amp;quot;, &amp;quot;~&amp;gt; 3.3&amp;quot;  # probably superseeded by hotwire-rails

# BACK END
##########
gem &#39;devise&#39;

# DEV / TESTS
#############
group :development, :test do
  gem &#39;awesome_print&#39;        # formats pry (&amp;amp; irb outputs into readable formats)

  gem &#39;pry-rails&#39;
  gem &#39;pry-byebug&#39;           # Adds byebug&#39;s step debugging and stack navigation
  # gem &#39;pry-debugger&#39;       # adds step, continue, etc (alternative to pry-byebug)
  gem &#39;pry-stack_explorer&#39;   # easy stack traces when debugging
  # more pry gems if needed at: https://spin.atomicobject.com/2012/08/06/live-and-let-pry/

  gem &#39;factory_bot_rails&#39;
  gem &#39;faker&#39;

  # gem &#39;rspec-rails&#39;
  gem &#39;capybara&#39;
  gem &#39;rspec-rails&#39;, &#39;~&amp;gt; 4.0.0&#39;

  # lets spring work with rspec
  gem &#39;spring-commands-rspec&#39;
end

group :test do
  # easier tests (inside rspec)
  gem &#39;shoulda-matchers&#39;

  # cucumber can test emails (rspec too?)
  # gem &#39;email_spec&#39;

  # code coverage
  gem &#39;simplecov&#39;
  gem &#39;simplecov-console&#39;
end
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;now-uncomment-a-few-gems-in-the-original-gemfile&#34;&gt;Now uncomment a few Gems in the Original Gemfile&lt;/h2&gt;
&lt;p&gt;Uncomment the following to ensure ActionText and Stimulus Refelx (work properly).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gem &#39;image_processing&#39;, &#39;~&amp;gt; 1.2&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;is needed by Active Storage (ActionText needs Active Storage)&lt;/p&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gem &#39;redis&#39;, &#39;~&amp;gt; 4.0&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;is needed by Stimulus Reflex (which uses Action Channels) to manage WebSockets&lt;/p&gt;
&lt;h2 id=&#34;install-and-configure-base-gems&#34;&gt;Install and configure base gems&lt;/h2&gt;
&lt;p&gt;now run:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bundle install&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;to install all the new gems and create a &lt;code&gt;Gemfile.lock&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;install-activestorage-and-actiontext&#34;&gt;Install ActiveStorage and ActionText&lt;/h2&gt;
&lt;p&gt;run the following commands:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# bundle exec rails webpacker:install
# bundle exec rails webpacker:install:stimulus
bundle exec rails active_storage:install
bundle exec rails action_text:install
bin/rails hotwire:install
bin/rails g devise:install
bin/rails g rspec:install
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;rspec-config-files&#34;&gt;Rspec: Config Files&lt;/h2&gt;
&lt;h3 id=&#34;create-needed-folders-for-our-config&#34;&gt;Create needed folders for our config&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir spec/features

# a place to put test helper code
mkdir spec/support
mkdir spec/support/features
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;rspec-config-file-specrails_helperrb&#34;&gt;Rspec Config file &lt;code&gt;spec/rails_helper.rb&lt;/code&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;To enable integration tests with rspec add: &lt;code&gt;require &#39;capybara/rspec&#39;&lt;/code&gt; below &lt;code&gt;require &#39;rspec/rails&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To load Test helper code add: &lt;code&gt;Dir[Rails.root.join(&amp;quot;spec/support/**/*.rb&amp;quot;)].each { |file| require file }&lt;/code&gt; below &lt;code&gt;require &#39;capybara/rspec&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;just after the ActiveRecord config and before RSpec.configure block add:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Capybara.register_driver :selenium_chrome do |app|
  Capybara::Selenium::Driver.new(app, browser: :chrome)
end
Capybara.javascript_driver = :selenium_chrome
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Add the FactoryBot config in the section with:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;RSpec.configure do |config|
  # ...

  # support for Factory Bot
  config.include FactoryBot::Syntax::Methods

  # setup devise login helpers in Rspec
  config.include Devise::Test::IntegrationHelpers, type: :request

  # allows us for force session logouts (im feature tests)
  config.include Warden::Test::Helpers
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;finally at the end of the file add support for shoulda matchers with:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Shoulda::Matchers.configure do |config|
  config.integrate do |with|
    with.test_framework :rspec
    with.library :rails
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOW &lt;code&gt;spec/rails_helper.rb&lt;/code&gt; should look like (its long, sometimes the full context is clearer):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# This file is copied to spec/ when you run &#39;rails generate rspec:install&#39;
require &#39;spec_helper&#39;
ENV[&#39;RAILS_ENV&#39;] ||= &#39;test&#39;
require File.expand_path(&#39;../config/environment&#39;, __dir__)
# Prevent database truncation if the environment is production
abort(&amp;quot;The Rails environment is running in production mode!&amp;quot;) if Rails.env.production?
require &#39;rspec/rails&#39;
# Add additional requires below this line. Rails is not loaded until this point!

# enables integration/feature tests using rspec
require &#39;capybara/rspec&#39;

# loads custom helper test code
Dir[Rails.root.join(&amp;quot;spec/support/**/*.rb&amp;quot;)].each { |file| require file }
# or you could use:
# Dir[Rails.root.join(&#39;spec&#39;, &#39;support&#39;, &#39;**&#39;, &#39;*.rb&#39;)].sort.each { |f| require f }

# Checks for pending migrations and applies them before tests are run.
# If you are not using ActiveRecord, you can remove these lines.
begin
  ActiveRecord::Migration.maintain_test_schema!
rescue ActiveRecord::PendingMigrationError =&amp;gt; e
  puts e.to_s.strip
  exit 1
end

# configure capybara integration tests
Capybara.register_driver :selenium_chrome do |app|
  Capybara::Selenium::Driver.new(app, browser: :chrome)
end
Capybara.javascript_driver = :selenium_chrome

RSpec.configure do |config|
  # Remove this line if you&#39;re not using ActiveRecord or ActiveRecord fixtures
  config.fixture_path = &amp;quot;#{::Rails.root}/spec/fixtures&amp;quot;

  # If you&#39;re not using ActiveRecord, or you&#39;d prefer not to run each of your
  # examples within a transaction, remove the following line or assign false
  # instead of true.
  config.use_transactional_fixtures = true

  # You can uncomment this line to turn off ActiveRecord support entirely.
  # config.use_active_record = false

  # RSpec Rails can automatically mix in different behaviours to your tests
  # based on their file location, for example enabling you to call `get` and
  # `post` in specs under `spec/controllers`.
  #
  # You can disable this behaviour by removing the line below, and instead
  # explicitly tag your specs with their type, e.g.:
  #
  #     RSpec.describe UsersController, type: :controller do
  #       # ...
  #     end
  #
  # The different available types are documented in the features, such as in
  # https://relishapp.com/rspec/rspec-rails/docs
  config.infer_spec_type_from_file_location!

  # Filter lines from Rails gems in backtraces.
  config.filter_rails_from_backtrace!
  # arbitrary gems may also be filtered via:
  # config.filter_gems_from_backtrace(&amp;quot;gem name&amp;quot;)

  # support for Factory Bot
  config.include FactoryBot::Syntax::Methods

  # setup devise login helpers in Rspec (login helpers)
  config.include Devise::Test::IntegrationHelpers, type: :request

  # allows us for force session logouts (im feature tests)
  config.include Warden::Test::Helpers
end

Shoulda::Matchers.configure do |config|
  config.integrate do |with|
    with.test_framework :rspec
    with.library :rails
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;create--test-a-landing-page&#34;&gt;Create / Test a landing page&lt;/h1&gt;
&lt;p&gt;A simple config test before we setup devise (authentication).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Generate a page&lt;/strong&gt; &amp;ndash; I don&amp;rsquo;t (generally) use helpers nor contoller or view specs - so I&amp;rsquo;ll create the landing page using the following generator:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails g controller Landing index --no-helper --no-assets --no-controller-specs --no-view-specs
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;Update Routes&lt;/strong&gt; &lt;code&gt;config/routes.rb&lt;/code&gt; with:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  get &#39;landing/index&#39;
  root to: &amp;quot;landing#index&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;Add Hidden Test Content&lt;/strong&gt; to simplify testing add:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;p hidden id=&#39;landing_index&#39;&amp;gt;Landing Index&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Request test:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/requests/landing_request_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &amp;quot;Landings&amp;quot;, type: :request do

  describe &amp;quot;GET /index&amp;quot; do
    it &amp;quot;returns http success&amp;quot; do
      get &amp;quot;/landing/index&amp;quot;
      expect(response).to have_http_status(:success)

      expect(response.body).to include(&amp;quot;&amp;lt;p hidden id=&#39;landing_index&#39;&amp;gt;Landing Index&amp;lt;/p&amp;gt;&amp;quot;)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Feature Test (to be sure they are working too)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/features/landing_page_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &#39;Landing Page Works without a login&#39;, type: :feature do
  scenario &#39;Visit landing Page&#39; do
    visit root_path

    page_tag = find(&#39;p#landing_index&#39;, text: &#39;Landing Index&#39;, visible: false)
    expect(page_tag).to be_truthy
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Test and commit&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rake db:migrate
bundle exec rspec
git add .
git commit -m &amp;quot;rspec: unit and feature tests configured and landing page works&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;config-hotwire&#34;&gt;Config Hotwire&lt;/h3&gt;
&lt;p&gt;Ensure the  In the end the &lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt; looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;

&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Tweets&amp;lt;/title&amp;gt;
  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt;
  &amp;lt;%= csrf_meta_tags %&amp;gt;
  &amp;lt;%= csp_meta_tag %&amp;gt;

  &amp;lt;!-- Bootstrap 4 if interested
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css&amp;quot; integrity=&amp;quot;sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;
  --&amp;gt;
  &amp;lt;%= stylesheet_link_tag &#39;application&#39;, media: &#39;all&#39; %&amp;gt;
  &amp;lt;%= javascript_pack_tag &#39;application&#39; %&amp;gt;
  &amp;lt;%= yield :head %&amp;gt;
  &amp;lt;%= turbo_include_tags %&amp;gt;
  &amp;lt;%# stimulus_include_tags %&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
  &amp;lt;p class=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;p class=&amp;quot;alert&amp;quot;&amp;gt;&amp;lt;%= alert %&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;%= yield %&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;devise--user-config&#34;&gt;Devise / User Config&lt;/h3&gt;
&lt;p&gt;Configure dev email for devise:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/environments/development.rb:
  config.action_mailer.default_url_options = { host: &#39;localhost&#39;, port: 3000 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create the user and migration&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails g devise user
# if you will make a custom login (probably needed to look nice)
# rails g devise:views
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Adjust the migration:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class DeviseCreateUsers &amp;lt; ActiveRecord::Migration[6.1]
  def change
    create_table :users do |t|
      ## Database authenticatable
      t.string :email,              null: false, default: &amp;quot;&amp;quot;
      t.string :encrypted_password, null: false, default: &amp;quot;&amp;quot;

      ## Recoverable
      t.string   :reset_password_token
      t.datetime :reset_password_sent_at

      ## Rememberable
      t.datetime :remember_created_at

      ## Trackable
      t.integer  :sign_in_count, default: 0, null: false
      t.datetime :current_sign_in_at
      t.datetime :last_sign_in_at
      t.string   :current_sign_in_ip
      t.string   :last_sign_in_ip

      ## Confirmable
      # t.string   :confirmation_token
      # t.datetime :confirmed_at
      # t.datetime :confirmation_sent_at
      # t.string   :unconfirmed_email # Only if using reconfirmable

      ## Lockable
      # t.integer  :failed_attempts, default: 0, null: false # Only if lock strategy is :failed_attempts
      # t.string   :unlock_token # Only if unlock strategy is :email or :both
      # t.datetime :locked_at

      t.timestamps null: false
    end

    add_index :users, :email,                unique: true
    add_index :users, :reset_password_token, unique: true
    # add_index :users, :confirmation_token,   unique: true
    # add_index :users, :unlock_token,         unique: true
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Route file should now look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rails.application.routes.draw do
  devise_for :users
  get &#39;landing/index&#39;
  root to: &amp;quot;landing#index&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will update the user model with password complexity validation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ApplicationRecord
  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable
  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :validatable

  validate :password_complexity

  def password_complexity
    # Regexp extracted from https://stackoverflow.com/questions/19605150/regex-for-password-must-contain-at-least-eight-characters-at-least-one-number-a
    return if password.blank? || password =~ /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&amp;amp;*-]).{10,70}$/

    errors.add :password, &#39;Complexity requirement not met. Length should be 10-70 characters and include: 1 uppercase, 1 lowercase, 1 digit and 1 special character&#39;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create the user Factory (which also uses Faker):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/factories/users.rb
FactoryBot.define do
  factory :user do
    email       { Faker::Internet.safe_email }  # probably need to add index for uniqueness
    password    { Faker::Internet.password(min_length: 10, max_length: 50, mix_case: true, special_characters: true) }
  end
  trait :invalid do
    email       { Faker::Internet.username }
    password    { &amp;quot;hoi&amp;quot; }
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create the user spec (uses FactoryBot &amp;amp; Shoulda):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/models/user_spec.rb
require &#39;rails_helper&#39;

RSpec.describe User, type: :model do
  describe &amp;quot;Factory with&amp;quot; do

    context &amp;quot;default parameters&amp;quot; do
      it &amp;quot;creates a valid model&amp;quot; do
        user = FactoryBot.build :user
        expect(user.valid?).to be_truthy
      end
    end

    context &amp;quot;invalid parameters&amp;quot; do
      it &amp;quot;fails model validation&amp;quot; do
        user = FactoryBot.build :user, :invalid
        expect(user.valid?).to be_falsey
      end
    end
  end

  context &amp;quot;ActiveRecord / DB Tests&amp;quot; do
    it { should have_db_column(:email) }
    it { should have_db_index(:email).unique }
  end

  context &amp;quot;ActiveModel / Validations&amp;quot; do
    it &amp;quot;detects a bad email&amp;quot; do
      user = FactoryBot.build :user, email: &amp;quot;bill&amp;quot;
      expect(user.valid?).to be_falsey
      expect(user.errors.messages[:email]).to match_array [&amp;quot;is invalid&amp;quot;]
    end
    it &amp;quot;detects a non-compliant password&amp;quot; do
      user = FactoryBot.build :user, password: &amp;quot;hoi&amp;quot;
      expect(user.valid?).to be_falsey
      expect(user.errors.messages[:password]).to match_array [&amp;quot;is too short (minimum is 6 characters)&amp;quot;,
                                                              &amp;quot;Complexity requirement not met. Length should be 10-70 characters and include: 1 uppercase, 1 lowercase, 1 digit and 1 special character&amp;quot;]
    end
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;test-setup-and-commit-when-green&#34;&gt;Test setup and commit when green:&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rake db:migrate
bundle exec rspec
git add .
git commit -m &amp;quot;devise configured, FactoryBot, Faker and Shoulda working&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-user-landing--profile-page-autoredirect&#34;&gt;create user landing / profile page (autoredirect)&lt;/h2&gt;
&lt;h2 id=&#34;test-restricted-logins&#34;&gt;Test restricted logins&lt;/h2&gt;
&lt;p&gt;a basic login feature test might look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;rails_helper&#39;

RSpec.describe &#39;Users Login&#39;, type: :feature do
  let(:user)  { FactoryBot.create :user }
  after :each do
    Warden.test_reset!
  end
  describe &#39;user logs in successfully&#39; do
    scenario &#39;and is redirected to user home page&#39; do
      user_log_in(user)
      expect(current_path).to eql(auth_user_root_path)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;install-fonts--icons&#34;&gt;Install Fonts / Icons&lt;/h2&gt;
&lt;h3 id=&#34;fontawesome-good-with-bulma&#34;&gt;Fontawesome (Good with Bulma)&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://kelishrestha.medium.com/how-to-install-font-awesome-with-yarn-in-rails-6-0-c2506543c13d&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://kelishrestha.medium.com/how-to-install-font-awesome-with-yarn-in-rails-6-0-c2506543c13d&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn add @fortawesome/fontawesome-free
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update application.scss&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;$fa-font-path: &#39;@fortawesome/fontawesome-free/webfonts&#39;;
@import &#39;@fortawesome/fontawesome-free/scss/fontawesome&#39;;
@import &#39;@fortawesome/fontawesome-free/scss/solid&#39;;
@import &#39;@fortawesome/fontawesome-free/scss/regular&#39;;
@import &#39;@fortawesome/fontawesome-free/scss/brands&#39;;
@import &#39;@fortawesome/fontawesome-free/scss/v4-shims&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update application.js&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;import &amp;quot;@fortawesome/fontawesome-free/js/all&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or via cdn: vhttps://fontawesome.com/how-to-use/customizing-wordpress/snippets/setup-cdn-webfont
add to &lt;code&gt;application.html.erb&lt;/code&gt; ()&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1&amp;quot;&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot;
      href=&amp;quot;https://pro.fontawesome.com/releases/v5.10.0/css/all.css&amp;quot;
      integrity=&amp;quot;sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p&amp;quot;
      crossorigin=&amp;quot;anonymous&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;install-bulma-a-css-framework-if-desired&#34;&gt;Install BULMA: a CSS Framework (if desired)&lt;/h2&gt;
&lt;p&gt;Bulma is a relatively new CSS framework. It feels like a light, streamlined alternative to Bootstrap. Bulma doesn’t include any JavaScript at all. This means some stuff just won’t work out of the box. For example, the burger menu won’t toggle without a little JavaScript help. We’ll get to that later.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn add bulma
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Open app/javascript/packs/application.js and add the following to the top:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import &#39;../styles&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create app/javascript/styles.scss:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@import &#39;~bulma/bulma&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;customize bulma by adding to the top of &lt;code&gt;styles.scss&lt;/code&gt; file: 
&lt;a href=&#34;https://stackoverflow.com/questions/48809328/bulma-navbar-breakpoint&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://stackoverflow.com/questions/48809328/bulma-navbar-breakpoint&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@import &amp;quot;~bulma/sass/utilities/initial-variables.sass&amp;quot;;
$navbar-breakpoint: $tablet;
@import &amp;quot;~bulma/bulma.sass&amp;quot;;
@import &#39;~bulma/bulma&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;choices are: $desktop (default 960px), $tablet (769px), $widescreen (1152px), $fullhd (1344px)
variable defaults: 
&lt;a href=&#34;https://bulma.io/documentation/customize/variables/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://bulma.io/documentation/customize/variables/&lt;/a&gt;
variables that can be set: 
&lt;a href=&#34;https://bulma-customizer.bstash.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://bulma-customizer.bstash.io&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;a-sample-bulma-navbar&#34;&gt;A sample Bulma navbar&lt;/h3&gt;
&lt;p&gt;Open app/views/layouts/application.html.erb and add the following just above the yield line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;%= render &#39;layouts/navbar&#39; %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create app/views/layouts/_navbar.html.erb:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
  &amp;lt;nav class=&amp;quot;navbar&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;navbar-brand&amp;quot;&amp;gt;
      &amp;lt;a class=&amp;quot;navbar-item&amp;quot; href=&amp;quot;#&amp;quot;&amp;gt;
        &amp;lt;img src=&amp;quot;https://bulma.io/images/bulma-logo.png&amp;quot; width=&amp;quot;112&amp;quot; height=&amp;quot;28&amp;quot;&amp;gt;
      &amp;lt;/a&amp;gt;
      &amp;lt;div class=&amp;quot;navbar-burger burger&amp;quot; data-target=&amp;quot;main-nav&amp;quot;&amp;gt;
        &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;
        &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;
        &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div id=&amp;quot;main-nav&amp;quot; class=&amp;quot;navbar-menu&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;navbar-start&amp;quot;&amp;gt;
        &amp;lt;%= link_to root_url, class: &#39;navbar-item&#39; do %&amp;gt;
          &amp;lt;span class=&amp;quot;icon&amp;quot;&amp;gt;
            &amp;lt;i class=&amp;quot;far fa-gem&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
          &amp;lt;/span&amp;gt;
          &amp;lt;span&amp;gt;Home&amp;lt;/span&amp;gt;
        &amp;lt;% end %&amp;gt;
        &amp;lt;%= link_to home_about_url, class: &#39;navbar-item&#39; do %&amp;gt;
          &amp;lt;span class=&amp;quot;icon&amp;quot;&amp;gt;
            &amp;lt;i class=&amp;quot;far fa-star&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
          &amp;lt;/span&amp;gt;
          &amp;lt;span&amp;gt;About&amp;lt;/span&amp;gt;
        &amp;lt;% end %&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/nav&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is basically copied from the Bulma examples. It is a basic nav bar with two menu items; Home and About.&lt;/p&gt;
&lt;p&gt;We now have all the pieces in place and can start wiring up our Stimulus controllers.&lt;/p&gt;
&lt;p&gt;Create a Stimulus controller
To keep this example simple, we’re going to create a single controller which we’ll attach to the body tag in the main layout. This controller will be responsible for rendering the Font Awesome icons (as described in a previous post) as well as handling our Bulma burger menu.&lt;/p&gt;
&lt;p&gt;Create app/javascript/controllers/main_controller.js:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import fontawesome from &#39;@fortawesome/fontawesome&#39;
import icons from &#39;@fortawesome/fontawesome-free-regular&#39;
import { Controller } from &#39;stimulus&#39;
export default class extends Controller {
  initialize() {
    fontawesome.library.add(icons)
  }
  connect() {
    fontawesome.dom.i2svg()

    // Get all &amp;quot;navbar-burger&amp;quot; elements
    var $navbarBurgers = Array.prototype.slice.call(document.querySelectorAll(&#39;.navbar-burger&#39;), 0);

    // Check if there are any navbar burgers
    if ($navbarBurgers.length &amp;gt; 0) {

      // Add a click event on each of them
      $navbarBurgers.forEach(function ($el) {
        $el.addEventListener(&#39;click&#39;, function () {

          // Get the target from the &amp;quot;data-target&amp;quot; attribute
          var target = $el.dataset.target;
          var $target = document.getElementById(target);

          // Toggle the class on both the &amp;quot;navbar-burger&amp;quot; and the &amp;quot;navbar-menu&amp;quot;
          $el.classList.toggle(&#39;is-active&#39;);
          $target.classList.toggle(&#39;is-active&#39;);

        });
      });
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This controller imports the icons from Font Awesome when initialize is called. Every time connect is called it renders the icons and then searches for navbar burgers to attach the appropriate click events on.&lt;/p&gt;
&lt;p&gt;Connect the controller
Now we want to connect the body tag to our controller using an HTML5 data attribute.&lt;/p&gt;
&lt;p&gt;Open &lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt; and add the following attribute to the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;body data-controller=&amp;quot;main&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now it should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/views/layouts/application.html.erb
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;

&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Tweets&amp;lt;/title&amp;gt;
  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt;
  &amp;lt;%= csrf_meta_tags %&amp;gt;
  &amp;lt;%= csp_meta_tag %&amp;gt;

  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css&amp;quot; integrity=&amp;quot;sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;
  &amp;lt;%= stylesheet_link_tag &#39;application&#39;, media: &#39;all&#39; %&amp;gt;
  &amp;lt;%= javascript_pack_tag &#39;application&#39; %&amp;gt;
  &amp;lt;%= yield :head %&amp;gt;
  &amp;lt;%= turbo_include_tags %&amp;gt;
  &amp;lt;%# stimulus_include_tags %&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body data-controller=&amp;quot;main&amp;quot;&amp;gt;
  &amp;lt;%= render &#39;layouts/navbar&#39; %&amp;gt;
  &amp;lt;p class=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;p class=&amp;quot;alert&amp;quot;&amp;gt;&amp;lt;%= alert %&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;%= yield %&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;a href=&#34;https://blackninjadojo.com/css/bulma/2019/02/27/how-to-create-a-layout-for-your-rails-application-using-bulma.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blackninjadojo.com/css/bulma/2019/02/27/how-to-create-a-layout-for-your-rails-application-using-bulma.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;discourgaged---no-longer-necessary&#34;&gt;Discourgaged - no longer necessary:&lt;/h3&gt;
&lt;p&gt;If you plan to user database_cleaner &amp;ndash; then also see this article to finish your config:&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://medium.com/@amliving/my-rails-rspec-set-up-6451269847f9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://medium.com/@amliving/my-rails-rspec-set-up-6451269847f9&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rails Devise User Model with Roles</title>
      <link>https://btihen.me/post_ruby_rails/rails_devise_users_namespaced/</link>
      <pubDate>Fri, 10 Jul 2020 20:45:51 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_devise_users_namespaced/</guid>
      <description>&lt;h2 id=&#34;configure-devise-for-multiple-types-of-accounts&#34;&gt;Configure devise (for multiple types of accounts)&lt;/h2&gt;
&lt;p&gt;install the devise engine:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails generate devise:install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now follow the basic setup config &amp;ndash; add to &lt;code&gt;config/environments/development.rb&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.action_mailer.default_url_options = { host: &#39;localhost&#39;, port: 3000 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;add notifications to the layout for devise in &lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt; just above &lt;code&gt;&amp;lt;%= yeild %&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;p class=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p class=&amp;quot;alert&amp;quot;&amp;gt;&amp;lt;%= alert %&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now create one or more models for devise:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails g devise:views
rails generate devise user
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update the routes to put the login in separate routes in &lt;code&gt;config/routes.rb&lt;/code&gt; - make the routes look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  devise_for :users,  path: &#39;users&#39;  # http://localhost:3000/users/sign_in
  devise_for :admins, path: &#39;admins&#39; # http://localhost:3000/admins/sign_in
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;turn on scoped views (since login forms can be different) in &lt;code&gt;config/initializers/devise.rb&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.scoped_views = true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create the scoped views: (instead of: rails g devise:views) do:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails g devise:views users/devise
rails g devise:views admins/devise
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now we should open these migrations and uncomment any added fields we use - I generally like to use most of the fields:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# frozen_string_literal: true

class DeviseCreateAdmins &amp;lt; ActiveRecord::Migration[6.0]
  def change
    create_table :admins do |t|
      ## Database authenticatable
      t.string :email,              null: false, default: &amp;quot;&amp;quot;
      t.string :encrypted_password, null: false, default: &amp;quot;&amp;quot;

      ## Recoverable
      t.string   :reset_password_token
      t.datetime :reset_password_sent_at

      ## Rememberable
      t.datetime :remember_created_at

      ## Trackable
      t.integer  :sign_in_count, default: 0, null: false
      t.datetime :current_sign_in_at
      t.datetime :last_sign_in_at
      t.inet     :current_sign_in_ip
      t.inet     :last_sign_in_ip

      ## Confirmable
      t.string   :confirmation_token
      t.datetime :confirmed_at
      t.datetime :confirmation_sent_at
      t.string   :unconfirmed_email # Only if using reconfirmable

      ## Lockable
      t.integer  :failed_attempts, default: 0, null: false # Only if lock strategy is :failed_attempts
      t.string   :unlock_token # Only if unlock strategy is :email or :both
      t.datetime :locked_at

      t.timestamps null: false
    end

    add_index :admins, :email,                unique: true
    add_index :admins, :reset_password_token, unique: true
    add_index :admins, :confirmation_token,   unique: true
    add_index :admins, :unlock_token,         unique: true
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and adjust the &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;admin&lt;/code&gt; models too and turn on the features we want or need. We will go into detail later, for now I will just add trackable to the models:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ApplicationRecord
  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable
  devise :database_authenticatable, :registerable, :trackable,
         :recoverable, :rememberable, :validatable
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and of course migrate too.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails db:migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create custome controllers for each sessions - this also allows the users to have different fields and features:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails generate devise:controllers users/devise
rails generate devise:controllers admins/devise
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;configure the routes to point to these new controllers:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  # http://localhost:3000/users/sign_in
  devise_for :users,  path: &#39;users&#39;,
                      controllers: {
                        sessions:      &#39;users/devise/sessions&#39;,
                        passwords:     &#39;users/devise/passwords&#39;,
                        registrations: &#39;users/devise/registrations&#39;
                      }
  # http://localhost:3000/admins/sign_in
  devise_for :admins, path: &#39;admins&#39;,
                      controllers: {
                        sessions:      &#39;admins/devise/sessions&#39;,
                        passwords:     &#39;admins/devise/passwords&#39;,
                        registrations: &#39;admins/devise/registrations&#39;
                      }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now the routes should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bin/rails routes
                     Prefix Verb   URI Pattern                        Controller#Action
           new_user_session GET    /users/sign_in(.:format)           users/sessions#new
               user_session POST   /users/sign_in(.:format)           users/sessions#create
       destroy_user_session DELETE /users/sign_out(.:format)          users/sessions#destroy
          new_user_password GET    /users/password/new(.:format)      users/passwords#new
         edit_user_password GET    /users/password/edit(.:format)     users/passwords#edit
              user_password PATCH  /users/password(.:format)          users/passwords#update
                            PUT    /users/password(.:format)          users/passwords#update
                            POST   /users/password(.:format)          users/passwords#create
   cancel_user_registration GET    /users/cancel(.:format)            user/registrations#cancel
      new_user_registration GET    /users/sign_up(.:format)           user/registrations#new
     edit_user_registration GET    /users/edit(.:format)              user/registrations#edit
          user_registration PATCH  /users(.:format)                   user/registrations#update
                            PUT    /users(.:format)                   user/registrations#update
                            DELETE /users(.:format)                   user/registrations#destroy
                            POST   /users(.:format)                   user/registrations#create
          new_admin_session GET    /admins/sign_in(.:format)          admin/sessions#new
              admin_session POST   /admins/sign_in(.:format)          admin/sessions#create
      destroy_admin_session DELETE /admins/sign_out(.:format)         admin/sessions#destroy
         new_admin_password GET    /admins/password/new(.:format)     admin/passwords#new
        edit_admin_password GET    /admins/password/edit(.:format)    admin/passwords#edit
             admin_password PATCH  /admins/password(.:format)         admin/passwords#update
                            PUT    /admins/password(.:format)         admin/passwords#update
                            POST   /admins/password(.:format)         admin/passwords#create
  cancel_admin_registration GET    /admins/cancel(.:format)           admin/registrations#cancel
     new_admin_registration GET    /admins/sign_up(.:format)          admin/registrations#new
    edit_admin_registration GET    /admins/edit(.:format)             admin/registrations#edit
         admin_registration PATCH  /admins(.:format)                  admin/registrations#update
                            PUT    /admins(.:format)                  admin/registrations#update
                            DELETE /admins(.:format)                  admin/registrations#destroy
                            POST   /admins(.:format)                  admin/registrations#create
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;lets make logged in home pages (for the user and admin)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails g controller users/home index --no-helper --no-assets --no-controller-specs --no-view-specs
rails g controller admins/home index --no-helper --no-assets --no-controller-specs --no-view-specs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now lets update our routes to ponit to these pages if the user is logged in add the following belos the deivse_for commands&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Rails.application.routes.draw do
  # http://localhost:3000/admins/sign_in
  devise_for :admins, path: &#39;admins&#39;,
                      controllers: {
                        sessions:      &#39;admins/devise/sessions&#39;,
                        passwords:     &#39;admins/devise/passwords&#39;,
                        registrations: &#39;admins/devise/registrations&#39;
                      }
  # http://localhost:3000/umdzes/sign_in
  devise_for :umdzes, path: &#39;umdzes&#39;,
                      controllers: {
                        sessions:      &#39;umdzes/devise/sessions&#39;,
                        passwords:     &#39;umdzes/devise/passwords&#39;,
                        registrations: &#39;umdzes/devise/registrations&#39;
                      }
  # http://localhost:3000/patrons/sign_in
  devise_for :patrons,  path: &#39;patrons&#39;,
                      controllers: {
                        sessions:      &#39;patrons/devise/sessions&#39;,
                        passwords:     &#39;patrons/devise/passwords&#39;,
                        registrations: &#39;patrons/devise/registrations&#39;
                      }

  authenticated :patron do
    root &#39;patrons/home#index&#39;,     as: :auth_patron_root
  end
  authenticated :umdze do
    root &#39;umdzes/home#index&#39;,      as: :auth_umdze_root
  end
  authenticated :admin do
    root &#39;admins/home#index&#39;, as: :auth_admin_root
  end


  namespace :admins do
    get &#39;home/index&#39;
    # resource  :home_page,        only: [:index]
  end
  get &#39;/admins&#39;, to: &#39;admins/home#index&#39;, as: :admins

  namespace :umdzes do
    get &#39;home/index&#39;
    # resource  :home_page,        only: [:index]
  end
  get &#39;/umdzes&#39;, to: &#39;umdzes/home#index&#39;, as: :umdzes

  namespace :patrons do
    get &#39;home/index&#39;
    # resource  :home_page,        only: [:index]
  end
  get &#39;/patrons&#39;, to: &#39;patrons/home#index&#39;, as: :patrons

  get &#39;/landing&#39;, to: &#39;landing#index&#39;, as: :landing
  get &#39;landing/index&#39;
  root to: &amp;quot;landing#index&amp;quot;
end

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;now-lets-make-applicationcontrollers-for-each-namespace--enforce-authentication&#34;&gt;now lets make ApplicationControllers for each namespace &amp;amp; enforce authentication&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;touch app/controllers/admins/application_controller.rb
cat &amp;lt;&amp;lt; EOF &amp;gt; app/controllers/admins/application_controller.rb
class Admins::ApplicationController &amp;lt; ApplicationController
  before_action :authenticate_admin!

  private

  def this_user
    current_admin
  end
end
EOF

touch app/controllers/umdzes/application_controller.rb
cat &amp;lt;&amp;lt; EOF &amp;gt; app/controllers/umdzes/application_controller.rb
class Umdzes::ApplicationController &amp;lt; ApplicationController
  before_action :authenticate_umdze!, unless: :allowed_access

  private

  def allowed_access
    current_admin
  end

  def this_user
    current_umdze || current_admin
  end
end
EOF

touch app/controllers/patrons/application_controller.rb
cat &amp;lt;&amp;lt; EOF &amp;gt; app/controllers/patrons/application_controller.rb
class Patrons::ApplicationController &amp;lt; ApplicationController
  before_action :authenticate_patron!, unless: :allowed_access

  private
  def allowed_access
    current_umdze || current_admin
  end

  def this_user
    current_patron || current_umdze || current_admin
  end
end
EOF

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;now-we-will-inhert-from-these-new-controllers-and-enforce-limits&#34;&gt;now we will inhert from these new controllers and enforce limits&lt;/h1&gt;
&lt;p&gt;now lets require these pages to have authenticated the correct user type:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/admins/home_controller.rb
class Admins::HomeController &amp;lt; Admins::ApplicationController
  def index
  end
end

# app/controllers/umdzes/home_controller.rb
class Umdzes::HomeController &amp;lt; Umdzes::ApplicationController
  def index
  end
end

# app/controllers/patrons/home_controller.rb
class Patrons::HomeController &amp;lt; Patrons::ApplicationController
  def index
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;now-prevent-student-and-admin-accounts-from-cross-visits-during-testing-or-whatever&#34;&gt;Now prevent student and admin accounts from cross visits (during testing, or whatever)&lt;/h2&gt;
&lt;p&gt;create this new file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;touch app/controllers/concerns/accessible.rb
cat &amp;lt;&amp;lt; EOF &amp;gt; app/controllers/concerns/accessible.rb
module Accessible
  extend ActiveSupport::Concern
  included do
    before_action :check_user
  end

  protected
  def check_user
    if current_admin
      flash.clear
      # The authenticated admin root path can be defined in your routes.rb in: devise_scope :admin do...
      redirect_to(auth_admin_root_path) and return
    elsif current_umdze
      flash.clear
      # The authenticated admin root path can be defined in your routes.rb in: devise_scope :admin do...
      redirect_to(auth_umdze_root_path) and return
    elsif current_patron
      flash.clear
      # The authenticated user root path can be defined in your routes.rb in: devise_scope :user do...
      redirect_to(auth_partron_root_path) and return
    end
  end
end
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;use-this-accessible-concern&#34;&gt;use this accessible concern&lt;/h2&gt;
&lt;p&gt;Now add &lt;code&gt;include Accessible&lt;/code&gt; in the appropriate controllers:&lt;/p&gt;
&lt;p&gt;Note:
You must skip_before_action for the destroy action in each SessionsController to prevent the redirect to happen before the sign out occurs.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# eg. ../controllers/admins/sessions_controller.rb
class Admins::SessionsController &amp;lt; Devise::SessionsController
 include Accessible
 skip_before_action :check_user, only: :destroy
 # ...
end

# eg. ../controllers/admins/registrations_controller.rb
You must also skip_before_action for the edit, update, destroy, and cancel actions in each RegistrationsController to allow current users to edit and cancel their own accounts. Otherwise they will be redirected before they can reach these pages.

class Admins::RegistrationsController &amp;lt; Devise::RegistrationsController
 include Accessible
 skip_before_action :check_user, except: [:new, :create]
 # ...
end

# eg. ../controllers/umdzes/sessions_controller.rb
class Umdzes::SessionsController &amp;lt; Devise::SessionsController

 include Accessible
 skip_before_action :check_user, only: :destroy
 # ...
end

# eg. ../controllers/umdzes/registrations_controller.rb
class Umdzes::RegistrationsController &amp;lt; Devise::RegistrationsController

 include Accessible
 skip_before_action :check_user, except: [:new, :create]
 # ...
end

# eg. ../controllers/patrons/sessions_controller.rb
class Patrons::SessionsController &amp;lt; Devise::SessionsController

 include Accessible
 skip_before_action :check_user, only: :destroy
 # ...
end

# eg. ../controllers/patrons/registrations_controller.rb
class Patrons::RegistrationsController &amp;lt; Devise::RegistrationsController

 include Accessible
 skip_before_action :check_user, except: [:new, :create]
 # ...
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;now-lets-give-the-patron-account-a-usernames&#34;&gt;now lets give the patron account a usernames&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/heartcombo/devise/wiki/How-To%3A-Allow-users-to-sign-in-with-something-other-than-their-email-address&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/heartcombo/devise/wiki/How-To%3A-Allow-users-to-sign-in-with-something-other-than-their-email-address&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails generate migration add_username_to_patrons username:string:uniq
rails generate migration add_umdzes_name_to_umdzes fullname:string
rails generate migration add_admins_name_to_admins fullname:string

# now update the new migration to look like:
class AddUsernamToPatrons &amp;lt; ActiveRecord::Migration[6.0]
  def change
    # username is key not email - in fact we don&#39;t want an email
    rename_column :patrons, :email, :username
  end
end

class AddFullnameToUmdzes &amp;lt; ActiveRecord::Migration[6.0]
  def change
    add_column :umdzes, :umdzes_name, :string, null: false
  end
end

class AddFullnameToAdmins &amp;lt; ActiveRecord::Migration[6.0]
  def change
    add_column :admins, :admins_name, :string, null: false
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;update-the-models&#34;&gt;update the models&lt;/h2&gt;
&lt;p&gt;now we need to go to the models and make the following updates:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/admin.rb
class Admin &amp;lt; ApplicationRecord
  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable
  devise  :database_authenticatable, :trackable, # :registerable,
          :rememberable, :validatable #, :recoverable

  validates :email, uniqueness: true
  validates :admins_name, presence: true
end

# app/models/umdze.rb
class Umdze &amp;lt; ApplicationRecord
  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable
  devise  :database_authenticatable, :trackable, # :registerable,
          :rememberable, :validatable #, :recoverable

  validates :email, uniqueness: true
  validates :umdzes_name, presence: true
end


# app/models/patrons.rb
class Patron &amp;lt; ApplicationRecord
  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable
  devise  :database_authenticatable, :trackable, # :registerable,
          :rememberable, :validatable, # :recoverable
          :authentication_keys =&amp;gt; [:username]

  validates :username, uniqueness: true
  # make the email field optional
  # validates :email, uniqueness: true

  def email_required?
    false
  end

  def email_changed?
    false
  end

  # use this instead of email_changed? for Rails = 5.1.x
  def will_save_change_to_email?
    false
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now we can safely migrate &lt;code&gt;bundle exec rails db:migrate&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;lets-test-our-logins&#34;&gt;lets test our logins&lt;/h2&gt;
&lt;p&gt;lets create some common feature test code:&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://forum.upcase.com/t/rspec-support-vs-helpers/4986&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://forum.upcase.com/t/rspec-support-vs-helpers/4986&lt;/a&gt;

&lt;a href=&#34;https://thoughtbot.com/blog/rspec-integration-tests-with-capybara&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://thoughtbot.com/blog/rspec-integration-tests-with-capybara&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/support/features/session_helpers.rb
module Features
  module SessionHelpers
    # def patron_sign_up(username:, password:)
    #   visit new_patron_registration_path
    #   expect(page).to have_button(&#39;Sign up&#39;)
    #   fill_in &#39;Username&#39;, with: username
    #   fill_in &#39;Password&#39;, with: password
    #   click_button &#39;Sign up&#39;
    # end
    def patron_log_in(patron = nil)
      patron = FactoryBot.create :patron if patron.nil?
      visit new_patron_session_path
      expect(page).to have_button(&#39;Log in&#39;)
      fill_in &#39;Username&#39;, with: patron.username
      fill_in &#39;Password&#39;, with: patron.password
      click_on &#39;Log in&#39;
    end

    # def umdze_sign_up(email:, password:)
    #   visit new_umdze_registration_path
    #   expect(page).to have_button(&#39;Sign up&#39;)
    #   fill_in &#39;Email&#39;, with: email
    #   fill_in &#39;Password&#39;, with: password
    #   click_button &#39;Sign up&#39;
    # end
    def umdze_log_in(umdze = nil)
      umdze = FactoryBot.create :umdze if umdze.nil?
      visit new_admin_session_path
      expect(page).to have_button(&#39;Log in&#39;)
      fill_in &#39;Email&#39;, with: admin.email
      fill_in &#39;Password&#39;, with: admin.password
      click_on &#39;Log in&#39;
    end

    # def admin_sign_up(email:, password:)
    #   visit new_admin_registration_path
    #   expect(page).to have_button(&#39;Sign up&#39;)
    #   fill_in &#39;Email&#39;, with: email
    #   fill_in &#39;Password&#39;, with: password
    #   click_button &#39;Sign up&#39;
    # end
    def admin_log_in(admin = nil)
      admin = FactoryBot.create :admin if admin.nil?
      visit new_admin_session_path
      expect(page).to have_button(&#39;Log in&#39;)
      fill_in &#39;Email&#39;, with: admin.email
      fill_in &#39;Password&#39;, with: admin.password
      click_on &#39;Log in&#39;
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are not allowing registrations, so that code is commented out.  However, we see we must configure our factories for this code to work.&lt;/p&gt;
&lt;p&gt;Lets tell rspec how to access this code in feature tests:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/support/features.rb
RSpec.configure do |config|
  config.include Features::SessionHelpers, type: :feature
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;lets-create-test-for-our-devise-model-factories&#34;&gt;Lets create test for our devise model factories:&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/models/patron_spec.rb
require &#39;rails_helper&#39;

RSpec.describe User, type: :model do
  describe &amp;quot;factory functions&amp;quot; do
    it &amp;quot;generates a valid user&amp;quot; do
      model = FactoryBot.build :user
      expect(model.valid?).to be true
    end
    it &amp;quot;saves a valid user&amp;quot; do
      model = FactoryBot.build :user
      expect(model.save).to be_truthy
    end
  end

  describe &amp;quot;DB settings&amp;quot; do
    it { have_db_index(:email) }
    it { is_expected.to have_db_column(:encrypted_password) }
  end
end

# spec/models/admin_spec.rb
require &#39;rails_helper&#39;

RSpec.describe Admin, type: :model do
  describe &amp;quot;factory functions&amp;quot; do
    it &amp;quot;generates a valid admin&amp;quot; do
      model = FactoryBot.build :admin
      expect(model.valid?).to be true
    end
    it &amp;quot;saves a valid admin&amp;quot; do
      model = FactoryBot.build :admin
      expect(model.save).to be_truthy
    end
  end

  describe &amp;quot;DB settings&amp;quot; do
    it { have_db_index(:email) }
    it { is_expected.to have_db_column(:encrypted_password) }
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;be sure these fail - run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rspec spec/models/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to configure the factories so all is working:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/factories/patrons.rb
FactoryBot.define do
  factory :user do
    sequence(:email)      { |n| &amp;quot;#{Faker::Internet.email}&amp;quot;.split(&#39;@&#39;).join(&amp;quot;#{n}@&amp;quot;) }
    password              { &#39;LetM3-InNow&#39; }
    password_confirmation { &#39;LetM3-InNow&#39; }
    # enable this if using confirmable
    # confirmed_at { Date.today }
  end
end

# spec/factories/umdzes.rb
FactoryBot.define do
  factory :umdze do
    sequence(:email)      { |n| &amp;quot;#{Faker::Internet.email}&amp;quot;.split(&#39;@&#39;).join(&amp;quot;#{n}@&amp;quot;) }
    password              { &#39;LetM3-InNow!&#39; }
    password_confirmation { &#39;LetM3-InNow!&#39; }
    umdzes_name           { &amp;quot;#{Faker::Name.first_name} #{Faker::Name.last_name}&amp;quot; }
    # enable this if using confirmable
    # confirmed_at          { Date.today }
  end
end

# spec/factories/admins.rb
FactoryBot.define do
  factory :admin do
    sequence(:email)      { |n| &amp;quot;#{Faker::Internet.email}&amp;quot;.split(&#39;@&#39;).join(&amp;quot;#{n}@&amp;quot;) }
    password              { &#39;LetM3-InNow!&#39; }
    password_confirmation { &#39;LetM3-InNow!&#39; }
    admins_name           { &amp;quot;#{Faker::Name.first_name} #{Faker::Name.last_name}&amp;quot; }
    # enable this if using confirmable
    # confirmed_at          { Date.today }
  end
end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;be sure these pass now - run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rspec spec/models/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we are ready to test devise and our restricted access to the users home page:&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.madetech.com/blog/feature-testing-with-rspec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.madetech.com/blog/feature-testing-with-rspec&lt;/a&gt;

&lt;a href=&#34;https://thoughtbot.com/blog/rspec-integration-tests-with-capybara&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://thoughtbot.com/blog/rspec-integration-tests-with-capybara&lt;/a&gt;

&lt;a href=&#34;https://github.com/heartcombo/devise/wiki/How-To:-Test-with-Capybara&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/heartcombo/devise/wiki/How-To:-Test-with-Capybara&lt;/a&gt;

&lt;a href=&#34;https://radavis.github.io/sign-in-out-test-helpers-for-and-devise-and-capybara/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://radavis.github.io/sign-in-out-test-helpers-for-and-devise-and-capybara/&lt;/a&gt;

&lt;a href=&#34;https://www.vanderpol.net/2014/10/07/rspec-integration-tests-devise-user-registration/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.vanderpol.net/2014/10/07/rspec-integration-tests-devise-user-registration/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/features/users/user_signup_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &#39;Users Home Page&#39;, type: :feature do
  # note user is NOT created in DB!
  let(:user)  { FactoryBot.build :user }
  after :each do
    Warden.test_reset!
  end
  describe &#39;user is not signed-up&#39; do
    scenario &#39;user signs-up on registration page&#39; do
      user_sign_up(email: user.email, password: user.password)
      expect(current_path).to eql(users_home_path)
    end
  end
end


# spec/features/users/user_login_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &#39;Users Login&#39;, type: :feature do
  let(:user)  { FactoryBot.create :user }
  after :each do
    Warden.test_reset!
  end
  describe &#39;user logs in successfully&#39; do
    scenario &#39;and is redirected to user home page&#39; do
      user_log_in(user)
      expect(current_path).to eql(auth_user_root_path)
    end
  end
end


# spec/features/users_home_page_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &#39;Users Home Page&#39;, type: :feature do
  let(:user)    { FactoryBot.create :user }
  after :each do
    # force a logout (clear warden info) after each test
    Warden.test_reset!
  end
  describe &#39;user is not authenticated&#39; do
    scenario &#39;user is redirected to user login before access to user home&#39; do
      visit users_home_path
      expect(current_path).to eql(new_user_session_path)
    end
  end
  describe &#39;user is already authenticated&#39; do
    before    { user_log_in(user) }
    scenario &#39;user gets direct access to the user homepage&#39; do
      visit users_home_path
      expect(page).to have_current_path(users_home_path)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and test to be sure admin can log in too:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/features/admins/admin_login_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &#39;Users Login&#39;, type: :feature do
  after :each do
    Warden.test_reset!
  end
  scenario &#39;logs in successfully and is redirected to user home page&#39; do
    admin_log_in
    expect(current_path).to eql(auth_admin_root_path)
  end
end


# spec/features/admins/admin_signup_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &#39;Admin Signup&#39;, type: :feature do
  # IMPORTANT is NOT created in DB!
  let(:admin)  { FactoryBot.build :admin }
  after :each do
    Warden.test_reset!
  end
  describe &#39;admin is not signed-up&#39; do
    scenario &#39;admin registers&#39; do
      admin_sign_up(email: admin.email, password: admin.password)
      expect(page).to have_current_path(admins_home_path)
    end
  end
end


# spec/features/admins/admins_home_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &#39;Admins Home&#39;, type: :feature do
  let(:admin)  { FactoryBot.create :admin }
  after :each do
    Warden.test_reset!
  end
  describe &#39;un-authenticated&#39; do
    scenario &#39;attempts to access admins home page is redirected to user login&#39; do
      visit admins_home_path
      expect(current_path).to eql(new_admin_session_path)
    end
  end
  describe &#39;already authenticated&#39; do
    before    { admin_log_in(admin) }
    scenario &#39;gets access to the user homepage&#39; do
      visit admins_home_path
      expect(current_path).to eql(admins_home_path)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;before we wrap up - we need to fix our request specs - now that we added login restrictions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# spec/requests/users/home_request_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &amp;quot;Patron::Homes&amp;quot;, type: :request do

  let(:patron)   { FactoryBot.create :patron }

  describe &amp;quot;GET /index&amp;quot; do
    context &amp;quot;NOT logged in&amp;quot; do
      after do
        sign_out patron
      end
      it &amp;quot;home as &#39;/patrons&#39; page is NOT accessible&amp;quot; do
        get &amp;quot;/patrons&amp;quot;
        expect(response).to have_http_status(:redirect)
        # to login
      end
      it &amp;quot;home as &#39;patron_home_path&#39; page is NOT accessible&amp;quot; do
        get patrons_home_path
        expect(response).to have_http_status(:redirect)
      end
      it &amp;quot;home as &#39;auth_patron_root_path&#39; page is NOT accessible&amp;quot; do
        get auth_patron_root_path
        expect(response).to have_http_status(:success)
        # here we need page match for different root routes
      end
    end

    context &amp;quot;logged in&amp;quot; do
      before do
        sign_in patron
      end
      after do
        sign_out patron
      end
      it &amp;quot;home as &#39;/patrons&#39; page is accessible&amp;quot; do
        get &amp;quot;/patrons&amp;quot;
        expect(response).to have_http_status(:success)
      end
      it &amp;quot;home as &#39;patrons_home_path&#39; page is accessible&amp;quot; do
        get patrons_home_path
        expect(response).to have_http_status(:success)
      end
      it &amp;quot;home as &#39;auth_patron_root_path&#39; page is accessible&amp;quot; do
        get auth_patron_root_path
        expect(response).to have_http_status(:success)
      end
    end
  end
end

# spec/requests/umdze/home_request_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &amp;quot;Umdze::Homes&amp;quot;, type: :request do
  let(:umdze)   { FactoryBot.create :umdze }

  describe &amp;quot;GET /index&amp;quot; do
    context &amp;quot;NOT logged in&amp;quot; do
      after do
        sign_out umdze
      end
      it &amp;quot;home as &#39;/umdzes&#39; page is NOT accessible&amp;quot; do
        get &amp;quot;/umdzes&amp;quot;
        expect(response).to have_http_status(:redirect)
        # to login
      end
      it &amp;quot;home as &#39;umdzes_home_path&#39; page is NOT accessible&amp;quot; do
        get umdzes_home_path
        expect(response).to have_http_status(:redirect)
      end
      it &amp;quot;home as &#39;auth_umdze_root_path&#39; page is NOT accessible&amp;quot; do
        get auth_umdze_root_path
        expect(response).to have_http_status(:success)
        # here we need page match for different root routes
      end
    end

    context &amp;quot;logged in&amp;quot; do
      before do
        sign_in umdze
      end
      after do
        sign_out umdze
      end
      it &amp;quot;home as &#39;/umdzes&#39; page is accessible&amp;quot; do
        get &amp;quot;/umdzes&amp;quot;
        expect(response).to have_http_status(:success)
      end
      it &amp;quot;home as &#39;umdzes_home_path&#39; page is accessible&amp;quot; do
        get umdzes_home_path
        expect(response).to have_http_status(:success)
      end
      it &amp;quot;home as &#39;auth_umdze_root_path&#39; page is accessible&amp;quot; do
        get auth_umdze_root_path
        expect(response).to have_http_status(:success)
      end
    end
  end
end

# spec/requests/admins/dashboard_request_spec.rb
require &#39;rails_helper&#39;

RSpec.describe &amp;quot;Admins::Dashboards&amp;quot;, type: :request do

  let(:admin)   { FactoryBot.create :admin }

  describe &amp;quot;GET /index&amp;quot; do
    context &amp;quot;NOT logged in&amp;quot; do
      it &amp;quot;home as &#39;/admins&#39; page is NOT accessible&amp;quot; do
        get &amp;quot;/admins&amp;quot;
        expect(response).to have_http_status(:redirect)
      end
      it &amp;quot;home as &#39;admins_home_path&#39; page is NOT accessible&amp;quot; do
        get admins_home_path
        expect(response).to have_http_status(:redirect)
      end
      it &amp;quot;home as &#39;auth_admin_root_path&#39; page is NOT accessible&amp;quot; do
        get auth_admin_root_path
        expect(response).to have_http_status(:success)
        # here we need page match for different root routes
      end
    end

    context &amp;quot;logged in&amp;quot; do
      before do
        sign_in admin
      end
      after do
        sign_out admin
      end
      it &amp;quot;home as &#39;/admins&#39; page is accessible&amp;quot; do
        get &amp;quot;/admins&amp;quot;
        expect(response).to have_http_status(:success)
      end
      it &amp;quot;home as &#39;admins_home_path&#39; page is accessible&amp;quot; do
        get admins_home_path
        expect(response).to have_http_status(:success)
      end
      it &amp;quot;home as &#39;auth_admin_root_path&#39; page is accessible&amp;quot; do
        get auth_admin_root_path
        expect(response).to have_http_status(:success)
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;run the tests and be sure all is green - if so, now is a good time to make a commit!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;rspec and devise configured and tests green&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
