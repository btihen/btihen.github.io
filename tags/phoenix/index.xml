<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Phoenix | btihen</title>
    <link>https://btihen.me/tags/phoenix/</link>
      <atom:link href="https://btihen.me/tags/phoenix/index.xml" rel="self" type="application/rss+xml" />
    <description>Phoenix</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2022</copyright><lastBuildDate>Sat, 09 Apr 2022 01:01:53 +0200</lastBuildDate>
    <image>
      <url>https://btihen.me/img/btihen_landing_page.png</url>
      <title>Phoenix</title>
      <link>https://btihen.me/tags/phoenix/</link>
    </image>
    
    <item>
      <title>Phoenix 1.6 Easy PETAL Stack with DaisyUI</title>
      <link>https://btihen.me/post_elixir_phoenix/phoenix_1_6_petal_setup_with_daisyui/</link>
      <pubDate>Sat, 09 Apr 2022 01:01:53 +0200</pubDate>
      <guid>https://btihen.me/post_elixir_phoenix/phoenix_1_6_petal_setup_with_daisyui/</guid>
      <description>&lt;p&gt;I have been enjoying the tools associated with Elixir and exploring the frontend. LiveView helps make that more intuitive and when that isn&amp;rsquo;t enough, AlpineJS is a lightweight JS tool with a similar syntax as Vue.&lt;/p&gt;
&lt;h2 id=&#34;install-asdf---and-required-software&#34;&gt;Install asdf - and required software&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.cogini.com/blog/using-asdf-with-elixir-and-phoenix/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.cogini.com/blog/using-asdf-with-elixir-and-phoenix/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On a Mac I used Homebrew:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install asdf
echo -e &#39;\n. $(brew --prefix asdf)/asdf.sh&#39; &amp;gt;&amp;gt; ~/.bash_profile
echo -e &#39;\n. $(brew --prefix asdf)/etc/bash_completion.d/asdf.bash&#39; &amp;gt;&amp;gt; ~/.bash_profile
source ~/.bash_profile  # (or open a new terminal)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can install asdf software packages:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;asdf plugin-add erlang
asdf plugin-add elixir
asdf plugin-add Postgres
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you need to install the desired versions (usually the newest) - currently:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;asdf list all erlang
asdf install erlang 24.3.3
asdf global erlang 24.3.3


# note the elixir version otp must match the erlang version!
asdf list all elixir
asdf install elixir 1.13.4-otp-24
asdf global elixir 1.13.4-otp-24

# asdf install elixir 1.11.4-otp-24
# if you mismatch elixir with erlang you will get errors like:
# {&amp;quot;init terminating in do_boot&amp;quot;,{undef,[{elixir,start_cli,[],[]},{init,start_em,1,[]},{init,do_boot,3,[]}]}}

asdf list all Postgres
asdf install Postgres 14.2 # Slow! (maybe just use homebrew&#39;s version)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;get-the-newest-elixir-tools&#34;&gt;Get the newest Elixir tools&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;mix local.rebar --force
mix local.hex --force
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;get-the-newest-phoenix-hex-package&#34;&gt;Get the newest Phoenix Hex Package&lt;/h2&gt;
&lt;p&gt;Once you have established you have the requirements - the download the newest version of Phoenix (go to: 
&lt;a href=&#34;https://hexdocs.pm/phoenix/installation.html#phoenix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://hexdocs.pm/phoenix/installation.html#phoenix&lt;/a&gt; to see the newest version) - at the time of this writing its 1.5.8 - be sure its installed using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mix archive.install hex phx_new 1.6.6 --force
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-project-with-asdf-settings&#34;&gt;create a project with asdf settings&lt;/h2&gt;
&lt;p&gt;First we will create the folder / project location&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir petal
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we will tell it which software to use :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;touch petal/.tool-versions
cat &amp;lt;&amp;lt;EOF &amp;gt;&amp;gt;petal/.tool-versions
erlang 24.3.3
elixir 1.13.3-otp-24
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-new-phoenix-project&#34;&gt;Create a new Phoenix Project&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now you can simply do:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mix phx.new petal --live
cd petal
mix ecto.create
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;assuming all is good lets configure git:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git init
git add .
git commit -m &amp;quot;initial Phoneix install with LiveView&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;credo&#34;&gt;credo&lt;/h2&gt;
&lt;p&gt;add credo to mix.exs (optional but often useful)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;{:credo, &amp;quot;~&amp;gt; 1.6&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;configure credo&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mix deps.get
mix credo gen.config
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;tailwind--daisyui&#34;&gt;Tailwind &amp;amp; DaisyUI&lt;/h2&gt;
&lt;p&gt;Add to mix.exs&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;{:phx_gen_tailwind, &amp;quot;~&amp;gt; 0.1&amp;quot;, only: :dev, runtime: false}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;configure TailwindCSS&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix deps.get
mix phx.gen.tailwind
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;test-tailwindcss&#34;&gt;Test TailwindCSS&lt;/h2&gt;
&lt;p&gt;add to the top of: &lt;code&gt;lib/slacker_gen_tail_web/templates/page/index.html.heex&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;&amp;lt;div class=&amp;quot;text-green-500 text-5xl text-center&amp;quot;&amp;gt;Large Centered Green TailwindCSS&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;start phoenix &lt;code&gt;mix -S phx.server&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;add-daisyui&#34;&gt;Add DaisyUI&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://daisyui.com/docs/install/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://daisyui.com/docs/install/&lt;/a&gt;

&lt;a href=&#34;https://elixirforum.com/t/how-to-get-daisyui-and-phoenix-to-work/46612/8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://elixirforum.com/t/how-to-get-daisyui-and-phoenix-to-work/46612/8&lt;/a&gt; (also explains what to do when using/deploying to Fly.io)!&lt;/p&gt;
&lt;p&gt;first we need to initialize npm (otherwise DaisyUI won&amp;rsquo;t load / integrate with esbuild)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd assets
npm init
# just using the defaults seems to work
npm install daisyui
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now configure Tailwind (&lt;code&gt;assets/tailwind.config.js&lt;/code&gt;) to use daisyui&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// assets/tailwind.config.js
module.exports = {
  mode: &#39;jit&#39;,
  purge: [
    &#39;./js/**/*.js&#39;,
    &#39;../lib/*_web/**/*.*ex&#39;
  ],
  theme: {
  },
  variants: {
    extend: {},
  },
  plugins: [require(&amp;quot;daisyui&amp;quot;)],
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;test-daisyui&#34;&gt;Test DaisyUI&lt;/h2&gt;
&lt;p&gt;now lets add a DaisyUI Button to the default page &lt;code&gt;lib/fare_web/templates/page/index.html.heex&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;button class=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Button&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ideally when we start phoenix:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;iex -S mix phx.server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we should now see in the log:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;warn - You have enabled the JIT engine which is currently in preview.
warn - Preview features are not covered by semver, may introduce breaking changes, and can change at any time.

Rebuilding...

ðŸŒ¼ daisyUI components 2.13.6  https://github.com/saadeghi/daisyui
  âœ”ï¸Ž Including:  base, components, themes[29], utilities
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now when we look at the landing page we should see a rounded blue button!&lt;/p&gt;
&lt;h2 id=&#34;install--test-alpine-js&#34;&gt;install &amp;amp; test Alpine JS&lt;/h2&gt;
&lt;p&gt;see the article on 
&lt;a href=&#34;https://btihen.me/post_elixir_phoenix/phoenix_1_6_petal_w_gen_n_custom_fonts/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;phoenix installer (easiest)&lt;/a&gt; or 
&lt;a href=&#34;https://btihen.me/post_elixir_phoenix/phoenix_1_6_petal_setup_with_asdf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;by hand&lt;/a&gt; to install aplinejs&lt;/p&gt;
&lt;h2 id=&#34;see-adding-fonts-for-more-options&#34;&gt;See Adding fonts for more options&lt;/h2&gt;
&lt;p&gt;see the article on adding a 
&lt;a href=&#34;https://btihen.me/post_elixir_phoenix/phoenix_1_6_petal_w_gen_n_custom_fonts/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;custom font&lt;/a&gt; for font information&lt;/p&gt;
&lt;h2 id=&#34;tailwind--daisyui-with-flyio&#34;&gt;Tailwind &amp;amp; DaisyUI with Fly.io&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://elixirforum.com/t/how-to-get-daisyui-and-phoenix-to-work/46612/8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://elixirforum.com/t/how-to-get-daisyui-and-phoenix-to-work/46612/8&lt;/a&gt;

&lt;a href=&#34;https://elixirforum.com/t/tailwind-not-working-in-production-no-styles-just-plain-html/45192&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://elixirforum.com/t/tailwind-not-working-in-production-no-styles-just-plain-html/45192&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;resources-16x&#34;&gt;Resources (1.6.x)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=vZBHkvTAb2U&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=vZBHkvTAb2U&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://sergiotapia.com/phoenix-160-liveview-esbuild-tailwind-jit-alpinejs-a-brief-tutorial&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://sergiotapia.com/phoenix-160-liveview-esbuild-tailwind-jit-alpinejs-a-brief-tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://thinkingelixir.com/petal-stack-in-elixir/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://thinkingelixir.com/petal-stack-in-elixir/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://larainfo.com/blogs/build-simple-count-app-using-apline-js-with-tailwind-css&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://larainfo.com/blogs/build-simple-count-app-using-apline-js-with-tailwind-css&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://fullstackphoenix.com/tutorials/combine-phoenix-liveview-with-alpine-js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://fullstackphoenix.com/tutorials/combine-phoenix-liveview-with-alpine-js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.cogini.com/blog/using-asdf-with-elixir-and-phoenix/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.cogini.com/blog/using-asdf-with-elixir-and-phoenix/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://tailwindcss.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://tailwindcss.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/alpinejs/alpine&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/alpinejs/alpine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/tailwindlabs/tailwindcss&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/tailwindlabs/tailwindcss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://experimentingwithcode.com/custom-fonts-with-phoenix-and-tailwind/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://experimentingwithcode.com/custom-fonts-with-phoenix-and-tailwind/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://fullstackphoenix.com/tutorials/add-tailwind-html-generators-in-phoenix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://fullstackphoenix.com/tutorials/add-tailwind-html-generators-in-phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://elixirforum.com/t/how-do-i-use-a-custom-font-with-phoenix-1-6-and-esbuild/43791/16&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://elixirforum.com/t/how-do-i-use-a-custom-font-with-phoenix-1-6-and-esbuild/43791/16&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;older-resources&#34;&gt;Older Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=o4Prej0wIZA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=o4Prej0wIZA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;http://blog.pthompson.org/alpine-js-and-liveview&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://blog.pthompson.org/alpine-js-and-liveview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://fullstackphoenix.com/tutorials/get-started-with-tailwind-in-phoenix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://fullstackphoenix.com/tutorials/get-started-with-tailwind-in-phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://fullstackphoenix.com/tutorials/combine-phoenix-liveview-with-alpine-js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://fullstackphoenix.com/tutorials/combine-phoenix-liveview-with-alpine-js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://medium.com/mindvalley-technology/how-to-add-tailwindcss-to-your-phoenix-project-e2250ad31ace&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://medium.com/mindvalley-technology/how-to-add-tailwindcss-to-your-phoenix-project-e2250ad31ace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://thinkingelixir.com/podcast-episodes/021-tailwind-css-alpine-js-and-liveview-with-patrick-thompson/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://thinkingelixir.com/podcast-episodes/021-tailwind-css-alpine-js-and-liveview-with-patrick-thompson/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Phoenix 1.6 Easy PETAL Stack Setup (w/a Custom Font</title>
      <link>https://btihen.me/post_elixir_phoenix/phoenix_1_6_petal_w_gen_n_custom_fonts/</link>
      <pubDate>Fri, 04 Mar 2022 01:01:53 +0200</pubDate>
      <guid>https://btihen.me/post_elixir_phoenix/phoenix_1_6_petal_w_gen_n_custom_fonts/</guid>
      <description>&lt;p&gt;I have been enjoying the tools associated with Elixir and exploring the frontend. LiveView helps make that more intuitive and when that isn&amp;rsquo;t enough, AlpineJS is a lightweight JS tool with a similar syntax as Vue.&lt;/p&gt;
&lt;h2 id=&#34;install-asdf---and-required-software&#34;&gt;Install asdf - and required software&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.cogini.com/blog/using-asdf-with-elixir-and-phoenix/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.cogini.com/blog/using-asdf-with-elixir-and-phoenix/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On a Mac I used Homebrew:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install asdf
echo -e &#39;\n. $(brew --prefix asdf)/asdf.sh&#39; &amp;gt;&amp;gt; ~/.bash_profile
echo -e &#39;\n. $(brew --prefix asdf)/etc/bash_completion.d/asdf.bash&#39; &amp;gt;&amp;gt; ~/.bash_profile
source ~/.bash_profile  # (or open a new terminal)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can install asdf software packages:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;asdf plugin-add erlang
asdf plugin-add elixir
asdf plugin-add Postgres
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you need to install the desired versions (usually the newest) - currently:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;asdf list all erlang
asdf install erlang 24.2.2
asdf global erlang 24.2.2


# note the elixir version otp must match the erlang version!
asdf list all elixir
asdf install elixir 1.13.3-otp-24
asdf global elixir 1.13.3-otp-24

# asdf install elixir 1.11.4-otp-24
# if you mismatch elixir with erlang you will get errors like:
# {&amp;quot;init terminating in do_boot&amp;quot;,{undef,[{elixir,start_cli,[],[]},{init,start_em,1,[]},{init,do_boot,3,[]}]}}

asdf list all Postgres
asdf install Postgres 14.2
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;get-the-newest-elixir-tools&#34;&gt;Get the newest Elixir tools&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;mix local.rebar --force
mix local.hex --force
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;get-the-newest-phoenix-hex-package&#34;&gt;Get the newest Phoenix Hex Package&lt;/h2&gt;
&lt;p&gt;Once you have established you have the requrements - the download the newest version of Phoenix (go to: 
&lt;a href=&#34;https://hexdocs.pm/phoenix/installation.html#phoenix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://hexdocs.pm/phoenix/installation.html#phoenix&lt;/a&gt; to see the newest version) - at the time of this writing its 1.5.8 - be sure its installed using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mix archive.install hex phx_new 1.6.6 --force
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-project-with-asdf-settings&#34;&gt;create a project with asdf settings&lt;/h2&gt;
&lt;p&gt;First we will creat the folder / project location&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir petal
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we will tell it which software to use:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;touch petal/.tool-versions
cat &amp;lt;&amp;lt;EOF &amp;gt;&amp;gt;petal/.tool-versions
erlang 24.2.2
elixir 1.13.3-otp-24
Postgres 14.2
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-new-phoenix-project&#34;&gt;Create a new Phoenix Project&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now you can simply do:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mix phx.new petal --live
cd petal
mix ecto.create
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;assuming all is good lets configure git:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git init
git add .
git commit -m &amp;quot;initial Phoenix install with LiveView&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;credo&#34;&gt;credo&lt;/h2&gt;
&lt;p&gt;add credo to mix.exs&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{:credo, &amp;quot;~&amp;gt; 1.6&amp;quot;},
{:phx_gen_tailwind, &amp;quot;~&amp;gt; 0.1.3&amp;quot;, only: :dev, runtime: false}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;configure Credo &amp;amp; TailwindCSS&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix deps.get
mix credo gen.config
mix phx.gen.tailwind
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;test-tailwindcss&#34;&gt;Test TailwindCSS&lt;/h2&gt;
&lt;p&gt;add to the top of: &lt;code&gt;lib/slacker_gen_tail_web/templates/page/index.html.heex&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;&amp;lt;div class=&amp;quot;text-green-500 text-5xl text-center&amp;quot;&amp;gt;Large Centered Green TailwindCSS&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;start phoenix &lt;code&gt;mix -S phx.server&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;install-alpinejs&#34;&gt;install AlpineJS&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=vZBHkvTAb2U&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=vZBHkvTAb2U&lt;/a&gt;

&lt;a href=&#34;https://sergiotapia.com/phoenix-160-liveview-esbuild-tailwind-jit-alpinejs-a-brief-tutorial&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://sergiotapia.com/phoenix-160-liveview-esbuild-tailwind-jit-alpinejs-a-brief-tutorial&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd assets
npm install alpinejs
cd ..
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now change &lt;code&gt;app.js&lt;/code&gt; is to require our new setup:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;# assets/js/app.js
// .. after the app.scss import add:
import Alpine from &amp;quot;alpinejs&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;still in &lt;code&gt;assets/js/app.js&lt;/code&gt; find:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let csrfToken = document.querySelector(&amp;quot;meta[name=&#39;csrf-token&#39;]&amp;quot;).getAttribute(&amp;quot;content&amp;quot;)
let liveSocket = new LiveSocket(&amp;quot;/live&amp;quot;, Socket, {params: {_csrf_token: csrfToken}})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and change to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// after all the imports
window.Alpine = Alpine;
Alpine.start();
let hooks = {};
let csrfToken = document.querySelector(&amp;quot;meta[name=&#39;csrf-token&#39;]&amp;quot;).getAttribute(&amp;quot;content&amp;quot;)
let liveSocket = new LiveSocket(&amp;quot;/live&amp;quot;, Socket, {
  params: { _csrf_token: csrfToken },
  hooks: hooks,
  dom: {
    onBeforeElUpdated(from, to) {
      if (from._x_dataStack) {
        window.Alpine.clone(from, to);
      }
    },
  },
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now change the loading of &lt;code&gt;assets/app.js&lt;/code&gt; in the root file to load &lt;code&gt;assets/js/app.js&lt;/code&gt; to load AlpineJS into Phoenix you do that with in &lt;code&gt;lib/fonts_web/templates/layout/root.html.heex&lt;/code&gt; by changing:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;!-- change this from app.js to js/app.js --&amp;gt;
    &amp;lt;script defer phx-track-static type=&amp;quot;text/javascript&amp;quot; src={Routes.static_path(@conn, &amp;quot;/assets/app.js&amp;quot;)}&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;!-- change this from app.js to js/app.js --&amp;gt;
    &amp;lt;script defer phx-track-static type=&amp;quot;text/javascript&amp;quot; src={Routes.static_path(@conn, &amp;quot;/assets/js/app.js&amp;quot;)}&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;so now &lt;code&gt;lib/fonts_web/templates/layout/root.html.heex&lt;/code&gt; should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- lib/fonts_web/templates/layout/root.html.heex --&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;/&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=edge&amp;quot;/&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;/&amp;gt;
    &amp;lt;%= csrf_meta_tag() %&amp;gt;
    &amp;lt;%= live_title_tag assigns[:page_title] || &amp;quot;SlackerPetal&amp;quot;, suffix: &amp;quot; Â· Phoenix Framework&amp;quot; %&amp;gt;
    &amp;lt;link phx-track-static rel=&amp;quot;stylesheet&amp;quot; href={Routes.static_path(@conn, &amp;quot;/assets/app.css&amp;quot;)}/&amp;gt;
    &amp;lt;!-- change the `javascript` static path from `/assets/app.js` to `/assets/app.js` to load AlpineJS --&amp;gt;
    &amp;lt;%# &amp;lt;script defer phx-track-static type=&amp;quot;text/javascript&amp;quot; src={Routes.static_path(@conn, &amp;quot;/assets/app.js&amp;quot;)}&amp;gt;&amp;lt;/script&amp;gt; %&amp;gt;
    &amp;lt;script defer phx-track-static type=&amp;quot;text/javascript&amp;quot; src={Routes.static_path(@conn, &amp;quot;/assets/js/app.js&amp;quot;)}&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;header&amp;gt;
      &amp;lt;section class=&amp;quot;container&amp;quot;&amp;gt;
        &amp;lt;nav&amp;gt;
          &amp;lt;ul&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://hexdocs.pm/phoenix/overview.html&amp;quot;&amp;gt;Get Started&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;%= if function_exported?(Routes, :live_dashboard_path, 2) do %&amp;gt;
              &amp;lt;li&amp;gt;&amp;lt;%= link &amp;quot;LiveDashboard&amp;quot;, to: Routes.live_dashboard_path(@conn, :home) %&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;% end %&amp;gt;
          &amp;lt;/ul&amp;gt;
        &amp;lt;/nav&amp;gt;
        &amp;lt;a href=&amp;quot;https://phoenixframework.org/&amp;quot; class=&amp;quot;phx-logo&amp;quot;&amp;gt;
          &amp;lt;img src={Routes.static_path(@conn, &amp;quot;/images/phoenix.png&amp;quot;)} alt=&amp;quot;Phoenix Framework Logo&amp;quot;/&amp;gt;
        &amp;lt;/a&amp;gt;
      &amp;lt;/section&amp;gt;
    &amp;lt;/header&amp;gt;
    &amp;lt;%= @inner_content %&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;test-alpinejs&#34;&gt;Test AlpineJS&lt;/h2&gt;
&lt;p&gt;TEST by adding to the end of: &lt;code&gt;lib/petal_web/live/page_live.html.leex&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;&amp;lt;section&amp;gt;
  &amp;lt;h2&amp;gt;Alpine JS Installed&amp;lt;/h2&amp;gt;
  &amp;lt;div x-data=&amp;quot;{name:&#39;&#39;}&amp;quot;&amp;gt;
    &amp;lt;label for=&amp;quot;name&amp;quot;&amp;gt;Name:&amp;lt;/label&amp;gt;
    &amp;lt;input id=&amp;quot;name&amp;quot; type=&amp;quot;text&amp;quot; x-model=&amp;quot;name&amp;quot; /&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;br&amp;gt;&amp;lt;b&amp;gt;&amp;lt;em&amp;gt;Output:&amp;lt;/em&amp;gt;&amp;lt;/b&amp;gt; &amp;lt;span x-text=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test with:
&lt;code&gt;mix phx.server&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;when typing the name should appear below!&lt;/p&gt;
&lt;h2 id=&#34;add-css-components-to-tailwindcss&#34;&gt;Add CSS Components to TailwindCSS&lt;/h2&gt;
&lt;p&gt;we will create a file for our default CSS styles the: &lt;code&gt;assets/css/default.css&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# assuming you are in the root directory
touch assets/css/default.css
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Put your default site CSS here.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s also create some custom CSS components:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;# assuming you are still in the assets directory on the cli
mkdir assets/css/components
touch assets/css/components/buttons.css
cat &amp;lt;&amp;lt;EOF &amp;gt;assets/css/components/buttons.css
@layer components {
  .btn-redish {
    @apply bg-red-300 hover:bg-red-600 text-blue-800 font-bold py-2 px-4 rounded;
  }
  .btn-greenish {
    @apply bg-green-300 hover:bg-green-600 text-blue-800 font-bold py-2 px-4 rounded;
  }
}
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s add our components (&amp;amp; Default CSS to our config)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* Import tailwind - with postcss-import installed */
@import &amp;quot;tailwindcss/base&amp;quot;;
@import &amp;quot;tailwindcss/components&amp;quot;;
@import &amp;quot;tailwindcss/utilities&amp;quot;;

/* custom styles - put after base imports! */
@import &amp;quot;./default.css&amp;quot;;
/* import custom components */
@import &amp;quot;./components/buttons.css&amp;quot;;
/* default phoenix styles - replaced bby default.css file */
/* @import &amp;quot;./phoenix.css&amp;quot;; */
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;add a test html from tailwind to the end of: &lt;code&gt;lib/petal_web/live/page_live.html.leex&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;&amp;lt;section class=&amp;quot;grid grid-cols-1 gap-4&amp;quot;&amp;gt;
	&amp;lt;!-- tailwind text --&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;h2 class=&amp;quot;text-red-500 text-5xl font-bold text-center&amp;quot;&amp;gt;Tailwind CSS with Alpine JS Dropdown&amp;lt;/h2&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;!-- alpinejs dropdown test --&amp;gt;
	&amp;lt;div x-data=&amp;quot;{ open: false }&amp;quot; class=&amp;quot;relative text-left&amp;quot;&amp;gt;
  	&amp;lt;button
  					@click=&amp;quot;open = !open&amp;quot;
  					@keydown.escape.window=&amp;quot;open = false&amp;quot;
  					@click.away=&amp;quot;open = false&amp;quot;
  					class=&amp;quot;flex items-center h-8 pl-3 pr-2 border border-black focus:outline-none&amp;quot;&amp;gt;
  			&amp;lt;span class=&amp;quot;text-sm leading-none&amp;quot;&amp;gt;
  					Options
  			&amp;lt;/span&amp;gt;
  			&amp;lt;svg class=&amp;quot;w-4 h-4 mt-px ml-2&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; viewBox=&amp;quot;0 0 20 20&amp;quot; fill=&amp;quot;currentColor&amp;quot;&amp;gt;
  					&amp;lt;path fill-rule=&amp;quot;evenodd&amp;quot; d=&amp;quot;M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z&amp;quot; clip-rule=&amp;quot;evenodd&amp;quot; /&amp;gt;
  			&amp;lt;/svg&amp;gt;
  	&amp;lt;/button&amp;gt;
  	&amp;lt;div
  					x-cloak
  					x-show=&amp;quot;open&amp;quot;
  					x-transition:enter=&amp;quot;transition ease-out duration-100&amp;quot;
  					x-transition:enter-start=&amp;quot;transform opacity-0 scale-95&amp;quot;
  					x-transition:enter-end=&amp;quot;transform opacity-100 scale-100&amp;quot;
  					x-transition:leave=&amp;quot;transition ease-in duration-75&amp;quot;
  					x-transition:leave-start=&amp;quot;transform opacity-100 scale-100&amp;quot;
  					x-transition:leave-end=&amp;quot;transform opacity-0 scale-95&amp;quot;
  					class=&amp;quot;absolute flex flex-col w-40 mt-1 border border-black shadow-xs&amp;quot;&amp;gt;
  			&amp;lt;a class=&amp;quot;flex items-center h-8 px-3 text-sm hover:bg-gray-200&amp;quot; href=&amp;quot;#&amp;quot;&amp;gt;Settings&amp;lt;/a&amp;gt;
  			&amp;lt;a class=&amp;quot;flex items-center h-8 px-3 text-sm hover:bg-gray-200&amp;quot; href=&amp;quot;#&amp;quot;&amp;gt;Support&amp;lt;/a&amp;gt;
  			&amp;lt;a class=&amp;quot;flex items-center h-8 px-3 text-sm hover:bg-gray-200&amp;quot; href=&amp;quot;#&amp;quot;&amp;gt;Sign Out&amp;lt;/a&amp;gt;
  	&amp;lt;/div&amp;gt;
	&amp;lt;/div&amp;gt;

  &amp;lt;!-- alpinejs counter test --&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;p class=&amp;quot;mt-5 font-bold text-center&amp;quot;&amp;gt;Counter with Component Buttons&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;!--
    If you want a box around the counter use:
    &amp;lt;div class=&amp;quot;flex items-center justify-center h-screen bg-gray-200&amp;quot;&amp;gt;
  --&amp;gt;
  &amp;lt;div class=&amp;quot;mt-10 flex justify-center&amp;quot; x-data=&amp;quot;{ count: 0 }&amp;quot;&amp;gt;
    &amp;lt;button class=&amp;quot;btn-redish&amp;quot; x-on:click=&amp;quot;count--&amp;quot;&amp;gt;Decrement&amp;lt;/button&amp;gt;
    &amp;lt;code&amp;gt;count: &amp;lt;/code&amp;gt;&amp;lt;code x-text=&amp;quot;count&amp;quot;&amp;gt;&amp;lt;/code&amp;gt;
    &amp;lt;button class=&amp;quot;btn-greenish&amp;quot; x-on:click=&amp;quot;count++&amp;quot;&amp;gt;Increment&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Start phoenix with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;iex -S mix phx.server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we should have a dropdown &amp;amp; our colored component buttons on our counter.&lt;/p&gt;
&lt;h2 id=&#34;add-a-custom-font&#34;&gt;Add a custom Font&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://experimentingwithcode.com/custom-fonts-with-phoenix-and-tailwind/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://experimentingwithcode.com/custom-fonts-with-phoenix-and-tailwind/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Find a font at: 
&lt;a href=&#34;https://fonts.google.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://fonts.google.com/&lt;/a&gt; (or any other source of fonts)&lt;/p&gt;
&lt;p&gt;I will use &lt;code&gt;handlee&lt;/code&gt; as it is very distinctive - to make the setup easier I will download &lt;code&gt;handlee&lt;/code&gt; from:

&lt;a href=&#34;https://google-webfonts-helper.herokuapp.com/fonts/handlee?subsets=latin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://google-webfonts-helper.herokuapp.com/fonts/handlee?subsets=latin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I will put the fonts in the folder: &lt;code&gt;assets/fonts/handlee&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p assets/fonts/handlee
touch assets/fonts/handlee/handless.css
cat &amp;lt;&amp;lt;EOF&amp;gt;&amp;gt;assets/fonts/handlee/handless.css
/* handlee-regular - latin - copied from: https://google-webfonts-helper.herokuapp.com/fonts/handlee?subsets=latin */
/* be sure the font-path is local to where the fonts are */
@font-face {
  font-family: &#39;Handlee&#39;;
  font-style: normal;
  font-weight: 400;
  src: local(&#39;&#39;),
       url(&#39;handlee-v12-latin-regular.woff2&#39;) format(&#39;woff2&#39;),
       url(&#39;handlee-v12-latin-regular.woff&#39;) format(&#39;woff&#39;);
}
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets setup &lt;code&gt;esbuild&lt;/code&gt; to manage the CSS and fonts - the default in &lt;code&gt;config/config.exs&lt;/code&gt; is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;# config/config.exs
config :esbuild,
  version: &amp;quot;0.14.0&amp;quot;,
  default: [
    args: ~w(js/app.js --bundle --target=es2017 --outdir=../priv/static/assets --external:/fonts/* --external:/images/*),
    cd: Path.expand(&amp;quot;../assets&amp;quot;, __DIR__),
    env: %{&amp;quot;NODE_PATH&amp;quot; =&amp;gt; Path.expand(&amp;quot;../deps&amp;quot;, __DIR__)}
  ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will need to add our FontCSS path &lt;code&gt;fonts/handlee/handlee.css&lt;/code&gt; to the build System along with the font types to load:&lt;code&gt;--loader:.woff2=file --loader:.woff=file&lt;/code&gt;, so now it should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;config :esbuild,
  version: &amp;quot;0.14.0&amp;quot;,
  default: [
    args: ~w(js/app.js fonts/handlee/handlee.css --bundle --loader:.woff2=file --loader:.woff=file --target=es2017 --outdir=../priv/static/assets --external:/fonts/* --external:/images/*),
    cd: Path.expand(&amp;quot;../assets&amp;quot;, __DIR__),
    env: %{&amp;quot;NODE_PATH&amp;quot; =&amp;gt; Path.expand(&amp;quot;../deps&amp;quot;, __DIR__)}
  ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you NEED to restart phoenix once a config file changes!&lt;/p&gt;
&lt;p&gt;Assuming everything is working you will see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the fonts files in: &lt;code&gt;priv/static/assets/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the fonts css in: &lt;code&gt;priv/static/assets/fonts/handlee/handlee.css&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;this is critical - if this isn&amp;rsquo;t working you MUST fix it!&lt;/p&gt;
&lt;h3 id=&#34;integrate-the-font-into-css--tailwindcss&#34;&gt;Integrate the font into CSS (&amp;amp; TailwindCSS)&lt;/h3&gt;
&lt;p&gt;Now you will need to tell TailwindCSS about the font so you can use: &lt;code&gt;font-handprint&lt;/code&gt; as a CSS class.&lt;/p&gt;
&lt;p&gt;Your initial &lt;code&gt;assets/tailwind.config.js&lt;/code&gt; file will look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;module.exports = {
  mode: &#39;jit&#39;,
  purge: [
    &#39;./js/**/*.js&#39;,
    &#39;../lib/*_web/**/*.*ex&#39;
  ],
  theme: {
    extend: {},
  },
  variants: {
    extend: {},
  },
  plugins: [],
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your define you font in the &lt;code&gt;theme&lt;/code&gt; section with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;module.exports = {
  mode: &#39;jit&#39;,
  purge: [
    &#39;./js/**/*.js&#39;,
    &#39;../lib/*_web/**/*.*ex&#39;
  ],
  theme: {
    extend: {
      fontFamily: {
        handprint: [&#39;Handlee&#39;]
      },
    },
  },
  variants: {
    extend: {},
  },
  plugins: [],
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Working in Switzerland it is convenient to use very multi-lingual fonts such as &lt;code&gt;Noto&lt;/code&gt; and redefine the sans and serif fonts - in fact, my goto fonts and setup are:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;module.exports = {
  mode: &#39;jit&#39;,
  purge: [
    &#39;./js/**/*.js&#39;,
    &#39;../lib/*_web/**/*.*ex&#39;
  ],
  theme: {
    extend: {
      fontFamily: {
        comic: [&#39;ComicNeue&#39;],
        hand: [&#39;Handless&#39;],
        sans: [&#39;NotoSans&#39;, &#39;sans-serif&#39;],
        serif: [&#39;NotoSerif&#39;, &#39;serif&#39;]
      },
    },
  },
  variants: {
    extend: {},
  },
  plugins: [],
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;integrate-the-fonts-into-phoenix&#34;&gt;Integrate the Fonts Into Phoenix&lt;/h3&gt;
&lt;p&gt;in the root.html.heex file add the static route &lt;code&gt;/assets/fonts/Hanlee/hanlee.css&lt;/code&gt; before the &lt;code&gt;/assets/app.css&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is done with the following html route:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;    &amp;lt;!-- add font before app.css --&amp;gt;
    &amp;lt;link phx-track-static rel=&amp;quot;stylesheet&amp;quot; href={Routes.static_path(@conn, &amp;quot;/assets/fonts/Hanlee/hanlee.css&amp;quot;)}/&amp;gt;
    &amp;lt;link phx-track-static rel=&amp;quot;stylesheet&amp;quot; href={Routes.static_path(@conn, &amp;quot;/assets/app.css&amp;quot;)}/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now &lt;code&gt;lib/fonts_web/templates/layout/root.html.heex&lt;/code&gt; would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- lib/fonts_web/templates/layout/root.html.heex --&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;/&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=edge&amp;quot;/&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;/&amp;gt;
    &amp;lt;%= csrf_meta_tag() %&amp;gt;
    &amp;lt;%= live_title_tag assigns[:page_title] || &amp;quot;SlackerPetal&amp;quot;, suffix: &amp;quot; Â· Phoenix Framework&amp;quot; %&amp;gt;
    &amp;lt;!-- add font here BEFORE `/assets/app.css` --&amp;gt;
    &amp;lt;link phx-track-static rel=&amp;quot;stylesheet&amp;quot; href={Routes.static_path(@conn, &amp;quot;/assets/fonts/Hanlee/hanlee.css&amp;quot;)}/&amp;gt;
    &amp;lt;link phx-track-static rel=&amp;quot;stylesheet&amp;quot; href={Routes.static_path(@conn, &amp;quot;/assets/app.css&amp;quot;)}/&amp;gt;
    &amp;lt;!-- change the `javascript` static path from `/assets/app.js` to `/assets/app.js` to load AlpineJS --&amp;gt;
    &amp;lt;%# &amp;lt;script defer phx-track-static type=&amp;quot;text/javascript&amp;quot; src={Routes.static_path(@conn, &amp;quot;/assets/app.js&amp;quot;)}&amp;gt;&amp;lt;/script&amp;gt; %&amp;gt;
    &amp;lt;script defer phx-track-static type=&amp;quot;text/javascript&amp;quot; src={Routes.static_path(@conn, &amp;quot;/assets/js/app.js&amp;quot;)}&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;header&amp;gt;
      &amp;lt;section class=&amp;quot;container&amp;quot;&amp;gt;
        &amp;lt;nav&amp;gt;
          &amp;lt;ul&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://hexdocs.pm/phoenix/overview.html&amp;quot;&amp;gt;Get Started&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;%= if function_exported?(Routes, :live_dashboard_path, 2) do %&amp;gt;
              &amp;lt;li&amp;gt;&amp;lt;%= link &amp;quot;LiveDashboard&amp;quot;, to: Routes.live_dashboard_path(@conn, :home) %&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;% end %&amp;gt;
          &amp;lt;/ul&amp;gt;
        &amp;lt;/nav&amp;gt;
        &amp;lt;a href=&amp;quot;https://phoenixframework.org/&amp;quot; class=&amp;quot;phx-logo&amp;quot;&amp;gt;
          &amp;lt;img src={Routes.static_path(@conn, &amp;quot;/images/phoenix.png&amp;quot;)} alt=&amp;quot;Phoenix Framework Logo&amp;quot;/&amp;gt;
        &amp;lt;/a&amp;gt;
      &amp;lt;/section&amp;gt;
    &amp;lt;/header&amp;gt;
    &amp;lt;%= @inner_content %&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;test-you-new-font&#34;&gt;Test you new font&lt;/h3&gt;
&lt;p&gt;Now add to the file &lt;code&gt;lib/slacker_gen_tail_web/templates/page/index.html.heex&lt;/code&gt; to the following html:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;p class=&amp;quot;text-red-500 text-5xl text-center font-handprint&amp;quot;&amp;gt;Hand Printed&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ideally you now see your new font displayed within the &amp;ldquo;Hand Printed&amp;rdquo; text&lt;/p&gt;
&lt;p&gt;NOTE:
if you get an error like:
&lt;code&gt;(Phoenix.Router.NoRouteError) no route found for GET /assets/fonts/Handlee/handlee.css&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Check your esbundle config and that &lt;code&gt;priv/static/assets/fonts/handlee/handlee.css&lt;/code&gt; is being copied (Static routes always point to: &lt;code&gt;priv/static/&lt;/code&gt;)!&lt;/p&gt;
&lt;h2 id=&#34;resources-16x&#34;&gt;Resources (1.6.x)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=vZBHkvTAb2U&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=vZBHkvTAb2U&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://sergiotapia.com/phoenix-160-liveview-esbuild-tailwind-jit-alpinejs-a-brief-tutorial&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://sergiotapia.com/phoenix-160-liveview-esbuild-tailwind-jit-alpinejs-a-brief-tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://thinkingelixir.com/petal-stack-in-elixir/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://thinkingelixir.com/petal-stack-in-elixir/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://larainfo.com/blogs/build-simple-count-app-using-apline-js-with-tailwind-css&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://larainfo.com/blogs/build-simple-count-app-using-apline-js-with-tailwind-css&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://fullstackphoenix.com/tutorials/combine-phoenix-liveview-with-alpine-js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://fullstackphoenix.com/tutorials/combine-phoenix-liveview-with-alpine-js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.cogini.com/blog/using-asdf-with-elixir-and-phoenix/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.cogini.com/blog/using-asdf-with-elixir-and-phoenix/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://tailwindcss.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://tailwindcss.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/alpinejs/alpine&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/alpinejs/alpine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/tailwindlabs/tailwindcss&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/tailwindlabs/tailwindcss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://experimentingwithcode.com/custom-fonts-with-phoenix-and-tailwind/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://experimentingwithcode.com/custom-fonts-with-phoenix-and-tailwind/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://fullstackphoenix.com/tutorials/add-tailwind-html-generators-in-phoenix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://fullstackphoenix.com/tutorials/add-tailwind-html-generators-in-phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://elixirforum.com/t/how-do-i-use-a-custom-font-with-phoenix-1-6-and-esbuild/43791/16&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://elixirforum.com/t/how-do-i-use-a-custom-font-with-phoenix-1-6-and-esbuild/43791/16&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;older-resources&#34;&gt;Older Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=o4Prej0wIZA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=o4Prej0wIZA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;http://blog.pthompson.org/alpine-js-and-liveview&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://blog.pthompson.org/alpine-js-and-liveview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://fullstackphoenix.com/tutorials/get-started-with-tailwind-in-phoenix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://fullstackphoenix.com/tutorials/get-started-with-tailwind-in-phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://fullstackphoenix.com/tutorials/combine-phoenix-liveview-with-alpine-js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://fullstackphoenix.com/tutorials/combine-phoenix-liveview-with-alpine-js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://medium.com/mindvalley-technology/how-to-add-tailwindcss-to-your-phoenix-project-e2250ad31ace&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://medium.com/mindvalley-technology/how-to-add-tailwindcss-to-your-phoenix-project-e2250ad31ace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://thinkingelixir.com/podcast-episodes/021-tailwind-css-alpine-js-and-liveview-with-patrick-thompson/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://thinkingelixir.com/podcast-episodes/021-tailwind-css-alpine-js-and-liveview-with-patrick-thompson/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Phoenix 1.6 PETAL Stack Setup by Hand</title>
      <link>https://btihen.me/post_elixir_phoenix/phoenix_1_6_petal_setup_with_asdf/</link>
      <pubDate>Sun, 27 Feb 2022 01:01:53 +0200</pubDate>
      <guid>https://btihen.me/post_elixir_phoenix/phoenix_1_6_petal_setup_with_asdf/</guid>
      <description>&lt;p&gt;I have been enjoying the tools associated with Elixir and exploring the frontend. LiveView helps make that more intuitive and when that isn&amp;rsquo;t enough, AlpineJS is a lightweight JS tool with a similar syntax as Vue.&lt;/p&gt;
&lt;h2 id=&#34;install-asdf---and-required-software&#34;&gt;Install asdf - and required software&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.cogini.com/blog/using-asdf-with-elixir-and-phoenix/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.cogini.com/blog/using-asdf-with-elixir-and-phoenix/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On a Mac I used Homebrew:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install asdf
echo -e &#39;\n. $(brew --prefix asdf)/asdf.sh&#39; &amp;gt;&amp;gt; ~/.bash_profile
echo -e &#39;\n. $(brew --prefix asdf)/etc/bash_completion.d/asdf.bash&#39; &amp;gt;&amp;gt; ~/.bash_profile
source ~/.bash_profile  # (or open a new terminal)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can install asdf software packages:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;asdf plugin-add erlang
asdf plugin-add elixir
asdf plugin-add Postgres
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you need to install the desired versions (usually the newest) - currently:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;asdf list all erlang
asdf install erlang 24.2.2
asdf global erlang 24.2.2


# note the elixir version otp must match the erlang version!
asdf list all elixir
asdf install elixir 1.13.3-otp-24
asdf global elixir 1.13.3-otp-24

# asdf install elixir 1.11.4-otp-24
# if you mismatch elixir with erlang you will get errors like:
# {&amp;quot;init terminating in do_boot&amp;quot;,{undef,[{elixir,start_cli,[],[]},{init,start_em,1,[]},{init,do_boot,3,[]}]}}

asdf list all Postgres
asdf install Postgres 14.2
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;get-the-newest-elixir-tools&#34;&gt;Get the newest Elixir tools&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;mix local.rebar --force
mix local.hex --force
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;get-the-newest-phoenix-hex-package&#34;&gt;Get the newest Phoenix Hex Package&lt;/h2&gt;
&lt;p&gt;Once you have established you have the requirements - the download the newest version of Phoenix (go to: 
&lt;a href=&#34;https://hexdocs.pm/phoenix/installation.html#phoenix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://hexdocs.pm/phoenix/installation.html#phoenix&lt;/a&gt; to see the newest version) - at the time of this writing its 1.5.8 - be sure its installed using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mix archive.install hex phx_new 1.6.6 --force
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-project-with-asdf-settings&#34;&gt;create a project with asdf settings&lt;/h2&gt;
&lt;p&gt;First we will create the folder / project location&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir petal
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we will tell it which software to use:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;touch petal/.tool-versions
cat &amp;lt;&amp;lt;EOF &amp;gt;&amp;gt;petal/.tool-versions
erlang 24.2.2
elixir 1.13.3-otp-24
Postgres 14.2
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-new-phoenix-project&#34;&gt;Create a new Phoenix Project&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now you can simply do:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mix phx.new petal --live
cd petal
mix ecto.create
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;assuming all is good lets configure git:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git init
git add .
git commit -m &amp;quot;initial Phoneix install with LiveView&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;credo&#34;&gt;credo&lt;/h2&gt;
&lt;p&gt;add credo to mix.exs&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{:credo, &amp;quot;~&amp;gt; 1.6&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;configure credo&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix deps.get
mix credo gen.config
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;install--test-alpine-js&#34;&gt;install &amp;amp; test Alpine JS&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=vZBHkvTAb2U&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=vZBHkvTAb2U&lt;/a&gt;

&lt;a href=&#34;https://sergiotapia.com/phoenix-160-liveview-esbuild-tailwind-jit-alpinejs-a-brief-tutorial&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://sergiotapia.com/phoenix-160-liveview-esbuild-tailwind-jit-alpinejs-a-brief-tutorial&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd assets
npm install alpinejs
cd ..
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now change &lt;code&gt;app.js&lt;/code&gt; is to require our new setup:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;# assets/js/app.js
// .. after the app.scss import add:
import Alpine from &amp;quot;alpinejs&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;still in &lt;code&gt;assets/js/app.js&lt;/code&gt; find:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let csrfToken = document.querySelector(&amp;quot;meta[name=&#39;csrf-token&#39;]&amp;quot;).getAttribute(&amp;quot;content&amp;quot;)
let liveSocket = new LiveSocket(&amp;quot;/live&amp;quot;, Socket, {params: {_csrf_token: csrfToken}})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and change to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// after all the imports
window.Alpine = Alpine;
Alpine.start();
let hooks = {};
let csrfToken = document.querySelector(&amp;quot;meta[name=&#39;csrf-token&#39;]&amp;quot;).getAttribute(&amp;quot;content&amp;quot;)
let liveSocket = new LiveSocket(&amp;quot;/live&amp;quot;, Socket, {
  params: { _csrf_token: csrfToken },
  hooks: hooks,
  dom: {
    onBeforeElUpdated(from, to) {
      if (from._x_dataStack) {
        window.Alpine.clone(from, to);
      }
    },
  },
});

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;TEST by adding to the end of: &lt;code&gt;lib/petal_web/live/page_live.html.leex&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;&amp;lt;section&amp;gt;
  &amp;lt;h2&amp;gt;Alpine JS Installed&amp;lt;/h2&amp;gt;
  &amp;lt;div x-data=&amp;quot;{name:&#39;&#39;}&amp;quot;&amp;gt;
    &amp;lt;label for=&amp;quot;name&amp;quot;&amp;gt;Name:&amp;lt;/label&amp;gt;
    &amp;lt;input id=&amp;quot;name&amp;quot; type=&amp;quot;text&amp;quot; x-model=&amp;quot;name&amp;quot; /&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;br&amp;gt;&amp;lt;b&amp;gt;&amp;lt;em&amp;gt;Output:&amp;lt;/em&amp;gt;&amp;lt;/b&amp;gt; &amp;lt;span x-text=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test with:
&lt;code&gt;mix phx.server&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;when typing the name should appear below!&lt;/p&gt;
&lt;p&gt;let&amp;rsquo;s snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;phoenix with alpine js&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;integrating-tailwind-into-phoenix&#34;&gt;Integrating Tailwind into phoenix&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=vZBHkvTAb2U&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=vZBHkvTAb2U&lt;/a&gt;

&lt;a href=&#34;https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix&lt;/a&gt;

&lt;a href=&#34;https://sergiotapia.com/phoenix-160-liveview-esbuild-tailwind-jit-alpinejs-a-brief-tutorial&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://sergiotapia.com/phoenix-160-liveview-esbuild-tailwind-jit-alpinejs-a-brief-tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;lets install tailwind:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd assets
npm install autoprefixer postcss postcss-import postcss-cli tailwindcss --save-dev
cd ..
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;comment out &lt;code&gt;import &amp;quot;../css/app.css&amp;quot;&lt;/code&gt; to avoid pipeline compilation conflicts&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// assets/js/app.js
// We import the CSS which is extracted to its own file by esbuild.
// Remove this line if you add a your own CSS build pipeline (e.g postcss).
// import &amp;quot;../css/app.css&amp;quot;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now create &amp;amp; configure postcss.config.js&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat &amp;lt;&amp;lt;EOF&amp;gt;assets/postcss.config.js
module.exports = {
  plugins: {
    &amp;quot;postcss-import&amp;quot;: {},
    tailwindcss: {},
    autoprefixer: {},
  }
}
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now configure tailwind with (to purge *.js, *.eex, *.leex, *.heex files)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;cat &amp;lt;&amp;lt;EOF &amp;gt;assets/tailwind.config.js
module.exports = {
  mode: &amp;quot;jit&amp;quot;,
  purge: [
    &amp;quot;./js/**/*.js&amp;quot;,
    &amp;quot;../lib/*_web/**/*.*ex&amp;quot;
  ],
  theme: {
    extend: {},
  },
  variants: {
    extend: {},
  },
  plugins: [],
};

EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in &lt;code&gt;config/dev.exs&lt;/code&gt; update the watcher with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;# config/dev.exs
watchers: [
  esbuild: {Esbuild, :install_and_run, [:default, ~w(--sourcemap=inline --watch)]},
  npx: [
    &amp;quot;tailwindcss&amp;quot;,
    &amp;quot;--input=css/app.css&amp;quot;,
    &amp;quot;--output=../priv/static/assets/app.css&amp;quot;,
    &amp;quot;--postcss&amp;quot;,
    &amp;quot;--watch&amp;quot;,
    cd: Path.expand(&amp;quot;../assets&amp;quot;, __DIR__)
  ]
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to BUILD ASSETS in Production add in &lt;code&gt;deps/phoenix/package.json&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;scripts&amp;quot;: {
  &amp;quot;deploy&amp;quot;: &amp;quot;NODE_ENV=production tailwindcss --postcss --minify --input=css/app.css --output=../priv/static/assets/app.css&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and change this to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  &amp;quot;scripts&amp;quot;: {
    &amp;quot;deploy&amp;quot;: &amp;quot;NODE_ENV=production webpack --mode production&amp;quot;,
    &amp;quot;watch&amp;quot;: &amp;quot;webpack --mode development --watch&amp;quot;
  },
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we will create a file for our custom styles the &lt;code&gt;assets/css/default-styles.css&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# assuming you are in the root directory
touch assets/css/default-styles.css
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s also create our a custom component (we will make buttons for a counter to be sure tailwind and aplineJS are playing well together):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;# assuming you are still in the assets directory on the cli
mkdir assets/css/components
touch assets/css/components/buttons.css
cat &amp;lt;&amp;lt;EOF &amp;gt;assets/css/components/buttons.css
@layer components {
  .btn-redish {
    @apply bg-red-300 hover:bg-red-600 text-blue-800 font-bold py-2 px-4 rounded;
  }
  .btn-greenish {
    @apply bg-green-300 hover:bg-green-600 text-blue-800 font-bold py-2 px-4 rounded;
  }
}
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now will will configure Phoenix to load Tailwind, our custom-styles and our custom-components &amp;ndash; DO THIS AT THE TOP OF the file &lt;code&gt;assets/css/app.scss&lt;/code&gt; (@imports must be before all else):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* Import tailwind - with postcss-import installed */
@import &amp;quot;tailwindcss/base&amp;quot;;
@import &amp;quot;tailwindcss/components&amp;quot;;
@import &amp;quot;tailwindcss/utilities&amp;quot;;

/* custom styles - put after base imports! */
@import &amp;quot;./default-styles.css&amp;quot;;
/* import custom components */
@import &amp;quot;./components/buttons.css&amp;quot;;
/* default phoenix styles - eventually remove */
@import &amp;quot;./phoenix.css&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;add a test html from tailwind to the end of: &lt;code&gt;lib/petal_web/live/page_live.html.leex&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;&amp;lt;section class=&amp;quot;grid grid-cols-1 gap-4&amp;quot;&amp;gt;
	&amp;lt;!-- tailwind text --&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;h2 class=&amp;quot;text-red-500 text-5xl font-bold text-center&amp;quot;&amp;gt;Tailwind CSS with Alpine JS Dropdown&amp;lt;/h2&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;!-- alpinejs dropdown test --&amp;gt;
	&amp;lt;div x-data=&amp;quot;{ open: false }&amp;quot; class=&amp;quot;relative text-left&amp;quot;&amp;gt;
  	&amp;lt;button
  					@click=&amp;quot;open = !open&amp;quot;
  					@keydown.escape.window=&amp;quot;open = false&amp;quot;
  					@click.away=&amp;quot;open = false&amp;quot;
  					class=&amp;quot;flex items-center h-8 pl-3 pr-2 border border-black focus:outline-none&amp;quot;&amp;gt;
  			&amp;lt;span class=&amp;quot;text-sm leading-none&amp;quot;&amp;gt;
  					Options
  			&amp;lt;/span&amp;gt;
  			&amp;lt;svg class=&amp;quot;w-4 h-4 mt-px ml-2&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; viewBox=&amp;quot;0 0 20 20&amp;quot; fill=&amp;quot;currentColor&amp;quot;&amp;gt;
  					&amp;lt;path fill-rule=&amp;quot;evenodd&amp;quot; d=&amp;quot;M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z&amp;quot; clip-rule=&amp;quot;evenodd&amp;quot; /&amp;gt;
  			&amp;lt;/svg&amp;gt;
  	&amp;lt;/button&amp;gt;
  	&amp;lt;div
  					x-cloak
  					x-show=&amp;quot;open&amp;quot;
  					x-transition:enter=&amp;quot;transition ease-out duration-100&amp;quot;
  					x-transition:enter-start=&amp;quot;transform opacity-0 scale-95&amp;quot;
  					x-transition:enter-end=&amp;quot;transform opacity-100 scale-100&amp;quot;
  					x-transition:leave=&amp;quot;transition ease-in duration-75&amp;quot;
  					x-transition:leave-start=&amp;quot;transform opacity-100 scale-100&amp;quot;
  					x-transition:leave-end=&amp;quot;transform opacity-0 scale-95&amp;quot;
  					class=&amp;quot;absolute flex flex-col w-40 mt-1 border border-black shadow-xs&amp;quot;&amp;gt;
  			&amp;lt;a class=&amp;quot;flex items-center h-8 px-3 text-sm hover:bg-gray-200&amp;quot; href=&amp;quot;#&amp;quot;&amp;gt;Settings&amp;lt;/a&amp;gt;
  			&amp;lt;a class=&amp;quot;flex items-center h-8 px-3 text-sm hover:bg-gray-200&amp;quot; href=&amp;quot;#&amp;quot;&amp;gt;Support&amp;lt;/a&amp;gt;
  			&amp;lt;a class=&amp;quot;flex items-center h-8 px-3 text-sm hover:bg-gray-200&amp;quot; href=&amp;quot;#&amp;quot;&amp;gt;Sign Out&amp;lt;/a&amp;gt;
  	&amp;lt;/div&amp;gt;
	&amp;lt;/div&amp;gt;

  &amp;lt;!-- alpinejs counter test --&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;p class=&amp;quot;mt-5 font-bold text-center&amp;quot;&amp;gt;Counter with Component Buttons&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;!--
    If you want a box around the counter use:
    &amp;lt;div class=&amp;quot;flex items-center justify-center h-screen bg-gray-200&amp;quot;&amp;gt;
  --&amp;gt;
  &amp;lt;div class=&amp;quot;mt-10 flex justify-center&amp;quot; x-data=&amp;quot;{ count: 0 }&amp;quot;&amp;gt;
    &amp;lt;button class=&amp;quot;btn-redish&amp;quot; x-on:click=&amp;quot;count--&amp;quot;&amp;gt;Decrement&amp;lt;/button&amp;gt;
    &amp;lt;code&amp;gt;count: &amp;lt;/code&amp;gt;&amp;lt;code x-text=&amp;quot;count&amp;quot;&amp;gt;&amp;lt;/code&amp;gt;
    &amp;lt;button class=&amp;quot;btn-greenish&amp;quot; x-on:click=&amp;quot;count++&amp;quot;&amp;gt;Increment&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;test-with&#34;&gt;Test with&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;iex -S mix phx.server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we should have a dropdown &amp;amp; our colored component buttons on our counter.&lt;/p&gt;
&lt;p&gt;now lets snapshot our PETAL setup:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;PETAL 1.6.x Configured&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;add-a-custom-font&#34;&gt;Add a custom Font&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://experimentingwithcode.com/custom-fonts-with-phoenix-and-tailwind/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://experimentingwithcode.com/custom-fonts-with-phoenix-and-tailwind/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We will download 2 Fonts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Noto Sans - (full international support &amp;amp; very readable):

&lt;a href=&#34;https://google-webfonts-helper.herokuapp.com/fonts/noto-sans?subsets=latin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://google-webfonts-helper.herokuapp.com/fonts/noto-sans?subsets=latin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Quickens Comic (easy to read and fun) -

&lt;a href=&#34;https://graphicgoods.net/downloads/quickens-free-font/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://graphicgoods.net/downloads/quickens-free-font/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;noto-sans&#34;&gt;Noto Sans&lt;/h3&gt;
&lt;p&gt;We will start with Noto - listed on Google fonts from Webfonts Helper&lt;/p&gt;
&lt;p&gt;Copy the CSS from the website (prefer modern browswers if possible) - update the Customize folder prefix&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;mkdir -p assets/vendor/fonts/NotoSans
cat &amp;lt;&amp;lt;EOF&amp;gt;assets/vendor/fonts/NotoSans/noto_sans.css
/* noto-sans-regular - latin-ext_latin */
@font-face {
  font-family: &#39;Noto Sans&#39;;
  font-style: normal;
  font-weight: 400;
  src: local(&#39;&#39;),
       url(&#39;../fonts/NotoSans/noto-sans-v25-latin-ext_latin-regular.woff2&#39;) format(&#39;woff2&#39;), /* Chrome 26+, Opera 23+, Firefox 39+ */
       url(&#39;../fonts/NotoSans/noto-sans-v25-latin-ext_latin-regular.woff&#39;) format(&#39;woff&#39;); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */
}
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;quickens-otf&#34;&gt;Quickens (otf)&lt;/h3&gt;
&lt;p&gt;Download and convert the font at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://transfonter.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://transfonter.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://onlinefontconverter.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://onlinefontconverter.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.fontsquirrel.com/tools/webfont-generator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.fontsquirrel.com/tools/webfont-generator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;mkdir -p assets/vendor/fonts/Quickens
cat &amp;lt;&amp;lt;EOF&amp;gt;assets/vendor/fonts/Quickens/quickens.css
/* otf not recommended - convert the font at:
  * https://transfonter.org/
  * https://onlinefontconverter.com/
  * https://www.fontsquirrel.com/tools/webfont-generator

@font-face {
  font-family: &#39;Quickens&#39;;
  font-style: normal;
  font-weight: 400;
  src: local(&#39;&#39;),
       url(&#39;quickens-regular.otf&#39;) format(&#39;opentype&#39;),
       url(&#39;quickens-rough.otf&#39;) format(&#39;opentype&#39;);
} */

@font-face {
  font-family: &#39;Quickens&#39;;
  font-style: normal;
  font-weight: 400;
  src: local(&#39;&#39;),
       url(&#39;quickens_regular-webfont.woff2&#39;) format(&#39;woff2&#39;), /* Chrome 26+, Opera 23+, Firefox 39+ */
       url(&#39;quickens_regular-webfont.woff&#39;) format(&#39;woff&#39;); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */
}

@font-face {
  font-family: &#39;QuickensRough&#39;;
  font-style: normal;
  font-weight: 400;
  src: local(&#39;&#39;),
       url(&#39;quickens_rough-webfont.woff2&#39;) format(&#39;woff2&#39;), /* Chrome 26+, Opera 23+, Firefox 39+ */
       url(&#39;quickens_rough-webfont.woff&#39;) format(&#39;woff&#39;); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */
}
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;add-fonts-to-html&#34;&gt;Add Fonts to HTML&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;# /lib/fonts_web/templates/layout/root.html.heex
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;/&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=edge&amp;quot;/&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;/&amp;gt;
    &amp;lt;%= csrf_meta_tag() %&amp;gt;
    &amp;lt;%= live_title_tag assigns[:page_title] || &amp;quot;SlackerPetal&amp;quot;, suffix: &amp;quot; Â· Phoenix Framework&amp;quot; %&amp;gt;
    &amp;lt;!-- add font here --&amp;gt;
    &amp;lt;link phx-track-static rel=&amp;quot;stylesheet&amp;quot; href={Routes.static_path(@conn, &amp;quot;/assets/vendor/fonts/NotoSans/noto_sans.css&amp;quot;)}/&amp;gt;
    &amp;lt;link phx-track-static rel=&amp;quot;stylesheet&amp;quot; href={Routes.static_path(@conn, &amp;quot;/assets/vendor/fonts/NotoSerif/noto_serif.css&amp;quot;)}/&amp;gt;
    &amp;lt;link phx-track-static rel=&amp;quot;stylesheet&amp;quot; href={Routes.static_path(@conn, &amp;quot;/assets/vendor/fonts/Quickens/quickens.css&amp;quot;)}/&amp;gt;
    &amp;lt;!-- end custom fonts --&amp;gt;
    &amp;lt;link phx-track-static rel=&amp;quot;stylesheet&amp;quot; href={Routes.static_path(@conn, &amp;quot;/assets/app.css&amp;quot;)}/&amp;gt;
    &amp;lt;!-- change this from app.js to js/app.js --&amp;gt;
    &amp;lt;%# &amp;lt;script defer phx-track-static type=&amp;quot;text/javascript&amp;quot; src={Routes.static_path(@conn, &amp;quot;/assets/app.js&amp;quot;)}&amp;gt;&amp;lt;/script&amp;gt; %&amp;gt;
    &amp;lt;script defer phx-track-static type=&amp;quot;text/javascript&amp;quot; src={Routes.static_path(@conn, &amp;quot;/assets/js/app.js&amp;quot;)}&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;header&amp;gt;
      &amp;lt;section class=&amp;quot;container&amp;quot;&amp;gt;
        &amp;lt;nav&amp;gt;
          &amp;lt;ul&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://hexdocs.pm/phoenix/overview.html&amp;quot;&amp;gt;Get Started&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;%= if function_exported?(Routes, :live_dashboard_path, 2) do %&amp;gt;
              &amp;lt;li&amp;gt;&amp;lt;%= link &amp;quot;LiveDashboard&amp;quot;, to: Routes.live_dashboard_path(@conn, :home) %&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;% end %&amp;gt;
          &amp;lt;/ul&amp;gt;
        &amp;lt;/nav&amp;gt;
        &amp;lt;a href=&amp;quot;https://phoenixframework.org/&amp;quot; class=&amp;quot;phx-logo&amp;quot;&amp;gt;
          &amp;lt;img src={Routes.static_path(@conn, &amp;quot;/images/phoenix.png&amp;quot;)} alt=&amp;quot;Phoenix Framework Logo&amp;quot;/&amp;gt;
        &amp;lt;/a&amp;gt;
      &amp;lt;/section&amp;gt;
    &amp;lt;/header&amp;gt;
    &amp;lt;%= @inner_content %&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OOPS
&lt;code&gt;(Phoenix.Router.NoRouteError) no route found for GET /assets/vendor/fonts/NotoSerif/noto_serif.css&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;update-the-esbuild-configuration&#34;&gt;Update the esbuild configuration&lt;/h3&gt;
&lt;p&gt;update args in&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# /config/config.exs
# Configure esbuild (the version is required)
config :esbuild,
  version: &amp;quot;0.12.18&amp;quot;,
  default: [
    args: ~w(js/app.js vendor/fonts/NotoSans/noto_sans.css vendor/fonts/Quickens/quickens.css --bundle --loader:.woff2=file --loader:.woff=file --target=es2016 --outdir=../priv/static/assets),
    cd: Path.expand(&amp;quot;../assets&amp;quot;, __DIR__),
    env: %{&amp;quot;NODE_PATH&amp;quot; =&amp;gt; Path.expand(&amp;quot;../deps&amp;quot;, __DIR__)}
  ]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;update-the-tailwind-configuration&#34;&gt;Update the Tailwind configuration&lt;/h3&gt;
&lt;p&gt;The final step is to update Tailwind (set NotoSans to the default font &amp;amp; make quickens available)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;# /assets/tailwind.config.js
const defaultTheme = require(&#39;tailwindcss/defaultTheme&#39;)

module.exports = {
  mode: &#39;jit&#39;,
  purge: [
    &#39;./js/**/*.js&#39;,
    &#39;../lib/*_web/**/*.*ex&#39;
  ],
  theme: {
    extend: {
      fontFamily: {
        sans: [&#39;NotoSans var&#39;, ...defaultTheme.fontFamily.sans],
        quicken: [&#39;Quickens&#39;]
      },
    },
  },
  variants: {
    extend: {},
  },
  plugins: [],
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;resources-16x&#34;&gt;Resources (1.6.x)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=vZBHkvTAb2U&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=vZBHkvTAb2U&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://sergiotapia.com/phoenix-160-liveview-esbuild-tailwind-jit-alpinejs-a-brief-tutorial&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://sergiotapia.com/phoenix-160-liveview-esbuild-tailwind-jit-alpinejs-a-brief-tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://thinkingelixir.com/petal-stack-in-elixir/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://thinkingelixir.com/petal-stack-in-elixir/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://larainfo.com/blogs/build-simple-count-app-using-apline-js-with-tailwind-css&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://larainfo.com/blogs/build-simple-count-app-using-apline-js-with-tailwind-css&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://fullstackphoenix.com/tutorials/combine-phoenix-liveview-with-alpine-js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://fullstackphoenix.com/tutorials/combine-phoenix-liveview-with-alpine-js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.cogini.com/blog/using-asdf-with-elixir-and-phoenix/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.cogini.com/blog/using-asdf-with-elixir-and-phoenix/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://tailwindcss.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://tailwindcss.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/alpinejs/alpine&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/alpinejs/alpine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/tailwindlabs/tailwindcss&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/tailwindlabs/tailwindcss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://experimentingwithcode.com/custom-fonts-with-phoenix-and-tailwind/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://experimentingwithcode.com/custom-fonts-with-phoenix-and-tailwind/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://fullstackphoenix.com/tutorials/add-tailwind-html-generators-in-phoenix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://fullstackphoenix.com/tutorials/add-tailwind-html-generators-in-phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://elixirforum.com/t/how-do-i-use-a-custom-font-with-phoenix-1-6-and-esbuild/43791/16&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://elixirforum.com/t/how-do-i-use-a-custom-font-with-phoenix-1-6-and-esbuild/43791/16&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;older-resources&#34;&gt;Older Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=o4Prej0wIZA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=o4Prej0wIZA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;http://blog.pthompson.org/alpine-js-and-liveview&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://blog.pthompson.org/alpine-js-and-liveview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://fullstackphoenix.com/tutorials/get-started-with-tailwind-in-phoenix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://fullstackphoenix.com/tutorials/get-started-with-tailwind-in-phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://fullstackphoenix.com/tutorials/combine-phoenix-liveview-with-alpine-js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://fullstackphoenix.com/tutorials/combine-phoenix-liveview-with-alpine-js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://medium.com/mindvalley-technology/how-to-add-tailwindcss-to-your-phoenix-project-e2250ad31ace&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://medium.com/mindvalley-technology/how-to-add-tailwindcss-to-your-phoenix-project-e2250ad31ace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://thinkingelixir.com/podcast-episodes/021-tailwind-css-alpine-js-and-liveview-with-patrick-thompson/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://thinkingelixir.com/podcast-episodes/021-tailwind-css-alpine-js-and-liveview-with-patrick-thompson/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Phoenix 1.5 authentication with POW</title>
      <link>https://btihen.me/post_elixir_phoenix/phoenix_1_5_authentication_pow/</link>
      <pubDate>Sun, 25 Apr 2021 01:01:53 +0200</pubDate>
      <guid>https://btihen.me/post_elixir_phoenix/phoenix_1_5_authentication_pow/</guid>
      <description>&lt;h2 id=&#34;auth&#34;&gt;Auth&lt;/h2&gt;
&lt;p&gt;Auth with POW&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=hnD0Z0LGMIk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=hnD0Z0LGMIk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.skcript.com/svr/using-bamboo-to-send-emails-in-phoenix/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.skcript.com/svr/using-bamboo-to-send-emails-in-phoenix/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.kabisa.nl/tech/real-world-phoenix-lets-auth-some-users/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.kabisa.nl/tech/real-world-phoenix-lets-auth-some-users/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-1/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.kabisa.nl/tech/real-world-phoenix-sign-up-flow-spa-style-with-liveview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.kabisa.nl/tech/real-world-phoenix-sign-up-flow-spa-style-with-liveview/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://medium.com/@andreichernykh/phoenix-simple-authentication-authorization-in-step-by-step-tutorial-form-dc93ea350153&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://medium.com/@andreichernykh/phoenix-simple-authentication-authorization-in-step-by-step-tutorial-form-dc93ea350153&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;POW and LiveViews&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://dev.to/oliverandrich/how-to-connect-pow-and-live-view-in-your-phoenix-project-1ga1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dev.to/oliverandrich/how-to-connect-pow-and-live-view-in-your-phoenix-project-1ga1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Auth with auth.gen&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://elixircasts.io/using-phx_gen_auth-for-phoenix-authentication&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://elixircasts.io/using-phx_gen_auth-for-phoenix-authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-phx-gen-auth-part-1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-phx-gen-auth-part-1/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-phx-gen-auth-part-2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-phx-gen-auth-part-2/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://fullstackphoenix.com/tutorials/combining-authentication-solutions-with-guardian-and-phx-gen-auth&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://fullstackphoenix.com/tutorials/combining-authentication-solutions-with-guardian-and-phx-gen-auth&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Auth with PubSub&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://curiosum.dev/blog/elixir-phoenix-liveview-messenger-part-3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://curiosum.dev/blog/elixir-phoenix-liveview-messenger-part-3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Auth with Email&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://hex.pm/packages/bamboo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://hex.pm/packages/bamboo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://hexdocs.pm/bamboo_smtp/readme.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://hexdocs.pm/bamboo_smtp/readme.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://elixircasts.io/sending-email-with-bamboo-part-1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://elixircasts.io/sending-email-with-bamboo-part-1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://elixircasts.io/sending-email-with-bamboo-part-2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://elixircasts.io/sending-email-with-bamboo-part-2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://devato.com/post/use-bamboo-to-send-email-in-phoenix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://devato.com/post/use-bamboo-to-send-email-in-phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.kabisa.nl/tech/real-world-phoenix-lets-send-some-emails/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.kabisa.nl/tech/real-world-phoenix-lets-send-some-emails/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;General Auth Principles

&lt;a href=&#34;https://nithinbekal.com/posts/phoenix-authentication/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://nithinbekal.com/posts/phoenix-authentication/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;mail-in-test-env&#34;&gt;Mail in Test Env&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/mailhog/MailHog&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/mailhog/MailHog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://mailcatcher.me/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://mailcatcher.me/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Pow has the advantage that it updates security patches &amp;ndash; since its a well maintained library.&lt;/p&gt;
&lt;p&gt;This repo can be found at: 
&lt;a href=&#34;https://github.com/btihen/phoenix_1_5_pow_auth_config&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/btihen/phoenix_1_5_pow_auth_config&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Get the latest version from: 
&lt;a href=&#34;https://hex.pm/packages/pow&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://hex.pm/packages/pow&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;{:pow, &amp;quot;~&amp;gt; 1.0&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install the dependency:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mix deps.get
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install POW:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mix pow.install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets verify all is good with the install:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mix deps.compile
mix help | grep pow
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now hopefully you see some new &lt;code&gt;pow&lt;/code&gt; commands&lt;/p&gt;
&lt;h2 id=&#34;configure-pow&#34;&gt;Configure Pow&lt;/h2&gt;
&lt;p&gt;There are three files you&amp;rsquo;ll need to configure first before you can use Pow.&lt;/p&gt;
&lt;p&gt;First, append this to &lt;code&gt;config/config.exs&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;config :fare, :pow,
  user: Fare.Users.User,
  repo: Fare.Repo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, add &lt;code&gt;Pow.Plug.Session&lt;/code&gt; plug to &lt;code&gt;lib/fare_web/endpoint.ex&lt;/code&gt; after &lt;code&gt;plug Plug.Session&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;defmodule FareWeb.Endpoint do
  use Phoenix.Endpoint, otp_app: :fare   # add this line HERE!

  # ...

  plug Plug.Session, @session_options
  plug Pow.Plug.Session, otp_app: :fare  # add this line HERE!
  plug FareWeb.Router
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Last, update &lt;code&gt;lib/fare_web/router.ex&lt;/code&gt; with the Pow routes - this first time we need to do a little extra config:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;  pipeline :api do
    plug :accepts, [&amp;quot;json&amp;quot;]
  end
  scope &amp;quot;/&amp;quot;, MyAppWeb do
    pipe_through [:browser, :protected]

    # Add your protected routes here
  end

  scope &amp;quot;/&amp;quot;, MyAppWeb do
    pipe_through :browser

    live &amp;quot;/&amp;quot;, PageLive, :index
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Should now look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;  pipeline :api do
    plug :accepts, [&amp;quot;json&amp;quot;]
  end

  pipeline :protected do
    plug Pow.Plug.RequiredAuthentication,
          error_handler: Pow.Phoenix.PlugErrorHandler
  end

  scope &amp;quot;/&amp;quot; do
    pipe_through :browser

    pow_routes()
  end

  scope &amp;quot;/&amp;quot;, MyAppWeb do
    pipe_through [:browser, :protected]

    # Add your protected routes here
    resources &amp;quot;/tasks&amp;quot;, TaskController
  end

  scope &amp;quot;/&amp;quot;, MyAppWeb do
    pipe_through :browser

    live &amp;quot;/&amp;quot;, PageLive, :index
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets check the routes - that all is well configured:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mix phx.routes | grep pow
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hopefully you see some new pow routes.&lt;/p&gt;
&lt;p&gt;Now we can migrate to create our users table:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mix ecto.migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if we start phoenix:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mix phx.server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and open phoenix: &lt;code&gt;localhost:4000&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;pow-user-links&#34;&gt;POW user Links&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Notice there is no menu option to login - lets build a simple signup/signin/logout link.&lt;/p&gt;
&lt;p&gt;In root.html.eex find &lt;code&gt;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://hexdocs.pm/phoenix/overview.html&amp;quot;&amp;gt;Get Started&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/code&gt; and we will replace it with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;            &amp;lt;%= if Pow.Plug.current_user(@conn) do %&amp;gt;
              &amp;lt;li&amp;gt;
                &amp;lt;%= link &amp;quot;#{@current_user.email}&amp;quot;, to: Routes.pow_registration_path(@conn, :edit) %&amp;gt;
              &amp;lt;/li&amp;gt;
              &amp;lt;li&amp;gt;
                &amp;lt;%= link &amp;quot;Sign-out&amp;quot;, to: Routes.pow_session_path(@conn, :delete), method: :delete %&amp;gt;
              &amp;lt;/li&amp;gt;
            &amp;lt;% else %&amp;gt;
              &amp;lt;li&amp;gt;&amp;lt;%= link &amp;quot;Sign-in&amp;quot;, to: Routes.pow_session_path(@conn, :new) %&amp;gt;&amp;lt;/li&amp;gt;
              &amp;lt;li&amp;gt;&amp;lt;%= link &amp;quot;Register&amp;quot;, to: Routes.pow_registration_path(@conn, :new) %&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now reload and try it out:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;you should be able to register&lt;/li&gt;
&lt;li&gt;sign-out&lt;/li&gt;
&lt;li&gt;sign in&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;customizable-login-pages&#34;&gt;Customizable Login pages&lt;/h2&gt;
&lt;p&gt;Generate the pages to customize with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mix pow.phoenix.gen.templates
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now be sure to change the config in &lt;code&gt;config/confix.ex&lt;/code&gt; from:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;config :my_app, :pow,
  user: MyApp.Users.User,
  repo: Fare.Repo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;config :my_app, :pow,
  user: MyApp.Users.User,
  repo: MyApp.Repo,
  web_module: MyAppWeb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Without updating the config the newly generated pages won&amp;rsquo;t be used!&lt;/p&gt;
&lt;p&gt;The new templates to modify are found in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lib/fare_web/templates/pow/registration&lt;/code&gt; &amp;amp;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lib/fare_web/templates/pow/session&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now make a small change to the pages to ensure all works.&lt;/p&gt;
&lt;h2 id=&#34;create-a-restricted-user-page&#34;&gt;Create a restricted user page&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=hnD0Z0LGMIk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=hnD0Z0LGMIk&lt;/a&gt;

&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Create a normal html page first:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mix phx.gen.html Tasks Task tasks description:string completed:boolean
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;BE SURE TO PUT the new route in the &lt;code&gt;protected&lt;/code&gt; area of the routes file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;# lib/fare_web/router.ex
  scope &amp;quot;/&amp;quot;, MyAppWeb do
    pipe_through [:browser, :protected]

    # Add your protected routes here
    resources &amp;quot;/tasks&amp;quot;, TaskController
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now of course run the migration:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mix ecto.migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now &lt;code&gt;/tasks&lt;/code&gt; should only be availble to signed in users.  Be sure you are logged out and cannot get to the &lt;code&gt;/tasks&lt;/code&gt; route (and infact are redirected to sign-in). And once logged in the page works as expected.&lt;/p&gt;
&lt;h2 id=&#34;extensions&#34;&gt;Extensions&lt;/h2&gt;
&lt;h3 id=&#34;persistent-login-sessions-remember-me&#34;&gt;Persistent Login Sessions (Remember me)&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Currently every time the user closes the browser they are logged out - the login cookie doesn&amp;rsquo;t persist - most users would like the option to change this - with a &lt;code&gt;remember me&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;in &lt;code&gt;config/config.exs&lt;/code&gt; change the &lt;code&gt;:pow&lt;/code&gt; config to look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;config :my_app, :pow,
  user: MyApp.Users.User,
  repo: MyApp.Repo,
  web_module: MyAppWeb,
  # add the following two lines
  extensions: [PowPersistentSession],
  controller_callbacks: Pow.Extension.Phoenix.ControllerCallbacks
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in &lt;code&gt;/lib/my_app_web/endpoint.ex&lt;/code&gt; we need to add the persistent cookie setting immediately after the &lt;code&gt;Pow.Plug.Session&lt;/code&gt; plug and before the routing &lt;code&gt;MyAppWeb.Router&lt;/code&gt; plug &amp;ndash; now the end of the endpoint file should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;  # enable Pow session based authentication
  plug Pow.Plug.Session, otp_app: :warehouse
  # enable Pow persistent sessions
  plug PowPersistentSession.Plug.Cookie
  # routing plug
  plug MyAppWeb.Router
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;just above the login button on the &lt;code&gt;sign-in&lt;/code&gt; page add the following check-box:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;# lib/fare_web/templates/pow/session/new.html.eex
  &amp;lt;%= label f, :persistent_session, &amp;quot;Remember me&amp;quot; %&amp;gt;
  &amp;lt;%= checkbox f, :persistent_session %&amp;gt;

  &amp;lt;div&amp;gt;
    &amp;lt;%= submit &amp;quot;Sign in&amp;quot; %&amp;gt;
  &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;restart Phoenix with: &lt;code&gt;mix phx.server&lt;/code&gt; and now you should be able to close your browser and re-open the link and stay logged in if the &lt;code&gt;remember-me&lt;/code&gt; is clicked.&lt;/p&gt;
&lt;h2 id=&#34;after-logout---go-to-landing-page-after-hook-routing&#34;&gt;After Logout - go to Landing Page (After Hook Routing)&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One little annoying thing is that when we logout we go to the sign-in page instead of the landing page.  We can fix that by adding a call_back_route - you can find all the callback routes at: 
&lt;a href=&#34;https://github.com/danschultzer/pow/blob/master/lib/pow/phoenix/routes.ex&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/danschultzer/pow/blob/master/lib/pow/phoenix/routes.ex&lt;/a&gt; - we will use: the &lt;code&gt;after_sign_out_path&lt;/code&gt; callback.&lt;/p&gt;
&lt;p&gt;To do this we will make a new &lt;code&gt;pow.routes&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;touch lib/warehouse_web/pow/routes.ex
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add the following contents:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;cat &amp;lt;&amp;lt; EOF&amp;gt; lib/my_app_web/pow/routes.ex
defmodule MyAppWeb.Pow.Routes do
  use Pow.Phoenix.Routes
  alias MyAppWeb.Router.Helpers, as: Routes

  def after_sign_out_path(conn), do: Routes.page_path(conn, :index)
end
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now finally update &lt;code&gt;config/confix.exs&lt;/code&gt; by adding &lt;code&gt;routes_backend: MyAppWeb.Pow.Routes&lt;/code&gt; to the &lt;code&gt;:pow&lt;/code&gt; config so now it would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;config :my_app, :pow,
  user: MyApp.Users.User,
  repo: MyApp.Repo,
  web_module: MyAppWeb,
  extensions: [PowPersistentSession],
  controller_callbacks: Pow.Extension.Phoenix.ControllerCallbacks,
  routes_backend: MyAppWeb.Pow.Routes    # add this line
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming all works we will snapshot now!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;on logout go to landing page&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;password-reset-and-email-confirmation&#34;&gt;Password Reset and Email Confirmation&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/pow-auth/pow_assent&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/pow-auth/pow_assent&lt;/a&gt;

&lt;a href=&#34;https://www.youtube.com/watch?v=hnD0Z0LGMIk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=hnD0Z0LGMIk&lt;/a&gt;

&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The following are the possible extensions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PowResetPassword&lt;/li&gt;
&lt;li&gt;PowEmailConfirmation&lt;/li&gt;
&lt;li&gt;PowPersistentSession&lt;/li&gt;
&lt;li&gt;PowInvitation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s start with password reset and email confirmation.&lt;/p&gt;
&lt;p&gt;First we need to do a migration:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mix pow.extension.ecto.gen.migrations --extension PowResetPassword --extension PowEmailConfirmation
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now update the phoenix config &lt;code&gt;config/config.ex&lt;/code&gt; again from:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;config :my_app, :pow,
  user: MyApp.Users.User,
  repo: MyApp.Repo,
  web_module: MyAppWeb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;config :my_app, :pow,
  user: MyApp.Users.User,
  repo: MyApp.Repo,
  web_module: MyAppWeb,
  extensions: [PowPersistentSession, PowResetPassword, PowEmailConfirmation],
  controller_callbacks: Pow.Extension.Phoenix.ControllerCallbacks
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now update the &lt;code&gt;LIB_PATH/users/user.ex&lt;/code&gt; file from:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;defmodule Fare.Users.User do
  use Ecto.Schema
  use Pow.Ecto.Schema

  schema &amp;quot;users&amp;quot; do
    pow_user_fields()

    timestamps()
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;defmodule MyApp.Users.User do
  use Ecto.Schema
  use Pow.Ecto.Schema
  use Pow.Extension.Ecto.Schema,
      extensions: [PowResetPassword, PowEmailConfirmation]

  schema &amp;quot;users&amp;quot; do
    pow_user_fields()

    timestamps()
  end

  def changeset(user_or_changeset, attrs) do
    user_or_changeset
    |&amp;gt; pow_changeset(attrs)
    |&amp;gt; pow_extension_changeset(attrs)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And of course the routes &lt;code&gt;WEB_PATH/router.ex&lt;/code&gt; too - at the top of the file add:
so it looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;defmodule MyAppWeb.Router do
  use MyAppWeb, :router
  use Pow.Phoenix.Router
  use Pow.Extension.Phoenix.Router,
      extensions: [PowResetPassword, PowEmailConfirmation]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And in the pow routes config change from:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;  scope &amp;quot;/&amp;quot; do
    pipe_through :browser

    pow_routes()
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;  scope &amp;quot;/&amp;quot; do
    pipe_through :browser

    pow_routes()
    pow_extension_routes()
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now finally, we need can update any views needed by POW&amp;rsquo;s new extensions with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix pow.extension.phoenix.gen.templates --extension PowResetPassword --extension PowEmailConfirmation
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can update the sign-in page with a reset password button.  We will add the following, to the end of &lt;code&gt;lib/fare_web/templates/pow/session/new.html.eex&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;|
&amp;lt;span&amp;gt;
&amp;lt;%= link &amp;quot;Reset Password&amp;quot;, to: Routes.pow_reset_password_reset_password_path(@conn, :new) %&amp;gt;
&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets be sure we can link to reset password view.&lt;/p&gt;
&lt;p&gt;First we will do our migration:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mix ecto.migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now to to sign-in and see if the reset password link works.
Cool it does, but it we try to use it - it complains it needs email back-end setup.&lt;/p&gt;
&lt;h2 id=&#34;email-backend&#34;&gt;Email backend&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First we will create a mailer function in: &lt;code&gt;lib/my_app_web/pow/pow_mailer.ex&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;mkdir lib/my_app_web/pow/
touch lib/my_app_web/pow/pow_mailer.ex
cat &amp;lt;&amp;lt;EOF &amp;gt; lib/my_app_web/pow/pow_mailer.ex
defmodule FareWeb.Pow.Mailer do
  use Pow.Phoenix.Mailer

  require Logger

  @impl true
  def cast(%{user: user, subject: subject, text: text, html: html}) do
    # Forward Struct to logger - disable/remove when Bamboo configured
    %{to: user.email, subject: subject, text: text, html: html}
  end

  @impl true
  def process(email) do
    # log email sent
    Logger.debug(&amp;quot;E-mail sent: #{inspect email}&amp;quot;)
  end
end
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now that we have an email template we need to tell pow about the mailer with the config: &lt;code&gt;mailer_backend: MyAppWeb.Pow.Mailer&lt;/code&gt; in &lt;code&gt;config/config.exs&lt;/code&gt; so change to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;# config for pow - user authentication
config :my_app, :pow,
  user: MyApp.Users.User,
  repo: MyApp.Repo,
  web_module: MyAppWeb,
  mailer_backend: MyAppWeb.Pow.Mailer,  # add this
  extensions: [PowPersistentSession, PowResetPassword, PowEmailConfirmation],
  controller_callbacks: Pow.Extension.Phoenix.ControllerCallbacks
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now generate the POW mail templates - with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mix pow.extension.phoenix.mailer.gen.templates --extension PowResetPassword --extension PowEmailConfirmation
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Phoenix also needs to know about the mailer templates we will generate so add to &lt;code&gt;lib/my_app_web.ex&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;  def mailer_view do
    quote do
      use Phoenix.View, root: &amp;quot;lib/my_app_web/templates&amp;quot;,
                        namespace: MyAppWeb

      use Phoenix.HTML
    end
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the final config change in &lt;code&gt;config/config.ex&lt;/code&gt; to access our new templates:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;# config for pow - user authentication
config :fare, :pow,
  user: Fare.Users.User,
  repo: Fare.Repo,
  web_module: MyAppWeb,
  web_mailer_module: MyAppWeb,          # add this to access the templates
  mailer_backend: MyAppWeb.Pow.Mailer,
  extensions: [PowPersistentSession, PowResetPassword, PowEmailConfirmation],
  controller_callbacks: Pow.Extension.Phoenix.ControllerCallbacks
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if we resart phoenix and test out reset link - we should see in the logs &amp;lsquo;a pretend sent email&amp;rsquo; - something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[debug] E-mail sent: %{html: &amp;quot;&amp;lt;h3&amp;gt;Hi,&amp;lt;/h3&amp;gt;\n&amp;lt;p&amp;gt;Please use the following link to reset your password:&amp;lt;/p&amp;gt;\n&amp;lt;p&amp;gt;&amp;lt;a href=\&amp;quot;http://localhost:4000/reset-password/SFMyNTY.MTJkNDliZWItZTg2My00ZDM3LTg2YzgtYzE5MDdjMDk5ODgz.kFRCfvdOSeEnupbbujdAKoaCuMXXk91qzZCUMrB43mw\&amp;quot;&amp;gt;http://localhost:4000/reset-password/SFMyNTY.MTJkNDliZWItZTg2My00ZDM3LTg2YzgtYzE5MDdjMDk5ODgz.kFRCfvdOSeEnupbbujdAKoaCuMXXk91qzZCUMrB43mw&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;\n&amp;lt;p&amp;gt;You can disregard this email if you didn&amp;amp;#39;t request a password reset.&amp;lt;/p&amp;gt;&amp;quot;, subject: &amp;quot;Reset password link&amp;quot;, text: &amp;quot;Hi,\n\nPlease use the following link to reset your password:\n\nhttp://localhost:4000/reset-password/SFMyNTY.MTJkNDliZWItZTg2My00ZDM3LTg2YzgtYzE5MDdjMDk5ODgz.kFRCfvdOSeEnupbbujdAKoaCuMXXk91qzZCUMrB43mw\n\nYou can disregard this email if you didn&#39;t request a password reset.\n&amp;quot;, to: &amp;quot;btihen@gmail.com&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;copy the link out of the email in the log:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost:4000/reset-password/SFMyNTY.MTJkNDliZWItZTg2My00ZDM3LTg2YzgtYzE5MDdjMDk5ODgz.kFRCfvdOSeEnupbbujdAKoaCuMXXk91qzZCUMrB43mw
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;into the browser - type a new password and try to login.&lt;/p&gt;
&lt;p&gt;Assuming all works we will snapshot now!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;pow configured to send emails - no sender yet&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;after-logout---go-to-landing-page-after-hook-routing-1&#34;&gt;After Logout - go to Landing Page (After Hook Routing)&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One little annoying thing is that when we logout we go to the sign-in page instead of the landing page.  We can fix that by adding a call_back_route - you can find all the callback routes at: 
&lt;a href=&#34;https://github.com/danschultzer/pow/blob/master/lib/pow/phoenix/routes.ex&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/danschultzer/pow/blob/master/lib/pow/phoenix/routes.ex&lt;/a&gt; - we will use: the &lt;code&gt;after_sign_out_path&lt;/code&gt; callback.&lt;/p&gt;
&lt;p&gt;To do this we will make a new &lt;code&gt;pow.routes&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;touch lib/warehouse_web/pow/routes.ex
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add the following contents:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;cat &amp;lt;&amp;lt; EOF&amp;gt; lib/my_app_web/pow/routes.ex
defmodule MyAppWeb.Pow.Routes do
  use Pow.Phoenix.Routes
  alias MyAppWeb.Router.Helpers, as: Routes

  def after_sign_out_path(conn), do: Routes.page_path(conn, :index)
end
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now finally update &lt;code&gt;config/confix.exs&lt;/code&gt; by adding &lt;code&gt;routes_backend: MyAppWeb.Pow.Routes&lt;/code&gt; to the &lt;code&gt;:pow&lt;/code&gt; config so now it would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;config :my_app, :pow,
  user: MyApp.Users.User,
  repo: MyApp.Repo,
  web_module: MyAppWeb,
  web_mailer_module: MyAppWeb,
  mailer_backend: MyAppWeb.Pow.Mailer,
  routes_backend: MyAppWeb.Pow.Routes,  # Add this line
  controller_callbacks: Pow.Extension.Phoenix.ControllerCallbacks,
  extensions: [PowPersistentSession, PowResetPassword, PowEmailConfirmation]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming all works we will snapshot now!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;on logout go to landing page&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;configure-email-bamboo-with-pow&#34;&gt;Configure Email BAMBOO with POW&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://hexdocs.pm/bamboo/readme.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://hexdocs.pm/bamboo/readme.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.kabisa.nl/tech/real-world-phoenix-lets-send-some-emails/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.kabisa.nl/tech/real-world-phoenix-lets-send-some-emails/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Use Bamboo to do the mailing find the new versions at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://hex.pm/packages/bamboo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://hex.pm/packages/bamboo&lt;/a&gt;
Add to &lt;code&gt;mix.exs&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;    {:bamboo, &amp;quot;~&amp;gt; 2.1&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;get the new dependency:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mix deps.get
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the Test Config we need to configure bamboo with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;# config/test.exs
config :my_app, MyApp.Mailer,
  adapter: Bamboo.TestAdapter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the Dev Config lets setup the in-memory email config&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;# config/dev.exs
config :fare, FareWeb.Pow.Mailer,
  adapter: Bamboo.LocalAdapter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When using &lt;code&gt;Bamboo.LocalAdapter&lt;/code&gt; in dev mode we can view the email (without digging through the log file) using &lt;code&gt;Bamboo.EmailPreviewPlug&lt;/code&gt; - we set this up with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;if Mix.env == :dev do
  forward &amp;quot;/sent_emails&amp;quot;, Bamboo.EmailPreviewPlug
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;rsquo;s setup our mailer to use Bamboo - we will edit:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;# lib/my_app_web/pow/pow_mailer.ex
defmodule MyAppWeb.Pow.Mailer do
  use Pow.Phoenix.Mailer

  # ADDED to use Bamboo
  use Bamboo.Mailer, otp_app: :fare  # Bamboo needs to know the supervisor
  import Bamboo.Email                # provides access to the Bamboo&#39;s methods

  require Logger

  @impl true
  def cast(%{user: user, subject: subject, text: text, html: html}) do
    # ADDED when Bamboo is configured
    new_email(
      to: user.email,
      from: &amp;quot;reading-list@example.com&amp;quot;,
      subject: subject,
      html_body: html,
      text_body: text
    )
  end

  @impl true
  def process(email) do
    # ADDED when Bamboo is configured
    deliver_now(email)

    # check email functionality and contents
    Logger.debug(&amp;quot;E-mail sent: #{inspect email}&amp;quot;)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s register a new account (or reset a password).
Now we can see the sent email at: http://localhost/sent_emails (in dev mode)&lt;/p&gt;
&lt;h2 id=&#34;bamboo-adapters---smtp-config-production-ideas&#34;&gt;Bamboo Adapters - SMTP Config (Production Ideas)&lt;/h2&gt;
&lt;p&gt;Available adapters are listed at: 
&lt;a href=&#34;https://hexdocs.pm/bamboo/readme.html#available-adapters&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://hexdocs.pm/bamboo/readme.html#available-adapters&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Given the number of adapters - here we will configure just SMTP (and learn to trap it while testing)&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.kabisa.nl/tech/real-world-phoenix-lets-send-some-emails/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.kabisa.nl/tech/real-world-phoenix-lets-send-some-emails/&lt;/a&gt;

&lt;a href=&#34;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Use Bamboo to do the mailing find the new versions at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://hex.pm/packages/bamboo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://hex.pm/packages/bamboo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://hex.pm/packages/bamboo_smtp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://hex.pm/packages/bamboo_smtp&lt;/a&gt;
Add to &lt;code&gt;mix.exs&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;    {:bamboo, &amp;quot;~&amp;gt; 2.1&amp;quot;},
    {:bamboo_smtp, &amp;quot;~&amp;gt; 2.1&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now install and setup up: 
&lt;a href=&#34;https://github.com/mailhog/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/mailhog/&lt;/a&gt; (on a MacOS) simply install with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install mailhog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and run mailhog with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mailhog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or if you want mailhog running all the time in the background you can type:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  brew services start mailhog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or you can use: or 
&lt;a href=&#34;https://mailcatcher.me/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://mailcatcher.me/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;These serivices  - listen on &lt;code&gt;localhost:1025&lt;/code&gt; and you can view the email at: http://localhost:8025&lt;/p&gt;
&lt;p&gt;now configure the mail service (in &lt;code&gt;config/dev.exs&lt;/code&gt;) to use Mailhog or Mailcather with Phoenix by adding:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;# config/dev.exs
config :my_app, MyAppWeb.Pow.Mailer,
  adapter: Bamboo.SMTPAdapter,
  server: &amp;quot;localhost&amp;quot;,
  port: 1025
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In production it might look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;# config/config.exs
config :my_app, MyApp.Mailer,
  adapter: Bamboo.SMTPAdapter,
  server: &amp;quot;smtp.domain&amp;quot;,
  hostname: &amp;quot;your.domain&amp;quot;,
  port: 1025,
  username: &amp;quot;your.name@your.domain&amp;quot;, # or {:system, &amp;quot;SMTP_USERNAME&amp;quot;}
  password: &amp;quot;pa55word&amp;quot;, # or {:system, &amp;quot;SMTP_PASSWORD&amp;quot;}
  tls: :if_available, # can be `:always` or `:never`
  allowed_tls_versions: [:&amp;quot;tlsv1&amp;quot;, :&amp;quot;tlsv1.1&amp;quot;, :&amp;quot;tlsv1.2&amp;quot;], # or {:system, &amp;quot;ALLOWED_TLS_VERSIONS&amp;quot;} w/ comma seprated values (e.g. &amp;quot;tlsv1.1,tlsv1.2&amp;quot;)
  ssl: false, # can be `true`
  retries: 1,
  no_mx_lookups: false, # can be `true`
  auth: :if_available # can be `:always`. If your smtp relay requires authentication set it to `:always`.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you will need to start your mail-trap (in a separate cli terminal):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mailhog
# or `mailcather`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when you register a new account or change a password you can see the email at:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;http://localhost:8025
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;customizing---pow-flash-messages&#34;&gt;Customizing - POW Flash messages&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Create a new module for our messages.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;touch lib/my_app_web/pow/messages.ex
cat &amp;lt;&amp;lt;EOF&amp;gt;&amp;gt;lib/my_app_web/pow/messages.ex
defmodule MyAppWeb.Pow.Messages do
  use Pow.Phoenix.Messages
  use Pow.Extension.Phoenix.Messages,  # add extensions in use
    extensions: [PowResetPassword, PowEmailConfirmation]

  import MyAppWeb.Gettext

  # PowMessages - functions defined:
  # https://hexdocs.pm/pow/Pow.Phoenix.Messages.html#summary
  # https://github.com/danschultzer/pow/blob/master/lib/pow/phoenix/messages.ex
  def signed_in(_conn), do: gettext(&amp;quot;Welcome back.&amp;quot;)
  def signed_out(_conn), do: gettext(&amp;quot;Signed out successfullly.&amp;quot;)
  def user_not_authenticated(_conn), do: gettext(&amp;quot;You need to sign in to see this page.&amp;quot;)

  # PowResetPassword - functions defined:
  # https://github.com/danschultzer/pow/blob/master/lib/extensions/reset_password/phoenix/messages.ex
  def invalid_token(_conn), do: &amp;quot;The reset token has expired.&amp;quot;
  def password_has_been_reset(_conn), do: &amp;quot;The password has been updated.&amp;quot;
  def email_has_been_sent(_conn), do: &amp;quot;An email with reset instructions has been sent to you.&amp;quot;

  # PowEmailConfirmation - functions defined:
  # https://github.com/danschultzer/pow/blob/master/lib/extensions/email_confirmation/phoenix/messages.ex
  def email_has_been_confirmed(_conn), do: &amp;quot;The email address has been confirmed.&amp;quot;
  def email_confirmation_failed(_conn), do: &amp;quot;The email address couldn&#39;t be confirmed.&amp;quot;
  def email_confirmation_required(_conn), do: &amp;quot;You need to confirm your e-mail with the link e-mailed to you.&amp;quot;
end
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To be able to use this module we need to tell our config about it - so we update &lt;code&gt;config/config.exs&lt;/code&gt; with &lt;code&gt;messages_backend: FareWeb.Pow.Messages&lt;/code&gt; - so now it looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;config :fare, :pow,
  user: Fare.Users.User,
  repo: Fare.Repo,
  web_module: FareWeb,
  web_mailer_module: FareWeb,
  mailer_backend: Fare.Pow.Mailer,
  routes_backend: FareWeb.Pow.Routes,
  messages_backend: FareWeb.Pow.Messages,  # Add this line
  controller_callbacks: Pow.Extension.Phoenix.ControllerCallbacks,
  extensions: [PowPersistentSession, PowResetPassword, PowEmailConfirmation]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you should see your custom messages!&lt;/p&gt;
&lt;p&gt;let&amp;rsquo;s snapshot this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;allow POW to send custom / i18n messages&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;configure-to-allow-3rd-parties---google-apple-github-etc&#34;&gt;Configure to allow 3rd Parties - Google, Apple, Github, etc.&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/pow-auth/pow_assent&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/pow-auth/pow_assent&lt;/a&gt;

&lt;a href=&#34;https://www.youtube.com/watch?v=hnD0Z0LGMIk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=hnD0Z0LGMIk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First add to the mix file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;    # third party auth
    {:pow_assent, &amp;quot;~&amp;gt; 0.4.10&amp;quot;},
    # recommended for SSL validation with :httpc adapter
    {:certifi, &amp;quot;~&amp;gt; 2.4&amp;quot;},
    {:ssl_verify_fun, &amp;quot;~&amp;gt; 1.1&amp;quot;},
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and of course: &lt;code&gt;mix deps.get&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and install with: &lt;code&gt;mix pow_assent.install&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and now configure &lt;code&gt;lib/fare/users/user.ex&lt;/code&gt; after &lt;code&gt;use Pow.Ecto.Schema&lt;/code&gt; add &lt;code&gt;use PowAssent.Ecto.Schema&lt;/code&gt; so now the top of this file should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;# lib/fare/users/user.ex
defmodule Fare.Users.User do
  use Ecto.Schema
  use Pow.Ecto.Schema
  use PowAssent.Ecto.Schema  # added in this step
  use Pow.Extension.Ecto.Schema,
      extensions: [PowResetPassword, PowEmailConfirmation]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At the top of the &lt;code&gt;lib/fare_web/router.ex&lt;/code&gt; file after &lt;code&gt;use PowAssent.Phoenix.Router&lt;/code&gt; add &lt;code&gt;use PowAssent.Phoenix.Router&lt;/code&gt; - now the top of this file should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;# lib/fare_web/router.ex
defmodule MyAppWeb.Router do
  use MyAppWeb, :router
  use Pow.Phoenix.Router
  use PowAssent.Phoenix.Router
  use Pow.Extension.Phoenix.Router,
      extensions: [PowResetPassword, PowEmailConfirmation]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now after the last pipelines add a new &lt;code&gt;pipeline&lt;/code&gt; and its &lt;code&gt;scope&lt;/code&gt; - its a copy of the &lt;code&gt;:browser&lt;/code&gt; pipeline - without &lt;code&gt;:protect_from_forgery&lt;/code&gt; since that conflicts with &lt;strong&gt;OAuth&lt;/strong&gt; &amp;amp; after &lt;code&gt;pow_routes()&lt;/code&gt; add &lt;code&gt;pow_assent_routes()&lt;/code&gt; so now this section of the routes looks like (when Phoenix is configured for LiveView):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;  pipeline :skip_csrf_protection do
    plug :accepts, [&amp;quot;html&amp;quot;]
    plug :fetch_session
    plug :fetch_live_flash
    plug :put_root_layout, {FareWeb.LayoutView, :root}
    # plug :protect_from_forgery     # conflicts with oauth
    plug :put_secure_browser_headers
  end

  scope &amp;quot;/&amp;quot; do
    pipe_through :skip_csrf_protection

    # this adds new pow routes
    pow_assent_authorization_post_callback_routes()
  end

  scope &amp;quot;/&amp;quot; do
    pipe_through :browser

    pow_routes()
    pow_assent_routes()    # newly added
    pow_extension_routes()
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember to run the new migrations with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mix ecto.migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Generate the PowAssent template too (the page when using this where the user add username and OAuth password from remote site):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mix pow_assent.phoenix.gen.templates
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;setup-remote-oauth-providers-github---for-now&#34;&gt;Setup remote OAuth providers (Github - for now)&lt;/h3&gt;
&lt;p&gt;Go to:

&lt;a href=&#34;https://github.com/settings/applications/new&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/settings/applications/new&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Enter an &lt;strong&gt;Application name&lt;/strong&gt; and enter the &lt;strong&gt;Homepage url&lt;/strong&gt; as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;http://localhost:4000/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the &lt;strong&gt;Authorization callback&lt;/strong&gt; (for our dev environment) as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;http://localhost:4000/auth/github/callback
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Configure Github Credential Secrets&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://hexdocs.pm/elixir/Application.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://hexdocs.pm/elixir/Application.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://devato.com/post/handling-environment-variables-in-phoenix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://devato.com/post/handling-environment-variables-in-phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/44510403/phoenix-import-module-into-config&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://stackoverflow.com/questions/44510403/phoenix-import-module-into-config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/30995743/how-to-get-a-variable-value-from-environment-files-in-phoenix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://stackoverflow.com/questions/30995743/how-to-get-a-variable-value-from-environment-files-in-phoenix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First update &lt;code&gt;.gitignore&lt;/code&gt; with the line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;**/*.secret.exs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then add in our case the &lt;code&gt;dev.secrets.exs&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;touch config/dev.secret.exs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you get your &lt;strong&gt;Client ID&lt;/strong&gt; and &lt;strong&gt;Client secrets&lt;/strong&gt; you can configure  &lt;code&gt;config/dev.secret.exs&lt;/code&gt; with the following config:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;import Config

config :my_app, :pow_assent,
  providers: [
    github: [
      client_id: &amp;quot;REPLACE_WITH_CLIENT_ID&amp;quot;,
      client_secret: &amp;quot;REPLACE_WITH_CLIENT_SECRET&amp;quot;,
      strategy: Assent.Strategy.Github
    ]
  ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now at the END of &lt;code&gt;config/dev.exs&lt;/code&gt; add the line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;import_config &amp;quot;dev.secret.exs&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now at the end of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lib/my_app_web/templates/pow/registration/edit.html.eex&lt;/code&gt; (edit profile),&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lib/my_app_web/templates/pow/registration/new.html.eex&lt;/code&gt; (register),&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lib/fare_web/templates/pow/session/new.html.eex&lt;/code&gt; (sign-in)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;add the following comprehension to list all the configured OAuth log-in links:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;&amp;lt;%=
  for link &amp;lt;- PowAssent.Phoenix.ViewHelpers.provider_links(@conn),
      do: content_tag(:span, link)
%&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;pow readme: 
&lt;a href=&#34;https://hexdocs.pm/pow/README.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://hexdocs.pm/pow/README.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;video tutorial: 
&lt;a href=&#34;https://www.youtube.com/watch?v=hnD0Z0LGMIk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=hnD0Z0LGMIk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;add pubsub 
&lt;a href=&#34;https://curiosum.dev/blog/elixir-phoenix-liveview-messenger-part-3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://curiosum.dev/blog/elixir-phoenix-liveview-messenger-part-3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;add email to pow: 
&lt;a href=&#34;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dev.to/oliverandrich/learn-elixir-and-phoenix-add-authentication-55kl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-1/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://experimentingwithcode.com/phoenix-authentication-with-pow-part-2/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Phoenix LiveView - Simple Real-Time SPA</title>
      <link>https://btihen.me/post_elixir_phoenix/phoenix_1_5_liveview_simple_realtime/</link>
      <pubDate>Sat, 10 Apr 2021 17:01:53 +0200</pubDate>
      <guid>https://btihen.me/post_elixir_phoenix/phoenix_1_5_liveview_simple_realtime/</guid>
      <description>&lt;p&gt;Here is a quick example of how to create a very simple &amp;ldquo;real-time&amp;rdquo;-&amp;ldquo;single-page-app&amp;rdquo; using phoenix-liveview.  This provides the same functionality to as 
&lt;a href=&#34;post_ruby_rails/rails_6_1_hotwire_simple_realtime&#34;&gt;Realtime Rails with Hotwire&lt;/a&gt; - in order to compare.&lt;/p&gt;
&lt;p&gt;The repo can be found here: 
&lt;a href=&#34;https://github.com/btihen/live-tweets&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/btihen/live-tweets&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;create--config-a-project&#34;&gt;create / config a project&lt;/h2&gt;
&lt;p&gt;First we will creat the folder / project location&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir tweets
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we will tell it which software to use:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;touch tweets/.tool-versions
cat &amp;lt;&amp;lt;EOF &amp;gt;&amp;gt;tweets/.tool-versions
erlang 23.3.1
elixir 1.11.4-otp-23
nodejs lts-Fermium
Postgres 13.2
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-new-phoenix-project&#34;&gt;Create a new Phoenix Project&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now you can simply do:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.new tweets --live
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will now get the message:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The directory /Users/btihen/Dropbox/devel/marpori/tweets already exists. Are you sure you want to continue? [Yn]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Say &lt;code&gt;Y&lt;/code&gt; yes.
Say &lt;code&gt;Y&lt;/code&gt; yes again when you see:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Fetch and install dependencies? [Yn]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This can take a few minutes - when done, enter the directory and setup.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd tweets
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Adjust the DB settings as needed in: &lt;code&gt;config/dev.exs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Create the database and lets see if default tests work and we get the start page.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix ecto.create
mix test
mix phx.server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;assuming all is good lets snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init
git add .
git commit -m &amp;quot;initial setup commit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code commit can be seen at: 
&lt;a href=&#34;https://github.com/btihen/live-tweets/commit/2eb9016371db3210eaf3a1cb35e4066e3b67bdbe&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/btihen/live-tweets/commit/2eb9016371db3210eaf3a1cb35e4066e3b67bdbe&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;create-our-tweet-model&#34;&gt;create our tweet model&lt;/h2&gt;
&lt;p&gt;Create this with the generator (notice we are using &lt;code&gt;mix phx.gen.live&lt;/code&gt; not &lt;code&gt;mix phx.gen.html&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.gen.live Messages Post posts body:text
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Change migration to require data - add &lt;code&gt;null: false&lt;/code&gt; to our field so it now looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;# priv/repo/migrations/20210418084643_create_posts.exs
defmodule Tweets.Repo.Migrations.CreatePosts do
  use Ecto.Migration

  def change do
    create table(:posts) do
      add :body, :text, null: false

      timestamps()
    end

  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets update the routes as described by the generator - in &lt;code&gt;lib/tweets_web/router.ex&lt;/code&gt; so the section that looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;  scope &amp;quot;/&amp;quot;, TweetsWeb do
    pipe_through :browser

    live &amp;quot;/&amp;quot;, PageLive, :index
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;should be change to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;  scope &amp;quot;/&amp;quot;, TweetsWeb do
    pipe_through :browser

    # live &amp;quot;/&amp;quot;, PageLive, :index
    live &amp;quot;/&amp;quot;, PostLive.Index, :index
    live &amp;quot;/posts&amp;quot;, PostLive.Index, :index
    live &amp;quot;/posts/new&amp;quot;, PostLive.Index, :new
    live &amp;quot;/posts/:id/edit&amp;quot;, PostLive.Index, :edit

    live &amp;quot;/posts/:id&amp;quot;, PostLive.Show, :show
    live &amp;quot;/posts/:id/show/edit&amp;quot;, PostLive.Show, :edit
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now check our field &lt;code&gt;body&lt;/code&gt; is required in validations &amp;ndash; in our changeset.  We see &lt;code&gt;validate_required([:body])&lt;/code&gt; in the file: &lt;code&gt;lib/tweets/messages/post.ex&lt;/code&gt; - so we are all set.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;  def changeset(post, attrs) do
    post
    |&amp;gt; cast(attrs, [:body])
    |&amp;gt; validate_required([:body])
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So it time to migrate &amp;amp; test:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mix ecto.migrate
mix test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hmm - the tests generator and html use different html standards: to make the tests pass test that phoenix returns &lt;code&gt;can&amp;amp;#39;t be blank&lt;/code&gt; instead of &lt;code&gt;can&amp;amp;apos;t be blank&lt;/code&gt; in &lt;code&gt;test/tweets_web/live/post_live_test.exs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;also change: &lt;code&gt;&amp;quot;Welcome to Phoenix!&amp;quot;&lt;/code&gt; to &lt;code&gt;&amp;quot;Listing Posts&amp;quot;&lt;/code&gt; in &lt;code&gt;test/tweets_web/live/page_live_test.exs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now lets see how our new SPA works:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It works, but we want to list the most recent tweets at the top of the page &amp;ndash; let&amp;rsquo;s investigate &amp;ndash; open &lt;code&gt;lib/tweets_web/live/post_live/index.ex&lt;/code&gt; we see in the &lt;code&gt;mount&lt;/code&gt; command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;# lib/tweets_web/live/post_live/index.ex
  def mount(_params, _session, socket) do
    {:ok, assign(socket, :posts, list_posts())}
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It uses &lt;code&gt;list_posts()&lt;/code&gt; to get the list - so let&amp;rsquo;s change this function.&lt;/p&gt;
&lt;p&gt;Open: &lt;code&gt;lib/tweets/messages.ex&lt;/code&gt; and change:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;# lib/tweets/messages.ex
  def list_posts do
    Repo.all(Post)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;# lib/tweets/messages.ex
 def list_posts do
    Post
      |&amp;gt; order_by(desc: :inserted_at)
      |&amp;gt; Repo.all
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool now our SPA works like we want &amp;ndash; but it isn&amp;rsquo;t real-time between two users / browsers.&lt;/p&gt;
&lt;p&gt;This code can be seen at: 
&lt;a href=&#34;https://github.com/btihen/live-tweets/commit/3f432d7c06d974f9c2349937a35e391dedeb2ad6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/btihen/live-tweets/commit/3f432d7c06d974f9c2349937a35e391dedeb2ad6&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;broadcast-changes-with-pubsub&#34;&gt;Broadcast changes with Pubsub&lt;/h2&gt;
&lt;p&gt;Phoenix uses Websockets to do &lt;code&gt;real-time&lt;/code&gt; communication.  In our &amp;ldquo;context&amp;rdquo; we will create our &lt;code&gt;channel&lt;/code&gt; - the pipeline that the socket uses to send information back and forth to various &amp;ldquo;subscribers&amp;rdquo; - viewers of our page.&lt;/p&gt;
&lt;h3 id=&#34;setup-the-messages-channel&#34;&gt;Setup the &amp;ldquo;Messages&amp;rdquo; Channel&lt;/h3&gt;
&lt;p&gt;We go into: &lt;code&gt;lib/tweets/messages.ex&lt;/code&gt; and at the top of the file add the Broadcast Setup:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;# lib/tweets/messages.ex
defmodule Tweets.Messages do
  @moduledoc &amp;quot;&amp;quot;&amp;quot;
  The Messages context.
  &amp;quot;&amp;quot;&amp;quot;

  import Ecto.Query, warn: false
  alias Tweets.Repo
  alias Tweets.Messages.Post

  # Setup Broadcasting
  @topic inspect(__MODULE__)

  def subscribe do
    Phoenix.PubSub.subscribe(Tweets.PubSub, @topic)
  end

  def notify_subscribers({:ok, post}, event) do
    posts = list_posts()
    Phoenix.PubSub.broadcast(Tweets.PubSub, @topic, {__MODULE__, event, posts})
    {:ok, post}
  end

  def notify_subscribers({:error, post}, event) do
    {:error, post}
  end
  # Setup Broadcasting
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets quickly review this new code:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@topic inspect(__MODULE__)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;makes @topic named &lt;code&gt;Tweets.Messages&lt;/code&gt; - but if we change the module name it changes @topic too.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;subscribe&lt;/code&gt; function - allows us to register our index page with channel created automatically by LiveView.&lt;/p&gt;
&lt;p&gt;We have two &lt;code&gt;notify_subscribers&lt;/code&gt; because we will call these after we do our DB actions - writing to the DB could fail or succeed.  If we have success then we will update all subscribers and the last line tuple passes the results of the interaction back to the actual user.   (Of course we don&amp;rsquo;t need to notify when the DB transaction fails, we only need to pass the message back to the user).&lt;/p&gt;
&lt;h3 id=&#34;subscribing-to-the-messages-channel&#34;&gt;Subscribing to the &amp;lsquo;Messages&amp;rsquo; Channel&lt;/h3&gt;
&lt;p&gt;Now that we have &lt;code&gt;notify_subscribers&lt;/code&gt; that broadcasts &lt;code&gt;Phoenix.PubSub.broadcast(Tweets.PubSub, @topic, {__MODULE__, event, posts})&lt;/code&gt; we need a way to subscribe to this channel and receive these messages in all our index pages.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;# lib/tweets_web/live/post_live/index.ex
defmodule TweetsWeb.PostLive.Index do
  use TweetsWeb, :live_view

  alias Tweets.Messages
  alias Tweets.Messages.Post

  @impl true
  def mount(_params, _session, socket) do
    # register with the channel if connection to LiveView
    if connected?(socket), do: Messages.subscribe()
    {:ok, assign(socket, :posts, list_posts())}
  end

  @impl true
  def handle_info({Messages, &amp;quot;posts-changed&amp;quot;, posts}, socket) do
    socket = assign(socket, :posts, posts)
    {:noreply, socket}
  end
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The important changes are to &lt;strong&gt;subscribe to the channel&lt;/strong&gt; we we have subscribed to our Websocket we do this in the &lt;code&gt;mount&lt;/code&gt; function with &lt;code&gt;if connected?(socket), do: Messages.subscribe()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now we need a way to &lt;strong&gt;recieve information from the channel&lt;/strong&gt; this is done with the &lt;code&gt;handle_info&lt;/code&gt; function - so we will simply take the new list of posts and update the socket and index will take care of the rest &amp;ndash; automatically!&lt;/p&gt;
&lt;h3 id=&#34;sending-messages-to-the-channel&#34;&gt;Sending Messages to the Channel&lt;/h3&gt;
&lt;p&gt;So now to activate our changes - we need to send to the channel via &lt;code&gt;notify_subscribers&lt;/code&gt; when we successfully change something in the Messages &amp;ldquo;post&amp;rdquo; context.  To do this we will make small changes to the create_post, update_post and delete_post functions.  We will add &lt;code&gt;notify_subscribers({status, post}, &amp;quot;posts-changed&amp;quot;)&lt;/code&gt; to the end of each function.  Since we only defined one event &lt;code&gt;&amp;quot;posts-changed&amp;quot;&lt;/code&gt; in our index page &lt;code&gt;handle_info&lt;/code&gt; function &amp;ndash; we will hard-code that into our &lt;code&gt;notify_subscribers&lt;/code&gt; call&lt;/p&gt;
&lt;p&gt;So our simple DB calls in Messages currently looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;# lib/tweets/messages.ex
  def create_post(attrs \\ %{}) do
    %Post{}
      |&amp;gt; Post.changeset(attrs)
      |&amp;gt; Repo.insert()
  end

  def update_post(%Post{} = post, attrs) do
    post
      |&amp;gt; Post.changeset(attrs)
      |&amp;gt; Repo.update()
  end

  def delete_post(%Post{} = post) do
    Repo.delete(post)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now becomes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;# lib/tweets/messages.ex
  def create_post(attrs \\ %{}) do
    {status, post} = %Post{}
                      |&amp;gt; Post.changeset(attrs)
                      |&amp;gt; Repo.insert()
    notify_subscribers({status, post}, &amp;quot;posts-changed&amp;quot;)
  end

  def update_post(%Post{} = post, attrs) do
    {status, post} = post
                      |&amp;gt; Post.changeset(attrs)
                      |&amp;gt; Repo.update()
    notify_subscribers({status, post}, &amp;quot;posts-changed&amp;quot;)
  end

  def delete_post(%Post{} = post) do
    {status, post} = post
                      |&amp;gt; Repo.delete()
    notify_subscribers({status, post}, &amp;quot;posts-changed&amp;quot;)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: in-order to pass the DB transaction information back to the user, we need to capture that information with the tuple: &lt;code&gt;{status, post}&lt;/code&gt; - which notify_subscribers will pass back and will be returned to the user - the returns values will be either &lt;code&gt;{:ok, post}&lt;/code&gt; or &lt;code&gt;{:error, post_changeset}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s be sure we didn&amp;rsquo;t break anything and run our tests again:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ideally, all is still good so lets try our updated app now:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now any changes we make should be seen all users.&lt;/p&gt;
&lt;p&gt;Cool, lets snapshot this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout -b liveview_spa_broadcast_with_pubsub
git add .
git commit -m &amp;quot;add realtime broadcast to all users&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code can be seen at: 
&lt;a href=&#34;https://github.com/btihen/live-tweets/commit/32c179e05cae68c5a2a6d49f54bf5a8dcf4d4dac&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/btihen/live-tweets/commit/32c179e05cae68c5a2a6d49f54bf5a8dcf4d4dac&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;In my mind this is far simpler to setup as a single page app - using the LiveView generator and a little more work to add broadcasting than in Rails.  Converting a Standard Phoenix HTML page to LiveView however is considerably more difficult than Converting a Standard Rails page to Hotwire.  I also find adding advanced features much more straight-forward in LiveView - as you write the event_handlers in you liveview pages and it is very clear what is happening.  In rails you need to know what is happening without being able to see the code.  I also like that LiveView - when it can&amp;rsquo;t find an event - you get lots of errors.  This is very helpful.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Phoenix 1.5 PETAL Stack Setup - w/ asdf</title>
      <link>https://btihen.me/post_elixir_phoenix/phoenix_1_5_petal_setup_with_asdf/</link>
      <pubDate>Sat, 10 Apr 2021 01:01:53 +0200</pubDate>
      <guid>https://btihen.me/post_elixir_phoenix/phoenix_1_5_petal_setup_with_asdf/</guid>
      <description>&lt;p&gt;I have been enjoying the tools associated with Elixir and exploring the frontend. LiveView helps make that more intuitive and when that isn&amp;rsquo;t enough, AlpineJS is a lightweight JS tool with a similar syntax as Vue.&lt;/p&gt;
&lt;h2 id=&#34;install-asdf---and-required-software&#34;&gt;Install asdf - and required software&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://thinkingelixir.com/install-elixir-using-asdf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://thinkingelixir.com/install-elixir-using-asdf/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.cogini.com/blog/using-asdf-with-elixir-and-phoenix/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.cogini.com/blog/using-asdf-with-elixir-and-phoenix/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On a Mac I used Homebrew:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install asdf
echo -e &#39;\n. $(brew --prefix asdf)/asdf.sh&#39; &amp;gt;&amp;gt; ~/.bash_profile
echo -e &#39;\n. $(brew --prefix asdf)/etc/bash_completion.d/asdf.bash&#39; &amp;gt;&amp;gt; ~/.bash_profile
source ~/.bash_profile  # (or open a new terminal)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can install asdf software packages:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;asdf plugin-add erlang
asdf plugin-add elixir
asdf plugin-add nodejs
asdf plugin-add Postgres
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you need to install the desired versions (usually the newest) - currently:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;asdf list all erlang
asdf install erlang 23.3.1

# note the elixir version otp must match the erlang version!
asdf list all elixir
asdf install elixir 1.11.4-otp-23

# asdf install elixir 1.11.4-otp-24
# if you mismatch elixir with erlang you will get errors like:
# {&amp;quot;init terminating in do_boot&amp;quot;,{undef,[{elixir,start_cli,[],[]},{init,start_em,1,[]},{init,do_boot,3,[]}]}}

asdf list all nodejs
asdf install nodejs lts-fermium

asdf list all Postgres
asdf install Postgres 13.2
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;get-the-newest-phoenix-hex-package&#34;&gt;Get the newest Phoenix Hex Package&lt;/h2&gt;
&lt;p&gt;Once you have established you have the requrements - the download the newest version of Phoenix (go to: 
&lt;a href=&#34;https://hexdocs.pm/phoenix/installation.html#phoenix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://hexdocs.pm/phoenix/installation.html#phoenix&lt;/a&gt; to see the newest version) - at the time of this writing its 1.5.8 - be sure its installed using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mix archive.install hex phx_new 1.5.8
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create--config-a-project&#34;&gt;create / config a project&lt;/h2&gt;
&lt;p&gt;First we will creat the folder / project location&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir fenix
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we will tell it which software to use:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;touch fenix/.tool-versions
cat &amp;lt;&amp;lt;EOF &amp;gt;&amp;gt;fenix/.tool-versions
erlang 23.3.1
elixir 1.11.4-otp-23
Postgres 13.2
nodejs lts-Fermium
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-a-new-phoenix-project&#34;&gt;Create a new Phoenix Project&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://carlyleec.medium.com/create-an-elixir-phoenix-app-with-asdf-e918649b4d58&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now you can simply do:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mix phx.new fenix --live
cd fenix
mix ecto.create
mix phx.server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;assuming all is good lets configure git:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git init
git add .
git commit -m &amp;quot;initial Phoneix install with LiveView&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;install--test-alpine-js&#34;&gt;install &amp;amp; test Alpine JS&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://underjord.io/getting-started-with-petal.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://underjord.io/getting-started-with-petal.html&lt;/a&gt;

&lt;a href=&#34;https://dockyard.com/blog/2020/12/21/optimizing-user-experience-with-liveview&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dockyard.com/blog/2020/12/21/optimizing-user-experience-with-liveview&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd assets
npm install alpinejs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now change &lt;code&gt;app.js&lt;/code&gt; is to require our new setup:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# assets/js/app.js
// .. after the app.scss import add:
import Alpine from &amp;quot;alpinejs&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;still in &lt;code&gt;assets/js/app.js&lt;/code&gt; find&lt;code&gt;: &lt;/code&gt;let liveSocket = new LiveSocket(&amp;quot;/live&amp;quot;, Socket, {params: {_csrf_token: csrfToken}})`&lt;/p&gt;
&lt;p&gt;and change to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;let liveSocket =
    new LiveSocket(&amp;quot;/live&amp;quot;,
                    Socket,
                    { params: {_csrf_token: csrfToken},
                      dom: {
                        onBeforeElUpdated(from, to){
                          if(from.__x){ Alpine.clone(from.__x, to) }
                        }
                    } }
                  )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;TEST by adding to the end of: &lt;code&gt;lib/fenix_web/live/page_live.html.leex&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;&amp;lt;section&amp;gt;
  &amp;lt;h2&amp;gt;Alpine JS Installed&amp;lt;/h2&amp;gt;
  &amp;lt;div x-data=&amp;quot;{name:&#39;&#39;}&amp;quot;&amp;gt;
    &amp;lt;label for=&amp;quot;name&amp;quot;&amp;gt;Name:&amp;lt;/label&amp;gt;
    &amp;lt;input id=&amp;quot;name&amp;quot; type=&amp;quot;text&amp;quot; x-model=&amp;quot;name&amp;quot; /&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;br&amp;gt;&amp;lt;b&amp;gt;&amp;lt;em&amp;gt;Output:&amp;lt;/em&amp;gt;&amp;lt;/b&amp;gt; &amp;lt;span x-text=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test with:
&lt;code&gt;mix phx.server&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;when typing the name should appear below!&lt;/p&gt;
&lt;p&gt;let&amp;rsquo;s snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;phoenix with alpine js&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;integrating-tailwind-into-phoenix&#34;&gt;Integrating Tailwind into phoenix&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix&lt;/a&gt;

&lt;a href=&#34;https://fullstackphoenix.com/tutorials/get-started-with-tailwind-in-phoenix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://fullstackphoenix.com/tutorials/get-started-with-tailwind-in-phoenix&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This source gives several options - here we install with &lt;code&gt;postcss-import&lt;/code&gt; (for components from the beginning):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;cd assets
npm install tailwindcss postcss autoprefixer postcss-loader@4.2  postcss-import --save-dev

touch postcss.config.js
cat &amp;lt;&amp;lt;EOF &amp;gt; postcss.config.js
module.exports = {
  plugins: {
    &amp;quot;postcss-import&amp;quot;: {},
    tailwindcss: {},
    autoprefixer: {}
  }
}
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now open: &lt;code&gt;assets/webpack.config.js&lt;/code&gt; and find:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
	test: /\.[s]?css$/,
	use: [
		MiniCssExtractPlugin.loader,
		&#39;css-loader&#39;,
		&#39;sass-loader&#39;,
	],
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;change too (add &lt;code&gt;&#39;postcss-loader&#39;&lt;/code&gt; between &lt;code&gt;&#39;css-loader&#39;&lt;/code&gt; &amp;amp; &lt;code&gt;&#39;sass-loader&#39;&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;{
	test: /\.[s]?css$/,
	use: [
		MiniCssExtractPlugin.loader,
		&#39;css-loader&#39;,
		&#39;postcss-loader&#39;,
		&#39;sass-loader&#39;,
	],
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now initialize tailwind config with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx tailwindcss init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;this creates the file &lt;code&gt;tailwind.config.js&lt;/code&gt; we will replace the &lt;code&gt;purge: [],&lt;/code&gt; section with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;purge: [
    &#39;../lib/**/*.ex&#39;,
    &#39;../lib/**/*.leex&#39;,
    &#39;../lib/**/*.eex&#39;,
    &#39;./js/**/*.js&#39;
  ],
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the fill will look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;module.exports = {
  purge: [
    &#39;../lib/**/*.ex&#39;,
    &#39;../lib/**/*.leex&#39;,
    &#39;../lib/**/*.eex&#39;,
    &#39;./js/**/*.js&#39;
  ],
  darkMode: false, // or &#39;media&#39; or &#39;class&#39;
  theme: {
    extend: {},
  },
  variants: {
    extend: {},
  },
  plugins: [],
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now in &lt;code&gt;assets/package.json&lt;/code&gt; find:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  &amp;quot;scripts&amp;quot;: {
    &amp;quot;deploy&amp;quot;: &amp;quot;webpack --mode production&amp;quot;,
    &amp;quot;watch&amp;quot;: &amp;quot;webpack --mode development --watch&amp;quot;
  },
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and change this to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  &amp;quot;scripts&amp;quot;: {
    &amp;quot;deploy&amp;quot;: &amp;quot;NODE_ENV=production webpack --mode production&amp;quot;,
    &amp;quot;watch&amp;quot;: &amp;quot;webpack --mode development --watch&amp;quot;
  },
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we will create a file for our custom styles the &lt;code&gt;assets/css/custom-style.css&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# assuming you are still in the assets directory on the cli
touch css/custom-styles.css
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s also create our a custom component (we will make buttons for a counter to be sure tailwind and aplineJS are playing well together):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;# assuming you are still in the assets directory on the cli
mkdir css/components
touch css/components/buttons.css
cat &amp;lt;&amp;lt;EOF &amp;gt; css/components/buttons.css
@layer components {
  .btn-redish {
    @apply bg-red-300 hover:bg-red-600 text-blue-800 font-bold py-2 px-4 rounded;
  }
  .btn-greenish {
    @apply bg-green-300 hover:bg-green-600 text-blue-800 font-bold py-2 px-4 rounded;
  }
}
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now will will configure Phoenix to load Tailwind, our custom-styles and our custom-components &amp;ndash; DO THIS AT THE TOP OF the file &lt;code&gt;assets/css/app.scss&lt;/code&gt; (@imports must be before all else):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* Import tailwind - with postcss-import installed */
@import &amp;quot;tailwindcss/base&amp;quot;;
@import &amp;quot;tailwindcss/components&amp;quot;;
@import &amp;quot;tailwindcss/utilities&amp;quot;;

/* custom styles - put after base imports! */
@import &amp;quot;./custom-styles.css&amp;quot;;

/* import custom components */
@import &amp;quot;./components/buttons.css&amp;quot;;

/* default phoenix styles - eventually remove */
@import &amp;quot;./phoenix.css&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;add a test html from tailwind to the end of: &lt;code&gt;lib/fenix_web/live/page_live.html.leex&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;&amp;lt;section class=&amp;quot;grid grid-cols-1 gap-4&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;h2 class=&amp;quot;text-red-500 text-5xl font-bold text-center&amp;quot;&amp;gt;Tailwind CSS with AlpineJS&amp;lt;/h2&amp;gt;
    &amp;lt;p class=&amp;quot;mt-5 font-bold text-center&amp;quot;&amp;gt;Red Title with Colored Counter Buttons&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;mt-10 flex justify-center&amp;quot; x-data=&amp;quot;{ count: 0 }&amp;quot;&amp;gt;
    &amp;lt;button class=&amp;quot;btn-redish&amp;quot; x-on:click=&amp;quot;count--&amp;quot;&amp;gt;Decrement&amp;lt;/button&amp;gt;
    &amp;lt;code&amp;gt;count: &amp;lt;/code&amp;gt;&amp;lt;code x-text=&amp;quot;count&amp;quot;&amp;gt;&amp;lt;/code&amp;gt;
    &amp;lt;button class=&amp;quot;btn-greenish&amp;quot; x-on:click=&amp;quot;count++&amp;quot;&amp;gt;Increment&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when we start the server with &lt;code&gt;mix phx.server&lt;/code&gt; we should have a centered / red title and colored buttons on our counter.&lt;/p&gt;
&lt;p&gt;now lets snapshot our PETAL setup:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;Tailwind installed&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=o4Prej0wIZA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=o4Prej0wIZA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;http://blog.pthompson.org/alpine-js-and-liveview&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://blog.pthompson.org/alpine-js-and-liveview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://pragmaticstudio.com/tutorials/adding-tailwind-css-to-phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://fullstackphoenix.com/tutorials/get-started-with-tailwind-in-phoenix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://fullstackphoenix.com/tutorials/get-started-with-tailwind-in-phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://fullstackphoenix.com/tutorials/combine-phoenix-liveview-with-alpine-js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://fullstackphoenix.com/tutorials/combine-phoenix-liveview-with-alpine-js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://medium.com/mindvalley-technology/how-to-add-tailwindcss-to-your-phoenix-project-e2250ad31ace&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://medium.com/mindvalley-technology/how-to-add-tailwindcss-to-your-phoenix-project-e2250ad31ace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://thinkingelixir.com/podcast-episodes/021-tailwind-css-alpine-js-and-liveview-with-patrick-thompson/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://thinkingelixir.com/podcast-episodes/021-tailwind-css-alpine-js-and-liveview-with-patrick-thompson/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Phoenix 1.5 LiveView &amp; PubSub Basics</title>
      <link>https://btihen.me/post_elixir_phoenix/phoenix_1_5_live_view_basics/</link>
      <pubDate>Sun, 10 May 2020 17:01:53 +0200</pubDate>
      <guid>https://btihen.me/post_elixir_phoenix/phoenix_1_5_live_view_basics/</guid>
      <description>&lt;p&gt;I have been watching Phoenix and Elixir for a while, and the idea of writing dynamic Web Applications without needing a ton of JavaScript is very interesting.  I recently saw this video by Chris McCord:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=MZvmYaFkNJI&amp;amp;feature=youtu.be&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=MZvmYaFkNJI&amp;feature=youtu.be&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;which is very cool.  I wanted to learn more and found this Phoenix 1.4 tutorial:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=2bipVjOcvdI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=2bipVjOcvdI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://dennisbeatty.com/2019/03/19/how-to-create-a-counter-with-phoenix-live-view.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dennisbeatty.com/2019/03/19/how-to-create-a-counter-with-phoenix-live-view.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and decided to translate that into Phoenix 1.5. This is what follows.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Since I am just learning the Phoenix Framework and will need to refer to this for my self to remember how to do basic things &amp;ndash; I&amp;rsquo;ve documented every little detail.&lt;/p&gt;
&lt;h3 id=&#34;step-0---setup-environment&#34;&gt;Step 0 - setup environment&lt;/h3&gt;
&lt;p&gt;Setup environment &amp;amp; newest version of elixir:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exenv install 1.10.3
exenv global
exenv local 1.10.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install the 1.5.1 phx_new generator:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mix archive.install hex phx_new 1.5.1&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;step-1-create-a-phoenix-project-with-liveview&#34;&gt;Step 1: Create a Phoenix Project with LiveView&lt;/h3&gt;
&lt;p&gt;Create the project (notice the &lt;code&gt;--live&lt;/code&gt; - that enables LiveView, &lt;code&gt;--no-ecto&lt;/code&gt; - keeps the project smaller since we won&amp;rsquo;t be persisting any data):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mix phx.new counter --no-ecto --live&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;enter project and create init commit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd counter
git init &amp;amp;&amp;amp; git add -A &amp;amp;&amp;amp; git commit -m &amp;quot;init&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-2---simple-counter-page-using-liveview&#34;&gt;Step 2 - simple counter page using LiveView&lt;/h3&gt;
&lt;p&gt;Make a counter_live folder &amp;amp; an index.ex file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;mkdir lib/counter_web/live/counter_live
touch lib/counter_web/live/counter_live/index.ex
cat &amp;lt;&amp;lt;EOF &amp;gt; lib/counter_web/live/counter_live/index.ex
# lib/counter_web/live/counter_live/index.ex
defmodule CounterWeb.CounterLive.Index do
  use CounterWeb, :live_view

  # since we don&#39;t have a db to pull from we initialize on mount
  @impl true
  def mount(_params, _session, socket) do
    {:ok, assign(socket, :val, 0)}
  end

  def render(assigns) do
    ~L&amp;quot;&amp;quot;&amp;quot;
    &amp;lt;h1&amp;gt;Live Counter&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;
      &amp;lt;b&amp;gt;Here is a great complex page&amp;lt;/b&amp;gt;
    &amp;lt;/p&amp;gt;

    &amp;lt;div&amp;gt;
      &amp;lt;h2&amp;gt;The count is: &amp;lt;%= @val %&amp;gt;&amp;lt;/h2&amp;gt;
      &amp;lt;button phx-click=&amp;quot;dec&amp;quot;&amp;gt;-&amp;lt;/button&amp;gt;
      &amp;lt;button phx-click=&amp;quot;inc&amp;quot;&amp;gt;+&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;button phx-click=&amp;quot;clear&amp;quot;&amp;gt;clear&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;p&amp;gt;
      &amp;lt;i&amp;gt;even more awesome content&amp;lt;/i&amp;gt;
    &amp;lt;/p&amp;gt;
    &amp;quot;&amp;quot;&amp;quot;
  end

  # event handler for &amp;lt;button phx-click=&amp;quot;inc&amp;quot;&amp;gt;
  def handle_event(&amp;quot;inc&amp;quot;, _, socket) do
    {:noreply, update(socket, :val, &amp;amp;(&amp;amp;1 + 1))}
  end

  # event handler for &amp;lt;button phx-click=&amp;quot;dec&amp;quot;&amp;gt;
  def handle_event(&amp;quot;dec&amp;quot;, _, socket) do
    {:noreply, update(socket, :val, &amp;amp;(&amp;amp;1 - 1))}
  end

  # event handler for &amp;lt;button phx-click=&amp;quot;clear&amp;quot;&amp;gt;
  def handle_event(&amp;quot;clear&amp;quot;, _, socket) do
    {:noreply, update(socket, :val, &amp;amp;(&amp;amp;1 - &amp;amp;1))}
    # {:noreply, update(socket, :val, 0)} # very slow - why?
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now update the routers (so we can get to the new webpage &amp;ndash; now our app should work:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;  scope &amp;quot;/&amp;quot;, CounterWeb do
    pipe_through :browser

    # live &amp;quot;/&amp;quot;, PageLive, :index        # remove this line
    live &amp;quot;/&amp;quot;, CounterLive.Index, :index # add this line
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Start pheonix:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mix phx.server&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Go to:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;localhost:4000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You should now see the website and the counter should function&lt;/p&gt;
&lt;p&gt;Assuming all is good, I&amp;rsquo;ll take a git snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;counter with live update&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-3---running-tests&#34;&gt;Step 3 - Running tests&lt;/h3&gt;
&lt;p&gt;In order to run the tests we type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We see that PageLive test fails.  This is because we replaced this behavior with &lt;code&gt;CounterLive&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To fix this we will create a &lt;strong&gt;CounterLive&lt;/strong&gt; test and delete &lt;strong&gt;PageLive&lt;/strong&gt; test.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;rm test/counter_web/live/page_live_text.exs
touch test/counter_web/live/counter_live_text.exs
cat &amp;lt;&amp;lt;EOF &amp;gt; test/counter_web/live/counter_live_text.exs
# test/counter_web/live/counter_live_text.exs
defmodule CounterWeb.CounterLiveTest do
  use CounterWeb.ConnCase

  import CounterWeb.CounterLive.Index

  test &amp;quot;disconnected and connected render&amp;quot;, %{conn: conn} do
    {:ok, page_live, disconnected_html} = live(conn, &amp;quot;/&amp;quot;)
    assert disconnected_html =~ &amp;quot;Live Counter&amp;quot;
    assert render(page_live) =~ &amp;quot;Live Counter&amp;quot;
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can test again: &lt;code&gt;mix test&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now that works, lets take another git snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;counter with live update&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-4----liveview-templates&#34;&gt;Step 4 &amp;ndash; LiveView Templates&lt;/h3&gt;
&lt;p&gt;Create a template file (helpful for complex html pages, but simple to create):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;touch lib/counter_web/live/counter_live/index.html.leex&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now just copy the html (from the render method into this file):&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-linenos=table,linenostart=1&#34; data-lang=&#34;linenos=table,linenostart=1&#34;&gt;# lib/counter_web/live/counter_live/index.html.leex
&amp;lt;h1&amp;gt;Live Counter&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;
  &amp;lt;b&amp;gt;Here is a great complex page&amp;lt;/b&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;div&amp;gt;
  &amp;lt;h2&amp;gt;The count is: &amp;lt;%= @val %&amp;gt;&amp;lt;/h2&amp;gt;
  &amp;lt;button phx-click=&amp;#34;dec&amp;#34;&amp;gt;-&amp;lt;/button&amp;gt;
  &amp;lt;button phx-click=&amp;#34;inc&amp;#34;&amp;gt;+&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
   &amp;lt;button phx-click=&amp;#34;clear&amp;#34;&amp;gt;clear&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;p&amp;gt;
  &amp;lt;i&amp;gt;even more awesome content&amp;lt;/i&amp;gt;
&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now point &lt;code&gt;lib/counter_web/live/counter_live/index.ex&lt;/code&gt; to this file by replacing render with an apply command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# add this new function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;defp&lt;/span&gt; apply_action(socket, &lt;span style=&#34;color:#e6db74&#34;&gt;:index&lt;/span&gt;, _params) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    socket
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# remove this funtion&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# def render(assigns) do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#  ~L&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#   ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#   &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;code&gt;apply_action&lt;/code&gt; understands the &lt;strong&gt;rest&lt;/strong&gt; verbs such as &lt;code&gt;:new&lt;/code&gt;, &lt;code&gt;:show&lt;/code&gt; etc.&lt;/p&gt;
&lt;p&gt;Now try the app again and it should still work!&lt;/p&gt;
&lt;p&gt;Assuming it still works, I&amp;rsquo;ll take another git snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;counter using a template&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-5---reusable-components--isolation&#34;&gt;Step 5 - Reusable Components (&amp;amp; isolation)&lt;/h3&gt;
&lt;p&gt;This allows complex components to be &lt;strong&gt;reused&lt;/strong&gt; within multiple templates and &lt;strong&gt;isolation&lt;/strong&gt; to keep one&amp;rsquo;s mental scope minimal.&lt;/p&gt;
&lt;p&gt;Create a file for the component:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;touch lib/counter_web/live/counter_live/counter_component.ex&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Move the dynamic html and it&amp;rsquo;s associated functions into this file, it&amp;rsquo;s important to import the live_components into this file using:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;use CounterWeb, :live_component&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In order to encapsulate the events into the component we will also move the event handlers into the component file.&lt;/p&gt;
&lt;p&gt;So this file will now look like:
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# lib/counter_web/live/counter_live/counter_component.ex&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CounterWeb.CounterLive.CounterComponent&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CounterWeb&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:live_component&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; render(assigns) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;~L&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;lt;h2&amp;gt;The count is: &amp;lt;%= @val %&amp;gt;&amp;lt;/h2&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;lt;button phx-click=&amp;#34;dec&amp;#34; phx-target=&amp;#34;&amp;lt;%= @myself %&amp;gt;&amp;#34;&amp;gt;-&amp;lt;/button&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;lt;button phx-click=&amp;#34;inc&amp;#34; phx-target=&amp;#34;&amp;lt;%= @myself %&amp;gt;&amp;#34;&amp;gt;+&amp;lt;/button&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;lt;button phx-click=&amp;#34;clear&amp;#34; phx-target=&amp;#34;&amp;lt;%= @myself %&amp;gt;&amp;#34;&amp;gt;clear&amp;lt;/button&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; handle_event(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inc&amp;#34;&lt;/span&gt;, _, socket) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&lt;span style=&#34;color:#e6db74&#34;&gt;:noreply&lt;/span&gt;, update(socket, &lt;span style=&#34;color:#e6db74&#34;&gt;:val&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(&amp;amp;1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; handle_event(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dec&amp;#34;&lt;/span&gt;, _, socket) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&lt;span style=&#34;color:#e6db74&#34;&gt;:noreply&lt;/span&gt;, update(socket, &lt;span style=&#34;color:#e6db74&#34;&gt;:val&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(&amp;amp;1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; handle_event(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clear&amp;#34;&lt;/span&gt;, _, socket) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# {:noreply, update(socket, :val, 0)} # very slow - why?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&lt;span style=&#34;color:#e6db74&#34;&gt;:noreply&lt;/span&gt;, update(socket, &lt;span style=&#34;color:#e6db74&#34;&gt;:val&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(&amp;amp;1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &amp;amp;1))}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Notice the button tags are slightly more complex&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;button phx-click=&amp;quot;dec&amp;quot; phx-target=&amp;quot;&amp;lt;%= @myself %&amp;gt;&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;the &lt;strong&gt;@myself&lt;/strong&gt; basically informs the event that the handler is within the component.&lt;/p&gt;
&lt;p&gt;Now update the live template to point at the component using:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;%= live_component @socket, CounterWeb.CounterLive.CounterComponent, id: 0, val: @val %&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Also note we need to pass the @val value into the component using:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;id: 0, val: @val&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;its a little wierd, but we need to pass an &lt;strong&gt;id&lt;/strong&gt; even if there is no ecto backed record.&lt;/p&gt;
&lt;p&gt;Now the template file looks like a normal template file again (focused on formating):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elixir&#34; data-lang=&#34;elixir&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# lib/counter_web/live/counter_live/index.ex&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;defmodule&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CounterWeb.CounterLive.Index&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CounterWeb&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;:live_view&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# since we don&amp;#39;t have a db to pull from we initialize on mount&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;@impl&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; mount(_params, _session, socket) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&lt;span style=&#34;color:#e6db74&#34;&gt;:ok&lt;/span&gt;, assign(socket, &lt;span style=&#34;color:#e6db74&#34;&gt;:val&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; render(assigns) &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;~L&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;h1&amp;gt;Live Counter&amp;lt;/h1&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;p&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;lt;b&amp;gt;Here is a great complex page&amp;lt;/b&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;%= live_component @socket, CounterWeb.CounterLive.CounterComponent, id: 0, val: @val %&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;p&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;lt;i&amp;gt;even more awesome content&amp;lt;/i&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Lets check that this still works.&lt;/p&gt;
&lt;p&gt;Assuming it still works, I&amp;rsquo;ll make one last git snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;live pages using isolated components - like JS does&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
