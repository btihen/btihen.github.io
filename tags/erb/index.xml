<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ERB | btihen</title>
    <link>https://btihen.me/tags/erb/</link>
      <atom:link href="https://btihen.me/tags/erb/index.xml" rel="self" type="application/rss+xml" />
    <description>ERB</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2022</copyright><lastBuildDate>Sat, 05 Mar 2022 01:57:00 +0200</lastBuildDate>
    <image>
      <url>https://btihen.me/img/btihen_landing_page.png</url>
      <title>ERB</title>
      <link>https://btihen.me/tags/erb/</link>
    </image>
    
    <item>
      <title>Bridgetown 1.0 - Ruby Static-Site Orientation</title>
      <link>https://btihen.me/post_ruby_rails/bridgetown_1_x_ruby_static_stite_orientation/</link>
      <pubDate>Sat, 05 Mar 2022 01:57:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/bridgetown_1_x_ruby_static_stite_orientation/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;&lt;strong&gt;Overview&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;I have often wanted to build websites using as much of my Rails knowledge as possible.  Now I can!&lt;/p&gt;
&lt;p&gt;Enter Bridgetown - 
&lt;a href=&#34;https://edge.bridgetownrb.com/docs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://edge.bridgetownrb.com/docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A ruby based (erb, components, etc), author-friendly (markdown pages).&lt;/p&gt;
&lt;p&gt;The newest version 1.0 beta uses esbuild by default (or webpacker) and has several pre-build deploy configurations and a quick and easy way to install TailwindCSS!&lt;/p&gt;
&lt;p&gt;Unfortunately, for some reason I found it a bit hard to assemble the information to create a website that would meet my needs and interests.  So this doc is a quick summary and context that will get you through the next step after &lt;code&gt;getting started&lt;/code&gt;.  My understanding is now that are 3 added aspects&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(&lt;strong&gt;bundled configurations&lt;/strong&gt;)[https://www.bridgetownrb.com/docs/bundled-configurations] are for &lt;code&gt;tool-chain setup&lt;/code&gt;, like deployment configs, tailwindcss, stimulusJS, etc.  And&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plugins&lt;/strong&gt; are for things that will show-up in the &lt;code&gt;output html&lt;/code&gt; like SEO Tags, Sitemaps, etc.&lt;/li&gt;
&lt;li&gt;(&lt;strong&gt;automations&lt;/strong&gt;)[https://www.bridgetownrb.com/docs/automations] An automation script is nothing more than a Ruby code file run in the context of an instance
Unfortunately, I still struggle to find the parts I am looking for, so I am adding the links here (to help my future self).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;new-site-setup&#34;&gt;&lt;strong&gt;New Site Setup&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;I listened to the interview about Bridgetown on (Remote Ruby Podcast)[https://remoteruby.transistor.fm/169] so I went and checked it out.  Starting with the (Beta Docs)[https://edge.bridgetownrb.com/docs] - as it has a TailwindCSS installer and lots of excellent deployment setups (in particular Render and Netlify - although I would find Fly.io also interesting)&lt;/p&gt;
&lt;p&gt;So I started by downloading the gem:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gem install bridgetown -N -v 1.0.0.beta3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I decided to configure it with the &lt;code&gt;erb&lt;/code&gt; but you can leave off &lt;code&gt;-t erb&lt;/code&gt; and use liquid or change erb for serbea templates.  Anyway, I created a new project with &lt;code&gt;erb&lt;/code&gt; using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bridgetown new bridge_tail_site -t erb
cd bridge_tail_site
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;configure-tailwindcss&#34;&gt;&lt;strong&gt;Configure TailwindCSS&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Installing TailwindCSS it was straightforward - once I found the right area. Follow the instructions at 
&lt;a href=&#34;https://www.bridgetownrb.com/docs/bundled-configurations#tailwindcss&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bridgetownrb.com/docs/bundled-configurations#tailwindcss&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle exec bridgetown configure tailwindcss
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I wanted to see if this worked by starting bridgetown with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/bridgetown start
open localhost:4000
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;configure-alpinejs&#34;&gt;&lt;strong&gt;Configure AlpineJS&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;It looked good - so I went on to install AlpineJS (using the embedded script method) at 
&lt;a href=&#34;https://alpinejs.dev/essentials/installation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://alpinejs.dev/essentials/installation&lt;/a&gt; - so I went to &lt;code&gt;src/_partials/_head.erb&lt;/code&gt; and added &lt;code&gt;&amp;lt;script defer src=&amp;quot;https://unpkg.com/alpinejs@3.9.0/dist/cdn.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; just before the &lt;code&gt;live_reload_dev_js&lt;/code&gt; tag:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- src/_partials/_head.erb --&amp;gt;
...
&amp;lt;!-- AlpineJS script tag--&amp;gt;
&amp;lt;script defer src=&amp;quot;https://unpkg.com/alpinejs@3.9.0/dist/cdn.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;%= live_reload_dev_js %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then I went to the page &lt;code&gt;src/_components/shared/navbar.erb&lt;/code&gt; to add an example from (AlpineJS Start-here page)[https://alpinejs.dev/start-here]&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div x-data=&amp;quot;{ count: 0 }&amp;quot;&amp;gt;
 &amp;lt;button x-on:click=&amp;quot;count++&amp;quot;
         class=&amp;quot;bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded&amp;quot;&amp;gt;
   Increment
 &amp;lt;/button&amp;gt;
 &amp;lt;span x-text=&amp;quot;count&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool this works!  So I went and created my navbar and footer.&lt;/p&gt;
&lt;h2 id=&#34;adding-a-custom-font-in-css&#34;&gt;&lt;strong&gt;Adding a Custom Font (in CSS)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;We will add the &lt;code&gt;handlee&lt;/code&gt; font as it is distinctive and easy to see that it works (or not).
Let&amp;rsquo;s get it from (Google Webfonts Helper)[https://google-webfonts-helper.herokuapp.com/fonts/handlee?subsets=latin] site.  &lt;strong&gt;This is a convenient site as it has both the font and the CSS needed.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now that you&amp;rsquo;ve downloaded the font, create a new folder in the frontend folder and copy the font into it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p frontend/fonts/handlee
cp ~/Downloads/handlee-v12-latin/* frontend/fonts/handlee/.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now grab the CSS from the Google Webfonts Helper site and copy it into the &lt;code&gt;frontend/styles/index.css&lt;/code&gt; file (I like to put the font css just below the tailwind imports). So the start of index.css looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* frontend/styles/index.css */

/* triggers frontend rebuilds */
@import &amp;quot;jit-refresh.css&amp;quot;;

/* Set up Tailwind imports */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Import Fonts */
@font-face {
  font-family: &#39;Handlee&#39;;
  font-style: normal;
  font-weight: 400;
  src: local(&#39;&#39;),
       url(&#39;../fonts/handlee/handlee-v12-latin-regular.woff2&#39;) format(&#39;woff2&#39;),
       url(&#39;../fonts/handlee/handlee-v12-latin-regular.woff&#39;) format(&#39;woff&#39;);
}

/* ... */
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now within your CSS definitions you can use: &lt;code&gt;font-family: &#39;Handlee&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s try it out - let&amp;rsquo;s add that to the h1 definition in the index.css file - so now that would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* ... */
h1 {
  margin: 1rem 0 3rem;
  text-align: center;
  font-weight: 900;
  font-size: 2.5rem;
  font-family: &#39;Handlee&#39;;
  color: var(--heading-color);
  line-height: 1.2;
}
/* ... */
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Be sure the Title of your homepage is now using the &amp;lsquo;Handlee&amp;rsquo; font.&lt;/p&gt;
&lt;h2 id=&#34;adding-a-custom-font-into-tailwindcss&#34;&gt;&lt;strong&gt;Adding a Custom Font (into TailwindCSS)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Now we need to define this font within TailwindCSS config to have it create a &lt;code&gt;font-handlee&lt;/code&gt; class so we can use this font within our tailwind class definitions.  To do this we will need to update the &lt;code&gt;tailwind.config.js&lt;/code&gt; file to look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.exports = {
  content: [
    &#39;./src/**/*.{html,md,liquid,erb,serb}&#39;,
    &#39;./frontend/javascript/**/*.js&#39;,
  ],
  theme: {
    extend: {
      fontFamily: {
        handlee: [&#39;Handlee&#39;]
      },
    },
  },
  plugins: [],
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s update the default layout to use Handlee for the text within the main body. So lets open &lt;code&gt;src/_layouts/default.erb&lt;/code&gt; and change the &lt;code&gt;main&lt;/code&gt; tag to have the &lt;code&gt;class=&amp;quot;font-handlee&amp;quot;&lt;/code&gt; in it - so now it might look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- ... --&amp;gt;
    &amp;lt;main class=&amp;quot;font-hand&amp;quot;&amp;gt;
      &amp;lt;%= yield %&amp;gt;
    &amp;lt;/main&amp;gt;
&amp;lt;!-- ... --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now both the Title and Body of each page should be using the Handlee font.&lt;/p&gt;
&lt;h2 id=&#34;adding-a-new-top-level-page&#34;&gt;&lt;strong&gt;Adding a new Top-Level Page&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s add a &lt;code&gt;contact&lt;/code&gt; page:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;mkdir src/_pages
cat &amp;lt;&amp;lt;EOF&amp;gt;&amp;gt; src/_pages/contact.md
---
layout: page
title: Contact
---

&amp;lt;h1&amp;gt;Contact Me&amp;lt;/h1&amp;gt;
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if you go to: http://localhost:4000/contact you should see your new page.&lt;/p&gt;
&lt;p&gt;For tidiness I prefer to have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;index.md&lt;/li&gt;
&lt;li&gt;posts.md&lt;/li&gt;
&lt;li&gt;about.md&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;all in the &lt;code&gt;src/_pages&lt;/code&gt; folder&lt;/p&gt;
&lt;h2 id=&#34;adding-an-image&#34;&gt;&lt;strong&gt;Adding an Image&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;So to add an image we need to put it in the &lt;code&gt;src/images&lt;/code&gt; folder:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p /images/posts/welcome_post
cp ~/Desktop/sunrise.jpeg /images/posts/welcome_post/.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;rsquo;s test this in our &lt;strong&gt;navbar&lt;/strong&gt; file &lt;code&gt;src/_components/shared/navbar.erb&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;header&amp;gt;
  &amp;lt;%# &amp;lt;img src=&amp;quot;/images/logo.svg&amp;quot; alt=&amp;quot;Logo&amp;quot; /&amp;gt; %&amp;gt;
  &amp;lt;img src=&amp;quot;/images/posts/welcome/sunrise.jpeg&amp;quot; alt=&amp;quot;Sunrise&amp;quot; /&amp;gt;
&amp;lt;/header&amp;gt;
&amp;lt;!-- ... --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bridgetown uses &lt;strong&gt;Kramdown&lt;/strong&gt; as the Markdown rendering engine.  You can learn more about Kramdown Markdown at: 
&lt;a href=&#34;https://kramdown.gettalong.org/quickref.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://kramdown.gettalong.org/quickref.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s also add it in our sample blog post &lt;code&gt;src/_posts/2022-03-05-welcome-to-bridgetown.md&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---
layout: post
title:  &amp;quot;Your First Post on Bridgetown&amp;quot;
date:   2022-03-05 23:22:30 +0100
categories: updates
---
**Display our image!**

![Sunrise](/images/posts/welcome/sunrise.jpeg)

_Now on to the post_
Youâll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `bridgetown serve`, which launches a web server and auto-regenerates your site when a file is updated.

...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hopefully you see the image:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;once on the page &lt;code&gt;http://localhost:4000/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;twice on the page &lt;code&gt;http://localhost:4000/updates/2022/03/05/welcome-to-bridgetown/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;new-post&#34;&gt;&lt;strong&gt;New post&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;A new page within a dated collection.&lt;/p&gt;
&lt;p&gt;We just need to make a new file with the correct headers.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch src/_posts/playing_with_bridgetown.md
cat &amp;lt;&amp;lt;EOF&amp;gt;&amp;gt;src/_posts/playing_with_bridgetown.md
---
layout: post
title:  &amp;quot;Fun with Bridgetown&amp;quot;
date:   2022-03-07 01:01:01 +0100
categories: ruby
---

## Fun is Rewarding
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if you go to: http://localhost:4000/posts your new page&amp;rsquo;s title should be listed and if you click on it&amp;rsquo;s title you should see the page with the URL: http://localhost:4000/ruby/2022/03/07/playing_with_bridgetown/ - the &lt;code&gt;category&lt;/code&gt; is the first part of the url, then the date, and finally the title.&lt;/p&gt;
&lt;h2 id=&#34;controlling-the-urls-permalinks&#34;&gt;&lt;strong&gt;Controlling the URLs (permalinks)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;This is important since you are likely to need to use specific URLs (in my case, I want the new site to have the same urls as the old site). This is documented at: 
&lt;a href=&#34;https://www.bridgetownrb.com/docs/content/permalinks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bridgetownrb.com/docs/content/permalinks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are several default url formats - I will show you a simple override - using the predefined variables.&lt;/p&gt;
&lt;p&gt;first go to &lt;code&gt;bridgetown.config.yml&lt;/code&gt; and add to the following to end of the file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;collections:
  posts:
    permalink: /blogs/:categories/:name/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lsquo;slug&amp;rsquo; is basically the file-name &amp;amp; categories is defined in the&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;After changing &lt;code&gt;bridgetown.config.yml&lt;/code&gt; you MUST stop bridgetown &lt;code&gt;^c&lt;/code&gt; and start it again &lt;code&gt;bin/bridgetown start&lt;/code&gt;!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;now if you go back to &lt;code&gt;http://localhost:4000/posts&lt;/code&gt; and click on the link for the new post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you should get the url: &lt;code&gt;http://localhost:4000/blogs/ruby/playing_with_bridgetown/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;instead of the (pretty) url: &lt;code&gt;http://localhost:4000/ruby/2022/03/07/playing_with_bridgetown/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;define-a-new-collections&#34;&gt;&lt;strong&gt;Define a New Collections&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Lets assume in addition to publishing your blog - you also want to publish your future presentations and past slides.&lt;/p&gt;
&lt;p&gt;we will start by defining the new collection &amp;lsquo;talks&amp;rsquo; in the &lt;code&gt;bridgetown.config.yml&lt;/code&gt; file - so now the end of the file should look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# bridgetown.config.yml
# ...
collections:
  posts:
    permalink: /blogs/:categories/:slug/
  talks:
    output: true
    future: true
    sort_by: date
    sort_direction: descending
    permalink: /presentations/:categories/:slug/
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lsquo;output&amp;rsquo; seems to be required for custom collections (I guess this allows a category to be turned on or offs)&lt;/li&gt;
&lt;li&gt;&amp;lsquo;future&amp;rsquo; true means that if the front-matter has a future date - it will be published anyway&lt;/li&gt;
&lt;li&gt;&amp;lsquo;sort_by&amp;rsquo; allows you to pick a front-matter key and sort by it&lt;/li&gt;
&lt;li&gt;&amp;lsquo;sort_direction&amp;rsquo; is pretty clear - &lt;code&gt;ascending&lt;/code&gt; or &lt;code&gt;descending&lt;/code&gt; are the two choices&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we can create our layout for the new collection:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat &amp;lt;&amp;lt;EOF&amp;gt;&amp;gt; src/_layouts/talks.erb
---
layout: default
---

&amp;lt;h1&amp;gt;&amp;lt;big&amp;gt;TALK Title:&amp;lt;/big&amp;gt; &amp;lt;%= resource.data.title %&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;h2&amp;gt;&amp;lt;big&amp;gt;Topic:&amp;lt;/big&amp;gt; &amp;lt;%= resource.data.categories %&amp;gt;&amp;lt;/h2&amp;gt;
&amp;lt;h3&amp;gt;&amp;lt;big&amp;gt;Date:&amp;lt;/big&amp;gt; &amp;lt;%= resource.data.date %&amp;gt;&amp;lt;/h3&amp;gt;

&amp;lt;%= yield %&amp;gt;

EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This layout loads the default layout and for each talk we will have the &amp;lsquo;title&amp;rsquo;, &amp;lsquo;topic&amp;rsquo; and &amp;lsquo;date&amp;rsquo;!&lt;/p&gt;
&lt;p&gt;Now we will need the index page for this collection that will list all the talks:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;cat &amp;lt;&amp;lt;EOF&amp;gt;&amp;gt; src/_pages/talks.md
---
layout: talks
title: My Presentations
---

&amp;lt;ul&amp;gt;
  &amp;lt;% collections.talks.resources.each do |talk| %&amp;gt;
    &amp;lt;li&amp;gt;
      &amp;lt;a href=&amp;quot;&amp;lt;%= talk.relative_url %&amp;gt;&amp;quot;&amp;gt;&amp;lt;%= talk.data.title %&amp;gt;&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
  &amp;lt;% end %&amp;gt;
&amp;lt;/ul&amp;gt;

If you like a talk, please tweet about it.
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now of course we will need to create a talk page (with a publication date in the past):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;cat &amp;lt;&amp;lt;EOF&amp;gt;&amp;gt;src/_talks/collection_intro.me
---
layout: talks
title:  &amp;quot;Introduction to Bridgetown Collections&amp;quot;
date:   2022-03-05 23:22:30 +0100
categories: websites
---

Learning about collections - in case you want more than simple posts
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets start Bridgetwn and be sure that worked&lt;/p&gt;
&lt;p&gt;Now lets advertise a future talk:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;cat &amp;lt;&amp;lt;EOF&amp;gt;&amp;gt;src/_talks/future-collections.me
---
layout: talks
title:  &amp;quot;The Future Bridgetown&amp;quot;
date:   2222-22-22 22:22:22 +0100
draft:  true
categories: websites
---

The future looks promising
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we should now see 2 talks listed at; &lt;code&gt;http://localhost:4000/talks&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;create-a-draft-post&#34;&gt;&lt;strong&gt;Create a Draft Post&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Without being able to use a future Date - we can simply add &lt;code&gt;&amp;lt;% next if blog.data.draft %&amp;gt;&lt;/code&gt; to our index page&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;---
layout: blog
title: Ruby Blogs
---

&amp;lt;ul&amp;gt;
  &amp;lt;% collections.ruby_blogs.resources.each do |blog| %&amp;gt;
    &amp;lt;% next if blog.data.draft %&amp;gt;
    &amp;lt;li&amp;gt;
      &amp;lt;a href=&amp;quot;&amp;lt;%= blog.relative_url %&amp;gt;&amp;quot;&amp;gt;&amp;lt;%= blog.data.title %&amp;gt;-&amp;lt;%= blog.data.draft %&amp;gt;&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
  &amp;lt;% end %&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now it should skip any file with &lt;code&gt;draft: true&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;pagination&#34;&gt;&lt;strong&gt;Pagination&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;If you have a lot of posts, you may want to consider adding 
&lt;a href=&#34;https://www.bridgetownrb.com/docs/content/pagination&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pagination&lt;/a&gt;!```&lt;/p&gt;
&lt;h2 id=&#34;deploy&#34;&gt;&lt;strong&gt;Deploy&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s now deploy this Webpage (using the &lt;code&gt;configure&lt;/code&gt; command) it is very straightforward!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First, be sure you have pushed your project to github or gitlab - create the repo online and push it with:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .
git commit -m &amp;quot;Configured w TailwindCSS and Handlee Font&amp;quot;
git remote add origin git@github.com:gitusername/bridge_tail_site.git
git branch -M main
git push -u origin main
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Second, install the config for your deploy service (in this case &lt;code&gt;netlify&lt;/code&gt;) by typing:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle exec bridgetown configure netlify
git add bin/netlify.sh netlify.toml
git commit -m &amp;quot;add netlify config&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Third, connect your netlify account to the repo you just created.&lt;/li&gt;
&lt;li&gt;Four, click &lt;code&gt;deploy&lt;/code&gt; within the netlify site (if it hasn&amp;rsquo;t already startet) and wait 5-10 mins (yes its kinda slow to deploy) and you should have your new website!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Woo Hoo.&lt;/p&gt;
&lt;h2 id=&#34;what-didnt-work-yet&#34;&gt;What didn&amp;rsquo;t work (yet!)&lt;/h2&gt;
&lt;h4 id=&#34;bridgetown-file-routing&#34;&gt;Bridgetown File Routing&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s try the new File Routing feature described at: 
&lt;a href=&#34;https://edge.bridgetownrb.com/docs/routes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://edge.bridgetownrb.com/docs/routes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First update the &lt;code&gt;Gemfile&lt;/code&gt; - uncomment: &lt;code&gt;gem &amp;quot;bridgetown-routes&amp;quot;, &amp;quot;~&amp;gt; 1.0.0.beta3&amp;quot;, group: :bridgetown_plugins&lt;/code&gt; - now it should look similar to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Gemfile
source &amp;quot;https://rubygems.org&amp;quot;
git_source(:github) { |repo| &amp;quot;https://github.com/#{repo}.git&amp;quot; }

gem &amp;quot;bridgetown&amp;quot;, &amp;quot;~&amp;gt; 1.0.0.beta3&amp;quot;

# Uncomment to add file-based dynamic routing to your project:
gem &amp;quot;bridgetown-routes&amp;quot;, &amp;quot;~&amp;gt; 1.0.0.beta3&amp;quot;, group: :bridgetown_plugins

gem &amp;quot;puma&amp;quot;, &amp;quot;~&amp;gt; 5.5&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to run bundler:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now setup the Roda config &lt;code&gt;server/roda_app.rb&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# server/roda_app.rb
require &amp;quot;bridgetown-routes&amp;quot;

class RodaApp &amp;lt; Bridgetown::Rack::Roda
  # Uncomment to use Bridgetown SSR:
  # plugin :bridgetown_ssr

  # And optionally file-based routing:
  plugin :bridgetown_routes

  route do |r|
    # Load Roda routes in server/routes (and src/_routes via `bridgetown-routes`)
    Bridgetown::Rack::Routes.start! self
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets add:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# ./server/routes/preview.rb

class Routes::Preview &amp;lt; Bridgetown::Rack::Routes
  route do |r|
    r.on &amp;quot;preview&amp;quot; do
      # Our special rendering pathway to preview a page
      # route: /preview/:collection/:path
      r.get String, String do |collection, path|
        item = Bridgetown::Model::Base.find(&amp;quot;repo://#{collection}/#{path}&amp;quot;)

        unless item.content.present?
          next Bridgetown::Model::Base.find(&amp;quot;repo://pages/_pages/404.html&amp;quot;)
            .render_as_resource
            .output
        end

        item
          .render_as_resource
          .output
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets make an index page for this route:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;mkdir -p src/_routes/items
cat &amp;lt;&amp;lt;EOF&amp;gt;src/_routes/items/index.erb
---&amp;lt;%
# route: /items
r.get do
  render_with data: {
    layout: :page,
    title: &amp;quot;Dynamic Items&amp;quot;,
    items: [
      { number: 1, slug: &amp;quot;123-abc&amp;quot; },
      { number: 2, slug: &amp;quot;456-def&amp;quot; },
      { number: 3, slug: &amp;quot;789-xyz&amp;quot; },
    ]
  }
end
%&amp;gt;---

&amp;lt;ul&amp;gt;
  &amp;lt;% resource.data.items.each do |item| %&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/items/&amp;lt;%= item[:slug] %&amp;gt;&amp;quot;&amp;gt;Item #&amp;lt;%= item[:number] %&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;% end %&amp;gt;
&amp;lt;/ul&amp;gt;
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets create the template for items:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;cat &amp;lt;&amp;lt;EOF&amp;gt;&amp;gt;src/_routes/items/[slug].erb
---&amp;lt;%
# route: /items/:slug
r.get do
  item_id, *item_sku = r.params[:slug].split(&amp;quot;-&amp;quot;)
  item_sku = item_sku.join(&amp;quot;-&amp;quot;)

  render_with data: {
    layout: :page,
    title: &amp;quot;Item Page&amp;quot;,
    item_id: item_id,
    item_sku: item_sku
  }
end
%&amp;gt;---

&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Item ID:&amp;lt;/strong&amp;gt; &amp;lt;%= resource.data.item_id %&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Item SKU:&amp;lt;/strong&amp;gt; &amp;lt;%= resource.data.item_sku %&amp;gt;&amp;lt;/p&amp;gt;
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;alpinejs-installed-as-a-module&#34;&gt;AlpineJS installed as a module&lt;/h4&gt;
&lt;p&gt;Not a show stopper but irritates me.&lt;/p&gt;
&lt;p&gt;I tried using the Bridgetown Javascript install instructions at: 
&lt;a href=&#34;https://www.bridgetownrb.com/docs/frontend-assets#javascript&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bridgetownrb.com/docs/frontend-assets#javascript&lt;/a&gt; &amp;amp; also the AlpineJS instructions at: 
&lt;a href=&#34;https://alpinejs.dev/essentials/installation#as-a-module&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://alpinejs.dev/essentials/installation#as-a-module&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am hoping to install AlpineJS as an imported module (so building isn&amp;rsquo;t depending on a web-connection and the code needed is local).  So I tried removing the AplineJS script tag from the header:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- src/_partials/_head.erb --&amp;gt;
...
&amp;lt;!-- AlpineJS script tag--&amp;gt;
&amp;lt;%# &amp;lt;script defer src=&amp;quot;https://unpkg.com/alpinejs@3.9.0/dist/cdn.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; %&amp;gt;
&amp;lt;%= live_reload_dev_js %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then installing alpinejs&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn add alpinejs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and I confirmed that I see the AlpineJS in the node_modules folder.&lt;/p&gt;
&lt;p&gt;Then I import and start AlpineJS in &lt;code&gt;frontend/javascript/index.js&lt;/code&gt; so it looked like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// frontend/javascript/index.js
import &amp;quot;index.css&amp;quot;
import Alpine from &#39;alpinejs&#39;
// Import all JavaScript &amp;amp; CSS files from src/_components
import components from &amp;quot;bridgetownComponents/**/*.{js,jsx,js.rb,css}&amp;quot;

console.info(&amp;quot;Bridgetown is loaded!&amp;quot;)
window.Alpine = Alpine
Alpine.start()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But unfortunately, this doesn&amp;rsquo;t work :( If you know how to make it work, I&amp;rsquo;ll be glad to update this document.&lt;/p&gt;
&lt;p&gt;I have also created a github discussion to hopefully help: 
&lt;a href=&#34;https://github.com/bridgetownrb/bridgetown/discussions/506&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/bridgetown/discussions/506&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;feature-still-to-explore&#34;&gt;Feature still to explore&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Add a Custom Font&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bundle Configs&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setup for purging css: (bundle exec bridgetown configure purgecss) - 
&lt;a href=&#34;https://www.bridgetownrb.com/docs/bundled-configurations#purgecss-post-build-hook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bridgetownrb.com/docs/bundled-configurations#purgecss-post-build-hook&lt;/a&gt; - installed by default with Tailwind&lt;/li&gt;
&lt;li&gt;Rails Default JS - (bundle exec bridgetown configure stimulus) - 
&lt;a href=&#34;https://www.bridgetownrb.com/docs/bundled-configurations#stimulus&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bridgetownrb.com/docs/bundled-configurations#stimulus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rails Turbo features: (bundle exec bridgetown configure turbo) - 
&lt;a href=&#34;https://www.bridgetownrb.com/docs/bundled-configurations#turbo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bridgetownrb.com/docs/bundled-configurations#turbo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Animation Transitions: (bundle exec bridgetown configure swup) - 
&lt;a href=&#34;https://www.bridgetownrb.com/docs/bundled-configurations#swupjs-page-transitions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bridgetownrb.com/docs/bundled-configurations#swupjs-page-transitions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Automations&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bulma Configured Site: (bundle exec bridgetown apply 
&lt;a href=&#34;https://github.com/whitefusionhq/bulmatown&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/whitefusionhq/bulmatown&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Cloudinary Configuration: (bundle exec bridgetown apply 
&lt;a href=&#34;https://github.com/bridgetownrb/bridgetown-cloudinary&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/bridgetown-cloudinary&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Netlify Configuration: (bundle exec bridgetown apply 
&lt;a href=&#34;https://github.com/bridgetownrb/automations/netlify.rb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/automations/netlify.rb&lt;/a&gt;) - how is this different from Netlify bundle configure?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Testing&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MiniTests: (bundle exec bridgetown configure minitesting) - 
&lt;a href=&#34;https://www.bridgetownrb.com/docs/testing#use-ruby-and-minitest-to-test-html-directly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bridgetownrb.com/docs/testing#use-ruby-and-minitest-to-test-html-directly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cypres JS Testing: (bundle exec bridgetown apply 
&lt;a href=&#34;https://github.com/ParamagicDev/bridgetown-automation-cypress&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/ParamagicDev/bridgetown-automation-cypress&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Plugins&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SEO Tags (bundle add bridgetown-seo-tag -g bridgetown_plugins): 
&lt;a href=&#34;https://github.com/bridgetownrb/bridgetown-seo-tag&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/bridgetown-seo-tag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Atom Feed (bundle add bridgetown-feed -g bridgetown_plugins): 
&lt;a href=&#34;https://github.com/bridgetownrb/bridgetown-feed&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/bridgetown-feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SVG in HTML inline (bundle add &amp;ldquo;bridgetown-svg-inliner&amp;rdquo; -g bridgetown_plugins): 
&lt;a href=&#34;https://github.com/ayushn21/bridgetown-svg-inliner&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/ayushn21/bridgetown-svg-inliner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Liquid QuickSearch (bundle add bridgetown-quick-search -g bridgetown_plugins): 
&lt;a href=&#34;https://github.com/bridgetownrb/bridgetown-quick-search&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/bridgetown-quick-search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add a SiteMap (bundle add bridgetown-sitemap -g bridgetown_plugins): 
&lt;a href=&#34;https://github.com/ayushn21/bridgetown-sitemap&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/ayushn21/bridgetown-sitemap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Markdown JS (bundle add bridgetown-mdjs -g bridgetown_plugins): 
&lt;a href=&#34;https://github.com/bridgetownrb/bridgetown-mdjs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/bridgetown-mdjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HTML Minify (bundle add bridgetown-minify-html -g bridgetown_plugins): 
&lt;a href=&#34;https://github.com/bt-rb/bridgetown-minify-html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bt-rb/bridgetown-minify-html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Github ViewComponents (bundle add bridgetown-view-component -g bridgetown_plugins): 
&lt;a href=&#34;https://github.com/bridgetownrb/bridgetown-view-component&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/bridgetown-view-component&lt;/a&gt; &amp;ndash; but the docs are here: 
&lt;a href=&#34;https://www.bridgetownrb.com/docs/components/ruby#need-compatibility-with-rails-try-viewcomponent-experimental&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bridgetownrb.com/docs/components/ruby#need-compatibility-with-rails-try-viewcomponent-experimental&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GraphQL Api for Bridgetown (bundle add graphtown -g bridgetown_plugins): 
&lt;a href=&#34;https://github.com/whitefusionhq/graphtown&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/whitefusionhq/graphtown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bulma Starter (bundle exec bridgetown apply 
&lt;a href=&#34;https://github.com/whitefusionhq/bulmatown%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/whitefusionhq/bulmatown)&lt;/a&gt;: 
&lt;a href=&#34;https://github.com/whitefusionhq/bulmatown&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/whitefusionhq/bulmatown&lt;/a&gt; (something went wrong on my first try - and don&amp;rsquo;t use this with tailwindcss :)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Content Management Plugins&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Notable MD Editor (bundle add bridgetown-notable -g bridgetown_plugins): 
&lt;a href=&#34;https://github.com/jamie/bridgetown-notable&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/jamie/bridgetown-notable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Prismic Flat CMS (bin/bridgetown apply 
&lt;a href=&#34;https://github.com/bridgetownrb/bridgetown-prismic%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/bridgetown-prismic)&lt;/a&gt;: 
&lt;a href=&#34;https://github.com/bridgetownrb/bridgetown-prismic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/bridgetownrb/bridgetown-prismic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This looks promising for people familiar with Rails, we will see how it competes with Astro and the other JAMF Stacks for the general public.&lt;/p&gt;
&lt;p&gt;So far, the only downsides have been:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I am not sure I fully understand the logic of 3 added aspects of additional features - for example why is there a netlify automation and bundle config?&lt;/li&gt;
&lt;li&gt;I have only been able to install AlpineJS as a weblink and not as an included module (If I figure it out I&amp;rsquo;ll update this document and or make a configuration script) - maybe I just need to learn into StimulusJS.&lt;/li&gt;
&lt;li&gt;I would like to use Fly.io too (if I figure it out I&amp;rsquo;ll write a configuration script)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Apparently, Vue, React, Bulma plugin-configuations are comming too.
As well as workflows and deployment for github and gitlab.
This should be interesting and fun.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
