<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Templates | btihen</title>
    <link>https://btihen.me/tags/templates/</link>
      <atom:link href="https://btihen.me/tags/templates/index.xml" rel="self" type="application/rss+xml" />
    <description>Templates</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2020</copyright><lastBuildDate>Fri, 10 Jul 2020 09:43:51 +0200</lastBuildDate>
    <image>
      <url>https://btihen.me/images/logo_hu0d53a2a03d4a529abcdd0318d0f2ad50_8175_300x300_fit_lanczos_2.png</url>
      <title>Templates</title>
      <link>https://btihen.me/tags/templates/</link>
    </image>
    
    <item>
      <title>Phoenix 1.5 Blog with Comments</title>
      <link>https://btihen.me/post_tech/phoenix_1_5_blog_w_comments/</link>
      <pubDate>Fri, 10 Jul 2020 09:43:51 +0200</pubDate>
      <guid>https://btihen.me/post_tech/phoenix_1_5_blog_w_comments/</guid>
      <description>&lt;h2 id=&#34;purpose&#34;&gt;Purpose&lt;/h2&gt;
&lt;p&gt;This article builds on the existing article: &lt;a href=&#34;https://btihen.me/post_tech/phoenix_1_5_blog_intro/&#34;&gt;https://btihen.me/post_tech/phoenix_1_5_blog_intro/&lt;/a&gt; and adds nested relationships and has_many_through.&lt;/p&gt;
&lt;h2 id=&#34;now-lets-create-comments-a-has-many-through-for-users&#34;&gt;now lets create comments (a has many through for users)&lt;/h2&gt;
&lt;p&gt;we will use &lt;code&gt;mix phx.gen.context&lt;/code&gt; this time since we will use the posts page to add comments.  We will use the context generator since we don&amp;rsquo;t need any views or templates generated.  Answer &lt;code&gt;Y&lt;/code&gt; to the question about the context already existing.  We could create to API files within the Context before the one file gets too large, but we will skip that.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.gen.context Blogs Comment comments message:text post_id:references:posts  user_id:references:users
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;update-relationships&#34;&gt;Update Relationships&lt;/h2&gt;
&lt;p&gt;We need to create the relationships and update the migration to delete comments when post is deleted:&lt;/p&gt;
&lt;p&gt;Now lets create the relationship between posts and comments:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs/comment.ex
efmodule FeenixIntro.Blogs.Comment do
  use Ecto.Schema
  import Ecto.Changeset
  alias FeenixIntro.Blogs.Post
  alias FeenixIntro.Accounts.User

  @required_fields [:user_id, :post_id, :message]

  schema &amp;quot;comments&amp;quot; do
    # remove these
    # field :post_id, :id
    # field :user_id, :id
    # add these:
    belongs_to(:user, User)
    belongs_to(:post, Post)

    field :message, :string

    timestamps()
  end

  @doc false
  def changeset(comment, attrs) do
    comment
    |&amp;gt; cast(attrs, @required_fields)
    |&amp;gt; validate_required(@required_fields)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets update posts relationship to comments:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs/post.ex
  # ...
  alias FeenixIntro.Blogs.Comment
  # ...
  schema &amp;quot;posts&amp;quot; do
    # ...
    # add this
    has_many(:comments, Comment)
  # ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could do the same &lt;code&gt;has_many&lt;/code&gt; relationship with users - but its not needed.  It is unlikely we would want to look-up all a user&amp;rsquo;s comments outside the context of a Blog.&lt;/p&gt;
&lt;h2 id=&#34;update-migration-to-delete-sub-resource-when-top-resource-is-deleted&#34;&gt;Update Migration to delete sub-resource when top-resource is deleted&lt;/h2&gt;
&lt;p&gt;To create the rails equivalent of dependent_delete we change the migration to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# priv/repo/migrations/20200704161651_create_comments.exs
      # ...
      # replce
      # add :post_id, references(:posts, on_delete: :nothing)
      # add :user_id, references(:users, on_delete: :nothing)
      # with
      add :post_id, references(:posts, on_delete: :delete_all), null: false
      add :user_id, references(:users, on_delete: :delete_all), null: false
      # ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we should be able to migrate:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix ecto.migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Start simple with the seed file&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Lets add a comment to our prebuild posts:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# priv/repo/seeds.exs
# ...
# add the alias to keep things short
alias FeenixIntro.Blogs.Comment

# ...
# this ensures all we have all the correct fields:
Repo.insert!(%Comment{user_id: dog.id, post_id: post1.id, message: &amp;quot;woof&amp;quot; })

# this also checks the relationships
post2
|&amp;gt; Ecto.build_assoc(:comments)
|&amp;gt; Comment.changeset(%{user_id: dog.id, post_id: post2.id, message: &amp;quot;BARK&amp;quot; })
|&amp;gt; Repo.insert!()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets run the seed and see if all is working:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix run priv/repo/seeds.exs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nice lets make a quick git snapshot before we work on the html aspects&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;Comments added as a resource and relationship to Posts established&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;preload-comments-within-get_post&#34;&gt;Preload comments within get_post&lt;/h2&gt;
&lt;p&gt;To show the comments within a post we will need to preload the comments &amp;ndash; this is done by adding &lt;code&gt;Repo.preload(:comments)&lt;/code&gt; to our function: &lt;code&gt;def get_post!(id)&lt;/code&gt; &amp;ndash; however, we will also want to display the comment&amp;rsquo;s author &amp;ndash; so we need to do a nested preload with: &lt;code&gt;Repo.preload([comments: [:user]])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So now this function looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs.ex
def get_post!(id) do
    Post
    |&amp;gt; Repo.get!(id)
    |&amp;gt; Repo.preload(:user)
    |&amp;gt; Repo.preload([comments: [:user]])
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This can actually be shortened to (this will be helpful later):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lib/feenix_intro/blogs.ex
def get_post!(id) do
    Post
    |&amp;gt; Repo.get!(id)
    |&amp;gt; Repo.preload([:user, comments: [:user]])
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;display-the-comments-within-the-post-show&#34;&gt;Display the comments within the Post show&lt;/h2&gt;
&lt;p&gt;Now that we have updated the get_post! to preload comments we can display the comments too by adding to the end of our post&amp;rsquo;s - show template:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/templates/post/show.html.eex

# ...
&amp;lt;table&amp;gt;
  &amp;lt;thead&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th&amp;gt;Comment Author&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Message&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/thead&amp;gt;
  &amp;lt;tbody&amp;gt;
    &amp;lt;%= for comment &amp;lt;- @post.comments do %&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= comment.user.name %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= comment.message %&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;

&amp;lt;span&amp;gt;&amp;lt;%= link &amp;quot;Edit&amp;quot;, to: Routes.post_path(@conn, :edit, @post) %&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span&amp;gt;&amp;lt;%= link &amp;quot;Back&amp;quot;, to: Routes.post_path(@conn, :index) %&amp;gt;&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Start the server &lt;code&gt;mix phx.server&lt;/code&gt; and be sure this works&lt;/p&gt;
&lt;p&gt;Assuming it works, lets commit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;display comments and comment author on post show page&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;creating-comments-as-a-nested-resource&#34;&gt;Creating Comments (as a nested resource)&lt;/h2&gt;
&lt;p&gt;Since we have added comments within the Blogs context and they are associated with a post - it makes sense to create and display comments as a nested resource.  To set this up lets change our routes file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/router.ex
# ...
  scope &amp;quot;/&amp;quot;, FeenixIntroWeb do
    pipe_through :browser

    get &amp;quot;/&amp;quot;, PageController, :index
    resources &amp;quot;/users&amp;quot;, UserController

    # replace this line:
    # resources &amp;quot;/posts&amp;quot;, PostController
    # with:
    resources &amp;quot;/posts&amp;quot;, PostController do
      resources &amp;quot;/comments&amp;quot;, CommentController, only: [:create]
    end
  end
  # ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means we will be able to create a comment only within the context of an existing post (seems reasonable) &amp;ndash; more actions can be added later such as &lt;code&gt;edit&lt;/code&gt; or &lt;code&gt;delete&lt;/code&gt; possibly.&lt;/p&gt;
&lt;p&gt;This also means we need to display our comments within the context of existing posts (the best place for this is the &lt;code&gt;show&lt;/code&gt; - where all the details of the post are shown).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create the controller we just defined - we will need to make a new file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/controllers/comment_controller.ex
defmodule FeenixIntroWeb.CommentController do
  use FeenixIntroWeb, :controller

  alias FeenixIntro.Blogs

  def create(conn, %{&amp;quot;post_id&amp;quot; =&amp;gt; post_id, &amp;quot;comment&amp;quot; =&amp;gt; comment_params}) do
    # define the post we are nested within
    post = Blogs.get_post!(post_id)

    # create our new comment and handle (success or failure)
    case Blogs.create_comment(post, comment_params) do
      {:ok, _comment} -&amp;gt;
        conn
        |&amp;gt; put_flash(:info, &amp;quot;Comment created&amp;quot;)
        |&amp;gt; redirect(to: Routes.post_path(conn, :show, post))

      # TODO: return to form and show errors
      {:error, _changeset} -&amp;gt;
        conn
        |&amp;gt; put_flash(:error, &amp;quot;Comment creation failed&amp;quot;)
        |&amp;gt; redirect(to: Routes.post_path(conn, :show, post))
    end
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: at the moment we don&amp;rsquo;t handle errors, and allow those to be fixed.  We will get to that in a second step.&lt;/p&gt;
&lt;p&gt;We need to update the function &lt;code&gt;create_comment&lt;/code&gt; in order to work as a nested resource:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#  @doc &amp;quot;&amp;quot;&amp;quot;
  Creates a comment.

  ## Examples
      # also update our function docs
      # replace
      # iex&amp;gt; create_comment(%{field: value})
      # with
      iex&amp;gt; create_comment(post, %{field: value})
      {:ok, %Comment{}}

      # replace:
      # iex&amp;gt; create_comment(%{field: bad_value})
      # with:
      iex&amp;gt; create_comment(post, %{field: bad_value})
      {:error, %Ecto.Changeset{}}

  &amp;quot;&amp;quot;&amp;quot;
  # replace
  # def create_comment(attrs \\ %{}) do
  #   %Comment{}
  #   |&amp;gt; Comment.changeset(attrs)
  #   |&amp;gt; Repo.insert()
  # end

  # with (this uses the passed in post and creates an association with the new comment)
  def create_comment(%Post{} = post, attrs \\ %{}) do
    post
    |&amp;gt; Ecto.build_assoc(:comments)
    |&amp;gt; Comment.changeset(attrs)
    |&amp;gt; Repo.insert()
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to create a new Comment &lt;strong&gt;form&lt;/strong&gt; the &lt;code&gt;show&lt;/code&gt; function will need to borrow from a typical &lt;code&gt;new&lt;/code&gt; function and send and empty struct (changeset) for the form &amp;ndash; lets start by updating the PostController show function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/controllers/post_controller.ex
  # ...
  alias FeenixIntro.Blogs.Comment

  def show(conn, %{&amp;quot;id&amp;quot; =&amp;gt; id}) do
    post = Blogs.get_post!(id)
    users = Accounts.list_users()
    # replace:
    # render(conn, &amp;quot;show.html&amp;quot;, post: post, users: users)

    # with: This allows us to add comments on the Post show form!
    comment_changeset = Blogs.change_comment(%Comment{})
    render(conn, &amp;quot;show.html&amp;quot;, post: post, users: users,
                              comment_changeset: comment_changeset)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have an empty changeset for the form - we can add the form to the show page with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/templates/post/show.html.eex
# ...
&amp;lt;h3&amp;gt;Add a Comment&amp;lt;/h3&amp;gt;
&amp;lt;%= form_for @comment_changeset, Routes.post_comment_path(@conn, :create, @post), fn form -&amp;gt; %&amp;gt;

  &amp;lt;%= label form, &amp;quot;Author&amp;quot; %&amp;gt;
  &amp;lt;%= select form, :user_id, Enum.map(@users, &amp;amp;{&amp;amp;1.name, &amp;amp;1.id}) %&amp;gt;
  &amp;lt;%= error_tag form, :user %&amp;gt;

  &amp;lt;%= label form, :message %&amp;gt;
  &amp;lt;%= textarea form, :message %&amp;gt;
  &amp;lt;%= error_tag form, :message %&amp;gt;

  &amp;lt;div&amp;gt;
    &amp;lt;%= submit &amp;quot;Save&amp;quot;%&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s try this out with: &lt;code&gt;mix phx.server&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;assuming all works as expected let&amp;rsquo;s make another git commit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;comment creation as a nested resource within posts&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;handle-input-errors&#34;&gt;Handle Input Errors&lt;/h2&gt;
&lt;p&gt;Prevent empty strings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/32784008/phoenix-render-template-of-other-folder&#34;&gt;https://stackoverflow.com/questions/32784008/phoenix-render-template-of-other-folder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;lets add a minimum message legth to comments:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs/comment.ex
  def changeset(comment, attrs) do
    comment
    |&amp;gt; cast(attrs, @required_fields)
    |&amp;gt; validate_required(@required_fields)
    |&amp;gt; validate_length(:message, min: 3)
  end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, change the controller to prep the data just like a post &lt;code&gt;show&lt;/code&gt; and send the changeset - with the errors. &lt;code&gt;|&amp;gt; put_view(FeenixIntroWeb.PostView)&lt;/code&gt; is how we redirect to other external views as of Phoenix 1.5.1:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/controllers/comment_controller.ex
  # add the alias
  alias FeenixIntro.Accounts

  # ...

  def create(conn, %{&amp;quot;post_id&amp;quot; =&amp;gt; post_id, &amp;quot;comment&amp;quot; =&amp;gt; comment_params}) do
    # ...

      # replace:
      # {:error, _changeset} -&amp;gt;
      #   conn
      #   |&amp;gt; put_flash(:error, &amp;quot;Comment creation failed, please fix the errors&amp;quot;)
      #   |&amp;gt; redirect(to: Routes.post_path(conn, :show, post))

      # with:
      {:error, %Ecto.Changeset{} = changeset} -&amp;gt;
        users = Accounts.list_users()
        conn
        |&amp;gt; put_flash(:error, &amp;quot;Comment creation failed, please fix the errors&amp;quot;)
        |&amp;gt; put_view(FeenixIntroWeb.PostView)   # as of Phoenix 1.5.1
        |&amp;gt; render(&amp;quot;show.html&amp;quot;, post: post, users: users, comment_changeset: changeset)
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming this works make a new git commit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;handle comment creation errors&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;flexible-preloading&#34;&gt;Flexible preloading&lt;/h2&gt;
&lt;p&gt;You may have noticed the pre-loading is hard-coded &amp;ndash; in this case it is ok, but might not always be good.  Here is a flexible alternative:&lt;/p&gt;
&lt;p&gt;We can update / replace the following functions with the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs.ex
  def list_posts(opts \\ [:user]) do
    preloads = Keyword.get(opts, :preloads, [])
    Post
    |&amp;gt; Repo.all()
    |&amp;gt; Repo.preload(preloads)
  end

  def get_post!(id, opts \\ [:user, comments: [:user]]) do
    preloads = Keyword.get(opts, :preloads, [])
    Post
    |&amp;gt; Repo.get!(id)
    |&amp;gt; Repo.preload(preloads)
  end

  def get_comment!(id, opts \\ [:user]) do
    preloads = Keyword.get(opts, :preloads, [])
    Comment
    |&amp;gt; Repo.get!(id)
    |&amp;gt; Repo.preload(preloads)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now we can change our show post controller to look like - so that we can use this flexibility:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/controllers/post_controller.ex
  # ...

  def index(conn, _params) do
    # posts = Blogs.list_posts()
    preloads = [:user]
    posts = Blogs.list_posts(preloads: preloads)
    render(conn, &amp;quot;index.html&amp;quot;, posts: posts)
  end

  def new(conn, _params) do
    users = Accounts.list_users()
    changeset = Blogs.change_post(%Post{})
    render(conn, &amp;quot;new.html&amp;quot;, changeset: changeset, users: users)
  end

  # ...

  def show(conn, %{&amp;quot;id&amp;quot; =&amp;gt; id}) do
    # post = Blogs.get_post!(id)
    preloads = [:user, comments: [:user]]
    post = Blogs.get_post!(id, preloads: preloads)
    users = Accounts.list_users()
    # This allows us to add comments on the Post show form!
    comment_changeset = Blogs.change_comment(%Comment{})
    render(conn, &amp;quot;show.html&amp;quot;, post: post,
                              users: users,
                              comment_changeset: comment_changeset)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have the flexibilty to preload or not depending on what we want to do,&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Phoenix 1.5 Blog Intro</title>
      <link>https://btihen.me/post_tech/phoenix_1_5_blog_intro/</link>
      <pubDate>Sat, 04 Jul 2020 13:06:29 +0200</pubDate>
      <guid>https://btihen.me/post_tech/phoenix_1_5_blog_intro/</guid>
      <description>&lt;h2 id=&#34;purpose&#34;&gt;Purpose&lt;/h2&gt;
&lt;p&gt;This article creates a basic web application backed by a database and creates a few relationships.  I&amp;rsquo;ll use the mix generator commands to make this process quick and easy.  In step two we will add a graphql api.&lt;/p&gt;
&lt;h2 id=&#34;topics-covered&#34;&gt;Topics Covered&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;create a project&lt;/li&gt;
&lt;li&gt;create a resource&lt;/li&gt;
&lt;li&gt;dropdown list of a collection&lt;/li&gt;
&lt;li&gt;pre-load/display sub-reources&lt;/li&gt;
&lt;li&gt;create a has_many relationship&lt;/li&gt;
&lt;li&gt;create a belongs_to relationship&lt;/li&gt;
&lt;li&gt;delete has_many sub-resources when top resource is deleted&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;getting-started---create-an-app&#34;&gt;Getting Started - create an app&lt;/h2&gt;
&lt;p&gt;find the most recent phoenix version:
&lt;a href=&#34;https://github.com/phoenixframework/phoenix/releases&#34;&gt;https://github.com/phoenixframework/phoenix/releases&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix archive.install hex phx_new 1.5.3
mix phx.new feenix_intro
cd feenix_intro
mix ecto.create
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test with: &lt;code&gt;mix phx.server&lt;/code&gt; and go to &lt;code&gt;http://localhost:4000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Ideally you see a the Phoenix Start Page.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create a git snapshot&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init &amp;amp;&amp;amp; git add -A &amp;amp;&amp;amp; git commit -m &amp;quot;init&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-contexts&#34;&gt;Create Contexts&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Context helps us create areas of code isolation and creates an API for other contexts to use&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In our case we will need a Blogs and Accounts (better would have been Authors) context&lt;/p&gt;
&lt;p&gt;Blogs will have the posts and comments and Accounts will have the user and login credentials and user relationships (why not)?  To see the full documentation on Contexts see: &lt;a href=&#34;https://hexdocs.pm/phoenix/contexts.html&#34;&gt;https://hexdocs.pm/phoenix/contexts.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We will generate two resources and Contexts (and add more later) - lets start with users who will post their blogs (users will be within the Accounts context and posts will be within the Blogs context):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.gen.html Accounts User users name:string email:string username:string:unique
mix phx.gen.html Blogs Post posts title:string body:text user_id:references:users
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice we can generate unique fields with &lt;code&gt;:unique&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And we can generate relationships (foriegn keys) with &lt;code&gt;references&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now that we have generated our code - we need to make a few updates:&lt;/p&gt;
&lt;p&gt;First: we need to update our routes in the scope area to look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/ideas_web/router.ex
  scope &amp;quot;/&amp;quot;, FeenixIntroWeb do
    pipe_through :browser

    get &amp;quot;/&amp;quot;, PageController, :index
    resources &amp;quot;/users&amp;quot;, UserController
    resources &amp;quot;/posts&amp;quot;, PostController
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE: the API&amp;rsquo;s for our Contexts &lt;code&gt;Accounts&lt;/code&gt; and &lt;code&gt;Blogs&lt;/code&gt; is in &lt;code&gt;lib/feenix_intro/accounts.ex&lt;/code&gt; and &lt;code&gt;lib/feenix_intro/blogs/post.ex&lt;/code&gt; respectively - as we add more info into these contexts these files will get long!  &lt;strong&gt;Ideally you will always interact with the Context API and not the Repo directly this will help create much more managable code.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;define-the-has_many-relationship&#34;&gt;Define the has_many relationship&lt;/h2&gt;
&lt;p&gt;Before we migrate we need to define the relationships:&lt;/p&gt;
&lt;p&gt;so we update the users with a has_many relationship to posts&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/accounts/user.ex
defmodule FeenixIntro.Accounts.User do
  use Ecto.Schema
  import Ecto.Changeset
  alias FeenixIntro.Blogs.Post

  @required_fields [:name, :email, :username]

  schema &amp;quot;users&amp;quot; do
    has_many(:posts, Post)

    field :name, :string
    field :email, :string
    field :username, :string

    timestamps()
  end

  @doc false
  def changeset(user, attrs) do
    user
    |&amp;gt; cast(attrs, @required_fields)
    |&amp;gt; validate_required(@required_fields)
    |&amp;gt; unique_constraint(:username)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you skip the alias, then &lt;code&gt;has_many&lt;/code&gt; needs to be written as: &lt;code&gt;has_many(:posts, FeenixIntro.Blogs.Post)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;define-the-belongs_to-relationship&#34;&gt;Define the belongs_to relationship&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; replace the &lt;code&gt;field :user_id, :id&lt;/code&gt; with &lt;code&gt;belongs_to(:user, User)&lt;/code&gt; &amp;ndash; you CAN&amp;rsquo;T have both!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs/post.ex
defmodule FeenixIntro.Blogs.Post do
  use Ecto.Schema
  import Ecto.Changeset
  alias FeenixIntro.Blogs.Post
  alias FeenixIntro.Accounts.User

  @required_fields [:user_id, :title, :body]

  schema &amp;quot;posts&amp;quot; do
    belongs_to(:user, User)

    # field :user_id, :id
    field :body, :string
    field :title, :string

    timestamps()
  end

  @doc false
  def changeset(post, attrs) do
    post
    |&amp;gt; cast(attrs, @required_fields)
    |&amp;gt; validate_required(@required_fields)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE: &lt;code&gt;@required_fields [:user_id, :title, :body]&lt;/code&gt; isn&amp;rsquo;t required, but as things change defining a constant that can be reused can be convient.&lt;/p&gt;
&lt;h2 id=&#34;auto-delete-sub-resources&#34;&gt;Auto delete sub-resources&lt;/h2&gt;
&lt;p&gt;To be sure we don&amp;rsquo;t have unreferenced blogs if a user gets deleted we need to change our Blog migration to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# priv/repo/migrations/20200704152318_create_posts.exs
defmodule FeenixIntro.Repo.Migrations.CreatePosts do
  use Ecto.Migration

  def change do
    create table(:posts) do
      add :title, :string
      add :body, :text
      # remove the default
      # add :user_id, references(:users, on_delete: :nothing)
      # add the following to auto delete posts if user is deleted!
      add :user_id, references(:users, on_delete: :delete_all), null: false

      timestamps()
    end

    create index(:posts, [:user_id])
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now it should be safe to migrate using:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix ecto.migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;seed-data&#34;&gt;Seed Data&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s create seed data so that one we know how to do that and two have some data to test before we get all our views and forms working:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# priv/repo/seeds.exs

# Script for populating the database. You can run it as:
#
#     mix run priv/repo/seeds.exs
#
# We recommend using the bang functions (`insert!`, `update!`
# and so on) as they will fail if something goes wrong.

alias FeenixIntro.Repo
alias FeenixIntro.Blogs.Post
alias FeenixIntro.Accounts.User

# reset the datastore
Repo.delete_all(User) # this should also delete all Posts

# insert people
me = Repo.insert!(%User{ name: &amp;quot;Bill&amp;quot;, email: &amp;quot;bill@example.com&amp;quot;, username: &amp;quot;bill&amp;quot; })
dog = Repo.insert!(%User{ name: &amp;quot;Nyima&amp;quot;, email: &amp;quot;nyima@example.com&amp;quot;, username: &amp;quot;nyima&amp;quot; })
Repo.insert!(%Post{ user_id: me.id, title: &amp;quot;Elixir&amp;quot;, body: &amp;quot;Very cool ideas&amp;quot; })
Repo.insert!(%Post{ user_id: me.id, title: &amp;quot;Phoenix&amp;quot;, body: &amp;quot;live is fascinating&amp;quot; })
Repo.insert!(%Post{ user_id: dog.id, title: &amp;quot;Walk&amp;quot;, body: &amp;quot;oh cool&amp;quot; })
Repo.insert!(%Post{ user_id: dog.id, title: &amp;quot;Dinner&amp;quot;, body: &amp;quot;YES!&amp;quot; })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now as the comments state run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix run priv/repo/seeds.exs
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;
&lt;p&gt;run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mix phx.server
# or if you prefer:
# iex -S mix phx.server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Test USERS:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Go to: &lt;code&gt;http://localhost:4000/users&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;when we list users and create users - all is well&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TEST POSTS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Go to: &lt;code&gt;http://localhost:4000/posts&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;when we do the same withe posts - we get an error creating new posts and we don&amp;rsquo;t see the author in index and show&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we can&amp;rsquo;t create a post since we required the user_id and there is not field for that&lt;/li&gt;
&lt;li&gt;we can&amp;rsquo;t list the author&amp;rsquo;s name (just the author&amp;rsquo;s ID) until we preload the author along with the post&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;fix-post-creation-with-a-dropdown-list-of-resources&#34;&gt;Fix Post creation with a dropdown list of resources&lt;/h2&gt;
&lt;p&gt;Normally, this would be done with session info to autoselect the authenticated author, but that is for another day.  In this case, we will demonstrate how to load and pass a collection and use that to populate a dropdown entry.&lt;/p&gt;
&lt;p&gt;In the controller we must load users and add the user_id to the post form:
whe we look in the Accounts API we see: &lt;code&gt;list_users()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/controllers/post_controller.ex
  # ...
  # add the accounts context alias
  alias FeenixIntro.Accounts
  # ...
  def new(conn, _params) do
    changeset = Blogs.change_post(%Post{})
    # replace:
    # render(conn, &amp;quot;new.html&amp;quot;, changeset: changeset)
    # with:
    # collection of users for post form
    users = Accounts.list_users()
    # include the collection of users to the new form
    render(conn, &amp;quot;new.html&amp;quot;, changeset: changeset, users: users)
  end
  # ...
  def edit(conn, %{&amp;quot;id&amp;quot; =&amp;gt; id}) do
    post = Blogs.get_post!(id)
    changeset = Blogs.change_post(post)
    # replace:
    render(conn, &amp;quot;edit.html&amp;quot;, post: post, changeset: changeset)
    # with:
    users = Accounts.list_users()
    render(conn, &amp;quot;edit.html&amp;quot;, post: post, changeset: changeset, users: users)
  end
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to adapt the form to give us a choice of users:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/templates/post/form.html.eex
&amp;lt;%= form_for @changeset, @action, fn f -&amp;gt; %&amp;gt;
  &amp;lt;%= if @changeset.action do %&amp;gt;
    &amp;lt;div class=&amp;quot;alert alert-danger&amp;quot;&amp;gt;
      &amp;lt;p&amp;gt;Oops, something went wrong! Please check the errors below.&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;% end %&amp;gt;

  &amp;lt;%= label f, &amp;quot;Author&amp;quot; %&amp;gt;
  &amp;lt;%= select f, :user_id, Enum.map(@users, &amp;amp;{&amp;amp;1.name, &amp;amp;1.id}) %&amp;gt;
  &amp;lt;%= error_tag f, :user %&amp;gt;
  # ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming you can create posts now, lets make another git snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;users and posts resources can be created&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;display-the-author-of-post-with-preloads&#34;&gt;Display the Author of Post (with Preloads)&lt;/h2&gt;
&lt;p&gt;lets display the Blog author - that&amp;rsquo;s often interesting to others.
We can do this with preloading in our Blog context:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs.ex
  # change this line:
  # def list_posts, do: Repo.all(Post)
  def list_posts do
    Post
    |&amp;gt; Repo.all()
    |&amp;gt; Repo.preload(:user)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and also our get_post&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro/blogs.ex
  # change:
  # def get_post!(id), do: Repo.get!(Post, id)
  # into:
  def get_post!(id) do
    Post
    |&amp;gt; Repo.get!(id)
    |&amp;gt; Repo.preload(:user)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now we can update our index and show page to display the author&amp;rsquo;s name at the top of the page:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/templates/post/show.html.eex
&amp;lt;h1&amp;gt;Show Post&amp;lt;/h1&amp;gt;

&amp;lt;ul&amp;gt;

  &amp;lt;li&amp;gt;
    &amp;lt;strong&amp;gt;Author:&amp;lt;/strong&amp;gt;
    &amp;lt;%= @post.user.name %&amp;gt;
  &amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and in the index too:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lib/feenix_intro_web/templates/post/index.html.eex
# ...
&amp;lt;%= for post &amp;lt;- @posts do %&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= post.user.name %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= post.title %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;%= post.body %&amp;gt;&amp;lt;/td&amp;gt;
# ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming authors and preload works properly, we can make another git snapshot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;authors names are displayed now with preloading&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;source-code&#34;&gt;Source code&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/btihen/PhoenixIntro&#34;&gt;https://github.com/btihen/PhoenixIntro&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;helpful-resources-used&#34;&gt;Helpful Resources used:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://elixircasts.io/phoenix-contexts&#34;&gt;https://elixircasts.io/phoenix-contexts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/conradwt/zero-to-graphql-using-phoenix&#34;&gt;https://github.com/conradwt/zero-to-graphql-using-phoenix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@damonvjanis/ecto-preloads-in-phoenix-contexts-167d11e5405e&#34;&gt;https://medium.com/@damonvjanis/ecto-preloads-in-phoenix-contexts-167d11e5405e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.to/joseph_lozano/setting-up-a-new-phoenix-1-5-project-with-phoenix-liveview-309n&#34;&gt;https://dev.to/joseph_lozano/setting-up-a-new-phoenix-1-5-project-with-phoenix-liveview-309n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/velotio-perspectives/creating-graphql-apis-using-elixir-phoenix-and-absinthe-486ff38f2549&#34;&gt;https://medium.com/velotio-perspectives/creating-graphql-apis-using-elixir-phoenix-and-absinthe-486ff38f2549&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
