<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>command class | btihen</title>
    <link>https://btihen.me/tags/command-class/</link>
      <atom:link href="https://btihen.me/tags/command-class/index.xml" rel="self" type="application/rss+xml" />
    <description>command class</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2022</copyright><lastBuildDate>Sat, 23 Apr 2022 01:20:00 +0200</lastBuildDate>
    <image>
      <url>https://btihen.me/img/btihen_landing_page.png</url>
      <title>command class</title>
      <link>https://btihen.me/tags/command-class/</link>
    </image>
    
    <item>
      <title>Rails 7.0 - Decoupling with Events (or Commands / Service Objects)</title>
      <link>https://btihen.me/post_ruby_rails/rails_7_0_decoupling_commands_events/</link>
      <pubDate>Sat, 23 Apr 2022 01:20:00 +0200</pubDate>
      <guid>https://btihen.me/post_ruby_rails/rails_7_0_decoupling_commands_events/</guid>
      <description>&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; the concepts work (we use them at work) - but this particular code hasn&amp;rsquo;t yet been tested.  (just recording these ideas for me, but feel free to let me know of any suggestions)&lt;/p&gt;
&lt;h2 id=&#34;organizing-code&#34;&gt;Organizing Code&lt;/h2&gt;
&lt;p&gt;In Rails its all too easy to accidentally tightly couple controller activities with follow-up actions - resulting in bloated controllers and / or tight coupling with models.&lt;/p&gt;
&lt;p&gt;A relatively simple fix to help with this is to use Events.&lt;/p&gt;
&lt;p&gt;Observer &amp;amp; Pub/Sub differences&lt;/p&gt;
&lt;h2 id=&#34;ruby-and-rails-environment&#34;&gt;Ruby and Rails Environment&lt;/h2&gt;
&lt;p&gt;Using Rails 7 &amp;amp; Ruby 3.1.2 - I found that it is important to update my ruby environment - so before we start this is what I didn&amp;rsquo;t remove errors:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# I&#39;ve had the error several times without updating:
# /Users/btihen/.rbenv/versions/3.1.0/lib/ruby/gems/3.1.0/gems/bundler-2.3.8/lib/bundler/rubygems_ext.rb:18:in `source&#39;: uninitialized constant Gem::Source (NameError)
#
#       (defined?(@source) &amp;amp;&amp;amp; @source) || Gem::Source::Installed.new
#                                            ^^^^^^^^
# Did you mean?  Gem::SourceList
# this seems to fix it:
# https://bundler.io/guides/bundler_2_upgrade.html
# https://stackoverflow.com/questions/4859600/bundler-throws-uninitialized-constant-gemsilentui-nameerror-error-after-upgr
rbenv local 3.1.2
gem update --system
gem install bundler
gem install rails
rbenv rehash
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;rails-project---simple-blog&#34;&gt;Rails Project - Simple Blog&lt;/h2&gt;
&lt;p&gt;Since my other projects are using &lt;code&gt;esbuild&lt;/code&gt; I use that here too&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;rails new rails_events -T --database=postgresql --css=bootstrap --javascript=esbuild
cd rails_events
bin/rails db:create

# add the helper gem
bundle add wisper_next
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE: wisper_next works very similar to the other gems (wisper, event_bg_bus, ma).&lt;/p&gt;
&lt;h2 id=&#34;idea&#34;&gt;Idea&lt;/h2&gt;
&lt;p&gt;Lets do some activities after a user changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;on create: A confirmation email, an invoice email and some setup for the service.&lt;/li&gt;
&lt;li&gt;on change: A confirmation email of change &amp;amp; setup change as needed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fundamentally, events should be a past tense fact:
*&lt;/p&gt;
&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;
&lt;p&gt;First lets create the users model&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bin/rails g scaffold user name config email
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;user-hooks&#34;&gt;User Hooks&lt;/h2&gt;
&lt;p&gt;Lets do the simplest possible thing - we can use after commits and use them to start activities.&lt;/p&gt;
&lt;p&gt;This is ok when very simple, but is highly coupled and requires changes to the user model instead of classes designed to handle the after creation processes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class User &amp;lt; ApplicationRecord
  after_commit :user_created_event, on: :create
  after_commit :user_updated_event, on: :update

  def user_created_event
    # lots of complicated business logic
    puts &amp;quot;UserCreatedConfirmJob: #{email} - send creation confirmation email&amp;quot;
    puts &amp;quot;UserCreatedConfigJob: #{self.changes} - create user setup&amp;quot;
  end

  def user_updated_event
    # lots of complicated business logic
    puts &amp;quot;UserUpdatedConfirmJob: #{email} - send change confirmation email&amp;quot;
    puts &amp;quot;UserUpdatedConfirmJob: #{self.changes} - updated user account config&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;controller-alternative&#34;&gt;Controller Alternative&lt;/h2&gt;
&lt;p&gt;In reality the user isn&amp;rsquo;t responsible for the app so lets try moving the business logic into the Controller where the change is made.  Lets move our Event methods to the controlle, change the create &amp;amp; update actions &amp;amp; leave the model empty.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/user.rb
class User &amp;lt; ApplicationRecord
end

# app/controllers/users_controller.rb
class UsersController &amp;lt; ApplicationController
  # ...
  def create
    @user = User.new(user_params)
    respond_to do |format|
      if @user.save
        # add event call here on success
        user_created_event(@user, @user.changes)
        format.html { redirect_to user_url(@user), notice: &amp;quot;User was successfully created.&amp;quot; }
        format.json { render :show, status: :created, location: @user }
      else
        format.html { render :new, status: :unprocessable_entity }
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end

  def update
    respond_to do |format|
      if @user.update(user_params)
        # add event call here on success
        user_updated_event(@user, @user.changes)
        format.html { redirect_to user_url(@user), notice: &amp;quot;User was successfully updated.&amp;quot; }
        format.json { render :show, status: :ok, location: @user }
      else
        format.html { render :edit, status: :unprocessable_entity }
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end

  private

  def user_created_event(user, changes)
    changed_attributes = changes
    # lots of complicated business logic
    puts &amp;quot;UserCreatedConfirmJob: #{user.email} - send creation confirmation email&amp;quot;
    puts &amp;quot;UserCreatedConfigJob: #{changed_attributes} - create user setup&amp;quot;
  end

  def user_updated_event(user, changes)
    changed_attributes = changes
    # lots of complicated business logic
    puts &amp;quot;UserUpdatedConfirmJob #{user.email} - send change confirmation email&amp;quot;
    puts &amp;quot;UserUpdatedConfigJob: #{changed_attributes} - updated user account config&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;this is a bit better, now the business logic isn&amp;rsquo;t embedded in the models.&lt;/p&gt;
&lt;h2 id=&#34;using-commands-to-decouple&#34;&gt;Using Commands to Decouple&lt;/h2&gt;
&lt;p&gt;Ideally, I like having Business Logic in its own class and decoupled from Rails.  Lets move our methods into classes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/commands/user_created_command.rb
class UserCreatedCommand
  attr_reader :user, :changes

  def initialize(user:, changes: nil)
    @user = user
    @changes = changes
  end

  def self.call(user:, changes: nil)
    new(user: user, changes: changes).run
  end

  def run
    # lots of complicated business logic
    puts &amp;quot;UserCreatedConfirmJob: #{user.email} - send creation confirmation email&amp;quot;
    puts &amp;quot;UserCreatedConfigJob: #{changes} - create user setup&amp;quot;
  end
end

# app/commands/user_updated_command.rb
class UserUpdatedCommand
  attr_reader :user, :changes

  def initialize(user:, changes:)
    @user = user
    @changes = changes
  end

  def self.call(user:, changes:)
    new(user: user, changes: changes).run
  end

  def run
    puts &amp;quot;UserUpdatedConfirmJob: #{user.email} - send change confirmation email&amp;quot;
    puts &amp;quot;UserUpdatedConfigJob: #{changes} - updated user account config&amp;quot;
  end
end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;so now we can adjust the controller&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/users_controller.rb
class UsersController &amp;lt; ApplicationController
  # ...
  def create
    @user = User.new(user_params)
    respond_to do |format|
      if @user.save
        # add event call here on success
        UserCreatedCommand.call(@user, @user.changes)
        format.html { redirect_to user_url(@user), notice: &amp;quot;User was successfully created.&amp;quot; }
        format.json { render :show, status: :created, location: @user }
      else
        format.html { render :new, status: :unprocessable_entity }
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end

  def update
    respond_to do |format|
      if @user.update(user_params)
        # add event call here on success
        UserUpdatedCommand.call(@user, @user.changes)
        format.html { redirect_to user_url(@user), notice: &amp;quot;User was successfully updated.&amp;quot; }
        format.json { render :show, status: :ok, location: @user }
      else
        format.html { render :edit, status: :unprocessable_entity }
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Commands allow lots of decoupling&lt;/p&gt;
&lt;h2 id=&#34;events&#34;&gt;Events&lt;/h2&gt;
&lt;p&gt;Commands are great, but what if we want well partitioned code, but various parts of the code need to be notified and act on events (if activated)?&lt;/p&gt;
&lt;p&gt;This is where events are great!&lt;/p&gt;
&lt;p&gt;Lets build our listeners (notice the prefix and async):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/listeners/user_created_listener.rb
class UserCreatedListener
  include Wisper.subscriber(prefix: true, async: true)

  def on_user_created(user, changes)
    UserCreatedCommand.call(user: user, changes: user.changes)
  end
end

# app/listeners/user_updated_listener.rb
class UserUpdatedListener
  include Wisper.subscriber(prefix: true, async: true)

  def on_user_updated(user, changes)
    UserUpdatedCommand.call(user: user, changes: user.changes)
  end
end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We need to define an event_bus and register our listeners (they can be registered on the fly too) - not just at start-up&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/event_bus.rb
EVENT_BUS = WisperNext::Events.new

EVENT_BUS.subscribe(UserCreatedListener.new)
EVENT_BUS.subscribe(UserUpdatedListener.new)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can update the controller again (we need to add the include and broadcast)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/users_controller.rb
class UsersController &amp;lt; ApplicationController
  include WisperNext.publisher
  # ...
  def create
    @user = User.new(user_params)
    respond_to do |format|
      if @user.save
        # add event call here on success - all listers for this event must have :on_user_created
        EVENT_BUS.broadcast(:user_created, user: @user, changes: @user.changes)
        # UserCreatedCommand.call(@user, @user.changes)
        # user_created_event(@user, @user.changes)
        format.html { redirect_to user_url(@user), notice: &amp;quot;User was successfully created.&amp;quot; }
        format.json { render :show, status: :created, location: @user }
      else
        format.html { render :new, status: :unprocessable_entity }
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end

  def update
    respond_to do |format|
      if @user.update(user_params)
        # add event call here on success - all listers for this event must have :on_user_updated
        EVENT_BUS.broadcast(:user_updated, user: user, changes: @user.changes)
        # UserUpdatedCommand.call(@user, @user.changes)
        # user_updated_event(@user, @user.changes)
        format.html { redirect_to user_url(@user), notice: &amp;quot;User was successfully updated.&amp;quot; }
        format.json { render :show, status: :ok, location: @user }
      else
        format.html { render :edit, status: :unprocessable_entity }
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we are quite flexible - but debugging fully async and decoupled behaviors is difficult - so I generally stay with calling commands directly until I need the configuration flexibility&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;summary&lt;/h2&gt;
&lt;p&gt;Commands are the sweet spot - until config flexibility is needed&lt;/p&gt;
&lt;h2 id=&#34;gems&#34;&gt;Gems&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;wisper_next - 
&lt;a href=&#34;https://gitlab.com/kris.leech/wisper_next&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://gitlab.com/kris.leech/wisper_next&lt;/a&gt; (active, with sync and async options) - 
&lt;a href=&#34;https://github.com/krisleech/wisper&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/krisleech/wisper&lt;/a&gt; (inactive 3 years)&lt;/li&gt;
&lt;li&gt;ma - 
&lt;a href=&#34;https://gitlab.com/kris.leech/ma&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://gitlab.com/kris.leech/ma&lt;/a&gt; (active, Events as Objects, built upon wisper_next)&lt;/li&gt;
&lt;li&gt;event_bg_bus - 
&lt;a href=&#34;https://github.com/indiereign/event_bg_bus&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/indiereign/event_bg_bus&lt;/a&gt; (active with backgrounding) - 
&lt;a href=&#34;https://github.com/kevinrutherford/event_bus&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/kevinrutherford/event_bus&lt;/a&gt; (no activity 8 years)&lt;/li&gt;
&lt;li&gt;eventmachine - 
&lt;a href=&#34;https://github.com/eventmachine/eventmachine/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/eventmachine/eventmachine/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;rails_event_store (saves the events too) - 
&lt;a href=&#34;https://github.com/RailsEventStore/rails_event_store&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/RailsEventStore/rails_event_store&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.youtube.com/watch?v=q0LtzYTrmMY&amp;amp;t=270s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=q0LtzYTrmMY&amp;t=270s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.toptal.com/ruby-on-rails/the-publish-subscribe-pattern-on-rails&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.toptal.com/ruby-on-rails/the-publish-subscribe-pattern-on-rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.igvita.com/2008/05/27/ruby-eventmachine-the-speed-demon/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.igvita.com/2008/05/27/ruby-eventmachine-the-speed-demon/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.mikeperham.com/2010/03/30/using-activerecord-with-eventmachine/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.mikeperham.com/2010/03/30/using-activerecord-with-eventmachine/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.mikeperham.com/2010/01/27/scalable-ruby-processing-with-eventmachine/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.mikeperham.com/2010/01/27/scalable-ruby-processing-with-eventmachine/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;going-further-with-events--ddd&#34;&gt;Going Further with Events &amp;amp; DDD&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/RailsEventStore/rails_event_store&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/RailsEventStore/rails_event_store&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://medium.com/kontenainc/event-driven-microservices-with-rabbitmq-and-ruby-7a54ae01b285&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://medium.com/kontenainc/event-driven-microservices-with-rabbitmq-and-ruby-7a54ae01b285&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.globalapptesting.com/engineering/design-the-unknown-with-the-help-of-event-storming&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.globalapptesting.com/engineering/design-the-unknown-with-the-help-of-event-storming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Event-Driven Architecture and Messaging Patterns for Ruby Microservices - Kirill Shevchenko - 
&lt;a href=&#34;https://www.youtube.com/watch?v=e9AAUy4kkek&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=e9AAUy4kkek&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
